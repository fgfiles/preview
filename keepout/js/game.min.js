(function t(e, i, n) {
    function s(r, a) { if (!i[r]) { if (!e[r]) { var h = typeof require == "function" && require; if (!a && h) return h(r, !0); if (o) return o(r, !0); var l = new Error("Cannot find module '" + r + "'"); throw l.code = "MODULE_NOT_FOUND", l } var u = i[r] = { exports: {} };
            e[r][0].call(u.exports, function(t) { var i = e[r][1][t]; return s(i ? i : t) }, u, u.exports, t, e, i, n) } return i[r].exports } var o = typeof require == "function" && require; for (var r = 0; r < n.length; r++) s(n[r]); return s })({
    1: [function(t, e, i) {
        (function(t) {
            function e(t, e) { var i = 0; for (var n = t.length - 1; n >= 0; n--) { var s = t[n]; if (s === ".") { t.splice(n, 1) } else if (s === "..") { t.splice(n, 1);
                        i++ } else if (i) { t.splice(n, 1);
                        i-- } } if (e) { for (; i--; i) { t.unshift("..") } } return t } var n = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/; var s = function(t) { return n.exec(t).slice(1) };
            i.resolve = function() { var i = "",
                    n = false; for (var s = arguments.length - 1; s >= -1 && !n; s--) { var r = s >= 0 ? arguments[s] : t.cwd(); if (typeof r !== "string") { throw new TypeError("Arguments to path.resolve must be strings") } else if (!r) { continue } i = r + "/" + i;
                    n = r.charAt(0) === "/" } i = e(o(i.split("/"), function(t) { return !!t }), !n).join("/"); return (n ? "/" : "") + i || "." };
            i.normalize = function(t) { var n = i.isAbsolute(t),
                    s = r(t, -1) === "/";
                t = e(o(t.split("/"), function(t) { return !!t }), !n).join("/"); if (!t && !n) { t = "." } if (t && s) { t += "/" } return (n ? "/" : "") + t };
            i.isAbsolute = function(t) { return t.charAt(0) === "/" };
            i.join = function() { var t = Array.prototype.slice.call(arguments, 0); return i.normalize(o(t, function(t, e) { if (typeof t !== "string") { throw new TypeError("Arguments to path.join must be strings") } return t }).join("/")) };
            i.relative = function(t, e) { t = i.resolve(t).substr(1);
                e = i.resolve(e).substr(1);

                function n(t) { var e = 0; for (; e < t.length; e++) { if (t[e] !== "") break } var i = t.length - 1; for (; i >= 0; i--) { if (t[i] !== "") break } if (e > i) return []; return t.slice(e, i - e + 1) } var s = n(t.split("/")); var o = n(e.split("/")); var r = Math.min(s.length, o.length); var a = r; for (var h = 0; h < r; h++) { if (s[h] !== o[h]) { a = h; break } } var l = []; for (var h = a; h < s.length; h++) { l.push("..") } l = l.concat(o.slice(a)); return l.join("/") };
            i.sep = "/";
            i.delimiter = ":";
            i.dirname = function(t) { var e = s(t),
                    i = e[0],
                    n = e[1]; if (!i && !n) { return "." } if (n) { n = n.substr(0, n.length - 1) } return i + n };
            i.basename = function(t, e) { var i = s(t)[2]; if (e && i.substr(-1 * e.length) === e) { i = i.substr(0, i.length - e.length) } return i };
            i.extname = function(t) { return s(t)[3] };

            function o(t, e) { if (t.filter) return t.filter(e); var i = []; for (var n = 0; n < t.length; n++) { if (e(t[n], n, t)) i.push(t[n]) } return i } var r = "ab".substr(-1) === "b" ? function(t, e, i) { return t.substr(e, i) } : function(t, e, i) { if (e < 0) e = t.length + e; return t.substr(e, i) } }).call(this, t("2")) }, { 2: 2 }],
    2: [function(t, e, i) { var n = e.exports = {}; var s = []; var o = false;

        function r() { if (o) { return } o = true; var t; var e = s.length; while (e) { t = s;
                s = []; var i = -1; while (++i < e) { t[i]() } e = s.length } o = false } n.nextTick = function(t) { s.push(t); if (!o) { setTimeout(r, 0) } };
        n.title = "browser";
        n.browser = true;
        n.env = {};
        n.argv = [];
        n.version = "";
        n.versions = {};

        function a() {} n.on = a;
        n.addListener = a;
        n.once = a;
        n.off = a;
        n.removeListener = a;
        n.removeAllListeners = a;
        n.emit = a;
        n.binding = function(t) { throw new Error("process.binding is not supported") };
        n.cwd = function() { return "/" };
        n.chdir = function(t) { throw new Error("process.chdir is not supported") };
        n.umask = function() { return 0 } }, {}],
    3: [function(t, e, i) { var n = t("1"); var s = t("6"); var o = t("4"); var r = t("5"); var i = e.exports = function() { var t = o(arguments).map(h); return a(t[0]) ? s.apply(s, t) : n.join.apply(n, t) }; var a = i.isUrl = function(t) { return r(t) || t === "http://" || t === "https://" || t === "ftp://" }; var h = i.replaceUndefined = function(t, e, i) { return t === undefined || t === null ? a(i[0]) ? "/" : n.sep : t } }, { 1: 1, 4: 4, 5: 5, 6: 6 }],
    4: [function(t, e, i) { e.exports = function(t, e) { if (!t) { t = [] } if (s(t)) { t = [].splice.call(t, 0) } if (n(t) && e) { t = o(t) } return Array.isArray(t) ? t : [t] };

        function n(t) { return Object.prototype.toString.call(t) === "[object Object]" }

        function s(t) { return Object.prototype.toString.call(t) === "[object Arguments]" }

        function o(t) { return Object.keys(t).map(function(e) { return t[e] }) } }, {}],
    5: [function(t, e, i) { e.exports = s; var n = /^(?:\w+:)?\/\/([^\s\.]+\.\S{2}|localhost[\:?\d]*)\S*$/;

        function s(t) { return n.test(t) } }, {}],
    6: [function(t, e, i) {
        function n(t) { return t.replace(/[\/]+/g, "/").replace(/\/\?/g, "?").replace(/\/\#/g, "#").replace(/\:\//g, "://") } e.exports = function() { var t = [].slice.call(arguments, 0).join("/"); return n(t) } }, {}],
    7: [function(t, e, i) {
        (function() { var t = {};
            (function() { "use strict";

                function e(t, i, n) { var s = function() {};
                    s.prototype = t.prototype; var o = new s; var r = /xyz/.test(function() { xyz }) ? /\bparent\b/ : /.*/;
                    n = n || {}; for (var a in n) { var h = n[a]; var l = o[a]; if (typeof l === "function" && typeof h === "function" && r.test(h)) { o[a] = function(t, e) { return function() { var i = this.parent;
                                    this.parent = e; var n = t.apply(this, arguments);
                                    this.parent = i; return n } }(h, l) } else { o[a] = h } } o.typename = i; var u = function() { if (o.init) { o.init.apply(this, arguments) } };
                    u.prototype = o;
                    u.prototype.constructor = u;
                    u.extend = function(t, i) { if (typeof t === "object") { i = t;
                            t = "anonymous" } return e(u, t, i) }; return u } t["object"] = e(Object, "Object", {}) })();
            (function() { "use strict"; var e = Array.prototype; var i = Object.prototype; var n = { "&": "&amp;", '"': "&quot;", "'": "&#39;", "<": "&lt;", ">": "&gt;" }; var s = /[&"'<>]/g; var o = function(t) { return n[t] }; var r = t["lib"] = {};
                r.withPrettyErrors = function(t, e, i) { try { return i() } catch (n) { if (!n.Update) { n = new r.TemplateError(n) } n.Update(t); if (!e) { var s = n;
                            n = new Error(s.message);
                            n.name = s.name } throw n } };
                r.TemplateError = function(t, e, i) { var n = this; if (t instanceof Error) { n = t;
                        t = t.name + ": " + t.message } else { if (Error.captureStackTrace) { Error.captureStackTrace(n) } } n.name = "Template render error";
                    n.message = t;
                    n.lineno = e;
                    n.colno = i;
                    n.firstUpdate = true;
                    n.Update = function(t) { var e = "(" + (t || "unknown path") + ")"; if (this.firstUpdate) { if (this.lineno && this.colno) { e += " [Line " + this.lineno + ", Column " + this.colno + "]" } else if (this.lineno) { e += " [Line " + this.lineno + "]" } } e += "\n "; if (this.firstUpdate) { e += " " } this.message = e + (this.message || "");
                        this.firstUpdate = false; return this }; return n };
                r.TemplateError.prototype = Error.prototype;
                r.escape = function(t) { return t.replace(s, o) };
                r.isFunction = function(t) { return i.toString.call(t) === "[object Function]" };
                r.isArray = Array.isArray || function(t) { return i.toString.call(t) === "[object Array]" };
                r.isString = function(t) { return i.toString.call(t) === "[object String]" };
                r.isObject = function(t) { return i.toString.call(t) === "[object Object]" };
                r.groupBy = function(t, e) { var i = {}; var n = r.isFunction(e) ? e : function(t) { return t[e] }; for (var s = 0; s < t.length; s++) { var o = t[s]; var a = n(o, s);
                        (i[a] || (i[a] = [])).push(o) } return i };
                r.toArray = function(t) { return Array.prototype.slice.call(t) };
                r.without = function(t) { var e = []; if (!t) { return e } var i = -1,
                        n = t.length,
                        s = r.toArray(arguments).slice(1); while (++i < n) { if (r.indexOf(s, t[i]) === -1) { e.push(t[i]) } } return e };
                r.extend = function(t, e) { for (var i in e) { t[i] = e[i] } return t };
                r.repeat = function(t, e) { var i = ""; for (var n = 0; n < e; n++) { i += t } return i };
                r.each = function(t, i, n) { if (t == null) { return } if (e.each && t.each === e.each) { t.forEach(i, n) } else if (t.length === +t.length) { for (var s = 0, o = t.length; s < o; s++) { i.call(n, t[s], s, t) } } };
                r.map = function(t, i) { var n = []; if (t == null) { return n } if (e.map && t.map === e.map) { return t.map(i) } for (var s = 0; s < t.length; s++) { n[n.length] = i(t[s], s) } if (t.length === +t.length) { n.length = t.length } return n };
                r.asyncIter = function(t, e, i) { var n = -1;

                    function s() { n++; if (n < t.length) { e(t[n], n, s, i) } else { i() } } s() };
                r.asyncFor = function(t, e, i) { var n = r.keys(t); var s = n.length; var o = -1;

                    function a() { o++; var r = n[o]; if (o < s) { e(r, t[r], o, s, a) } else { i() } } a() };
                r.indexOf = Array.prototype.indexOf ? function(t, e, i) { return Array.prototype.indexOf.call(t, e, i) } : function(t, e, i) { var n = this.length >>> 0;
                    i = +i || 0; if (Math.abs(i) === Infinity) { i = 0 } if (i < 0) { i += n; if (i < 0) { i = 0 } } for (; i < n; i++) { if (t[i] === e) { return i } } return -1 }; if (!Array.prototype.map) { Array.prototype.map = function() { throw new Error("map is unimplemented for this js engine") } } r.keys = function(t) { if (Object.prototype.keys) { return t.keys() } else { var e = []; for (var i in t) { if (t.hasOwnProperty(i)) { e.push(i) } } return e } } })();
            (function() { "use strict"; var e = t["lib"]; var i = t["object"]; var n = i.extend({ init: function(t) { this.variables = {};
                        this.parent = t }, set: function(t, e, i) { var n = t.split("."); var s = this.variables; var o = this; if (i) { if (o = this.resolve(n[0])) { o.set(t, e); return } o = this } for (var r = 0; r < n.length - 1; r++) { var a = n[r]; if (!s[a]) { s[a] = {} } s = s[a] } s[n[n.length - 1]] = e }, get: function(t) { var e = this.variables[t]; if (e !== undefined && e !== null) { return e } return null }, lookup: function(t) { var e = this.parent; var i = this.variables[t]; if (i !== undefined && i !== null) { return i } return e && e.lookup(t) }, resolve: function(t) { var e = this.parent; var i = this.variables[t]; if (i !== undefined && i !== null) { return this } return e && e.resolve(t) }, push: function() { return new n(this) }, pop: function() { return this.parent } });

                function s(t, e, i) { return function() { var n = a(arguments); var s; var o = r(arguments); if (n > t.length) { s = Array.prototype.slice.call(arguments, 0, t.length); var h = Array.prototype.slice.call(arguments, s.length, n); for (var l = 0; l < h.length; l++) { if (l < e.length) { o[e[l]] = h[l] } } s.push(o) } else if (n < t.length) { s = Array.prototype.slice.call(arguments, 0, n); for (var l = n; l < t.length; l++) { var u = t[l];
                                s.push(o[u]);
                                delete o[u] } s.push(o) } else { s = arguments } return i.apply(this, s) } }

                function o(t) { t.__keywords = true; return t }

                function r(t) { var e = t.length; if (e) { var i = t[e - 1]; if (i && i.hasOwnProperty("__keywords")) { return i } } return {} }

                function a(t) { var e = t.length; if (e === 0) { return 0 } var i = t[e - 1]; if (i && i.hasOwnProperty("__keywords")) { return e - 1 } else { return e } }

                function h(t) { if (typeof t !== "string") { return t } this.val = t } h.prototype = Object.create(String.prototype);
                h.prototype.valueOf = function() { return this.val };
                h.prototype.toString = function() { return this.val };

                function l(t, e) { if (t instanceof h) { return new h(e) } return e.toString() }

                function u(t) { var e = typeof t; if (e === "string") { return new h(t) } else if (e !== "function") { return t } else { return function() { var e = t.apply(this, arguments); if (typeof e === "string") { return new h(e) } return e } } }

                function c(t, i) { t = t !== undefined && t !== null ? t : ""; if (i && typeof t === "string") { t = e.escape(t) } return t }

                function d(t, e) { t = t || {}; if (typeof t[e] === "function") { return function() { return t[e].apply(t, arguments) } } return t[e] }

                function f(t, e, i) { if (!t) { throw new Error("Unable to call `" + e + "`, which is undefined or falsey") } else if (typeof t !== "function") { throw new Error("Unable to call `" + e + "`, which is not a function") } return t.apply(this, i) }

                function p(t, e, i) { var n = e.lookup(i); return n !== undefined && n !== null ? n : t.lookup(i) }

                function v(t, i, n) { if (t.lineno) { return t } else { return new e.TemplateError(t, i, n) } }

                function g(t, i, n, s) { if (e.isArray(t)) { var o = t.length;
                        e.asyncIter(t, function(t, e, s) { switch (i) {
                                case 1:
                                    n(t, e, o, s); break;
                                case 2:
                                    n(t[0], t[1], e, o, s); break;
                                case 3:
                                    n(t[0], t[1], t[2], e, o, s); break;
                                default:
                                    t.push(e, s);
                                    n.apply(this, t) } }, s) } else { e.asyncFor(t, function(t, e, i, s, o) { n(t, e, i, s, o) }, s) } }

                function m(t, i, n, s) { var o = 0; var r; var a;

                    function h(t, e) { o++;
                        a[t] = e; if (o === r) { s(null, a.join("")) } } if (e.isArray(t)) { r = t.length;
                        a = new Array(r); if (r === 0) { s(null, "") } else { for (var l = 0; l < t.length; l++) { var u = t[l]; switch (i) {
                                    case 1:
                                        n(u, l, r, h); break;
                                    case 2:
                                        n(u[0], u[1], l, r, h); break;
                                    case 3:
                                        n(u[0], u[1], u[2], l, r, h); break;
                                    default:
                                        u.push(l, h);
                                        n.apply(this, u) } } } } else { var c = e.keys(t);
                        r = c.length;
                        a = new Array(r); if (r === 0) { s(null, "") } else { for (var l = 0; l < c.length; l++) { var d = c[l];
                                n(d, t[d], l, r, h) } } } } t["runtime"] = { Frame: n, makeMacro: s, makeKeywordArgs: o, numArgs: a, suppressValue: c, memberLookup: d, contextOrFrameLookup: p, callWrap: f, handleError: v, isArray: e.isArray, keys: e.keys, SafeString: h, copySafeness: l, markSafe: u, asyncEach: g, asyncAll: m } })();
            (function() { "use strict"; var e = t["path"]; var i = t["object"]; var n = t["lib"]; var s = i.extend({ on: function(t, e) { this.listeners = this.listeners || {};
                        this.listeners[t] = this.listeners[t] || [];
                        this.listeners[t].push(e) }, emit: function(t) { var e = Array.prototype.slice.call(arguments, 1); if (this.listeners && this.listeners[t]) { n.each(this.listeners[t], function(t) { t.apply(null, e) }) } }, resolve: function(t, i) { return e.resolve(e.dirname(t), i) }, isRelative: function(t) { return t.indexOf("./") === 0 || t.indexOf("../") === 0 } });
                t["loader"] = s })();
            (function() { "use strict"; var e = t["loader"]; var i = e.extend({ init: function(t, e) { this.precompiled = window.nunjucksPrecompiled || {};
                        this.baseURL = t || "";
                        this.neverUpdate = e }, getSource: function(t) { if (this.precompiled[t]) { return { src: { type: "code", obj: this.precompiled[t] }, path: t } } else { var e = this.fetch(this.baseURL + "/" + t); if (!e) { return null } return { src: e, path: t, noCache: !this.neverUpdate } } }, fetch: function(t, e) { var i; var n = true; var s; if (window.XMLHttpRequest) { i = new XMLHttpRequest } else if (window.ActiveXObject) { i = new ActiveXObject("Microsoft.XMLHTTP") } i.onreadystatechange = function() { if (i.readyState === 4 && (i.status === 0 || i.status === 200) && n) { n = false;
                                s = i.responseText } };
                        t += (t.indexOf("?") === -1 ? "?" : "&") + "s=" + (new Date).getTime();
                        i.open("GET", t, false);
                        i.send(); return s } });
                t["web-loaders"] = { WebLoader: i } })();
            (function() { if (typeof window === "undefined" || window !== this) { t["loaders"] = t["node-loaders"] } else { t["loaders"] = t["web-loaders"] } })();
            (function() { "use strict"; var e = t["lib"]; var i = t["runtime"]; var n = { abs: function(t) { return Math.abs(t) }, batch: function(t, e, i) { var n = []; var s = []; for (var o = 0; o < t.length; o++) { if (o % e === 0 && s.length) { n.push(s);
                                s = [] } s.push(t[o]) } if (s.length) { if (i) { for (var o = s.length; o < e; o++) { s.push(i) } } n.push(s) } return n }, capitalize: function(t) { var e = t.toLowerCase(); return i.copySafeness(t, e.charAt(0).toUpperCase() + e.slice(1)) }, center: function(t, n) { n = n || 80; if (t.length >= n) { return t } var s = n - t.length; var o = e.repeat(" ", s / 2 - s % 2); var r = e.repeat(" ", s / 2); return i.copySafeness(t, o + t + r) }, "default": function(t, e) { return t ? t : e }, dictsort: function(t, i, n) { if (!e.isObject(t)) { throw new e.TemplateError("dictsort filter: val must be an object") } var s = []; for (var o in t) { s.push([o, t[o]]) } var r; if (n === undefined || n === "key") { r = 0 } else if (n === "value") { r = 1 } else { throw new e.TemplateError("dictsort filter: You can only sort by either key or value") } s.sort(function(t, n) { var s = t[r]; var o = n[r]; if (!i) { if (e.isString(s)) { s = s.toUpperCase() } if (e.isString(o)) { o = o.toUpperCase() } } return s > o ? 1 : s === o ? 0 : -1 }); return s }, escape: function(t) { if (typeof t === "string" || t instanceof i.SafeString) { return e.escape(t) } return t }, safe: function(t) { return i.markSafe(t) }, first: function(t) { return t[0] }, groupby: function(t, i) { return e.groupBy(t, i) }, indent: function(t, n, s) { n = n || 4; var o = ""; var r = t.split("\n"); var a = e.repeat(" ", n); for (var h = 0; h < r.length; h++) { if (h === 0 && !s) { o += r[h] + "\n" } else { o += a + r[h] + "\n" } } return i.copySafeness(t, o) }, join: function(t, i, n) { i = i || ""; if (n) { t = e.map(t, function(t) { return t[n] }) } return t.join(i) }, last: function(t) { return t[t.length - 1] }, length: function(t) { return t !== undefined ? t.length : 0 }, list: function(t) { if (e.isString(t)) { return t.split("") } else if (e.isObject(t)) { var i = []; if (Object.keys) { i = Object.keys(t) } else { for (var n in t) { i.push(n) } } return e.map(i, function(e) { return { key: e, value: t[e] } }) } else if (e.isArray(t)) { return t } else { throw new e.TemplateError("list filter: type not iterable") } }, lower: function(t) { return t.toLowerCase() }, random: function(t) { return t[Math.floor(Math.random() * t.length)] }, rejectattr: function(t, e) { return t.filter(function(t) { return !t[e] }) }, selectattr: function(t, e) { return t.filter(function(t) { return !!t[e] }) }, replace: function(t, e, n, s) { if (e instanceof RegExp) { return t.replace(e, n) } var o = t; var r = o; var a = 1;
                        o = o.replace(e, n); while (r !== o) { if (a >= s) { break } r = o;
                            o = o.replace(e, n);
                            a++ } return i.copySafeness(t, o) }, reverse: function(t) { var s; if (e.isString(t)) { s = n.list(t) } else { s = e.map(t, function(t) { return t }) } s.reverse(); if (e.isString(t)) { return i.copySafeness(t, s.join("")) } return s }, round: function(t, e, i) { e = e || 0; var n = Math.pow(10, e); var s; if (i === "ceil") { s = Math.ceil } else if (i === "floor") { s = Math.floor } else { s = Math.round } return s(t * n) / n }, slice: function(t, e, i) { var n = Math.floor(t.length / e); var s = t.length % e; var o = 0; var r = []; for (var a = 0; a < e; a++) { var h = o + a * n; if (a < s) { o++ } var l = o + (a + 1) * n; var u = t.slice(h, l); if (i && a >= s) { u.push(i) } r.push(u) } return r }, sort: function(t, i, n, s) { t = e.map(t, function(t) { return t });
                        t.sort(function(t, o) { var r, a; if (s) { r = t[s];
                                a = o[s] } else { r = t;
                                a = o } if (!n && e.isString(r) && e.isString(a)) { r = r.toLowerCase();
                                a = a.toLowerCase() } if (r < a) { return i ? 1 : -1 } else if (r > a) { return i ? -1 : 1 } else { return 0 } }); return t }, string: function(t) { return i.copySafeness(t, t) }, title: function(t) { var e = t.split(" "); for (var s = 0; s < e.length; s++) { e[s] = n.capitalize(e[s]) } return i.copySafeness(t, e.join(" ")) }, trim: function(t) { return i.copySafeness(t, t.replace(/^\s*|\s*$/g, "")) }, truncate: function(t, e, n, s) { var o = t;
                        e = e || 255; if (t.length <= e) return t; if (n) { t = t.substring(0, e) } else { var r = t.lastIndexOf(" ", e); if (r === -1) { r = e } t = t.substring(0, r) } t += s !== undefined && s !== null ? s : "..."; return i.copySafeness(o, t) }, upper: function(t) { return t.toUpperCase() }, urlencode: function(t) { var i = encodeURIComponent; if (e.isString(t)) { return i(t) } else { var n; if (e.isArray(t)) { n = t.map(function(t) { return i(t[0]) + "=" + i(t[1]) }) } else { n = []; for (var s in t) { if (t.hasOwnProperty(s)) { n.push(i(s) + "=" + i(t[s])) } } } return n.join("&") } }, urlize: function(t, e, i) { if (isNaN(e)) e = Infinity; var n = i === true ? ' rel="nofollow"' : ""; var s = /^(?:\(|<|&lt;)?(.*?)(?:\.|,|\)|\n|&gt;)?$/; var o = /^[\w.!#$%&'*+\-\/=?\^`{|}~]+@[a-z\d\-]+(\.[a-z\d\-]+)+$/i; var r = /^https?:\/\/.*$/; var a = /^www\./; var h = /\.(?:org|net|com)(?:\:|\/|$)/; var l = t.split(/\s+/).filter(function(t) { return t && t.length }).map(function(t) { var i = t.match(s); var l = i && i[1] || t; if (r.test(l)) return '<a href="' + l + '"' + n + ">" + l.substr(0, e) + "</a>"; if (a.test(l)) return '<a href="http://' + l + '"' + n + ">" + l.substr(0, e) + "</a>"; if (o.test(l)) return '<a href="mailto:' + l + '">' + l + "</a>"; if (h.test(l)) return '<a href="http://' + l + '"' + n + ">" + l.substr(0, e) + "</a>"; return t }); return l.join(" ") }, wordcount: function(t) { var e = t ? t.match(/\w+/g) : null; return e ? e.length : null }, "float": function(t, e) { var i = parseFloat(t); return isNaN(i) ? e : i }, "int": function(t, e) { var i = parseInt(t, 10); return isNaN(i) ? e : i } };
                n.d = n["default"];
                n.e = n.escape;
                t["filters"] = n })();
            (function() { "use strict";

                function e(t) { var e = -1; return { current: null, reset: function() { e = -1;
                            this.current = null }, next: function() { e++; if (e >= t.length) { e = 0 } this.current = t[e]; return this.current } } }

                function i(t) { t = t || ","; var e = true; return function() { var i = e ? "" : t;
                        e = false; return i } } var n = { range: function(t, e, i) { if (!e) { e = t;
                            t = 0;
                            i = 1 } else if (!i) { i = 1 } var n = []; for (var s = t; s < e; s += i) { n.push(s) } return n }, cycler: function() { return e(Array.prototype.slice.call(arguments)) }, joiner: function(t) { return i(t) } };
                t["globals"] = n })();
            (function() { "use strict"; var e = t["path"]; var i = t["lib"]; var n = t["object"]; var s = t["lexer"]; var o = t["compiler"]; var r = t["filters"]; var a = t["loaders"]; var h = t["runtime"]; var l = t["globals"]; var u = h.Frame; var c = n.extend({ init: function(t, e) { var e = this.opts = e || {};
                        this.opts.dev = !!e.dev;
                        this.opts.autoescape = !!e.autoescape;
                        this.opts.trimBlocks = !!e.trimBlocks;
                        this.opts.lstripBlocks = !!e.lstripBlocks; if (!t) { if (a.FileSystemLoader) { this.loaders = [new a.FileSystemLoader("views")] } else { this.loaders = [new a.WebLoader("/views")] } } else { this.loaders = i.isArray(t) ? t : [t] } this.initCache();
                        this.filters = {};
                        this.asyncFilters = [];
                        this.extensions = {};
                        this.extensionsList = []; for (var n in r) { this.addFilter(n, r[n]) } }, initCache: function() { i.each(this.loaders, function(t) { t.cache = {}; if (typeof t.on === "function") { t.on("update", function(e) { t.cache[e] = null }) } }) }, addExtension: function(t, e) { e._name = t;
                        this.extensions[t] = e;
                        this.extensionsList.push(e) }, getExtension: function(t) { return this.extensions[t] }, addGlobal: function(t, e) { l[t] = e }, addFilter: function(t, e, i) { var n = e; if (i) { this.asyncFilters.push(t) } this.filters[t] = n }, getFilter: function(t) { if (!this.filters[t]) { throw new Error("filter not found: " + t) } return this.filters[t] }, resolveTemplate: function(t, e, i) { var n = t.isRelative && e ? t.isRelative(i) : false; return n && t.resolve ? t.resolve(e, i) : i }, getTemplate: function(t, e, n, s) { var o = this; var r = null; if (t && t.raw) { t = t.raw } if (i.isFunction(n)) { s = n;
                            n = null;
                            e = e || false } if (i.isFunction(e)) { s = e;
                            e = false } if (typeof t !== "string") { throw new Error("template names must be a string: " + t) } for (var a = 0; a < this.loaders.length; a++) { var h = this.resolveTemplate(this.loaders[a], n, t);
                            r = this.loaders[a].cache[h]; if (r) break } if (r) { if (e) { r.compile() } if (s) { s(null, r) } else { return r } } else { var l;
                            i.asyncIter(this.loaders, function(e, i, s, r) {
                                function a(t) { if (t) { t.loader = e;
                                        r(t) } else { s() } } t = o.resolveTemplate(e, n, t); if (e.async) { e.getSource(t, function(t, e) { if (t) { throw t } a(e) }) } else { a(e.getSource(t)) } }, function(i) { if (!i) { var n = new Error("template not found: " + t); if (s) { s(n) } else { throw n } } else { var o = new f(i.src, this, i.path, e); if (!i.noCache) { i.loader.cache[t] = o } if (s) { s(null, o) } else { l = o } } }.bind(this)); return l } }, express: function(t) { var i = this;

                        function n(t, i) { this.name = t;
                            this.path = t;
                            this.defaultEngine = i.defaultEngine;
                            this.ext = e.extname(t); if (!this.ext && !this.defaultEngine) throw new Error("No default engine was specified and no extension was provided."); if (!this.ext) this.name += this.ext = ("." !== this.defaultEngine[0] ? "." : "") + this.defaultEngine } n.prototype.render = function(t, e) { i.render(this.name, t, e) };
                        t.set("view", n) }, render: function(t, e, n) { if (i.isFunction(e)) { n = e;
                            e = null } var s = null;
                        this.getTemplate(t, function(t, i) { if (t && n) { n(t) } else if (t) { throw t } else { i.render(e, n || function(t, e) { if (t) { throw t } s = e }) } }); return s }, renderString: function(t, e, n, s) { if (i.isFunction(n)) { s = n;
                            n = {} } n = n || {}; var o = new f(t, this, n.path); return o.render(e, s) } }); var d = n.extend({ init: function(t, e) { this.ctx = t;
                        this.blocks = {};
                        this.exported = []; for (var i in e) { this.addBlock(i, e[i]) } }, lookup: function(t) { if (t in l && !(t in this.ctx)) { return l[t] } else { return this.ctx[t] } }, setVariable: function(t, e) { this.ctx[t] = e }, getVariables: function() { return this.ctx }, addBlock: function(t, e) { this.blocks[t] = this.blocks[t] || [];
                        this.blocks[t].push(e) }, getBlock: function(t) { if (!this.blocks[t]) { throw new Error('unknown block "' + t + '"') } return this.blocks[t][0] }, getSuper: function(t, e, n, s, o, r) { var a = i.indexOf(this.blocks[e] || [], n); var h = this.blocks[e][a + 1]; var l = this; if (a === -1 || !h) { throw new Error('no super block available for "' + e + '"') } h(t, l, s, o, r) }, addExport: function(t) { this.exported.push(t) }, getExported: function() { var t = {}; for (var e = 0; e < this.exported.length; e++) { var i = this.exported[e];
                            t[i] = this.ctx[i] } return t } }); var f = n.extend({ init: function(t, e, n, s) { this.env = e || new c; if (i.isObject(t)) { switch (t.type) {
                                case "code":
                                    this.tmplProps = t.obj; break;
                                case "string":
                                    this.tmplStr = t.obj; break } } else if (i.isString(t)) { this.tmplStr = t } else { throw new Error("src must be a string or an object describing " + "the source") } this.path = n; if (s) { i.withPrettyErrors(this.path, this.env.dev, this._compile.bind(this)) } else { this.compiled = false } }, render: function(t, e, n) { if (typeof t === "function") { n = t;
                            t = {} } else if (typeof e === "function") { n = e;
                            e = null } return i.withPrettyErrors(this.path, this.env.dev, function() { try { this.compile() } catch (i) { if (n) return n(i);
                                else throw i } var s = new d(t || {}, this.blocks); var o = null;
                            this.rootRenderFunc(this.env, s, e || new u, h, n || function(t, e) { if (t) { throw t } o = e }); return o }.bind(this)) }, getExported: function(t, e, i) { if (typeof t === "function") { i = t;
                            t = {} } if (typeof e === "function") { i = e;
                            e = null } try { this.compile() } catch (n) { if (i) return i(n);
                            else throw n } var s = new d(t || {}, this.blocks);
                        this.rootRenderFunc(this.env, s, e || new u, h, function() { i(null, s.getExported()) }) }, compile: function() { if (!this.compiled) { this._compile() } }, _compile: function() { var t; if (this.tmplProps) { t = this.tmplProps } else { var e = o.compile(this.tmplStr, this.env.asyncFilters, this.env.extensionsList, this.path, this.env.opts); var i = new Function(e);
                            t = i() } this.blocks = this._getBlocks(t);
                        this.rootRenderFunc = t.root;
                        this.compiled = true }, _getBlocks: function(t) { var e = {}; for (var i in t) { if (i.slice(0, 2) === "b_") { e[i.slice(2)] = t[i] } } return e } });
                t["environment"] = { Environment: c, Template: f } })(); var i; var n = t["lib"]; var s = t["environment"]; var o = t["compiler"]; var r = t["parser"]; var a = t["lexer"]; var h = t["runtime"]; var l = t["loader"]; var u = t["loaders"]; var c = t["precompile"];
            i = {};
            i.Environment = s.Environment;
            i.Template = s.Template;
            i.Loader = l;
            i.FileSystemLoader = u.FileSystemLoader;
            i.WebLoader = u.WebLoader;
            i.compiler = o;
            i.parser = r;
            i.lexer = a;
            i.runtime = h; var d;
            i.configure = function(t, e) { e = e || {}; if (n.isObject(t)) { e = t;
                    t = null } var i = "watch" in e ? !e.watch : false; var o = u.FileSystemLoader || u.WebLoader;
                d = new s.Environment(new o(t, i), e); if (e && e.express) { d.express(e.express) } return d };
            i.compile = function(t, e, n, s) { if (!d) { i.configure() } return new i.Template(t, e, n, s) };
            i.render = function(t, e, n) { if (!d) { i.configure() } return d.render(t, e, n) };
            i.renderString = function(t, e, n) { if (!d) { i.configure() } return d.renderString(t, e, n) }; if (c) { i.precompile = c.precompile;
                i.precompileString = c.precompileString } i.require = function(e) { return t[e] }; if (typeof define === "function" && define.amd) { define(function() { return i }) } else { window.nunjucks = i; if (typeof e !== "undefined") e.exports = i } })() }, {}],
    8: [function(t, e, i) {
        var n = t("28");
        var s = t("10");
        var o = t("66");
        var r = t("150");
        var a = t("50");
        var h = t("132");
        var l = t("134");
        var u = t("138");
        var c = t("9");
        var d = t("136");
        var f = false;
        var p = function(t) { this.initViews(); var e = $("#container");
            this.$menu = $(".js-menu");
            this.renderer = new THREE.WebGLRenderer({ antialias: true });
            this.renderer.setClearColor(0);
            this.renderer.setPixelRatio(window.PIXEL_RATIO);
            this.renderer.setSize(t.width, t.height);
            e.append(this.renderer.domElement);
            this.clock = new THREE.Clock;
            this.paused = false;
            this.game = t.game;
            this.newEquipment = []; if (s.SWORD > 0) this.view.activateItem("sword"); if (s.BOMB > 0) this.view.activateItem("bomb"); if (s.BOW > 0) this.view.activateItem("bow"); if (s.WAND > 0) this.view.activateItem("wand");
            this.game.on("start", function(t, e, i) { this.update();
                this.initMap(t, e);
                this.initShop(e);
                this.view.onGameStart();
                this.onOrientationChange();
                this.view.setLevel(i); if (!window.isMobile && !s.AUTOPLAY) { u.delay(1500, this.showMovementPopup, this) } d.log("startlevel", "startlevel" + 1) }, this);
            this.game.on("levelexit", function(t, e) { this.trigger("levelexit");
                this.view.onLevelCleared(t);
                u.delay(2e3, function() { if (this.game.hasNextLevel()) { this.game.incrementLevel();
                        this.enterShop();
                        u.clearTimers() } else { this.endGame() } }, this);
                d.log("completelevel", "completelevel" + t, "", e) }, this);
            this.game.on("levelstart", function(t, e) { this.map.reset(t);
                this.view.setLevel(e);
                u.delay(1500, this.resolveNewEquipment, this); if (this.restarting) { d.log("restartlevel", "restartlevel" + e);
                    this.restarting = false } else { d.log("startlevel", "startlevel" + e) } }, this);
            this.game.on("playerDeath", function(t) { this.game.veil.fadeIn();
                u.delay(350, this.pause, this);
                this.view.showDeath();
                d.log("playerdeath", "level" + t) }, this);
            this.game.on("showLevelTitle", function(t) { this.view.showLevelTitle(t);
                u.delay(400, function() { c.play("levelStart") }) }, this);
            this.game.on("playerMove", function() { this.map.update() }, this);
            this.game.on("playerTurn", function() { this.map.update() }, this);
            this.game.on("playerHealth", function(t) { this.view.setPlayerHealth(t) }, this);
            this.game.on("count", function(t, e) { this.view.setCount(t, e) }, this);
            this.game.on("cooldownStart", function(t) { this.view.startCooldown(t) }, this);
            this.game.on("cooldownEnd", function(t) { this.view.endCooldown(t) }, this);
            this.game.on("firstPotion", function() { this.game.veil.fadeIn(.65, 150);
                u.delay(150, this.pause, this);
                this.view.showPopup(h.potion, "potion");
                this.view.activateItem("potion");
                this.view.once("popupClosed", function() { this.resume();
                    this.game.veil.fadeOut(0, 150) }, this) }, this);
            this.game.on("playerExitingLevel", function() { this.view.hideMap() }, this);
            this.game.on("equip", function(t) { this.newEquipment.push(t) }, this);
            this.game.on("useWeapon", function(t) { this.view.onWeaponUse(t) }, this);
            this.game.on("potion", function() { this.view.onPotionUse() }, this);
            this.game.on("showDetonateButton", function() { this.view.showDetonateButton() }, this);
            this.game.on("showBombButton", function() { this.view.showBombButton() }, this);
            this.game.on("activateItem", function(t) { this.view.activateItem(t) }, this);
            this.game.on("clearNewEquipment", function(t) { this.newEquipment = [] }, this);
            this.game.initHelpers();
            this.game.toggleHelpers();
            $(window).resize(v.bind(this)).on("keyup", g.bind(this)); if (s.FPS) { this.FPSCounter = new n;
                this.$fps = $(".fps-counter") } this.initKeyboard();
            this.handleEvents();
            this.game.messenger = this.view.views.message; if (!s.AUDIO) { c.mute() } window.addEventListener("orientationchange", this.onOrientationChange.bind(this)) };
        p.prototype = {
            initViews: function() { this.context = {};
                this.view = new r({ context: this.context, willInitialize: function() { var t = $("#main-container");
                        t.prepend(this.$el.children()); return t } });
                this.view.on("toggleMainMenu", this.toggleMenu, this);
                this.view.on("weapon", function(t) { this.game.pushAction("weapon", t) }, this);
                this.view.on("potion", function(t) { this.game.usePotion() }, this);
                this.view.on("nextlevel", function() { this.leaveShop();
                    this.game.startLevel() }, this);
                this.view.on("keyboardChange", function(t) { this.setKeyboardType(t) }, this);
                this.view.on("completeTutorial", function() { this.setLocalStorageItem("completeTutorial", true) }, this);
                this.view.on("restart", function() { this.game.stateManager.clear();
                    window.location.reload(false) }, this);
                this.view.on("respawn", function() { this.resume();
                    this.restarting = true;
                    this.game.restartLevel() }, this);
                this.view.on("move", function(t) { this.game.pushAction("move", t) }, this);
                this.view.on("turn", function(t) { this.game.pushAction("turn", t) }, this);
                this.view.on("buyItem", function(t, e) { var i = this.shop.buyItem(t); if (i) { var n = this.shop.getState(); var s = this.shop.getItem(t);
                        e.setItems(n.items);
                        e.setCurrentItemBought(); if (!this.shop.hasAvailableItem()) { e.soldOut = true } this.view.activateItem(s.type);
                        this.view.setGoldCount(n.gold);
                        this.game.saveState();
                        c.play("buy");
                        d.log("buy", "buy" + s.type + s.tier, "", this.game.currentLevel) } if (!this.shop.canBuyItem()) { this.view.highlightNextButton() } }, this);
                this.view.on("toggleAudio", function() { c.toggle() });
                this.view.on("closeAbout", function() { if (this.started) { this.view.showMenu() } }, this);
                this.view.on("showMap", function() { this.game.veil.fadeIn(.35, 150);
                    this.map.open() }, this);
                this.view.on("hideMap", function() { this.game.veil.fadeOut(0, 150);
                    this.map.close() }, this) },
            setViews: function(t) { _.each(t, function(t, e) { this.view.addSubView(e, t) }, this);
                this.view.views.about.on("close", this.view.onCloseAbout, this.view) },
            handleEvents: function() { this.on("levelexit", function() { this.view.fadeOutGame() }, this) },
            render: function(t) { if (s.PROFILING) console.time("render");
                this.game.render(this.renderer); if (s.PROFILING) console.timeEnd("render") },
            update: function() { var t = { delta: 0, elapsed: 0 }; return function() { t.delta = this.clock.getDelta();
                    t.elapsed = this.clock.getElapsedTime(); if (!this.paused) { requestAnimationFrame(this.update.bind(this)); if (s.PROFILING) console.time("update");
                        this.game.update(t);
                        this.view.update(t); if (s.PROFILING) console.timeEnd("update");
                        this.render(t); if (!this.started) { this.trigger("started");
                            this.started = true } if (s.FPS) { this.FPSCounter.update(t, function(t) { this.$fps.html(t) }.bind(this)) } } } }(),
            startGame: function() { var t = function() { if (s.SKIP_INTRO || this.game.currentLevel > 1) { if (!window.isMobile && !this.keyboardChosen) { this.view.showKeyboardSelect();
                            this.view.once("keyboardChosen", function() { this.setLocalStorageItem("kb", true);
                                this.game.start() }, this) } else { this.game.start() } } else { this.view.showIntro();
                        this.view.once("introEnd", function() { if (!window.isMobile && !this.keyboardChosen) { this.view.showKeyboardSelect();
                                this.view.once("keyboardChosen", function() { this.setLocalStorageItem("kb", true);
                                    this.game.start() }, this) } else { this.game.start() } }, this) } d.log("game", "start") }.bind(this);
                this.view.showCanvas();
                this.view.handleKeyboardEvents(); if (window.isMobile) { if (s.INSTALL_PROMPT && !window.navigator.standalone && window.iOS) { this.view.showInstallPopup();
                        this.view.once("popupClosed", function() { t() }, this) } else { t() } } else { t() } },
            toggleMenu: function() { if (this.menuVisible) { this.view.hideMenu();
                    this.menuVisible = false;
                    this.game.veil.fadeOut(0, 250); if (this.pauseTimer) { this.pauseTimer.stop();
                        this.pauseTimer = null } else { this.resume() } } else if (this.game.player.alive) { this.view.showMenu();
                    this.menuVisible = true;
                    this.game.veil.fadeIn(.65, 250);
                    this.pauseTimer = u.delay(250, function() { this.pause();
                        this.pauseTimer = null }, this) } },
            enterShop: function() { this.pause();
                this.view.showShop(this.shop.getState());
                this.inShop = true; if (!this.shop.canBuyItem()) { this.view.highlightNextButton() } setTimeout(function() { c.play("shop") }, 200) },
            leaveShop: function() { this.inShop = false;
                this.resume() },
            endGame: function() {
                this.pause();
                this.view.showEnd();
                this.game.stateManager.clear();
                c.play("end");
                d.log("game", "complete")
            },
            pause: function() { if (!this.paused) { this.clock.stop();
                    this.paused = true;
                    this.view.onPauseGame() } },
            resume: function() { if (this.paused) { this.clock.start();
                    this.paused = false;
                    this.view.onResumeGame(); if (this.started) this.update() } },
            onLeaveTab: function() { if (!this.paused) { this.pause();
                    this.shouldResume = true } if (!c.isMuted()) { this.shouldUnmute = true;
                    c.mute() } },
            onFocusTab: function() { if (this.shouldResume && !this.inShop) { this.resume();
                    this.shouldResume = false } if (this.shouldUnmute) { c.unmute();
                    this.shouldUnmute = false } },
            setKeyboardType: function(t) { this.game.inputManager.setKeyboardType(t);
                this.setLocalStorageItem("type", t) },
            initKeyboard: function() { var t = window.navigator.userLanguage || window.navigator.language; var e; if (localStorage.getItem("kb") !== null) { e = localStorage.getItem("type");
                    this.keyboardChosen = true } else if (t.indexOf("fr") > -1) { e = "azerty" } else if (t.indexOf("de") > -1) { e = "qwertz" } else { e = "qwerty" } this.view.setKeyboardType(e);
                this.setKeyboardType(e) },
            showControls: function() { this.view.showControls() },
            initMap: function(t, e) { this.map = new a({ level: t, player: e, chunkSize: 5 }) },
            initShop: function(t) { this.shop = new l(t);
                this.shop.addItem({ name: "Sword", type: "sword", weapon: "basicsword", tier: 1, description: "The must-have for every adventurer!", price: 10 });
                this.shop.addItem({ name: "Bow", type: "bow", weapon: "basicbow", tier: 1, description: "Perfect to avoid close combat.", price: 100 });
                this.shop.addItem({ name: "Bombs", type: "bomb", weapon: "basicbombs", tier: 1, description: "Have a blast with these powerful explosives.", price: 100 });
                this.shop.addItem({ name: "Wand", type: "wand", weapon: "basicwand", tier: 1, description: "Stun your enemies with this handy magical stick.", price: 100 });
                this.shop.addItem({ name: "Power Sword", type: "sword", weapon: "powersword", tier: 2, description: "Knocks back enemies when you slash them.", price: 400 });
                this.shop.addItem({ name: "Piercing Bow", type: "bow", weapon: "piercingbow", tier: 2, description: "The bow. Reinvented.", price: 400 });
                this.shop.addItem({ name: "Trigger Bombs", type: "bomb", weapon: "triggerbombs", tier: 2, description: "For trigger-happy adventurers!", price: 400 });
                this.shop.addItem({ name: "Freezing Wand", type: "wand", weapon: "freezingwand", tier: 2, description: "Turn your enemies into ice!", price: 400 });
                this.view.views.shop.tutorialMode = !(t.hasWeapon("sword", 1) || s.SWORD > 0) },
            resolveNewEquipment: function() { if (this.newEquipment.length > 0) { this.game.veil.fadeIn(.65, 150);
                    u.delay(150, function() { this.game.veil.setOpacity(.65);
                        this.pause() }, this);
                    this.on("resolved", function() { if (this.newEquipment.length > 0) { this.showNewEquipmentPopup() } else { this.resume();
                            this.off("resolved");
                            this.game.veil.fadeOut(0, 150) } }, this);
                    this.showNewEquipmentPopup() } },
            showNewEquipmentPopup: function() { var t = this.newEquipment[0];
                this.view.showPopup(h[t], t);
                this.newEquipment.splice(0, 1);
                this.view.once("popupClosed", function() { this.trigger("resolved") }, this) },
            showMovementPopup: function() { this.game.veil.fadeIn(.65, 150);
                u.delay(150, this.pause, this);
                this.view.showMovementPopup(this.game.inputManager.keyboardType);
                this.view.once("popupClosed", function() { this.resume();
                    this.game.veil.fadeOut(0, 150);
                    u.delay(2e3, function() { if (this.game.currentLevel === 1) { this.view.displayMessage("Find the exit.") } }, this) }, this) },
            onOrientationChange: function() { if (window.orientation === undefined) return; switch (window.orientation) {
                    case -90:
                    case 90:
                        if (this.paused) this.resume(); break;
                    default:
                        this.pause() } },
            setLocalStorageItem: function(t, e) { try { localStorage.setItem(t, e) } catch (i) { console.error(i) } }
        };

        function v(t) { var e = window.innerWidth; var i = window.innerHeight; if (this.started) this.game.setAspectRatio(e / i);
            this.renderer.setSize(e, i);
            this.view.onWindowResize(e, i) }

        function g(t) { if (t.keyCode === 66) { this.game.toggleHelpers() } }

        function m(t, e, i) { throw WebGLDebugUtils.glEnumToString(t) + " was caused by call to: " + e } p.mixin(o);
        e.exports = p
    }, { 10: 10, 132: 132, 134: 134, 136: 136, 138: 138, 150: 150, 28: 28, 50: 50, 66: 66, 9: 9 }],
    9: [function(t, e, i) { var n = t("44"); var s = t("3"); var o = t("10"); var r = t("139"); var a = { sword1: "sword1.mp3", sword2: "sword2.mp3", sword3: "sword3.mp3", footStep1: "footstep1.mp3", footStep2: "footstep2.mp3", footStep3: "footstep3.mp3", footStep4: "step1.mp3", footStep5: "step2.mp3", footStep6: "step3.mp3", footStep7: "step4.mp3", kill: "kill.mp3", hit1: "hit1.mp3", hit2: "hit2.mp3", hit3: "hit3.mp3", grab: "grab.mp3", jarBreak1: "breakpot.mp3", jarBreak2: "breakpot2.mp3", jarBreak3: "breakpot3.mp3", key: "key.mp3", lootPotion: "potion-loot.mp3", drinkPotion: "potion-loot.mp3", explosion: "explosion.mp3", fireball: "fireball.mp3", gold: "gold.mp3", levelExit: "levelexit.mp3", levelCleared: "levelcleared.mp3", buttonClick: "button.mp3", wick: "wick.mp3", hurt1: "hurt1.mp3", hurt2: "hurt2.mp3", hurt3: "hurt3.mp3", bowDraw: "bow-draw.mp3", bowRelease: "bow-release.mp3", gate: "gate.mp3", buy: "buy.mp3", stunSpell: "spell1.mp3", iceSpell: "spell2.mp3", levelStart: "levelstart.mp3", torch: "torch.mp3", fastClick: "click-fast.mp3", hover: "hover.mp3", map: "map.mp3", block: "block.mp3", bump: "bump.mp3", freeze: "freeze.mp3", locked: "locked.mp3", shop: "shop.mp3", popup: "popup.mp3", end: "end.mp3", death: "death.mp3", dying: "dying.mp3" };
        n.alternateExtensions = ["mp3"]; var h = false; var l = {}; var u = { loadAll: function() { _.keys(a).forEach(function(t) { this.load(t) }, this) }, load: function(t) { var e = new jQuery.Deferred;
                n.addEventListener("fileload", function() { e.resolve() }.bind(this));
                n.registerSound(s(o.paths.audio, a[t]), t); return e.promise() }, play: function(t, e) { n.play(t, { volume: e !== undefined ? 1 - e / 8 : 1, pan: 1e-4 }) }, playHit: function(t) { this.play(r.getRandomFromArray(["hit1", "hit2", "hit3"]), t) }, playRandomSword: function() { this.play(r.getRandomFromArray(["sword1", "sword2", "sword3"])) }, playFootStep: function() { this.play(r.getRandomFromArray(["footStep4", "footStep5", "footStep6", "footStep7"])) }, playHurt: function() { this.play(r.getRandomFromArray(["hurt1", "hurt2", "hurt3"])) }, playJarBreak: function(t) { this.play(r.getRandomFromArray(["jarBreak1", "jarBreak2", "jarBreak3"]), t) }, startTorchLoop: function() { this.torchLoop = n.createInstance(s(o.paths.audio, a["torch"]));
                this.torchVolume = new TWEEN.Tween;
                this.torchLoop.play({ volume: 0, loop: -1, pan: 1e-4 }) }, stopTorchLoop: function() { this.torchVolume.reset(this.torchLoop).to({ volume: 0 }, 2e3).onComplete(function() { this.torchLoop.stop() }.bind(this)).start() }, setTorchVolume: function(t) { this.torchVolume.reset(this.torchLoop).to({ volume: 1 - t / 2.5 }, 250).start() }, mute: function() { n.muted = true }, unmute: function() { n.muted = false }, toggle: function() { n.muted = !n.muted }, isMuted: function() { return n.muted } };
        e.exports = u }, { 10: 10, 139: 139, 3: 3, 44: 44 }],
    10: [function(t, e, i) { e.exports = { UNIT: 1, DEBUG: false, AI: true, INVINCIBLE: false, START_LEVEL: 1, FPS: false, AUTOPLAY: false, AUDIO: true, INSTALL_PROMPT: true, SKIP_INTRO: false, IGNORE_PIXEL_RATIO: false, PROFILING: false, ALLOW_FULL_SCREEN: true, RESTORE_STATE: true, GOLD: 10, SWORD: 0, BOW: 0, BOMB: 0, WAND: 0, MAX_ARROWS: 20, MAX_BOMBS: 10, MAX_POTIONS: 99, ANALYTICS: true, WEBGL_DEBUG: false, VERBOSE: false, scripts: { jquery: "jquery-2.1.4.min.js", underscore: "underscore-min.js", backbone: "backbone-min.js", three: "three.min.js", main: "main.min.js", game: "game.min.js" }, paths: { stylesheets: "css/", icons: "icons/", scripts: "js/", images: "img/", audio: "audio/", models: "models/", textures: "textures/" } } }, {}],
    11: [function(t, e, i) {
        (function() {
            (window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["controls.html"] = function() {
                function t(t, e, i, n, s) { var o = null; var r = null; var a = ""; try { a += '<div class="controls modal large js-controls">\n  <div class="inner">\n    <div class="title"><img src="img/game/titles/how-to-play.png" alt="How to play"></div>\n    <div class="content">\n      <div class="keyboard-type">\n        <div class="label">Keyboard type</div>\n        <div class="value js-keyboard-type">Azerty</div>\n        <div class="dropdown js-keyboard-select">\n          <div class="option js-option" data-value="qwerty">Qwerty</div>\n          <div class="option js-option selected" data-value="azerty">Azerty</div>\n          <div class="option js-option" data-value="qwertz">Qwertz</div>\n          <div class="option js-option" data-value="qzerty">Qzerty</div>\n        </div>\n      </div>\n      <div class="key-mapping azerty js-key-mapping"></div>\n    </div>\n    <div class="main-button button primary js-close js-hover-sound js-click-sound">Okay</div>\n  </div>\n</div>';
                        s(null, a) } catch (h) { s(n.handleError(h, o, r)) } } return { root: t } }() })();
        (function() {
            (window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["death.html"] = function() {
                function t(t, e, i, n, s) { var o = null; var r = null; var a = ""; try { a += '<div class="death-container">\n  <div class="content">\n    <div class="inner-container">\n      <div class="skull"></div>\n      <div class="main-title-container">\n        <div class="main-title"></div>\n      </div>\n      <div class="main-copy">\n        You have fought valiantly, but your foes have defeated you.<br>\n        Your courage will be remembered.\n      </div>\n      <div class="button primary js-respawn js-hover-sound js-click-sound">Restart Level</div>\n      ';
                        t.getTemplate("sharing.html", false, "death.html", function(t, n) { if (t) { s(t); return } n.render(e.getVariables(), i.push(), function(t, e) { if (t) { s(t); return } a += e;
                                a += "\n    </div>\n  </div>\n</div>";
                                s(null, a) }) }) } catch (h) { s(n.handleError(h, o, r)) } } return { root: t } }() })();
        (function() {
            (window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["end.html"] = function() {
                function t(t, e, i, n, s) { var o = null; var r = null; var a = ""; try { a += '<div class="end-container">\n  <div class="content">\n    <div class="inner-container">\n      <div class="main-title-container">\n        <div class="cup-container">\n          <div class="cup"></div>\n          <div class="glow"></div>\n        </div>\n        <div class="ribbon-title"></div>\n      </div>\n      <div class="main-copy">\n        Congratulations, hero! You have escaped the dungeon.<br>\n        Want more? Follow <a href="https://twitter.com/forestrygames">@ForestryGames</a> for updates.\n      </div>\n      ';
                        t.getTemplate("sharing.html", false, "end.html", function(t, n) { if (t) { s(t); return } n.render(e.getVariables(), i.push(), function(t, e) { if (t) { s(t); return } a += e;
                                a += '\n    </div>\n  </div>\n  <div class="credit">A WebGL game by <a class="js-ext-link" href="https://www.forestrygames.com/" target="new"><span class="lw-logo" alt="Forestry Games"></span></a></div>\n</div>';
                                s(null, a) }) }) } catch (h) { s(n.handleError(h, o, r)) } } return { root: t } }() })();
        (function() {
            (window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["hud.html"] = function() {
                function t(t, e, i, n, s) { var o = null; var r = null; var a = ""; try { a += '<div class="hud js-hud no-weapons">\n  <div class="menu-button js-menu-button js-hover-sound js-click-sound">\n    <div class="keybinding">ESC</div>\n  </div>\n  <div class="health-bar">\n    <div class="fill js-health"></div>\n  </div>\n  <div class="action-buttons">\n    <div class="button empty sword-button js-attack-button js-melee-button">\n      <div class="icon"></div>\n      <div class="keybinding">Space</div>\n    </div>\n    <div class="button empty bomb-button js-attack-button js-bomb-button">\n      <div class="ammo js-bomb-counter">0</div>\n      <div class="icon"></div>\n      <div class="keybinding">X</div>\n    </div>\n    <div class="button empty bow-button js-attack-button js-range-button">\n      <div class="ammo js-arrow-counter">0</div>\n      <div class="icon"></div>\n      <div class="keybinding">F</div>\n    </div>\n    <div class="button empty wand-button js-attack-button js-wand-button">\n      <div class="icon"></div>\n      <div class="keybinding">C</div>\n    </div>\n    <div class="button empty potion-button js-potion-button">\n      <div class="ammo js-potion-counter">0</div>\n      <div class="icon"></div>\n      <div class="keybinding">R</div>\n    </div>\n  </div>\n  <div class="key-counter js-keys"></div>\n  <div class="map-button js-map-button js-hover-sound">\n    <div class="keybinding">TAB</div>\n  </div>\n  <div class="audio-button js-audio-button"></div>\n  <div class="gold-counter">\n    <div class="icon"></div>\n    <div class="count js-gold-count">0</div>\n  </div>\n  <div class="movement">\n    <div class="arrow turn-left js-arrow" data-move="turn" data-direction="left"></div>\n    <div class="arrow forward js-arrow" data-move="move" data-direction="forward"></div>\n    <div class="arrow turn-right js-arrow" data-move="turn" data-direction="right"></div>\n    <div class="arrow strafe-left js-arrow" data-move="move" data-direction="left"></div>\n    <div class="arrow backward js-arrow" data-move="move" data-direction="backward"></div>\n    <div class="arrow strafe-right js-arrow" data-move="move" data-direction="right"></div>\n  </div>\n  <div class="level-count">\n    Level <span class="js-level-count">1</span>\n  </div>\n</div>';
                        s(null, a) } catch (h) { s(n.handleError(h, o, r)) } } return { root: t } }() })();
        (function() {
            (window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["intro.html"] = function() {
                function t(t, e, i, n, s) { var o = null; var r = null; var a = ""; try { a += '<div class="intro-container">\n  <div class="vertical-center-container">\n    <div class="vertical-center-content">\n      All levels are procedurally generated. <br/>\n      Each game is unique.\n    </div>\n  </div>\n</div>';
                        s(null, a) } catch (h) { s(n.handleError(h, o, r)) } } return { root: t } }() })();
        (function() {
            (window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["keyboardselect.html"] = function() {
                function t(t, e, i, n, s) { var o = null; var r = null; var a = ""; try { a += '<div class="popup keyboard-select">\n  <div class="inner">\n    <!-- <div class="title"><img src="img/titles/keyboard.png" alt="Choose keyboard"></div> -->\n    <div class="content-wrapper">\n      <div class="content">\n        <div class="keyboard-type">\n          <div class="label">Select your keyboard type</div>\n          <div class="value-container">\n            <div class="value js-keyboard-type js-hover-sound">Azerty</div>\n          </div>\n          <div class="dropdown js-keyboard-select js-click-sound">\n            <div class="option js-option js-hover-sound" data-value="qwerty">Qwerty</div>\n            <div class="option js-option selected js-hover-sound" data-value="azerty">Azerty</div>\n            <div class="option js-option js-hover-sound" data-value="qwertz">Qwertz</div>\n            <div class="option js-option js-hover-sound" data-value="qzerty">Qzerty</div>\n          </div>\n        </div>\n  <!--       <div class="key-mapping azerty js-key-mapping"></div> -->\n      </div>\n    </div>\n    <div class="main-button button primary js-close js-hover-sound js-click-sound">Okay</div>\n  </div>\n</div>';
                        s(null, a) } catch (h) { s(n.handleError(h, o, r)) } } return { root: t } }() })();
        (function() {
            (window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["level-title.html"] = function() {
                function t(t, e, i, n, s) { var o = null; var r = null; var a = ""; try { a += '<div class="level-title js-level-title">\n  <div class="inner">\n    <div class="level"></div>\n    <div class="digits js-digits"></div>\n    <div class="cleared"></div>\n  </div>\n</div>';
                        s(null, a) } catch (h) { s(n.handleError(h, o, r)) } } return { root: t } }() })();
        (function() {
            (window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["main.html"] = function() {
                function t(t, e, i, n, s) { var o = null; var r = null; var a = ""; try { a += '<div>\n  <div id="container"></div>\n\n  <div class="gui-wrapper js-gui-wrapper">\n    <div class="js-hud-container"></div>\n    <div class="js-menu-container"></div>\n    <div class="js-controls-container"></div>\n    <div class="js-keyboard-select-container"></div>\n    <div class="js-shop-container"></div>\n    <div class="js-death-container"></div>\n    <div class="js-level-title-container"></div>\n    <div class="js-message-container"></div>\n    <div class="js-popup-container"></div>\n    <div class="js-end-container"></div>\n    <div class="js-intro-container"></div>\n\n    <div class="orientation-warning">\n      <div class="inner">\n        <div class="text">Please turn <br/>your device to <br/><strong>landscape mode</strong></div>\n      </div>\n    </div>\n\n    <div class="map-container js-map-container">\n      <canvas class="js-map"></canvas>\n    </div>\n\n    <div class="fps-counter"></div>\n  </div>\n</div>';
                        s(null, a) } catch (h) { s(n.handleError(h, o, r)) } } return { root: t } }() })();
        (function() {
            (window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["menu.html"] = function() {
                function t(t, e, i, n, s) { var o = null; var r = null; var a = ""; try { a += '<div class="menu js-main-menu">\n  <div class="close-button js-close-button js-hover-sound js-click-sound">\n    <div class="keybinding">ESC</div>\n  </div>\n\n  <div class="menu-inner">\n    <div class="button primary controls-button js-button js-controls-button js-hover-sound js-click-sound">How to play</div>\n    <div class="button primary js-button js-restart-button js-hover-sound js-click-sound">Restart game</div>\n    <div class="button primary js-button js-about-button js-hover-sound js-click-sound">About</div>\n\n    ';
                        t.getTemplate("sharing.html", false, "menu.html", function(t, n) { if (t) { s(t); return } n.render(e.getVariables(), i.push(), function(t, e) { if (t) { s(t); return } a += e;
                                a += "\n  </div>\n</div>";
                                s(null, a) }) }) } catch (h) { s(n.handleError(h, o, r)) } } return { root: t } }() })();
        (function() {
            (window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["message.html"] = function() {
                function t(t, e, i, n, s) { var o = null; var r = null; var a = ""; try { a += '<div class="message-container">\n  <div class="message js-message"></div>\n</div>';
                        s(null, a) } catch (h) { s(n.handleError(h, o, r)) } } return { root: t } }() })();
        (function() {
            (window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["popup.html"] = function() {
                function t(t, e, i, n, s) { var o = null; var r = null; var a = ""; try { a += '<div class="popup">\n  <div class="inner">\n    <div class="image"></div>\n    <div class="content-wrapper">\n      <div class="content js-content"></div>\n    </div>\n    <div class="main-button button primary js-close js-button js-hover-sound">Close</div>\n  </div>\n</div>';
                        s(null, a) } catch (h) { s(n.handleError(h, o, r)) } } return { root: t } }() })();
        (function() {
            (window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["sharing.html"] = function() {
                function t(t, e, i, n, s) { var o = null; var r = null; var a = ""; try { a += '<div class="sharing">\n  <div class="title">Share this</div>\n  <div class="share-buttons">\n    <div class="button square twitter js-twitter js-hover-sound js-click-sound js-sharing"\n      data-href="https://twitter.com/share?url=http%3A%2F%2Fwww.forestrygames.com&via=forestrygames&related=glecollinet%2Cwhatthefranck&text=Keep%20Out%21%20A%20new%20WebGL%20game%20for%20brave%20adventurers.%20Play%20now%20at" \n      data-width="575"\n      data-height="400">\n    </div>\n    <div class="button square facebook js-facebook js-hover-sound js-click-sound js-sharing"\n      data-href="https://www.facebook.com/sharer/sharer.php?u=http://www.forestrygames.com"\n      data-width="575"\n      data-height="400">\n    </div>\n    <div class="button square gplus js-gplus js-hover-sound js-click-sound js-sharing"\n      data-href="https://plus.google.com/share?url=http://www.forestrygames.com"\n      data-width="575"\n      data-height="400">\n    </div>\n  </div>\n</div>';
                        s(null, a) } catch (h) { s(n.handleError(h, o, r)) } } return { root: t } }() })();
        (function() {
            (window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["shop.html"] = function() {
                function t(t, e, i, n, s) { var o = null; var r = null; var a = ""; try { var h;
                        h = n.memberLookup(n.contextOrFrameLookup(e, i, "items"), 0, t.opts.autoescape);
                        i.set("first", h, true); if (!i.parent) { e.setVariable("first", h);
                            e.addExport("first") } a += '\n\n<div class="shop js-shop">\n  <div class="sign"></div>\n  <div class="next js-exit js-hover-sound">\n    <div class="next-button"></div>\n    <div class="next-glow"></div>\n  </div>\n  <div class="your-gold">\n    <div class="value js-gold-count">';
                        a += n.suppressValue(n.contextOrFrameLookup(e, i, "gold"), t.opts.autoescape);
                        a += '</div>\n    <div class="gold-icon"></div>\n  </div>\n  <div class="items-container js-content ';
                        a += n.suppressValue(n.memberLookup(n.contextOrFrameLookup(e, i, "first"), "purchased", t.opts.autoescape), t.opts.autoescape);
                        a += " ";
                        a += n.suppressValue(n.memberLookup(n.contextOrFrameLookup(e, i, "item"), "locked", t.opts.autoescape), t.opts.autoescape);
                        a += '">\n    <div class="inner">\n\n      <div class="header">\n        <div class="item-name js-item-name">';
                        a += n.suppressValue(n.memberLookup(n.contextOrFrameLookup(e, i, "first"), "name", t.opts.autoescape), t.opts.autoescape);
                        a += '</div>\n        <div class="item-description js-item-description">';
                        a += n.suppressValue(n.memberLookup(n.contextOrFrameLookup(e, i, "first"), "description", t.opts.autoescape), t.opts.autoescape);
                        a += '</div>\n      </div>\n\n      <div class="right-arrow js-next-item js-hover-sound"></div>\n      <div class="left-arrow js-previous-item js-hover-sound"></div>\n\n      <div class="slider js-slider">\n        ';
                        i = i.push(); var l = n.contextOrFrameLookup(e, i, "items"); if (l) { var u = l.length; for (var c = 0; c < l.length; c++) { var d = l[c];
                                i.set("item", d);
                                i.set("loop.index", c + 1);
                                i.set("loop.index0", c);
                                i.set("loop.revindex", u - c);
                                i.set("loop.revindex0", u - c - 1);
                                i.set("loop.first", c === 0);
                                i.set("loop.last", c === u - 1);
                                i.set("loop.length", u);
                                a += '\n        <div class="item tiers-';
                                a += n.suppressValue(n.memberLookup(d, "tier", t.opts.autoescape), t.opts.autoescape);
                                a += " js-item "; if (n.memberLookup(n.contextOrFrameLookup(e, i, "loop"), "first", t.opts.autoescape) == 0) { a += " current" } a += '" data-id="';
                                a += n.suppressValue(n.memberLookup(d, "id", t.opts.autoescape), t.opts.autoescape);
                                a += '" data-name="';
                                a += n.suppressValue(n.memberLookup(d, "name", t.opts.autoescape), t.opts.autoescape);
                                a += '" data-description="';
                                a += n.suppressValue(n.memberLookup(d, "description", t.opts.autoescape), t.opts.autoescape);
                                a += '" data-price="';
                                a += n.suppressValue(n.memberLookup(d, "price", t.opts.autoescape), t.opts.autoescape);
                                a += '" data-purchased="';
                                a += n.suppressValue(n.memberLookup(d, "purchased", t.opts.autoescape), t.opts.autoescape);
                                a += '" data-locked="';
                                a += n.suppressValue(n.memberLookup(d, "locked", t.opts.autoescape), t.opts.autoescape);
                                a += '">\n          <img src="img/game/shop/items/';
                                a += n.suppressValue(n.memberLookup(d, "type", t.opts.autoescape), t.opts.autoescape);
                                a += '.png">\n          <div class="js-lock'; if (n.memberLookup(d, "locked", t.opts.autoescape)) { a += " locked" } a += '"></div>\n          <div class="stamp"></div>\n        </div>\n        ' } } i = i.pop();
                        a += '\n      </div>\n\n      <div class="price">\n        <div class="value js-price">';
                        a += n.suppressValue(n.memberLookup(n.memberLookup(n.contextOrFrameLookup(e, i, "items"), 0, t.opts.autoescape), "price", t.opts.autoescape), t.opts.autoescape);
                        a += '</div>\n        <div class="gold-icon"></div>\n      </div>\n\n      <div class="buy js-buy js-hover-sound"></div>\n    </div>\n  </div>\n</div>';
                        s(null, a) } catch (f) { s(n.handleError(f, o, r)) } } return { root: t } }() })() }, {}],
    12: [function(t, e, i) { e.exports = { items: ["bag", "chest", "key", "potion", "quiver"], mobs: ["bat", "demon", "dragon", "ghost", "mummy", "orc", "skeleton", "zombie"], props: ["door", "exitdoor", "exitframe", "gate", "jar", "skulls", "table", "tablecandles", "tablecloth", "tablecup", "tableplates", "torch", "vasegib"], weapons: ["arrow", "bomb", "bow", "sword", "wand"] } }, {}],
    13: [function(t, e, i) { e.exports = { effects: ["arrowfxcore.png", "bone.png", "explosion.png", "fireball-sprite.png", "fireball-trail.png", "flake.png", "frost.jpg", "glitter.png", "hurt.png", "mob-healthbar.png", "smoke-cloud.png", "softglow.png", "spark.png", "star.png", "sword-glitter.png", "sword-trail-2.png", "sword-trail.png", "trail-glitter.png"], items: ["bag.png", "chest.png", "key.png", "potion.png"], level: ["ao-wall.png", "envmap/negx.jpg", "envmap/negy.jpg", "envmap/negz.jpg", "envmap/posx.jpg", "envmap/posy.jpg", "envmap/posz.jpg", "floor.png", "shadow.png", "stone-wall.png"], mobs: ["bat.png", "demon.png", "dragon.png", "eliteorc.png", "eliteskeleton.png", "explosivebat.png", "ghost.png", "icedragon.png", "mummy.png", "orc.png", "skeleton.png", "zombie.png"], props: ["door.png", "gate.png", "props.jpg", "props.png", "skulls-shadow.png", "table-shadow.png", "torch/1.png", "torch/2.png", "torch/3.png", "torch/glow.png"], weapons: ["bomb-blink.png", "bomb.png", "bow.png", "powersword.png", "sword.png", "wand.png"] } }, {}],
    14: [function(t, e, i) { var n = t("139"); var s = { dropItem: function(t) { var e = ["potion", "bag", "chest"]; if (t.weapons.bomb) { e.push("bomb") } else { e.push(null) } if (t.weapons.bow) { e.push("quiver") } else { e.push(null) } var i = n.getRandomFromArray(e); if (Math.random() <= .2) { i = null } return i } };
        e.exports = s }, { 139: 139 }],
    15: [function(t, e, i) { var n = t("22"); var s = function() {};
        s.inherit(Object, { parse: function(t) { return _.map(t, function(t, e) { return new n[e](t) }) } });
        e.exports = s }, { 22: 22 }],
    16: [function(t, e, i) { var n = t("19"); var s = function(t) { t = _.extend({}, { effects: [], ignoreCenter: false, ignoreMobs: false }, t);
            n.call(this);
            this.effects = t.effects;
            this.ignoreCenter = t.ignoreCenter;
            this.ignoreMobs = t.ignoreMobs };
        s.inherit(n, { applyTo: function(t, e) { e.getEntitiesAround(this.source, this.ignoreCenter).forEach(function(t) { if (!this.ignoreMobs || t.type !== "mob") { e.trigger("effects", this.effects, t, this.source) } }, this) } });
        e.exports = s }, { 19: 19 }],
    17: [function(t, e, i) { var n = t("19"); var s = function(t) { t = _.extend({}, { type: "damage" }, t);
            n.call(this);
            this.type = t.type;
            this.amount = t.amount };
        s.inherit(n, { applyTo: function(t) { if (!t) return; if (t.isDestructible) { t.destroy() } else if (_.isFunction(t.takeDamage)) { t.takeDamage(this.amount, this.source) } } });
        e.exports = s }, { 19: 19 }],
    18: [function(t, e, i) { var n = t("19"); var s = function() { n.call(this) };
        s.inherit(n, { applyTo: function(t, e) { e.remove(this.source) } });
        e.exports = s }, { 19: 19 }],
    19: [function(t, e, i) { var n = t("66"); var s = function(t) { if (t && t.parent) { this.setParent(t.parent) } };
        s.prototype = { setParent: function(t) { if (t.type === "autonomous") { this.source = t } else if (t.owner) { this.source = t.owner } else if (t.sender) { this.source = t.sender } else { this.source = t } return this }, applyTo: function() { throw new Error("Implement in subclasses") } };
        s.mixin(n);
        e.exports = s }, { 66: 66 }],
    20: [function(t, e, i) { var n = t("19"); var s = t("138"); var o = t("9"); var r = function(t) { t = _.extend({}, { duration: 5e3 }, t);
            n.call(this);
            this.duration = t.duration };
        r.inherit(n, { applyTo: function(t, e) { if (t.type === "player" && t.frozen) return; if (t && (t.type === "mob" || t.type === "player") && !t.isImmuneTo("freeze")) { if (t.frozen && t.freezeTimer) { t.freezeTimer.stop();
                        t.freezeTimer = null } this.target = t;
                    t.frozen = true;
                    t.onFreeze(); if (t.weapon) { t.weapon.cancelUse() } t.trigger("hit", 0, this.source);
                    t.timesHurtWhileFrozen = 0;
                    t.freezeTimer = s.delay(this.duration, this.wearOff, this);
                    t.once("dead", function() { t.freezeTimer.stop() });
                    o.play("freeze") } }, wearOff: function() { this.target.frozen = false;
                this.target.onUnfreeze() } });
        e.exports = r }, { 138: 138, 19: 19, 9: 9 }],
    21: [function(t, e, i) { var n = t("19"); var s = function(t) { n.call(this);
            this.fxType = t.type };
        s.inherit(n, { applyTo: function(t, e) { var i = new this.fxType;
                i.position.copy(this.source.position);
                e.add(i);
                i.onApply(e) } });
        e.exports = s }, { 19: 19 }],
    22: [function(t, e, i) { e.exports = { aoe: t("16"), damage: t("17"), destroy: t("18"), fx: t("21"), knockback: t("23"), projection: t("24"), spawn: t("25"), stun: t("26"), freeze: t("20") } }, { 16: 16, 17: 17, 18: 18, 20: 20, 21: 21, 23: 23, 24: 24, 25: 25, 26: 26 }],
    23: [function(t, e, i) { var n = t("19"); var s = function(t) { t = _.extend({}, { distance: 1 }, t);
            n.call(this);
            this.type = "knockback";
            this.distance = t.distance };
        s.inherit(n, { applyTo: function(t) { if (t && t.alive && _.isFunction(t.knockback)) { var e = t.knockback(this.source); if (e && t.weapon) { t.weapon.cancelUse() } } } });
        e.exports = s }, { 19: 19 }],
    24: [function(t, e, i) { var n = t("19"); var s = t("10"); var o = function(t) { n.call(this);
            this.range = t.range || -1;
            this.projectileType = t.projectile;
            this.projectileEffects = t.effects;
            this.projectileOptions = t.options || {} };
        o.inherit(n, { applyTo: function() { var t = this.source; var e = _.extend(this.projectileOptions, { effects: this.projectileEffects }); var i = new this.projectileType(e); var n = function() { var e = t.moving ? t.nextCoords : t.coords;
                    i.sender = t;
                    i.setCoords(e);
                    i.setOrientation(t.orientation);
                    t.trigger("spawn", i) }.bind(this); if (t.moving) { t.once("moved", n) } else { n() } } });
        e.exports = o }, { 10: 10, 19: 19 }],
    25: [function(t, e, i) { var n = t("19"); var s = function(t) { n.call(this);
            this.entityType = t.type;
            this.entityEffects = t.effects };
        s.inherit(n, { applyTo: function(t, e) { var i = { effects: this.entityEffects }; var n = new this.entityType(i); var s = this.source.coords.clone(); var o = this.source.orientation.clone();
                this.source.trigger("spawn", n);
                n.setCoords(s); if (_.isFunction(n.setOrientation)) { n.setOrientation(o) } n.onSpawn(s, o, this.source) } });
        e.exports = s }, { 19: 19 }],
    26: [function(t, e, i) { var n = t("19"); var s = t("138"); var o = function(t) { t = _.extend({}, { duration: 4e3 }, t);
            n.call(this);
            this.duration = t.duration };
        o.inherit(n, { applyTo: function(t, e) { if (t) { if (t.stunTimer) { t.stunTimer.stop();
                        this.wearOff(t) } t.stunned = true; if (t.weapon) { t.weapon.cancelUse() } t.trigger("hit", 0, this.source);
                    t.stunTimer = s.delay(this.duration, this.wearOff.bind(this, t)) } }, wearOff: function(t) { if (t.stunned) { t.stunned = false;
                    t.stunTimer = null } } });
        e.exports = o }, { 138: 138, 19: 19 }],
    27: [function(t, e, i) { var n = t("108"); var s = t("102"); var o = t("109"); var r = t("103"); var a = t("99"); var h = t("104"); var l = t("105"); var u = t("100"); var c = t("101"); var d = t("106"); var f = t("107"); var p = t("110"); var v = t("75");
        e.exports = { create: function(t, e) { if (!e) e = {}; switch (t) {
                    case "orc":
                        return new n(e);
                    case "eliteorc":
                        return new s(e);
                    case "skeleton":
                        return new o(e);
                    case "eliteskeleton":
                        return new r(e);
                    case "bat":
                        return new a(e);
                    case "explosivebat":
                        return new h(e);
                    case "ghost":
                        return new l(e);
                    case "demon":
                        return new u(e);
                    case "dragon":
                        return new c(e);
                    case "icedragon":
                        return new d(e);
                    case "mummy":
                        return new f(e);
                    case "zombie":
                        return new p(e);
                    case "door":
                        return new v(e) } throw "Unknown entity type: " + t } } }, { 100: 100, 101: 101, 102: 102, 103: 103, 104: 104, 105: 105, 106: 106, 107: 107, 108: 108, 109: 109, 110: 110, 75: 75, 99: 99 }],
    28: [function(t, e, i) { var n = function() { this.frames = 0;
            this.fps = 0;
            this.lastTime = 0 };
        n.prototype = { update: function(t, e) { var t = t.elapsed * 1e3;
                this.frames++; if (t > this.lastTime + 1e3) { this.fps = Math.round(this.frames * 1e3 / (t - this.lastTime));
                    e(this.fps);
                    this.lastTime = t;
                    this.frames = 0 } } };
        e.exports = n }, {}],
    29: [function(t, e, i) {
        var n = t("174");
        var s = t("10");
        var o = t("129");
        var r = t("139");
        var a = t("133");
        var h = t("138");
        var l = t("39");
        var u = t("135");
        var c = t("35");
        var d = t("40");
        var f = t("111");
        var p = t("74");
        var v = t("66");
        var g = t("42");
        var m = t("9");
        var y = t("15");
        var w = t("83");
        var E = t("82");
        var b = t("86");
        var T = t("88");
        var x = t("95");
        var C = t("12");
        var P = function() { n.call(this);
            this.generator = new c;
            this.levelBuilder = new d;
            this.initInputManager();
            this.initStateManager();
            this.ready = false;
            this.currentLevel = this.stateManager.getLevel() || s.START_LEVEL;
            this.maxLevels = _.size(g);
            this.playerActions = []; if (!s.DEBUG) { this.scene.fog = new THREE.Fog(0, s.UNIT * 3, s.UNIT * 10) } this.tweens = { fogAnimation: new TWEEN.Tween };
            this.lightVariance = 0;
            this.lightVarianceSign = 1;
            m.loadAll();
            this.elapsedTime = 0 };
        P.inherit(n, {
            start: function() { this.initVeil();
                this.initHurtEffect();
                this.initFrostEffect();
                this.initSwordTrail();
                this.initLevel();
                this.initPlayer();
                this.stateManager.updateGame(this);
                this.trigger("start", this.level, this.player, this.currentLevel);
                this.onLevelStart() },
            onLevelStart: function() { this.elapsedTime = 0;
                this.showLevelMessage();
                m.startTorchLoop();
                m.setTorchVolume(this.level.distanceToClosestTorch());
                this.veil.setOpacity(1);
                this.veil.fadeOut(0, 500);
                this.messenger.clear() },
            showLevelMessage: function() { this.trigger("showLevelTitle", this.currentLevel) },
            getLevelOptions: function() { return g[this.currentLevel - 1] },
            initLevel: function() { var t = this.generator.generate(this.getLevelOptions()); if (t === null) { throw "Level cannot be created with these settings" } var e = this.levelBuilder.build(t);
                this.level = e;
                this.scene.add(e);
                e.on("message", function(t, e) { if (e && e instanceof x && !this.hasLootedFirstPotion) { this.hasLootedFirstPotion = true } else { this.messenger.setMessage(t) } }, this);
                e.on("exit", function() { this.trigger("levelexit", this.currentLevel, Math.round(this.elapsedTime * 1e3));
                    this.clearActions();
                    this.actionsEnabled = false;
                    h.delay(1e3, function() { this.scene.remove(this.level);
                        this.level.dispose();
                        m.stopTorchLoop() }, this) }, this); var i = new y;
                e.on("effects", function(t, e, n) { var s = i.parse(t);
                    s.forEach(function(t) { t.setParent(n) });
                    this.applyEffects(null, s, e) }, this);
                _.each(this.level.entities, this.handleEntityEvents, this) },
            initPlayer: function() {
                this.player = new f({ name: "player" });
                if (s.DEBUG) {
                    this.camera = new p({
                        near: .1
                    });
                    this.camera.position.addVectors(this.player.position, new THREE.Vector3(5, 5, 5));
                    this.camera.lookAt(this.player.position);
                    this.controls = new THREE.OrbitControls(this.camera);
                    this.controls.target = this.player.position;
                    this.controls.noKeys = true
                } else { this.camera = this.player.camera } this.initPlayerWeapons();
                this.resetPlayer();
                this.handleEntityEvents(this.player);
                this.player.setGoldCount(s.GOLD);
                this.player.updateHUDAmmo()
            },
            initPlayerWeapons: function() { var t = this.player.setWeapon.bind(this.player); switch (s.SWORD) {
                    case 1:
                        t("sword", "basicsword"); break;
                    case 2:
                        t("sword", "powersword"); break } switch (s.BOW) {
                    case 1:
                        t("bow", "basicbow"); break;
                    case 2:
                        t("bow", "piercingbow"); break } switch (s.BOMB) {
                    case 1:
                        t("bomb", "basicbombs"); break;
                    case 2:
                        t("bomb", "triggerbombs"); break } switch (s.WAND) {
                    case 1:
                        t("wand", "basicwand"); break;
                    case 2:
                        t("wand", "freezingwand"); break } },
            resetPlayer: function() { this.player.reset();
                this.player.setOrientation(o[this.level.getStartingOrientation().toUpperCase()]);
                this.level.addEntity(this.player, this.level.getPosition("entrance"));
                this.level.setPlayer(this.player);
                this.actionsEnabled = true;
                this.trigger("showBombButton");
                this.updateMobAnimations();
                this.level.onPlayerReset();
                this.frostEffect.hide() },
            initVeil: function() { this.veil = new T;
                this.scene.add(this.veil) },
            initHurtEffect: function() { this.hurtEffect = new w;
                this.scene.add(this.hurtEffect) },
            initFrostEffect: function() { this.frostEffect = new E;
                this.scene.add(this.frostEffect) },
            initSwordTrail: function() { this.swordTrail = new b;
                this.scene.add(this.swordTrail) },
            usePotion: function() { if (this.player.hasPotion() && this.player.alive && !this.player.frozen) { this.player.usePotion();
                    this.trigger("potion") } },
            initInputManager: function() { this.inputManager = new l;
                this.inputManager.on("move", this.pushAction.bind(this, "move"));
                this.inputManager.on("turn", this.pushAction.bind(this, "turn"));
                this.inputManager.on("weapon", function(t) { this.pushAction("weapon", t) }.bind(this));
                this.inputManager.on("potion", function() { this.usePotion() }.bind(this));
                this.inputManager.on("toggleMenu", function() { this.trigger("toggleMenu") }.bind(this)) },
            initStateManager: function() { this.stateManager = new u({ restore: s.RESTORE_STATE }) },
            saveState: function() { this.stateManager.update(this);
                this.stateManager.save() },
            pushAction: function(t, e) { if (!this.actionsEnabled || this.player.frozen) return; if (this.playerActions.length < 1) { this.playerActions.push({ type: t, value: e }) } },
            clearActions: function() { this.playerActions = [] },
            applyEffects: function(t, e, i) { var n = i || null; if (!n) { if (t.type === "mob" || t.type === "player") { n = this.level.getEntityAt(t.getFrontCoords(), ["prop"]);
                        n = n && t.canHit(n) ? n : null } else { n = this.level.getEntityAt(t.coords) } } e.forEach(function(t) { if (n && !n.isImmuneTo(t.type)) { t.applyTo(n, this.level);
                        n.onEffect(t.type) } else { t.applyTo(null, this.level) } }, this) },
            handleEntityEvents: function(t) { t.on("spawn", this.onSpawn, this);
                t.on("effects", this.applyEffects.bind(this, t)); switch (t.type) {
                    case "mob":
                        this.handleMobEvents(t); break;
                    case "player":
                        this.handlePlayerEvents(t); break;
                    case "projectile":
                        this.handleProjectileEvents(t); break } },
            handleProjectileEvents: function(t) { var e = this.level;
                t.on("move", function(i) { var n = t.getTarget(e); var s = n.target; var o = !s && e.isWallAt(i); if (o) { t.animateMove(i, function() { e.removeEntity(t) }, .3) } else { t.nextCoords.copy(i);
                        t.animateMove(i);
                        e.onEntityMoving(t) } if (s && k(t, s)) { var r = function(t, i) { if (t.canHit(i) && k(t, i)) { t.stopMoving();
                                this.applyEffects(t, t.effects, i);
                                t.resolveImpact(i, e) } }.bind(this, t, s); if (n.immediate) { r() } else { setTimeout(r, t.moveDuration * .5) } } }, this) },
            handleWeaponEvents: function(t, e) { t.on("cooldown", this.trigger.bind(this, "cooldownStart", e));
                t.on("ready", this.trigger.bind(this, "cooldownEnd", e)) },
            handlePlayerEvents: function() { var t = this.player;
                t.on("ammoChange", this.setAmmoCount, this);
                t.on("coinChange", this.setCoinCount, this);
                t.on("health", this.setPlayerHealth, this);
                t.on("hurt", this.onPlayerHurt, this);
                t.on("die", this.onPlayerDeath, this);
                t.on("firstPotion", this.onFirstPotionLoot, this);
                t.on("equip", this.onPlayerEquipItem, this);
                t.on("useWeapon", this.onPlayerUsedWeapon, this);
                _.each(t.weapons, this.handleWeaponEvents, this);
                t.on("move", function(e) { if (t.moving || t.attacking || t.bumping) return; if (this.level.canMoveTo(e)) { t.nextCoords.copy(e);
                        t.animateMove(e, function() { t.trigger("moved");
                            this.level.onPlayerHasMoved(t);
                            this.updateMobAnimations();
                            this.trigger("playerMove") }.bind(this));
                        t.bob();
                        this.level.onEntityMoving(t);
                        m.playFootStep() } else if (e.equals(this.level.positions.exit) && t.getFrontCoords().equals(e)) { this.trigger("playerExitingLevel");
                        this.level.exiting = true;
                        this.level.openExit();
                        this.scene.fog.near = s.UNIT;
                        this.scene.fog.far = s.UNIT * 1.5;
                        this.animateFog();
                        m.play("levelExit");
                        t.animateMove(e, function() { this.level.exit();
                            this.level.exiting = false;
                            m.play("levelCleared") }.bind(this), 1, 1e3) } else if (!this.level.tryOpeningDoor(e, t)) { if (!t.bumping) { t.bump(e) } } }, this);
                t.on("turn", function(t) { var e = this.player.rotation.y;
                    this.player.rotation.y = t;
                    this.updateMobAnimations();
                    this.player.rotation.y = e }, this);
                t.on("knockback", function(e) { var i = this.level;
                    i.cancelEntityMovement(t);
                    t.nextCoords.copy(e);
                    t.animateKnockback(e, function() { t.trigger("moved");
                        i.onPlayerHasMoved(t);
                        this.updateMobAnimations() }.bind(this));
                    i.onEntityMoving(t) }, this);
                t.on("dropTriggerBomb", function() { this.trigger("showDetonateButton") }, this);
                t.on("detonateTriggerBomb", function() { this.trigger("showBombButton") }, this);
                t.on("freeze", function() { this.frostEffect.show();
                    this.messenger.setMessage("You are frozen.") }, this);
                t.on("unfreeze", function() { this.frostEffect.hide();
                    this.messenger.setMessage("You are no longer frozen.") }, this) },
            handleMobEvents: function(t) { var e = this.level;
                t.on("move", function(i) { if (t.moving || t.attacking) return; if (e.canMoveTo(i)) { t.nextCoords.copy(i);
                        t.animateMove(i, function() { t.trigger("moved");
                            this.updateMobAnimation(t); if (t.strafing) { t.strafing = false } }.bind(this));
                        e.onEntityMoving(t) } }, this);
                t.on("knockback", function(i) { if (t.strafing) { t.strafing = false } e.cancelEntityMovement(t);
                    t.nextCoords.copy(i);
                    t.knockedBack = true;
                    t.animateKnockback(i, function() { t.trigger("moved");
                        this.updateMobAnimation(t);
                        t.knockedBack = false }.bind(this));
                    e.onEntityMoving(t);
                    t.setCoords(i) }, this);
                t.on("range", function() { t.weapon.use(t, function() { t.weapon.fireProjectile(t) }.bind(this)) }, this) },
            hasNextLevel: function() { return this.currentLevel < this.maxLevels },
            incrementLevel: function() { this.currentLevel++;
                this.saveState() },
            startLevel: function() { this.resetFog();
                this.pruneCustomMaterials();
                this.initLevel();
                this.resetPlayer();
                this.setPlayerHealth(1);
                this.trigger("levelstart", this.level, this.currentLevel);
                this.onLevelStart() },
            restartLevel: function() { this.scene.remove(this.level);
                this.level.dispose();
                this.startLevel() },
            animateFog: function() { this.tweens.fogAnimation.reset(this.scene.fog).to({ near: s.UNIT * .5, far: s.UNIT * .95 }, 1e3).easing(TWEEN.Easing.Linear.None);
                this.tweens.fogAnimation.start() },
            resetFog: function() { this.scene.fog.near = s.UNIT * 3;
                this.scene.fog.far = s.UNIT * 10 },
            onPlayerMove: function(t) { if (!this.player.alive) return; var e = this.player.getNextCoords(t); if (t === "forward") this.player.moveForward(); if (t === "backward") this.player.moveBackward(); if (t === "left") this.player.strafeLeft(); if (t === "right") this.player.strafeRight();
                this.level.onPlayerMove(this.player) },
            onPlayerTurn: function(t) { if (!this.player.alive) return; if (t === "left") this.player.turnLeft(); if (t === "right") this.player.turnRight();
                this.level.onPlayerTurn(this.player);
                this.trigger("playerTurn") },
            onPlayerUseWeapon: function(t) { if (!this.player.alive) return; var e = this.player.weapons[t]; if (e) { if (this.player.usingWeapon) { return } if (t === "bomb" && this.player.ammo.bombs === 0 && !this.player.activeBomb) { return } e.use() } },
            onPlayerUsedWeapon: function(t) { this.trigger("useWeapon", t.type); switch (t.type) {
                    case "sword":
                        m.playRandomSword(); if (t.name === "powersword") { this.swordTrail.animate() } break } },
            onSpawn: function(t) { this.level.addEntity(t);
                this.handleEntityEvents(t) },
            onPlayerHurt: function() { this.hurtEffect.trigger() },
            onPlayerDeath: function() { h.delay(1e3, function() { this.player.resetAmmo();
                    this.trigger("playerDeath", this.currentLevel) }, this) },
            onCooldownStart: function(t) { this.trigger("cooldownStart", t) },
            onCooldownEnd: function(t) { this.trigger("cooldownEnd", t) },
            render: function(t) { if (this.camera) { t.render(this.scene, this.camera) } },
            setAmmoCount: function(t, e) { this.trigger("count", e, t) },
            setCoinCount: function(t) { this.trigger("count", "gold", t) },
            setPlayerHealth: function(t) { this.trigger("playerHealth", t) },
            onFirstPotionLoot: function() { this.trigger("firstPotion") },
            onPlayerEquipItem: function(t, e) { this.handleWeaponEvents(e, t);
                this.trigger("equip", t) },
            updatePlayerActions: function() { if (!this.player.isBusy() && this.playerActions.length > 0) { var t = this.playerActions.shift(); if (t.type === "move") this.onPlayerMove(t.value); if (t.type === "turn") this.onPlayerTurn(t.value); if (t.type === "weapon") this.onPlayerUseWeapon(t.value) } },
            updateMobAnimations: function() { this.player.updateMatrixWorld();
                this.player.updateFrustum();
                _.each(this.level.mobs, this.updateMobAnimation, this) },
            updateMobAnimation: function(t) { if (this.player.hasInFront(t) || t.name === "demon" && this.isOnEitherSideOfPlayer(t)) { t.needsAnimationUpdate = true } else { var e = this.player.frustum.containsPoint(t.position);
                    t.needsAnimationUpdate = e && this.isVisibleByPlayer(t) } },
            isOnEitherSideOfPlayer: function() { var t = new THREE.Vector3; var e = new THREE.Vector3(0, 0, 1); var i = new THREE.Vector3; var n = new THREE.Vector2; var s = new THREE.Vector2; var o = new THREE.Vector2; return function(r) { t.x = this.player.orientation.x;
                    t.y = this.player.orientation.y;
                    i.crossVectors(e, t);
                    n.set(i.x, i.y);
                    s.addVectors(this.player.coords, n);
                    n.negate();
                    o.addVectors(this.player.coords, n); return r.coords.equals(s) || r.coords.equals(o) } }(),
            isVisibleByPlayer: function() { var t = new THREE.Vector2; return function(e) { var i = this.player; var n = Math.abs(e.coords.x - i.coords.x); var s = Math.abs(e.coords.y - i.coords.y); var o = e.coords.x < i.coords.x ? -1 : 1; var r = e.coords.y < i.coords.y ? -1 : 1; var a = true; for (var h = 1; h < n; h++) { a = true; for (var l = 0; l <= s; l++) { t.set(i.coords.x + h * o, i.coords.y + l * r); if (!this.level.isWallAt(t)) { a = false; break } } if (a) { return false } } for (var h = 1; h < s; h++) { a = true; for (var l = 0; l <= n; l++) { t.set(i.coords.x + l * o, i.coords.y + h * r); if (!this.level.isWallAt(t)) { a = false; break } } if (a) { return false } } return true } }(),
            updateCustomMaterials: function(t) { THREE.customMaterials.forEach(function e(i) { if (this.level.lights.length > 0) { i.refreshLightUniforms(this.level.lights) } i.update(t) }, this) },
            pruneCustomMaterials: function() { var t = [];
                THREE.customMaterials.forEach(function(e) { if (!e.prune) { t.push(e) } else { e.dispose() } });
                THREE.customMaterials = t },
            setAspectRatio: function(t) { n.prototype.setAspectRatio.call(this, t);
                THREE.customMaterials.forEach(function(t) { if (t.needsAspectRatio) { t.aspectRatio = r.getAspectRatio() } }) },
            update: function(t) { var e = window.performance !== undefined && window.performance.now !== undefined ? window.performance.now() : Date.now();
                this.inputManager.update(t); if (this.level) { this.level.update(t) } if (this.player) { this.updatePlayerActions() } this.updateCustomMaterials(t);
                TWEEN.update(e); if (!this.level.exiting) { h.updateTimers(t) } this.elapsedTime += t.delta }
        });

        function k(t, e) { if (e.moving) { if (!S(t, e.coords) && S(t, e.nextCoords) && e.tweens.move.getProgress() < .65) { return false } if (S(t, e.coords) && !S(t, e.nextCoords) && e.tweens.move.getProgress() > .35) { return false } } return true }
        var S = function() { var t = new THREE.Vector2; return function(e, i) { if (e.coords.equals(i)) { return true } t.subVectors(i, e.coords).normalize(); return e.orientation.equals(t) } }();
        P.mixin(v);
        e.exports = P
    }, { 10: 10, 111: 111, 12: 12, 129: 129, 133: 133, 135: 135, 138: 138, 139: 139, 15: 15, 174: 174, 35: 35, 39: 39, 40: 40, 42: 42, 66: 66, 74: 74, 82: 82, 83: 83, 86: 86, 88: 88, 9: 9, 95: 95 }],
    30: [function(t, e, i) { var n = t("10"); var s = t("129"); var o = {};
        o.getWorldPosition = function() { var t = new THREE.Vector3; return function(e, i) { return t.set((e.x + .5) * n.UNIT, i || n.UNIT / 2, (e.y + .5) * n.UNIT) } }();
        o.areOpposite = function(t, e) { if (!t || !e) return true; return t.dot(e) === -1 };
        o.getOrientationName = function(t) { var e = "";
            _.each(s, function(i, n) { if (t.equals(i)) { e = n } }); return e.toLowerCase() };
        o.tween = function(t, e) { var i = new TWEEN.Tween({ progress: 0 });
            i.to({ progress: 1 }, t).easing(e !== undefined ? e : TWEEN.Easing.Linear.None).start(); return i };
        e.exports = o }, { 10: 10, 129: 129 }],
    31: [function(t, e, i) { var n = t("139"); var s = t("36"); var o = t("34"); var r = function(t) { s.call(this, 5, 5);
            this.id = _.uniqueId("chunk_");
            this.type = t || "0000";
            this.mobs = [];
            this.pots = [];
            this.keys = [];
            this.tables = [] };
        r.inherit(s, { getCoords: function(t) { return new o }, addPot: function(t) { this.pots.push(t);
                this.setAt(t, 2) }, hasPot: function() { return this.pots.length > 0 }, addTable: function(t) { this.tables.push(t);
                this.setAt(t, 2) }, addMob: function(t) { this.mobs.push(t);
                this.setAt(t, 2) }, hasMob: function() { return this.mobs.length > 0 }, addKey: function(t) { this.keys.push(t);
                this.setAt(t, 2) }, hasKey: function() { return this.keys.length > 0 }, getFreeCoords: function() { var t = []; for (var e = 1; e < this.cells.length - 1; e++) { for (var i = 1; i < this.cells[e].length - 1; i++) { if (this.cells[e][i] === 0) { t.push(new o(i, e)) } } } return t }, getRandomFreeCoords: function() { return n.getRandomFromArray(this.getFreeCoords()) }, getRandomMobCoords: function() { var t = this.getFreeCoords(); var e = [];
                t.forEach(function(t) { var i = t.x; var n = t.y; if (this.cells[n - 1][i] !== 0 && this.cells[n][i + 1] !== 0 && this.cells[n + 1][i] !== 0 && this.cells[n][i - 1] !== 0) { return } else { e.push(t) } }, this); return n.getRandomFromArray(e) }, getEndCoords: function() { var t = []; for (var e = 1; e < this.cells.length - 1; e++) { for (var i = 1; i < this.cells[e].length - 1; i++) { var s = 0; if (this.cells[e][i] === 1) { continue } if (this.cells[e][i - 1] === 1) s++; if (this.cells[e][i + 1] === 1) s++; if (this.cells[e + 1][i] === 1) s++; if (this.cells[e - 1][i] === 1) s++; if (s === 3) { t.push(new o(i, e)) } } } return n.getRandomFromArray(t) }, getDoorCoords: function(t, e) { if (t.x < e.x) { return new o(4, 2) } if (t.x > e.x) { return new o(0, 2) } if (t.y < e.y) { return new o(2, 4) } if (t.y > e.y) { return new o(2, 0) } }, getPotCoords: function() { var t = this.getFreeCoords(); var e = [];
                t.forEach(function(t) { var i = 0; var n = 0; var s = t.x; var r = t.y; var a = [this.cells[r][s - 1], this.cells[r][s + 1], this.cells[r + 1][s], this.cells[r - 1][s]];
                    a.forEach(function(t) { if (t !== 0) { i++ } if (t === 1) { n++ } }); if (i === 4) { return } else if (n === 3) { e.push(new o(s, r)) } else if (this.cells[r][s - 1] === 1 && this.cells[r + 1][s] === 1 && this.cells[r - 1][s + 1] === 0 || this.cells[r][s + 1] === 1 && this.cells[r + 1][s] === 1 && this.cells[r - 1][s - 1] === 0 || this.cells[r][s - 1] === 1 && this.cells[r - 1][s] === 1 && this.cells[r + 1][s + 1] === 0 || this.cells[r][s + 1] === 1 && this.cells[r - 1][s] === 1 && this.cells[r + 1][s - 1] === 0) { e.push(new o(s, r)) } }, this); return e }, getKeyCoords: function() { if (this.mobs.length > 0) { return n.getRandomFromArray(this.mobs) } else { return n.getRandomFromArray(this.pots) } }, getUnoccupiedCoords: function() { var t = []; for (var e = 1; e < this.cells.length - 1; e++) { for (var i = 1; i < this.cells[e].length - 1; i++) { if (this.cells[e][i] === 0 || this.cells[e][i] === 2) { t.push(new o(i, e)) } } } return t }, getTorches: function(t) { var e = this.getUnoccupiedCoords(); var i = [];
                e.forEach(function(e) { var n = e.x; var s = e.y; if (this.cells[s][n - 1] === 1 || this.cells[s][n + 1] === 1 || this.cells[s - 1][n] === 1 || this.cells[s + 1][n] === 1) { var r = new o(n, s); var a = true;
                        i.forEach(function(e) { if (e[0].distanceTo(r) < t) { a = false } }); if (a) { var h = [r, this.getTorchOrientation(r)];
                            i.push(h) } } }, this); return i }, getTorchOrientation: function(t) { var e = t.x; var i = t.y; var s = []; if (this.cells[i][e - 1] === 1) s.push("east"); if (this.cells[i][e + 1] === 1) s.push("west"); if (this.cells[i - 1][e] === 1) s.push("south"); if (this.cells[i + 1][e] === 1) s.push("north"); if (s.length === 3) { if (s.indexOf("east") === -1) return "west"; if (s.indexOf("west") === -1) return "east"; if (s.indexOf("north") === -1) return "south"; if (s.indexOf("south") === -1) return "north" } else { return n.getRandomFromArray(s) } }, getAvailableMobCount: function() { var t = this.getUnoccupiedCoords(); return Math.floor(t.length / 4) }, getTables: function() { var t = this.getFreeCoords(); var e = [];
                t.forEach(function(t) { var i = t.x; var n = t.y; if (this.cells[n - 1][i - 1] === 1 && this.cells[n][i - 1] === 1 && this.cells[n + 1][i - 1] === 1 && this.cells[n - 1][i] === 0 && this.cells[n + 1][i] === 0 && this.cells[n - 1][i + 1] === 0 && this.cells[n][i + 1] === 0 && this.cells[n + 1][i + 1] === 0 || this.cells[n - 1][i + 1] === 1 && this.cells[n][i + 1] === 1 && this.cells[n + 1][i + 1] === 1 && this.cells[n - 1][i] === 0 && this.cells[n + 1][i] === 0 && this.cells[n - 1][i - 1] === 0 && this.cells[n][i - 1] === 0 && this.cells[n + 1][i - 1] === 0) { e.push([new o(i, n), "north"]) } if (this.cells[n - 1][i - 1] === 1 && this.cells[n - 1][i] === 1 && this.cells[n - 1][i + 1] === 1 && this.cells[n][i - 1] === 0 && this.cells[n][i] === 0 && this.cells[n][i + 1] === 0 && this.cells[n + 1][i - 1] === 0 && this.cells[n + 1][i] === 0 && this.cells[n + 1][i + 1] === 0 || this.cells[n + 1][i - 1] === 1 && this.cells[n + 1][i] === 1 && this.cells[n + 1][i + 1] === 1 && this.cells[n][i - 1] === 0 && this.cells[n][i] === 0 && this.cells[n][i + 1] === 0 && this.cells[n - 1][i - 1] === 0 && this.cells[n - 1][i] === 0 && this.cells[n - 1][i + 1] === 0) { e.push([new o(i, n), "west"]) } }, this); return e } });
        e.exports = r }, { 139: 139, 34: 34, 36: 36 }],
    32: [function(t, e, i) { var n = t("139"); var s = t("36"); var o = t("38"); var r = t("34"); var a = t("33"); var h = function(t, e) { s.call(this, t, e);
            this.chunkSize = 5;
            this.levelChunkCoords = [] };
        h.inherit(s, { createSolution: function(t) { this.solution = this.getRandomPath(this.getRandomCoords(), t);
                this.buildPath(this.solution, 0) }, addSkulls: function(t) { this.skulls = [];
                this.levelGrid.forEachCoords(function(e) { if (this.levelGrid.getAt(e) === 0) { var i = Math.random(); if (i < t) { this.skulls.push(e) } } }.bind(this)) }, addTorches: function(t) { this.torches = [];
                this.levelChunkCoords.forEach(function(e) { var i = this.getAt(e);
                    i.getTorches(t).forEach(function(t) { var t = [this.toLevelCoords(e, t[0]), t[1]];
                        this.torches.push(t) }, this) }, this);
                this.torches.forEach(function(t, e) { if (t[0].equals(this.exitCoords)) { this.torches.splice(e, 1) } }, this) }, addEnds: function() { var t = this.solution.first(); var e = this.solution.last(); var i = this.getAt(t); var n = this.getAt(e); var s = i.getEndCoords(); var o = n.getEndCoords();
                this.entranceCoords = this.toLevelCoords(t, s);
                this.exitCoords = this.toLevelCoords(e, o);
                i.setAt(s, 2);
                n.setAt(o, 2) }, addTables: function(t) { this.tables = [];
                this.levelChunkCoords.forEach(function(e) { var i = this.getAt(e);
                    i.getTables().forEach(function(n) { var s = Math.random(); if (s < t) { this.tables.push([this.toLevelCoords(e, n[0]), n[1]]);
                            i.addTable(n[0]) } }, this) }, this) }, addPots: function(t) { this.potCoords = [];
                this.levelChunkCoords.forEach(function(e) { var i = this.getAt(e);
                    i.getPotCoords().forEach(function(n) { var s = Math.random(); if (s < t) { this.potCoords.push(this.toLevelCoords(e, n));
                            i.addPot(n) } }, this) }, this) }, addMobs: function(t, e) { var i = 0; var s = [];
                s.push.apply(s, this.solution.slice(1));
                this.forks.forEach(function(t) { s.push.apply(s, t.slice(1)) });
                this.mobs = []; while (this.mobs.length < t && i < 10) { var o = n.getRandomFromArray(s); var r = this.tryAddingMobAt(o, this.getRandomMob(e)); if (r) { this.mobs.push(r) } else { i++ } } if (i === 10) { throw "Not enough mobs" } }, tryAddingMobAt: function(t, e) { var i = this.getAt(t); var n = i.getRandomMobCoords(); var s = this.toLevelCoords(t, n); var o; if (i.mobs.length < i.getAvailableMobCount()) { o = [s, e];
                    i.addMob(n) } else { o = undefined } return o }, getRandomMob: function(t) { var e = Math.random(); for (var i = 0; i < t.length; i++) { var n = t[i]; if (e <= n[1]) { return n[0] } } }, addKeys: function() { this.keys = [];
                this.doors.forEach(function(t) { var e = this.getChunksBeforeDoor(t); var i = e.filter(function(t) { var e = this.getAt(t); return !e.hasKey() && !e.hasDoor && (e.hasMob() || e.hasPot()) }.bind(this)); if (i.length === 0) { throw "Cannot add key" } this.addKeyAt(n.getRandomFromArray(i)) }, this) }, addKeyAt: function(t) { var e = this.getAt(t); var i = e.getKeyCoords();
                this.keys.push(this.toLevelCoords(t, i));
                e.addKey(i) }, getChunksBeforeDoor: function(t) { var e = [];
                e.push.apply(e, this.solution.slice(1, t.index));
                e.forEach(function(t) { for (var i = 0; i < this.forks.length; i++) { if (this.forks[i].first().equals(t)) { e.push.apply(e, this.forks[i].slice(1)) } } }, this); return e }, addJoints: function() { this.joinables = this.getJoinables();
                this.joinables.forEach(function(t) { this.joinChunks(t[0], t[1]);
                    this.joinChunks(t[1], t[0]) }, this) }, addForks: function(t, e) { this.forks = []; for (var i = 0; i < t; i++) { var n = this.getRandomForkableCoords(); if (n) { var s = this.getRandomPath(n, e + 1);
                        this.buildPath(s, 1);
                        this.joinChunks(n, s[1]);
                        this.forks.push(s) } else { throw "cannot fork!" } } }, addDoors: function(t) { var e = 0;
                this.doors = []; while (this.doors.length < t && e < 10) { var i = Math.floor(this.solution.length / 3); var s = n.getRandomInt(i, this.solution.length - 2); if (!this.getAt(this.solution[s]).hasDoor && !this.getAt(this.solution[s - 1]).hasDoor && !this.getAt(this.solution[s + 1]).hasDoor) { this.addDoorAt(s) } e++ } if (e === 10) { throw "Couldn't create enough doors" } }, getJoinables: function() { var t = [];
                this.forks.forEach(function(e) { for (var i = 1; i < e.length; i++) { var n = e[i]; var s = new r(n.x, n.y - 1); var o = new r(n.x + 1, n.y); var a = new r(n.x, n.y + 1); var h = new r(n.x - 1, n.y); if (this.isJoinable(e, n, s, i)) t.push([n, s]); if (this.isJoinable(e, n, o, i)) t.push([n, o]); if (this.isJoinable(e, n, a, i)) t.push([n, a]); if (this.isJoinable(e, n, h, i)) t.push([n, h]) } }, this); return t }, isJoinable: function(t, e, i, n) { if (i === undefined) { return false } if (this.pathContainsCoords(this.solution, i) && !this.pathContainsCoords(t, i) && !this.getAt(i).hasDoor) { var s = this.getSubPath(t[0], i); if (n >= s.length) { if (!this.pathContainsDoor(s)) { return true } } else { return false } } else { return false } }, pathContainsDoor: function(t) { for (var e = 0; e < t.length; e++) { if (this.getAt(t[e]).hasDoor) { return true; break } } return false }, getSubPath: function(t, e) { var i; var n;
                this.solution.forEach(function(s, o) { if (s.equals(t)) { i = o } if (s.equals(e)) { n = o } }); if (n > i) { return this.solution.slice(i, n + 1) } else { return this.solution.slice(n, i + 1) } }, pathContainsCoords: function(t, e) { var i = false;
                t.forEach(function(t) { if (t.equals(e)) { i = true } }); return i }, getRandomForkableCoords: function() { var t = []; for (var e = 1; e < this.solution.length - 1; e++) { var i = this.solution[e]; if (this.isForkableChunkAt(i)) { t.push(i) } } if (t.length === 0) { return undefined } else { return n.getRandomFromArray(t) } }, offsetCoordsByOrientation: function() { var t = { north: { x: 0, y: -1 }, east: { x: 1, y: 0 }, south: { x: 0, y: 1 }, west: { x: -1, y: 0 } }; return function(e, i) { var n = t[i]; return new r(e.x + n.x, e.y + n.y) } }(), isForkableChunkAt: function(t) { var e = this.getAt(this.offsetCoordsByOrientation(t, "north")); var i = this.getAt(this.offsetCoordsByOrientation(t, "east")); var n = this.getAt(this.offsetCoordsByOrientation(t, "south")); var s = this.getAt(this.offsetCoordsByOrientation(t, "west")); if (e && !e.occupied) return true; if (i && !i.occupied) return true; if (n && !n.occupied) return true; if (s && !s.occupied) return true; return false }, buildPath: function(t, e) { this.traversePath(t, function(t, e, i) { var n; if (t.equals(this.solution.first()) || t.equals(this.solution.last())) { n = a.getEndChunkByType(e) } else { n = a.getChunkByType(e) } this.setAt(t, n);
                    this.levelChunkCoords.push(t);
                    n.occupied = true }, this, e) }, getRandomPath: function(t, e) { var i = false; var n = 0; while (!i && n < 10) { var s = new o;
                    s.push(t);
                    this.cells[t.y][t.x].occupied = true; for (var r = 1; r < e; r++) { var a = this.getRandomFreeCoordsAround(s[r - 1]); if (!a) { this.clearPath(s); break } s.push(a);
                        this.cells[a.y][a.x].occupied = true } if (s.length === e) { i = true } else { n++ } } if (n === 10) { throw "Couldn't create path" } return s }, getFreeCoordsAround: function(t) { var e = []; var i = [{ x: 0, y: -1 }, { x: 1, y: 0 }, { x: 0, y: 1 }, { x: -1, y: 0 }]; for (var n = 0; n < 4; n++) { var s = new r(t.x + i[n].x, t.y + i[n].y); if (s.x >= 0 && s.x < this.width && s.y >= 0 && s.y < this.height && !this.getAt(s).occupied) { e.push(s) } } if (e.length === 0) { return undefined } else { return e } }, getRandomFreeCoordsAround: function(t) { var e = this.getFreeCoordsAround(t); if (e) { return n.getRandomFromArray(e) } else { return undefined } }, traversePath: function(t, e, i, n) { for (var s = n; s < t.length; s++) { var o = t[s]; var r = s > 0 ? t[s - 1] : undefined; var a = s < t.length - 1 ? t[s + 1] : undefined; var h = a && a.y < o.y || r && r.y < o.y ? "1" : "0"; var l = a && a.y > o.y || r && r.y > o.y ? "1" : "0"; var u = a && a.x > o.x || r && r.x > o.x ? "1" : "0"; var c = a && a.x < o.x || r && r.x < o.x ? "1" : "0"; var d = h + u + l + c;
                    e.call(i, o, d, s) } }, getJointChunkType: function(t, e, i) { var s = i; var o = t.type; var r; if (s.y < e.y) r = "1000"; if (s.x > e.x) r = "0100"; if (s.y > e.y) r = "0010"; if (s.x < e.x) r = "0001"; return n.pad(parseInt(o) + parseInt(r), 4).toString() }, clearPath: function(t) { for (var e = 1; e < t.length; e++) { this.getAt(t[e]).occupied = false } }, toLevelCoords: function(t, e) { return new r(t.x * this.chunkSize + e.x, t.y * this.chunkSize + e.y) }, getChunkFromLevelCoords: function() { var t = { x: 0, y: 0 }; return function(e) { t.x = Math.floor(e.x / this.chunkSize);
                    t.y = Math.floor(e.y / this.chunkSize); return this.getAt(t) } }(), toLevelGrid: function() { var t = new s(this.width * 5, this.height * 5);
                this.forEachCoords(function(e) { var i = this.getAt(e);
                    i.forEachCoords(function(n) { var s = e.x * 5 + n.x; var o = e.y * 5 + n.y;
                        t.setAt(new r(s, o), i.getAt(n)) }) }, this); return t }, createLevelGrid: function() { this.levelGrid = this.toLevelGrid() }, toWallGrid: function() { this.levelGrid.forEachCoords(function(t) { var e = this.levelGrid.getAt(t); if (e !== 0 && e !== 1) { this.levelGrid.setAt(t, 0) } }, this); return this.levelGrid }, joinChunks: function(t, e) { var i = this.getJointChunkType(this.getAt(t), t, e); var n; if (this.solution.first().equals(t) || this.solution.last().equals(t)) { n = a.getEndChunkByType(i) } else if (this.getAt(t).hasDoor) { n = a.getDoorChunkByType(i);
                    n.hasDoor = true } else { n = a.getChunkByType(i) } this.setAt(t, n);
                n.occupied = true }, addDoorAt: function(t) { var e = this.solution[t]; var i = this.getAt(e); var n = a.getDoorChunkByType(i.type);
                this.setAt(e, n);
                n.hasDoor = true;
                n.occupied = true; var s = this.toLevelCoords(e, n.getDoorCoords(e, this.solution[t + 1]));
                this.doors.push({ coords: s, index: t }) }, getConnectedChunksAt: function(t) { var e = this.getAt(t); var i = e.type; var n = ["north", "east", "south", "west"]; var s = {};
                _.each(n, function(e, n) { s[e] = []; if (parseInt(i[n]) === 1) { var o = this.offsetCoordsByOrientation(t, e); var r = this.getAt(o);
                        s[e].push(r); if (parseInt(r.type[n]) === 1) { s[e].push(this.getAt(this.offsetCoordsByOrientation(o, e))) } } }, this); return s } });
        e.exports = h }, { 139: 139, 33: 33, 34: 34, 36: 36, 38: 38 }],
    33: [function(t, e, i) {
        var n = '{"chunks":{"0001":[1,1,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1],"0002":[1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1],"0003":[1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,1,1],"0004":[1,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,1,1,1,1,1],"0005":[1,1,0,1,1,1,1,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1],"0006":[1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,0,1,1],"0007":[1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1],"0008":[1,1,0,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],"0009":[1,1,0,1,1,1,1,0,1,1,1,1,0,0,0,1,1,0,1,1,1,1,0,1,1],"0010":[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1],"0011":[1,1,0,1,1,1,1,0,1,1,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1],"0012":[1,1,0,1,1,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1],"0013":[1,1,0,1,1,1,1,0,1,1,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1],"0014":[1,1,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,1,1],"0015":[1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1],"0016":[1,1,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,1,0,1,1],"0017":[1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1],"0018":[1,1,0,1,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,1,1],"0019":[1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1],"0020":[1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,1,1],"0021":[1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1],"0022":[1,1,1,1,1,0,0,0,1,1,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1],"0023":[1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1],"0024":[1,0,0,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1],"0025":[1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,1,1,1,0,0,1],"0026":[1,1,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,1,1],"0027":[1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1],"0028":[1,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1],"0029":[1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1],"0030":[1,1,0,1,1,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,1,1,0,1,1],"0031":[1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1],"0032":[1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1],"0033":[1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1],"0034":[1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],"0035":[1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1],"0036":[1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],"0037":[1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1],"0038":[1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1],"0039":[1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,1],"0040":[1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1],"0041":[1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,0,1,1],"0042":[1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,0,1,1],"0043":[1,1,0,1,1,1,0,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,1],"0044":[1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],"0045":[1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1,1],"0046":[1,1,0,1,1,1,0,0,0,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1],"0047":[0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0],"0048":[1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1],"0049":[1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],"0050":[1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1],"0051":[1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1],"0052":[1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1],"0053":[1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1],"0054":[1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1],"0055":[1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,1,1,1,1],"0056":[1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1],"0057":[1,1,1,1,1,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1],"0058":[1,1,0,1,1,1,1,0,1,1,1,0,0,0,1,1,0,1,0,1,1,1,1,1,1],"0059":[1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1],"0060":[1,1,1,1,1,1,0,1,0,1,1,0,0,0,1,1,1,0,1,1,1,1,0,1,1],"0061":[1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1],"0062":[0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0],"0063":[1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1],"0064":[1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,1,0,1,1],"0065":[1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1],"0066":[1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1],"0067":[1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1],"0068":[1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,1,1,1,1],"0069":[1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,1,0,0,0,1,1,0,0,0,1],"0070":[1,1,1,1,1,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1],"0071":[1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1,1,0,1,1,1,1,1,1,1],"0072":[1,1,1,1,1,1,1,0,1,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1],"0073":[1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1],"0074":[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1]},"segments":{"types":{"1000":["0001","0054","0058"],"1001":["0008","0023","0024","0040","0067"],"1010":["0014","0016","0018","0031","0033","0035","0048","0050","0052","0053","0073"],"1011":["0011","0028","0043","0045","0066"],"1100":["0005","0020","0037","0068","0071"],"1101":["0012","0029","0044","0063"],"1110":["0009","0026","0041","0046","0064"],"1111":["0013","0030","0047","0062"],"0100":["0002","0055","0059"],"0010":["0003","0056","0060"],"0001":["0004","0057","0061"],"0110":["0006","0021","0025","0038","0069"],"0011":["0007","0022","0039","0070","0072"],"0111":["0010","0027","0042","0065"],"0101":["0015","0017","0019","0032","0034","0036","0049","0051","0074"]}},"ends":{"types":{"1000":["0054","0058"],"1001":["0023","0024","0067"],"1010":["0016","0018"],"1011":["0066"],"1100":["0020","0068","0071"],"1101":["0063"],"1110":["0064"],"1111":["0062"],"0101":["0017","0019"],"0110":["0021","0025","0069"],"0011":["0022","0070","0072"],"0100":["0055","0059"],"0010":["0056","0060"],"0001":["0057","0061"],"0111":["0065"]}},"doors":{"types":{"1000":["0001","0058"],"1001":["0008"],"1010":["0014","0016","0018","0073"],"1011":["0011"],"1100":["0005"],"1101":["0012"],"1110":["0009"],"1111":["0013","0030"],"0100":["0002","0059"],"0010":["0003","0060"],"0001":["0004","0061"],"0110":["0006"],"0011":["0007"],"0111":["0010"],"0101":["0015","0017","0019","0074"]}}}\n';
        var s = t("31");
        var o = JSON.parse(n);
        var r = { getEndChunkByType: function(t) { if (o.ends.types[t] === undefined) { throw "Cannot find end chunk of type: " + t } var e = o.ends.types[t]; var i = e[a(0, e.length)]; var n = o.chunks[i]; var r = new s(t).setFromArray(n); return r }, getDoorChunkByType: function(t) { if (o.doors.types[t] === undefined) { throw "Cannot find door chunk of type: " + t } var e = o.doors.types[t]; var i = e[a(0, e.length)]; var n = o.chunks[i]; var r = new s(t).setFromArray(n); return r }, getChunkByType: function(t) { if (o.segments.types[t] === undefined) { throw "Cannot find chunk of type: " + t } var e = o.segments.types[t]; var i = e[a(0, e.length)]; var n = o.chunks[i]; var r = new s(t).setFromArray(n); return r }, createFullChunk: function() { var t = new s;
                t.forEachCoords(function(e) { t.setAt(e, 1) }); return t } };

        function a(t, e) {
            return Math.floor(Math.random() * (e - t)) + t
        }
        e.exports = r
    }, { 31: 31 }],
    34: [function(t, e, i) { var n = function() { THREE.Vector2.apply(this, arguments) };
        n.inherit(THREE.Vector2, {});
        e.exports = n }, {}],
    35: [function(t, e, i) { var n = t("139"); var s = t("10"); var o = t("32"); var r = t("37"); var a = t("33"); var h = function() {};
        h.inherit(Object, { generate: function(t, e) { t = _.extend({ width: 6, height: 6, solutionLength: 5, forkLength: 3, forkCount: 2, doorCount: 1, mobCount: 4, mobTypes: [
                        ["orc", .3],
                        ["bat", .2],
                        ["mummy", .2],
                        ["zombie", .2],
                        ["dragon", .1]
                    ], torchDistance: 2.5, potProbability: .75, tableProbability: .15, skullProbability: .02 }, t); if (e === undefined) { e = 1e3;
                    t.mobTypes.forEach(function(e, i) { if (i > 0) { e[1] += t.mobTypes[i - 1][1] } }) } try { var i = l(t) } catch (n) { if (s.VERBOSE) console.log(n); if (e > 0) { i = this.generate(t, --e) } else { if (s.VERBOSE) console.log("Too many retries. Aborting...");
                        i = null } } return i } });

        function l(t) { var e = new o(t.width, t.height);
            e.forEachCoords(function(t) { e.setAt(t, a.createFullChunk()) });
            e.createSolution(t.solutionLength);
            e.addDoors(t.doorCount);
            e.addForks(t.forkCount, t.forkLength);
            e.addJoints();
            e.addEnds();
            e.addTables(t.tableProbability);
            e.addPots(t.potProbability);
            e.createLevelGrid();
            e.addSkulls(t.skullProbability);
            e.addMobs(t.mobCount, t.mobTypes);
            e.addKeys();
            e.addTorches(t.torchDistance); var i = new r(e);
            i.setPosition("entrance", e.entranceCoords);
            i.setPosition("exit", e.exitCoords);
            i.setDoorCoords(e.doors);
            i.setTables(e.tables);
            i.setPotCoords(e.potCoords);
            i.setKeyCoords(e.keys);
            i.setMobs(e.mobs);
            i.setTorches(e.torches);
            i.setSkulls(e.skulls);
            i.findConnectedChunks(); return i } e.exports = h }, { 10: 10, 139: 139, 32: 32, 33: 33, 37: 37 }],
    36: [function(t, e, i) { var n = t("34"); var s = t("139"); var o = function(t, e) { this.cells = [];
            this.width = t;
            this.height = e; for (var i = 0; i < this.height; i++) { this.cells[i] = []; for (var n = 0; n < this.width; n++) { this.cells[i][n] = 0 } } };
        o.inherit(Object, { setFromArray: function(t) { for (var e = 0; e < this.height; e++) { for (var i = 0; i < this.width; i++) { var s = e * this.width + i;
                        this.setAt(new n(i, e), t[s]) } } return this }, getAt: function(t) { if (t.x < 0 || t.y < 0 || t.x > this.width - 1 || t.y > this.height - 1) { return undefined } return this.cells[t.y][t.x] }, setAt: function(t, e) { this.cells[t.y][t.x] = e; return this }, equals: function(t) {}, debug: function() { var t; for (var e = 0; e < this.height; e++) { t = ""; for (var i = 0; i < this.width; i++) { t += this.cells[e][i] + " " } console.log(t + "\n") } }, getRandomCoords: function() { var t = s.getRandomInt(0, this.width); var e = s.getRandomInt(0, this.height); return new n(t, e) }, getRandomCoordsAround: function(t) {}, forEachCoords: function(t, e) { for (var i = 0; i < this.height; i++) { for (var s = 0; s < this.width; s++) { t.call(e, new n(s, i)) } } }, length: function() { return this.width * this.height } });
        e.exports = o }, { 139: 139, 34: 34 }],
    37: [function(t, e, i) { var n = t("36"); var s = function(t) { var e = t.width * 5; var i = t.height * 5;
            this.chunkGrid = t;
            this.walls = t.toWallGrid();
            this.mobs = new n(e, i);
            this.props = new n(e, i);
            this.items = new n(e, i);
            this.positions = {} };
        s.inherit(Object, { addMob: function(t, e) {}, addProp: function(t, e) {}, addItem: function(t, e) {}, setDoorCoords: function(t) { this.doors = t.map(function(t) { return t.coords }) }, setKeyCoords: function(t) { this.keys = t }, setMobs: function(t) { this.mobs = t }, setPotCoords: function(t) { this.pots = t }, setTorches: function(t) { this.torches = t }, setTables: function(t) { this.tables = t }, setSkulls: function(t) { this.skulls = t }, setPosition: function(t, e) { this.positions[t] = e }, findConnectedChunks: function() { var t = this.chunkGrid.levelChunkCoords.forEach(function(t) { var e = this.chunkGrid.getAt(t);
                    e.connectedChunks = this.chunkGrid.getConnectedChunksAt(t) }, this) } });
        e.exports = s }, { 36: 36 }],
    38: [function(t, e, i) { var n = function(t) { Array.call(this, t) };
        n.inherit(Array, { push: function(t) { if (!(t instanceof THREE.Vector2)) { console.error("coords must be an instance of THREE.Vector2"); return } Array.prototype.push.call(this, t) }, first: function() { return this[0] }, last: function() { return this[this.length - 1] } });
        e.exports = n }, {}],
    39: [function(t, e, i) { var n = t("10"); var s = t("66"); var o = .25; var r = function() { THREE.EventDispatcher.call(this);
            this.windowWidth = $(window).width();
            this.lastTime = 0;
            this.keyboardTypes = { qwerty: { up: 87, strafeRight: 68, down: 83, strafeLeft: 65, right: 69, left: 81, range: 70, melee: 32, bomb: 88, potion: 82, wand: 67 }, azerty: { up: 90, strafeRight: 68, down: 83, strafeLeft: 81, right: 69, left: 65, range: 70, melee: 32, bomb: 88, potion: 82, wand: 67 }, qwertz: { up: 87, strafeRight: 68, down: 83, strafeLeft: 65, right: 69, left: 81, range: 70, melee: 32, bomb: 88, potion: 82, wand: 67 }, qzerty: { up: 90, strafeRight: 68, down: 83, strafeLeft: 65, right: 69, left: 81, range: 70, melee: 32, bomb: 88, potion: 82, wand: 67 } }; if (!n.DEBUG) { $(window).on("touchmove", function(t) { t.preventDefault() }) } $(window).on("keydown", function(t) { if (t.keyCode !== 27 && t.keyCode !== 9) { this.onKeyDown(t.keyCode) } }.bind(this));
            $(window).on("keyup", function(t) { this.currentKey = null }.bind(this));
            $(window).on("resize", this.onWindowResize.bind(this)) };
        r.inherit(THREE.EventDispatcher, { up: function() { this.trigger("move", "forward") }, down: function() { this.trigger("move", "backward") }, left: function() { this.trigger("move", "left") }, right: function() { this.trigger("move", "right") }, turnLeft: function() { this.trigger("turn", "left") }, turnRight: function() { this.trigger("turn", "right") }, onWindowResize: function() { this.windowWidth = $(window).width() }, onKeyDown: function(t) { this.currentKey = t;
                this.lastTime = 0 }, onKeyUp: function(t) { if (t === 37) { this.turnLeft() } if (t === 38) { this.up() } if (t === 39) { this.turnRight() } if (t === 40) { this.down() } if (t === this.keyboard.left) { this.turnLeft() } if (t === this.keyboard.up) { this.up() } if (t === this.keyboard.right) { this.turnRight() } if (t === this.keyboard.strafeLeft) { this.left() } if (t === this.keyboard.down) { this.down() } if (t === this.keyboard.strafeRight) { this.right() } if (t === this.keyboard.melee) { this.useWeapon("sword") } if (t === this.keyboard.range) { this.useWeapon("bow") } if (t === this.keyboard.bomb) { this.useWeapon("bomb") } if (t === this.keyboard.wand) { this.useWeapon("wand") } if (t === this.keyboard.potion) { this.trigger("potion") } }, useWeapon: function(t) { this.trigger("weapon", t) }, update: function(t) { if (this.currentKey && t.elapsed - this.lastTime > o) { this.onKeyUp(this.currentKey);
                    this.lastTime = t.elapsed } }, toggleMenu: function() { this.trigger("toggleMenu") }, setKeyboardType: function(t) { this.keyboard = this.keyboardTypes[t];
                this.keyboardType = t } });
        r.mixin(s);
        e.exports = r }, { 10: 10, 66: 66 }],
    40: [function(t, e, i) { var n = t("10"); var s = t("129"); var o = t("139"); var r = t("133"); var a = t("97"); var h = t("27"); var l = t("51"); var u = t("56"); var c = t("131"); var d = new c(n.UNIT, n.UNIT, 1, 1); var f = new u({ color: 16777215, aoFactor: .5, emissive: 11184810 }); var p = f.clone(); var v = f.clone(); var g; var m; var y = document.createElement("canvas"); var w = document.createElement("canvas"); var E = new THREE.Texture; var b = new THREE.Texture; var T = function(t) { var e = r.getTexture("stone-wall.png"); var i = r.getTexture("ao-wall.png");
            f.map = e;
            f.aoMap = i;
            g = r.getTexture("floor.png");
            g.wrapS = g.wrapT = THREE.RepeatWrapping;
            m = r.getTexture("stone-wall.png").clone();
            m.wrapS = m.wrapT = THREE.RepeatWrapping;
            m.needsUpdate = true;
            v.side = THREE.DoubleSide };
        T.inherit(Object, { build: function(t) { var e = new a({ width: t.walls.width, height: t.walls.height });
                A(e, t.walls);
                x(e, t.positions);
                C(e, t.pots);
                P(e, t.torches);
                k(e, t.tables);
                R(e, t.doors);
                S(e, t.skulls);
                j(e, t.mobs);
                L(e, t.keys);
                H(e, t.walls);
                N(e, t.skulls, t.tables);
                e.chunkGrid = t.chunkGrid;
                f.needsUpdate = true;
                p.needsUpdate = true;
                v.needsUpdate = true; return e } });

        function x(t, e) { for (var i in e) { var n = e[i];
                t.positions[i] = n; if (i === "exit") { t.addExitDoor(n) } } }

        function C(t, e) { e.forEach(function(e) { t.addJar(e) }) }

        function P(t, e) { e.forEach(function(e) { t.addTorch(e[0], e[1].toLowerCase()) }) }

        function k(t, e) { e.forEach(function(e) { t.addTable(e[0], e[1].toLowerCase()) }) }

        function S(t, e) { e.forEach(function(e) { t.addProp("skulls", e) }) }

        function R(t, e) { e.forEach(function(e) { var i = h.create("door");
                t.addDoor(i, e);
                e.y -= 1; if (t.grid.at(e) === 1) { i.rotation.y = -Math.PI / 2 } i.on("unlock", function(e) { t.remove(e) }.bind(t)) }) }

        function A(t, e) { var i = n.UNIT * t.width; var s = n.UNIT * t.height; if (n.DEBUG) { f.side = THREE.DoubleSide } g.repeat.set(i / 2, s / 2);
            p.map = g; var o = M(e, i, s); var r = new THREE.Mesh((new THREE.BufferGeometry).fromGeometry(o), p);
            r.name = "ground";
            t.add(r);
            t.ground = r;
            m.repeat.set(i, s);
            v.map = m; var a = r.clone();
            a.name = "ceiling";
            a.material = v;
            a.position.y = n.UNIT;
            t.add(a);
            t.ceiling = a; var h = new THREE.Object3D; var l = new THREE.Vector2(y, c); var u = [new THREE.Vector2, new THREE.Vector2, new THREE.Vector2, new THREE.Vector2]; for (var c = 0; c < e.height; c++) { for (var y = 0; y < e.width; y++) { l.set(y, c); var w = e.getAt(l) === 1; if (w) { t.grid.set(l) } else { u[0].set(y, c - 1);
                        u[1].set(y + 1, c);
                        u[2].set(y, c + 1);
                        u[3].set(y - 1, c); for (var E = 0; E < 4; E++) { var b = u[E]; var w = e.getAt(b) === 1; if (w) { var T = new THREE.Mesh(d, f);
                                T.position.set(l.x * n.UNIT, 0, l.y * n.UNIT); if (E === 0) { T.position.x += n.UNIT / 2 } if (E === 1) { T.rotation.y = -Math.PI / 2;
                                    T.position.x += n.UNIT;
                                    T.position.z += n.UNIT / 2 } if (E === 2) { T.rotation.y = Math.PI;
                                    T.position.z += n.UNIT;
                                    T.position.x += n.UNIT / 2 } if (E === 3) { T.rotation.y = Math.PI / 2;
                                    T.position.z += n.UNIT / 2 } T.updateMatrixWorld();
                                h.add(T) } } } } } var _ = new THREE.Geometry; for (var E = 0; E < h.children.length; E++) { var T = h.children[E];
                _.merge(T.geometry, T.matrix) } var x = new THREE.Mesh((new THREE.BufferGeometry).fromGeometry(_), f);
            x.name = "walls";
            x.position.y = n.UNIT / 2;
            t.add(x);
            t.walls = x;
            t.walls.renderOrder = 1;
            t.ceiling.renderOrder = 10;
            t.ground.renderOrder = 10;
            t.ceiling.material.depthWrite = false }

        function M(t, e, i) { var s = new THREE.Object3D; var o = new c(1, 1, 1, 1); var r = new THREE.MeshBasicMaterial; var a = 1 / e; var h = new THREE.Vector2; for (var l = 0; l < t.height; l++) { for (var u = 0; u < t.width; u++) { h.set(u, l); var d = t.getAt(h) === 1; if (!d) { var f = new THREE.Mesh(o.clone(), r); var p = u * a; var v = 1 - a * l;
                        f.geometry.faceVertexUvs[0][0][0].set(p, v);
                        f.geometry.faceVertexUvs[0][0][1].set(p, v - a);
                        f.geometry.faceVertexUvs[0][0][2].set(p + a, v);
                        f.geometry.faceVertexUvs[0][1][0].set(p, v - a);
                        f.geometry.faceVertexUvs[0][1][1].set(p + a, v - a);
                        f.geometry.faceVertexUvs[0][1][2].set(p + a, v);
                        f.geometry.uvsNeedUpdate = true;
                        f.position.set((h.x + .5) * n.UNIT, 0, (h.y + .5) * n.UNIT);
                        f.rotation.x = -Math.PI / 2;
                        f.updateMatrixWorld();
                        s.add(f) } } } var g = new THREE.Geometry; for (var m = 0; m < s.children.length; m++) { var f = s.children[m];
                g.merge(f.geometry, f.matrix) } return g }

        function j(t, e) { e.forEach(function(e, i) { var n = e[0]; var s = e[1]; var o = h.create(s, { name: s });
                t.addEntity(o, n);
                o.setOrientation(I()) }) }

        function I() { var t = o.getRandomFromArray(_.keys(s)); return s[t] }

        function L(t, e) { e.forEach(function(e) { t.grid.at(e).hasKey = true }, this) }

        function H(t, e) { var i = D(y, 1024, 1024, function(i) { var n = 1024 / t.width;
                i.fillStyle = "#ffffff";
                i.fillRect(0, 0, 1024, 1024);
                i.fillStyle = "#ff0000"; var s = new THREE.Vector2; var o = new THREE.Vector2; var r = new THREE.Vector2; var a = new THREE.Vector2; var h = new THREE.Vector2; for (var l = 0; l < e.height; l++) { for (var u = 0; u < e.width; u++) { s.set(u, l);
                        o.set(u - 1, l);
                        r.set(u, l - 1);
                        a.set(u + 1, l);
                        h.set(u, l + 1); if (e.getAt(s) !== 1) { if (e.getAt(o) === 1) { var c = i.createLinearGradient(u * n, l * n, u * n + n / 3, l * n);
                                c.addColorStop(0, "black");
                                c.addColorStop(1, "transparent");
                                i.fillStyle = c;
                                i.fillRect(u * n, l * n, n, n) } if (e.getAt(r) === 1) { var c = i.createLinearGradient(u * n, l * n, u * n, l * n + n / 3);
                                c.addColorStop(0, "black");
                                c.addColorStop(1, "transparent");
                                i.fillStyle = c;
                                i.fillRect(u * n, l * n, n, n) } if (e.getAt(a) === 1) { var c = i.createLinearGradient((u + .66) * n, l * n, (u + 1) * n, l * n);
                                c.addColorStop(0, "transparent");
                                c.addColorStop(1, "black");
                                i.fillStyle = c;
                                i.fillRect(u * n, l * n, n, n) } if (e.getAt(h) === 1) { var c = i.createLinearGradient(u * n, (l + .66) * n, u * n, (l + 1) * n);
                                c.addColorStop(0, "transparent");
                                c.addColorStop(1, "black");
                                i.fillStyle = c;
                                i.fillRect(u * n, l * n, n, n) } } else { i.save();
                            i.fillStyle = "#000000";
                            i.fillRect(u * n, l * n, n, n);
                            i.restore() } } } });
            E.image = i;
            E.needsUpdate = true;
            p.aoMap = E;
            v.aoMap = E }

        function N(t, e, i) { var n = r.getTexture("skulls-shadow.png").image; var s = r.getTexture("table-shadow.png").image; var o = D(w, 1024, 1024, function(o) { var r = 1024 / t.width;
                o.fillStyle = "#ffffff";
                o.fillRect(0, 0, 1024, 1024);
                e.forEach(function(t) { o.drawImage(n, t.x * r, t.y * r, r, r) });
                i.forEach(function(t) { var e = t[0]; var i = t[1]; if (i === "north") { O(o, s, (e.x + .5) * r, (e.y + .5) * r, r, r, Math.PI / 2) } else { o.drawImage(s, e.x * r, e.y * r, r, r) } }) });
            b.image = o;
            b.needsUpdate = true;
            p.lightMap = b }

        function D(t, e, i, n) { t.width = e;
            t.height = i;
            n(t.getContext("2d")); return t }

        function O(t, e, i, n, s, o, r) { t.save();
            t.translate(i, n);
            t.rotate(r);
            t.drawImage(e, -(s / 2), -(o / 2), s, o);
            t.restore() } e.exports = T }, { 10: 10, 129: 129, 131: 131, 133: 133, 139: 139, 27: 27, 51: 51, 56: 56, 97: 97 }],
    41: [function(t, e, i) { var n = t("130"); var s = t("10"); var o = function(t, e) { this.width = t;
            this.height = e;
            this.grid = [];
            this.pathfinder = new n(t, e);
            this.reset() };
        o.inherit(Object, { reset: function() { for (var t = 0; t < this.height; t++) { this.grid[t] = []; for (var e = 0; e < this.width; e++) { this.grid[t][e] = 0 } } }, has: function(t) { if (t && t.y >= 0 && t.y < this.grid.length && t.x >= 0 && t.x < this.grid[t.y].length) { return true } return false }, at: function(t) { if (this.has(t)) { return this.grid[t.y][t.x] } else { return null } }, set: function(t, e) { this.grid[t.y][t.x] = e || 1 }, getBlankGrid: function() { var t = new THREE.Vector2; var e = []; return function() { for (var i = 0; i < this.height; i++) { e[i] = []; for (var n = 0; n < this.width; n++) { t.set(n, i); var s = this.at(t); if (s) { if (_.isNumber(s)) { e[i][n] = s } else if (s.type === "prop" || s.type === "door" || s.type === "jar") { e[i][n] = 1 } else { e[i][n] = 0 } } else { e[i][n] = 0 } } } return e } }(), clear: function(t) { this.grid[t.y][t.x] = 0 }, findPath: function(t, e) { var i = this.pathfinder.findPath(this.grid, t, e); if (i.length === 0) { i = this.pathfinder.findPath(this.getBlankGrid(), t, e) } return i }, getClosestCoords: function() { var t = new THREE.Vector2; return function(e) { return t.set(Math.round((e.x - .5) / s.UNIT), Math.round((e.z - .5) / s.UNIT)) } }() });
        e.exports = o }, { 10: 10, 130: 130 }],
    42: [function(t, e, i) { e.exports = [{ width: 4, height: 4, solutionLength: 4, forkCount: 0, forkLength: 0, doorCount: 0, mobCount: 0, potProbability: 0, mobTypes: [] }, { width: 4, height: 4, solutionLength: 4, forkCount: 0, forkLength: 0, doorCount: 0, mobCount: 1, mobTypes: [
                ["skeleton", 1],
                ["bat", 0],
                ["zombie", 0],
                ["mummy", 0],
                ["ghost", 0],
                ["orc", 0],
                ["dragon", 0],
                ["demon", 0],
                ["eliteorc", 0],
                ["eliteskeleton", 0],
                ["icedragon", 0],
                ["explosivebat", 0]
            ] }, { width: 6, height: 6, solutionLength: 6, forkCount: 0, forkLength: 0, doorCount: 0, mobCount: 3, mobTypes: [
                ["skeleton", .5],
                ["bat", .5],
                ["zombie", 0],
                ["mummy", 0],
                ["ghost", 0],
                ["orc", 0],
                ["dragon", 0],
                ["demon", 0],
                ["eliteorc", 0],
                ["eliteskeleton", 0],
                ["icedragon", 0],
                ["explosivebat", 0]
            ] }, { width: 6, height: 6, solutionLength: 7, forkCount: 0, forkLength: 0, doorCount: 1, mobCount: 4, mobTypes: [
                ["skeleton", .5],
                ["bat", .35],
                ["zombie", .15],
                ["mummy", 0],
                ["ghost", 0],
                ["orc", 0],
                ["dragon", 0],
                ["demon", 0],
                ["eliteorc", 0],
                ["eliteskeleton", 0],
                ["icedragon", 0],
                ["explosivebat", 0]
            ] }, { width: 6, height: 6, solutionLength: 7, forkCount: 1, forkLength: 4, doorCount: 1, mobCount: 5, mobTypes: [
                ["skeleton", .2],
                ["bat", .2],
                ["zombie", .15],
                ["mummy", .15],
                ["ghost", .1],
                ["orc", .1],
                ["dragon", .1],
                ["demon", 0],
                ["eliteorc", 0],
                ["eliteskeleton", 0],
                ["icedragon", 0],
                ["explosivebat", 0]
            ] }, { width: 6, height: 6, solutionLength: 8, forkCount: 1, forkLength: 4, doorCount: 1, mobCount: 6, mobTypes: [
                ["skeleton", .1],
                ["bat", .15],
                ["zombie", .15],
                ["mummy", .15],
                ["ghost", .15],
                ["orc", .15],
                ["dragon", .15],
                ["demon", 0],
                ["eliteorc", 0],
                ["eliteskeleton", 0],
                ["icedragon", 0],
                ["explosivebat", 0]
            ] }, { width: 6, height: 6, solutionLength: 8, forkCount: 1, forkLength: 5, doorCount: 1, mobCount: 8, mobTypes: [
                ["skeleton", .1],
                ["bat", .1],
                ["zombie", .15],
                ["mummy", .15],
                ["ghost", .15],
                ["orc", .15],
                ["dragon", .15],
                ["demon", .05],
                ["eliteorc", 0],
                ["eliteskeleton", 0],
                ["icedragon", 0],
                ["explosivebat", 0]
            ] }, { width: 6, height: 6, solutionLength: 8, forkCount: 1, forkLength: 5, doorCount: 1, mobCount: 10, mobTypes: [
                ["skeleton", .05],
                ["bat", .05],
                ["zombie", .1],
                ["mummy", .1],
                ["ghost", .15],
                ["orc", .15],
                ["dragon", .15],
                ["demon", .1],
                ["eliteorc", 0],
                ["eliteskeleton", .05],
                ["icedragon", .1],
                ["explosivebat", 0]
            ] }, { width: 8, height: 8, solutionLength: 9, forkCount: 1, forkLength: 5, doorCount: 1, mobCount: 12, mobTypes: [
                ["skeleton", 0],
                ["bat", .05],
                ["zombie", .05],
                ["mummy", .1],
                ["ghost", .1],
                ["orc", .15],
                ["dragon", .15],
                ["demon", .15],
                ["eliteorc", .05],
                ["eliteskeleton", .1],
                ["icedragon", .1],
                ["explosivebat", 0]
            ] }, { width: 8, height: 8, solutionLength: 10, forkCount: 2, forkLength: 4, doorCount: 1, mobCount: 11, mobTypes: [
                ["skeleton", 0],
                ["bat", 0],
                ["zombie", .05],
                ["mummy", .05],
                ["ghost", .1],
                ["orc", .1],
                ["dragon", .15],
                ["demon", .15],
                ["eliteorc", .1],
                ["eliteskeleton", .15],
                ["icedragon", .15],
                ["explosivebat", 0]
            ] }, { width: 8, height: 8, solutionLength: 10, forkCount: 2, forkLength: 4, doorCount: 1, mobCount: 12, mobTypes: [
                ["skeleton", 0],
                ["bat", 0],
                ["zombie", .05],
                ["mummy", .05],
                ["ghost", .05],
                ["orc", .1],
                ["dragon", .15],
                ["demon", .15],
                ["eliteorc", .15],
                ["eliteskeleton", .15],
                ["icedragon", .15],
                ["explosivebat", 0]
            ] }, { width: 8, height: 8, solutionLength: 10, forkCount: 2, forkLength: 4, doorCount: 1, mobCount: 12, mobTypes: [
                ["skeleton", 0],
                ["bat", 0],
                ["zombie", .025],
                ["mummy", .025],
                ["ghost", .05],
                ["orc", .1],
                ["dragon", .16],
                ["demon", .16],
                ["eliteorc", .16],
                ["eliteskeleton", .16],
                ["icedragon", .16],
                ["explosivebat", 0]
            ] }, { width: 10, height: 10, solutionLength: 10, forkCount: 2, forkLength: 4, doorCount: 1, mobCount: 13, mobTypes: [
                ["skeleton", 0],
                ["bat", 0],
                ["zombie", .025],
                ["mummy", .025],
                ["ghost", .05],
                ["orc", .1],
                ["dragon", .16],
                ["demon", .16],
                ["eliteorc", .16],
                ["eliteskeleton", .16],
                ["icedragon", .16],
                ["explosivebat", 0]
            ] }, { width: 10, height: 10, solutionLength: 10, forkCount: 2, forkLength: 4, doorCount: 1, mobCount: 14, mobTypes: [
                ["skeleton", 0],
                ["bat", 0],
                ["zombie", .025],
                ["mummy", .025],
                ["ghost", .05],
                ["orc", .1],
                ["dragon", .16],
                ["demon", .16],
                ["eliteorc", .16],
                ["eliteskeleton", .16],
                ["icedragon", .16],
                ["explosivebat", 0]
            ] }, { width: 10, height: 10, solutionLength: 10, forkCount: 2, forkLength: 4, doorCount: 1, mobCount: 15, mobTypes: [
                ["skeleton", 0],
                ["bat", 0],
                ["zombie", .025],
                ["mummy", .025],
                ["ghost", .05],
                ["orc", .1],
                ["dragon", .16],
                ["demon", .16],
                ["eliteorc", .16],
                ["eliteskeleton", .16],
                ["icedragon", .16],
                ["explosivebat", 0]
            ] }] }, {}],
    43: [function(t, e, i) { var n = function() {
            function t(t, e, i, n, s, o, r, a, h, l, u, c, d) { if (t) { i && !h[s][r] && (c[d++] = { x: r, y: s });
                    n && !h[s][a] && (c[d++] = { x: a, y: s }) } if (e) { i && !h[o][r] && (c[d++] = { x: r, y: o });
                    n && !h[o][a] && (c[d++] = { x: a, y: o }) } return c }

            function e(t, e, i, n, s, o, r, a, h, l, u, c, d) { t = s > -1;
                e = o < l;
                i = r < u;
                n = a > -1; if (i) { t && !h[s][r] && (c[d++] = { x: r, y: s });
                    e && !h[o][r] && (c[d++] = { x: r, y: o }) } if (n) { t && !h[s][a] && (c[d++] = { x: a, y: s });
                    e && !h[o][a] && (c[d++] = { x: a, y: o }) } return c }

            function i(t, e, i, n, s, o, r, a, h, l, u, c, d) { return c }

            function n(t, e, i, n, s, o) { var r = i - 1,
                    a = i + 1,
                    h = e + 1,
                    l = e - 1,
                    u = r > -1 && !n[r][e],
                    c = a < s && !n[a][e],
                    d = h < o && !n[i][h],
                    f = l > -1 && !n[i][l],
                    p = [],
                    v = 0;
                u && (p[v++] = { x: e, y: r });
                d && (p[v++] = { x: h, y: i });
                c && (p[v++] = { x: e, y: a });
                f && (p[v++] = { x: l, y: i }); return t(u, c, d, f, r, a, h, l, n, s, o, p, v) }

            function s(t, e, i, n) { return n(i(t.x - e.x), i(t.y - e.y)) }

            function o(t, e, i, n) { var s = t.x - e.x,
                    o = t.y - e.y; return n(s * s + o * o) }

            function r(t, e, i, n) { return i(t.x - e.x) + i(t.y - e.y) }

            function a(a, h, l, u) { var c = a[0].length,
                    d = a.length,
                    f = c * d,
                    p = Math.abs,
                    v = Math.max,
                    g = {},
                    m = [],
                    y = [{ x: h[0], y: h[1], f: 0, g: 0, v: h[0] + h[1] * c }],
                    w = 1,
                    E, b, T, _, x, C, P, k, S;
                l = { x: l[0], y: l[1], v: l[0] + l[1] * c }; switch (u) {
                    case "Diagonal":
                        T = t;
                    case "DiagonalFree":
                        b = s; break;
                    case "Euclidean":
                        T = t;
                    case "EuclideanFree":
                        v = Math.sqrt;
                        b = o; break;
                    default:
                        b = r;
                        T = i; break } T || (T = e);
                do { C = f;
                    P = 0; for (_ = 0; _ < w; ++_) { if ((u = y[_].f) < C) { C = u;
                            P = _ } } k = y.splice(P, 1)[0]; if (k.v != l.v) {--w;
                        S = n(T, k.x, k.y, a, d, c); for (_ = 0, x = S.length; _ < x; ++_) {
                            (E = S[_]).p = k;
                            E.f = E.g = 0;
                            E.v = E.x + E.y * c; if (!(E.v in g)) { E.f = (E.g = k.g + b(E, k, p, v)) + b(E, l, p, v);
                                y[w++] = E;
                                g[E.v] = 1 } } } else { _ = w = 0;
                        do { m[_++] = [k.x, k.y] } while (k = k.p);
                        m.reverse() } } while (w); return m } return a }();
        e.exports = n }, {}],
    44: [function(t, e, i) {
        window.createjs = window.createjs || {},
            function() { var t = createjs.SoundJS = createjs.SoundJS || {};
                t.version = "0.6.1", t.buildDate = "Thu, 21 May 2015 16:17:37 GMT" }(), window.createjs = window.createjs || {}, createjs.extend = function(t, e) { "use strict";

                function i() { this.constructor = t } return i.prototype = e.prototype, t.prototype = new i }, window.createjs = window.createjs || {}, createjs.promote = function(t, e) { "use strict"; var i = t.prototype,
                    n = Object.getPrototypeOf && Object.getPrototypeOf(i) || i.__proto__; if (n) { i[(e += "_") + "constructor"] = n.constructor; for (var s in n) i.hasOwnProperty(s) && "function" == typeof n[s] && (i[e + s] = n[s]) } return t }, window.createjs = window.createjs || {}, createjs.indexOf = function(t, e) { "use strict"; for (var i = 0, n = t.length; n > i; i++)
                    if (e === t[i]) return i; return -1 }, window.createjs = window.createjs || {},
            function() { "use strict";
                createjs.proxy = function(t, e) { var i = Array.prototype.slice.call(arguments, 2); return function() { return t.apply(e, Array.prototype.slice.call(arguments, 0).concat(i)) } } }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t() { throw "BrowserDetect cannot be instantiated" } var e = t.agent = window.navigator.userAgent;
                t.isWindowPhone = e.indexOf("IEMobile") > -1 || e.indexOf("Windows Phone") > -1, t.isFirefox = e.indexOf("Firefox") > -1, t.isOpera = null != window.opera, t.isChrome = e.indexOf("Chrome") > -1, t.isIOS = (e.indexOf("iPod") > -1 || e.indexOf("iPhone") > -1 || e.indexOf("iPad") > -1) && !t.isWindowPhone, t.isAndroid = e.indexOf("Android") > -1 && !t.isWindowPhone, t.isBlackberry = e.indexOf("Blackberry") > -1, createjs.BrowserDetect = t }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t() { this._listeners = null, this._captureListeners = null } var e = t.prototype;
                t.initialize = function(t) { t.addEventListener = e.addEventListener, t.on = e.on, t.removeEventListener = t.off = e.removeEventListener, t.removeAllEventListeners = e.removeAllEventListeners, t.hasEventListener = e.hasEventListener, t.dispatchEvent = e.dispatchEvent, t._dispatchEvent = e._dispatchEvent, t.willTrigger = e.willTrigger }, e.addEventListener = function(t, e, i) { var n;
                    n = i ? this._captureListeners = this._captureListeners || {} : this._listeners = this._listeners || {}; var s = n[t]; return s && this.removeEventListener(t, e, i), s = n[t], s ? s.push(e) : n[t] = [e], e }, e.on = function(t, e, i, n, s, o) { return e.handleEvent && (i = i || e, e = e.handleEvent), i = i || this, this.addEventListener(t, function(t) { e.call(i, t, s), n && t.remove() }, o) }, e.removeEventListener = function(t, e, i) { var n = i ? this._captureListeners : this._listeners; if (n) { var s = n[t]; if (s)
                            for (var o = 0, r = s.length; r > o; o++)
                                if (s[o] == e) { 1 == r ? delete n[t] : s.splice(o, 1); break } } }, e.off = e.removeEventListener, e.removeAllEventListeners = function(t) { t ? (this._listeners && delete this._listeners[t], this._captureListeners && delete this._captureListeners[t]) : this._listeners = this._captureListeners = null }, e.dispatchEvent = function(t) { if ("string" == typeof t) { var e = this._listeners; if (!e || !e[t]) return !1;
                        t = new createjs.Event(t) } else t.target && t.clone && (t = t.clone()); try { t.target = this } catch (i) {} if (t.bubbles && this.parent) { for (var n = this, s = [n]; n.parent;) s.push(n = n.parent); var o, r = s.length; for (o = r - 1; o >= 0 && !t.propagationStopped; o--) s[o]._dispatchEvent(t, 1 + (0 == o)); for (o = 1; r > o && !t.propagationStopped; o++) s[o]._dispatchEvent(t, 3) } else this._dispatchEvent(t, 2); return t.defaultPrevented }, e.hasEventListener = function(t) { var e = this._listeners,
                        i = this._captureListeners; return !!(e && e[t] || i && i[t]) }, e.willTrigger = function(t) { for (var e = this; e;) { if (e.hasEventListener(t)) return !0;
                        e = e.parent } return !1 }, e.toString = function() { return "[EventDispatcher]" }, e._dispatchEvent = function(t, e) { var i, n = 1 == e ? this._captureListeners : this._listeners; if (t && n) { var s = n[t.type]; if (!s || !(i = s.length)) return; try { t.currentTarget = this } catch (o) {} try { t.eventPhase = e } catch (o) {} t.removed = !1, s = s.slice(); for (var r = 0; i > r && !t.immediatePropagationStopped; r++) { var a = s[r];
                            a.handleEvent ? a.handleEvent(t) : a(t), t.removed && (this.off(t.type, a, 1 == e), t.removed = !1) } } }, createjs.EventDispatcher = t }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t(t, e, i) { this.type = t, this.target = null, this.currentTarget = null, this.eventPhase = 0, this.bubbles = !!e, this.cancelable = !!i, this.timeStamp = (new Date).getTime(), this.defaultPrevented = !1, this.propagationStopped = !1, this.immediatePropagationStopped = !1, this.removed = !1 } var e = t.prototype;
                e.preventDefault = function() { this.defaultPrevented = this.cancelable && !0 }, e.stopPropagation = function() { this.propagationStopped = !0 }, e.stopImmediatePropagation = function() { this.immediatePropagationStopped = this.propagationStopped = !0 }, e.remove = function() { this.removed = !0 }, e.clone = function() { return new t(this.type, this.bubbles, this.cancelable) }, e.set = function(t) { for (var e in t) this[e] = t[e]; return this }, e.toString = function() { return "[Event (type=" + this.type + ")]" }, createjs.Event = t }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t(t, e, i) { this.Event_constructor("error"), this.title = t, this.message = e, this.data = i } var e = createjs.extend(t, createjs.Event);
                e.clone = function() { return new createjs.ErrorEvent(this.title, this.message, this.data) }, createjs.ErrorEvent = createjs.promote(t, "Event") }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t(t, e) { this.Event_constructor("progress"), this.loaded = t, this.total = null == e ? 1 : e, this.progress = 0 == e ? 0 : this.loaded / this.total } var e = createjs.extend(t, createjs.Event);
                e.clone = function() { return new createjs.ProgressEvent(this.loaded, this.total) }, createjs.ProgressEvent = createjs.promote(t, "Event") }(window), window.createjs = window.createjs || {},
            function() { "use strict";

                function t() { this.src = null, this.type = null, this.id = null, this.maintainOrder = !1, this.callback = null, this.data = null, this.method = createjs.LoadItem.GET, this.values = null, this.headers = null, this.withCredentials = !1, this.mimeType = null, this.crossOrigin = null, this.loadTimeout = i.LOAD_TIMEOUT_DEFAULT } var e = t.prototype = {},
                    i = t;
                i.LOAD_TIMEOUT_DEFAULT = 8e3, i.create = function(e) { if ("string" == typeof e) { var n = new t; return n.src = e, n } if (e instanceof i) return e; if (e instanceof Object && e.src) return null == e.loadTimeout && (e.loadTimeout = i.LOAD_TIMEOUT_DEFAULT), e; throw new Error("Type not recognized.") }, e.set = function(t) { for (var e in t) this[e] = t[e]; return this }, createjs.LoadItem = i }(),
            function() { var t = {};
                t.ABSOLUTE_PATT = /^(?:\w+:)?\/{2}/i, t.RELATIVE_PATT = /^[./]*?\//i, t.EXTENSION_PATT = /\/?[^/]+\.(\w{1,5})$/i, t.parseURI = function(e) { var i = { absolute: !1, relative: !1 }; if (null == e) return i; var n = e.indexOf("?");
                    n > -1 && (e = e.substr(0, n)); var s; return t.ABSOLUTE_PATT.test(e) ? i.absolute = !0 : t.RELATIVE_PATT.test(e) && (i.relative = !0), (s = e.match(t.EXTENSION_PATT)) && (i.extension = s[1].toLowerCase()), i }, t.formatQueryString = function(t, e) { if (null == t) throw new Error("You must specify data."); var i = []; for (var n in t) i.push(n + "=" + escape(t[n])); return e && (i = i.concat(e)), i.join("&") }, t.buildPath = function(t, e) { if (null == e) return t; var i = [],
                        n = t.indexOf("?"); if (-1 != n) { var s = t.slice(n + 1);
                        i = i.concat(s.split("&")) } return -1 != n ? t.slice(0, n) + "?" + this._formatQueryString(e, i) : t + "?" + this._formatQueryString(e, i) }, t.isCrossDomain = function(t) { var e = document.createElement("a");
                    e.href = t.src; var i = document.createElement("a");
                    i.href = location.href; var n = "" != e.hostname && (e.port != i.port || e.protocol != i.protocol || e.hostname != i.hostname); return n }, t.isLocal = function(t) { var e = document.createElement("a"); return e.href = t.src, "" == e.hostname && "file:" == e.protocol }, t.isBinary = function(t) { switch (t) {
                        case createjs.AbstractLoader.IMAGE:
                        case createjs.AbstractLoader.BINARY:
                            return !0;
                        default:
                            return !1 } }, t.isImageTag = function(t) { return t instanceof HTMLImageElement }, t.isAudioTag = function(t) { return window.HTMLAudioElement ? t instanceof HTMLAudioElement : !1 }, t.isVideoTag = function(t) { return window.HTMLVideoElement ? t instanceof HTMLVideoElement : !1 }, t.isText = function(t) { switch (t) {
                        case createjs.AbstractLoader.TEXT:
                        case createjs.AbstractLoader.JSON:
                        case createjs.AbstractLoader.MANIFEST:
                        case createjs.AbstractLoader.XML:
                        case createjs.AbstractLoader.CSS:
                        case createjs.AbstractLoader.SVG:
                        case createjs.AbstractLoader.JAVASCRIPT:
                        case createjs.AbstractLoader.SPRITESHEET:
                            return !0;
                        default:
                            return !1 } }, t.getTypeByExtension = function(t) { if (null == t) return createjs.AbstractLoader.TEXT; switch (t.toLowerCase()) {
                        case "jpeg":
                        case "jpg":
                        case "gif":
                        case "png":
                        case "webp":
                        case "bmp":
                            return createjs.AbstractLoader.IMAGE;
                        case "ogg":
                        case "mp3":
                        case "webm":
                            return createjs.AbstractLoader.SOUND;
                        case "mp4":
                        case "webm":
                        case "ts":
                            return createjs.AbstractLoader.VIDEO;
                        case "json":
                            return createjs.AbstractLoader.JSON;
                        case "xml":
                            return createjs.AbstractLoader.XML;
                        case "css":
                            return createjs.AbstractLoader.CSS;
                        case "js":
                            return createjs.AbstractLoader.JAVASCRIPT;
                        case "svg":
                            return createjs.AbstractLoader.SVG;
                        default:
                            return createjs.AbstractLoader.TEXT } }, createjs.RequestUtils = t }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t(t, e, i) { this.EventDispatcher_constructor(), this.loaded = !1, this.canceled = !1, this.progress = 0, this.type = i, this.resultFormatter = null, this._item = t ? createjs.LoadItem.create(t) : null, this._preferXHR = e, this._result = null, this._rawResult = null, this._loadedItems = null, this._tagSrcAttribute = null, this._tag = null } var e = createjs.extend(t, createjs.EventDispatcher),
                    i = t;
                i.POST = "POST", i.GET = "GET", i.BINARY = "binary", i.CSS = "css", i.IMAGE = "image", i.JAVASCRIPT = "javascript", i.JSON = "json", i.JSONP = "jsonp", i.MANIFEST = "manifest", i.SOUND = "sound", i.VIDEO = "video", i.SPRITESHEET = "spritesheet", i.SVG = "svg", i.TEXT = "text", i.XML = "xml", e.getItem = function() { return this._item }, e.getResult = function(t) { return t ? this._rawResult : this._result }, e.getTag = function() { return this._tag }, e.setTag = function(t) { this._tag = t }, e.load = function() { this._createRequest(), this._request.on("complete", this, this), this._request.on("progress", this, this), this._request.on("loadStart", this, this), this._request.on("abort", this, this), this._request.on("timeout", this, this), this._request.on("error", this, this); var t = new createjs.Event("initialize");
                    t.loader = this._request, this.dispatchEvent(t), this._request.load() }, e.cancel = function() { this.canceled = !0, this.destroy() }, e.destroy = function() { this._request && (this._request.removeAllEventListeners(), this._request.destroy()), this._request = null, this._item = null, this._rawResult = null, this._result = null, this._loadItems = null, this.removeAllEventListeners() }, e.getLoadedItems = function() { return this._loadedItems }, e._createRequest = function() { this._request = this._preferXHR ? new createjs.XHRRequest(this._item) : new createjs.TagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute) }, e._createTag = function() { return null }, e._sendLoadStart = function() { this._isCanceled() || this.dispatchEvent("loadstart") }, e._sendProgress = function(t) { if (!this._isCanceled()) { var e = null; "number" == typeof t ? (this.progress = t, e = new createjs.ProgressEvent(this.progress)) : (e = t, this.progress = t.loaded / t.total, e.progress = this.progress, (isNaN(this.progress) || 1 / 0 == this.progress) && (this.progress = 0)), this.hasEventListener("progress") && this.dispatchEvent(e) } }, e._sendComplete = function() { if (!this._isCanceled()) { this.loaded = !0; var t = new createjs.Event("complete");
                        t.rawResult = this._rawResult, null != this._result && (t.result = this._result), this.dispatchEvent(t) } }, e._sendError = function(t) {!this._isCanceled() && this.hasEventListener("error") && (null == t && (t = new createjs.ErrorEvent("PRELOAD_ERROR_EMPTY")), this.dispatchEvent(t)) }, e._isCanceled = function() { return null == window.createjs || this.canceled ? !0 : !1 }, e.resultFormatter = null, e.handleEvent = function(t) { switch (t.type) {
                        case "complete":
                            this._rawResult = t.target._response; var e = this.resultFormatter && this.resultFormatter(this),
                                i = this;
                            e instanceof Function ? e(function(t) { i._result = t, i._sendComplete() }) : (this._result = e || this._rawResult, this._sendComplete()); break;
                        case "progress":
                            this._sendProgress(t); break;
                        case "error":
                            this._sendError(t); break;
                        case "loadstart":
                            this._sendLoadStart(); break;
                        case "abort":
                        case "timeout":
                            this._isCanceled() || this.dispatchEvent(t.type) } }, e.buildPath = function(t, e) { return createjs.RequestUtils.buildPath(t, e) }, e.toString = function() { return "[PreloadJS AbstractLoader]" }, createjs.AbstractLoader = createjs.promote(t, "EventDispatcher") }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t(t, e, i) { this.AbstractLoader_constructor(t, e, i), this.resultFormatter = this._formatResult, this._tagSrcAttribute = "src" } var e = createjs.extend(t, createjs.AbstractLoader);
                e.load = function() { this._tag || (this._tag = this._createTag(this._item.src)), this._tag.preload = "auto", this._tag.load(), this.AbstractLoader_load() }, e._createTag = function() {}, e._createRequest = function() { this._request = this._preferXHR ? new createjs.XHRRequest(this._item) : new createjs.MediaTagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute) }, e._formatResult = function(t) { return this._tag.removeEventListener && this._tag.removeEventListener("canplaythrough", this._loadedHandler), this._tag.onstalled = null, this._preferXHR && (t.getTag().src = t.getResult(!0)), t.getTag() }, createjs.AbstractMediaLoader = createjs.promote(t, "AbstractLoader") }(), window.createjs = window.createjs || {},
            function() {
                "use strict";
                var t = function(t) { this._item = t },
                    e = createjs.extend(t, createjs.EventDispatcher);
                e.load = function() {}, e.destroy = function() {}, e.cancel = function() {}, createjs.AbstractRequest = createjs.promote(t, "EventDispatcher");
            }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t(t, e, i) { this.AbstractRequest_constructor(t), this._tag = e, this._tagSrcAttribute = i, this._loadedHandler = createjs.proxy(this._handleTagComplete, this), this._addedToDOM = !1, this._startTagVisibility = null } var e = createjs.extend(t, createjs.AbstractRequest);
                e.load = function() { this._tag.onload = createjs.proxy(this._handleTagComplete, this), this._tag.onreadystatechange = createjs.proxy(this._handleReadyStateChange, this), this._tag.onerror = createjs.proxy(this._handleError, this); var t = new createjs.Event("initialize");
                    t.loader = this._tag, this.dispatchEvent(t), this._hideTag(), this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout), this._tag[this._tagSrcAttribute] = this._item.src, null == this._tag.parentNode && (window.document.body.appendChild(this._tag), this._addedToDOM = !0) }, e.destroy = function() { this._clean(), this._tag = null, this.AbstractRequest_destroy() }, e._handleReadyStateChange = function() { clearTimeout(this._loadTimeout); var t = this._tag;
                    ("loaded" == t.readyState || "complete" == t.readyState) && this._handleTagComplete() }, e._handleError = function() { this._clean(), this.dispatchEvent("error") }, e._handleTagComplete = function() { this._rawResult = this._tag, this._result = this.resultFormatter && this.resultFormatter(this) || this._rawResult, this._clean(), this._showTag(), this.dispatchEvent("complete") }, e._handleTimeout = function() { this._clean(), this.dispatchEvent(new createjs.Event("timeout")) }, e._clean = function() { this._tag.onload = null, this._tag.onreadystatechange = null, this._tag.onerror = null, this._addedToDOM && null != this._tag.parentNode && this._tag.parentNode.removeChild(this._tag), clearTimeout(this._loadTimeout) }, e._hideTag = function() { this._startTagVisibility = this._tag.style.visibility, this._tag.style.visibility = "hidden" }, e._showTag = function() { this._tag.style.visibility = this._startTagVisibility }, e._handleStalled = function() {}, createjs.TagRequest = createjs.promote(t, "AbstractRequest") }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t(t, e, i) { this.AbstractRequest_constructor(t), this._tag = e, this._tagSrcAttribute = i, this._loadedHandler = createjs.proxy(this._handleTagComplete, this) } var e = createjs.extend(t, createjs.TagRequest);
                e.load = function() { var t = createjs.proxy(this._handleStalled, this);
                    this._stalledCallback = t; var e = createjs.proxy(this._handleProgress, this);
                    this._handleProgress = e, this._tag.addEventListener("stalled", t), this._tag.addEventListener("progress", e), this._tag.addEventListener && this._tag.addEventListener("canplaythrough", this._loadedHandler, !1), this.TagRequest_load() }, e._handleReadyStateChange = function() { clearTimeout(this._loadTimeout); var t = this._tag;
                    ("loaded" == t.readyState || "complete" == t.readyState) && this._handleTagComplete() }, e._handleStalled = function() {}, e._handleProgress = function(t) { if (t && !(t.loaded > 0 && 0 == t.total)) { var e = new createjs.ProgressEvent(t.loaded, t.total);
                        this.dispatchEvent(e) } }, e._clean = function() { this._tag.removeEventListener && this._tag.removeEventListener("canplaythrough", this._loadedHandler), this._tag.removeEventListener("stalled", this._stalledCallback), this._tag.removeEventListener("progress", this._progressCallback), this.TagRequest__clean() }, createjs.MediaTagRequest = createjs.promote(t, "TagRequest") }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t(t) { this.AbstractRequest_constructor(t), this._request = null, this._loadTimeout = null, this._xhrLevel = 1, this._response = null, this._rawResponse = null, this._canceled = !1, this._handleLoadStartProxy = createjs.proxy(this._handleLoadStart, this), this._handleProgressProxy = createjs.proxy(this._handleProgress, this), this._handleAbortProxy = createjs.proxy(this._handleAbort, this), this._handleErrorProxy = createjs.proxy(this._handleError, this), this._handleTimeoutProxy = createjs.proxy(this._handleTimeout, this), this._handleLoadProxy = createjs.proxy(this._handleLoad, this), this._handleReadyStateChangeProxy = createjs.proxy(this._handleReadyStateChange, this), !this._createXHR(t) } var e = createjs.extend(t, createjs.AbstractRequest);
                t.ACTIVEX_VERSIONS = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.5.0", "Msxml2.XMLHTTP.4.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"], e.getResult = function(t) { return t && this._rawResponse ? this._rawResponse : this._response }, e.cancel = function() { this.canceled = !0, this._clean(), this._request.abort() }, e.load = function() { if (null == this._request) return void this._handleError();
                    this._request.addEventListener("loadstart", this._handleLoadStartProxy, !1), this._request.addEventListener("progress", this._handleProgressProxy, !1), this._request.addEventListener("abort", this._handleAbortProxy, !1), this._request.addEventListener("error", this._handleErrorProxy, !1), this._request.addEventListener("timeout", this._handleTimeoutProxy, !1), this._request.addEventListener("load", this._handleLoadProxy, !1), this._request.addEventListener("readystatechange", this._handleReadyStateChangeProxy, !1), 1 == this._xhrLevel && (this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout)); try { this._item.values && this._item.method != createjs.AbstractLoader.GET ? this._item.method == createjs.AbstractLoader.POST && this._request.send(createjs.RequestUtils.formatQueryString(this._item.values)) : this._request.send() } catch (t) { this.dispatchEvent(new createjs.ErrorEvent("XHR_SEND", null, t)) } }, e.setResponseType = function(t) { this._request.responseType = t }, e.getAllResponseHeaders = function() { return this._request.getAllResponseHeaders instanceof Function ? this._request.getAllResponseHeaders() : null }, e.getResponseHeader = function(t) { return this._request.getResponseHeader instanceof Function ? this._request.getResponseHeader(t) : null }, e._handleProgress = function(t) { if (t && !(t.loaded > 0 && 0 == t.total)) { var e = new createjs.ProgressEvent(t.loaded, t.total);
                        this.dispatchEvent(e) } }, e._handleLoadStart = function() { clearTimeout(this._loadTimeout), this.dispatchEvent("loadstart") }, e._handleAbort = function(t) { this._clean(), this.dispatchEvent(new createjs.ErrorEvent("XHR_ABORTED", null, t)) }, e._handleError = function(t) { this._clean(), this.dispatchEvent(new createjs.ErrorEvent(t.message)) }, e._handleReadyStateChange = function() { 4 == this._request.readyState && this._handleLoad() }, e._handleLoad = function() { if (!this.loaded) { this.loaded = !0; var t = this._checkError(); if (t) return void this._handleError(t);
                        this._response = this._getResponse(), this._clean(), this.dispatchEvent(new createjs.Event("complete")) } }, e._handleTimeout = function(t) { this._clean(), this.dispatchEvent(new createjs.ErrorEvent("PRELOAD_TIMEOUT", null, t)) }, e._checkError = function() { var t = parseInt(this._request.status); switch (t) {
                        case 404:
                        case 0:
                            return new Error(t) } return null }, e._getResponse = function() { if (null != this._response) return this._response; if (null != this._request.response) return this._request.response; try { if (null != this._request.responseText) return this._request.responseText } catch (t) {} try { if (null != this._request.responseXML) return this._request.responseXML } catch (t) {} return null }, e._createXHR = function(t) { var e = createjs.RequestUtils.isCrossDomain(t),
                        i = {},
                        n = null; if (window.XMLHttpRequest) n = new XMLHttpRequest, e && void 0 === n.withCredentials && window.XDomainRequest && (n = new XDomainRequest);
                    else { for (var o = 0, r = s.ACTIVEX_VERSIONS.length; r > o; o++) { { s.ACTIVEX_VERSIONS[o] } try { n = new ActiveXObject(axVersions); break } catch (a) {} } if (null == n) return !1 } null == t.mimeType && createjs.RequestUtils.isText(t.type) && (t.mimeType = "text/plain; charset=utf-8"), t.mimeType && n.overrideMimeType && n.overrideMimeType(t.mimeType), this._xhrLevel = "string" == typeof n.responseType ? 2 : 1; var h = null; if (h = t.method == createjs.AbstractLoader.GET ? createjs.RequestUtils.buildPath(t.src, t.values) : t.src, n.open(t.method || createjs.AbstractLoader.GET, h, !0), e && n instanceof XMLHttpRequest && 1 == this._xhrLevel && (i.Origin = location.origin), t.values && t.method == createjs.AbstractLoader.POST && (i["Content-Type"] = "application/x-www-form-urlencoded"), e || i["X-Requested-With"] || (i["X-Requested-With"] = "XMLHttpRequest"), t.headers)
                        for (var l in t.headers) i[l] = t.headers[l]; for (l in i) n.setRequestHeader(l, i[l]); return n instanceof XMLHttpRequest && void 0 !== t.withCredentials && (n.withCredentials = t.withCredentials), this._request = n, !0 }, e._clean = function() { clearTimeout(this._loadTimeout), this._request.removeEventListener("loadstart", this._handleLoadStartProxy), this._request.removeEventListener("progress", this._handleProgressProxy), this._request.removeEventListener("abort", this._handleAbortProxy), this._request.removeEventListener("error", this._handleErrorProxy), this._request.removeEventListener("timeout", this._handleTimeoutProxy), this._request.removeEventListener("load", this._handleLoadProxy), this._request.removeEventListener("readystatechange", this._handleReadyStateChangeProxy) }, e.toString = function() { return "[PreloadJS XHRRequest]" }, createjs.XHRRequest = createjs.promote(t, "AbstractRequest") }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t(t, e) { this.AbstractMediaLoader_constructor(t, e, createjs.AbstractLoader.SOUND), createjs.RequestUtils.isAudioTag(t) ? this._tag = t : createjs.RequestUtils.isAudioTag(t.src) ? this._tag = t : createjs.RequestUtils.isAudioTag(t.tag) && (this._tag = createjs.RequestUtils.isAudioTag(t) ? t : t.src), null != this._tag && (this._preferXHR = !1) } var e = createjs.extend(t, createjs.AbstractMediaLoader),
                    i = t;
                i.canLoadItem = function(t) { return t.type == createjs.AbstractLoader.SOUND }, e._createTag = function(t) { var e = document.createElement("audio"); return e.autoplay = !1, e.preload = "none", e.src = t, e }, createjs.SoundLoader = createjs.promote(t, "AbstractMediaLoader") }(), window.createjs = window.createjs || {},
            function() { "use strict"; var t = function() { this.interrupt = null, this.delay = null, this.offset = null, this.loop = null, this.volume = null, this.pan = null, this.startTime = null, this.duration = null },
                    e = t.prototype = {},
                    i = t;
                i.create = function(t) { if (t instanceof i || t instanceof Object) { var e = new createjs.PlayPropsConfig; return e.set(t), e } throw new Error("Type not recognized.") }, e.set = function(t) { for (var e in t) this[e] = t[e]; return this }, e.toString = function() { return "[PlayPropsConfig]" }, createjs.PlayPropsConfig = i }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t() { throw "Sound cannot be instantiated" }

                function e(t, e) { this.init(t, e) } var i = t;
                i.INTERRUPT_ANY = "any", i.INTERRUPT_EARLY = "early", i.INTERRUPT_LATE = "late", i.INTERRUPT_NONE = "none", i.PLAY_INITED = "playInited", i.PLAY_SUCCEEDED = "playSucceeded", i.PLAY_INTERRUPTED = "playInterrupted", i.PLAY_FINISHED = "playFinished", i.PLAY_FAILED = "playFailed", i.SUPPORTED_EXTENSIONS = ["mp3", "ogg", "opus", "mpeg", "wav", "m4a", "mp4", "aiff", "wma", "mid"], i.EXTENSION_MAP = { m4a: "mp4" }, i.FILE_PATTERN = /^(?:(\w+:)\/{2}(\w+(?:\.\w+)*\/?))?([/.]*?(?:[^?]+)?\/)?((?:[^/?]+)\.(\w+))(?:\?(\S+)?)?$/, i.defaultInterruptBehavior = i.INTERRUPT_NONE, i.alternateExtensions = [], i.activePlugin = null, i._masterVolume = 1, Object.defineProperty(i, "volume", { get: function() { return this._masterVolume }, set: function(t) { if (null == Number(t)) return !1; if (t = Math.max(0, Math.min(1, t)), i._masterVolume = t, !this.activePlugin || !this.activePlugin.setVolume || !this.activePlugin.setVolume(t))
                            for (var e = this._instances, n = 0, s = e.length; s > n; n++) e[n].setMasterVolume(t) } }), i._masterMute = !1, Object.defineProperty(i, "muted", { get: function() { return this._masterMute }, set: function(t) { if (null == t) return !1; if (this._masterMute = t, !this.activePlugin || !this.activePlugin.setMute || !this.activePlugin.setMute(t))
                            for (var e = this._instances, i = 0, n = e.length; n > i; i++) e[i].setMasterMute(t); return !0 } }), Object.defineProperty(i, "capabilities", { get: function() { return null == i.activePlugin ? null : i.activePlugin._capabilities }, set: function() { return !1 } }), i._pluginsRegistered = !1, i._lastID = 0, i._instances = [], i._idHash = {}, i._preloadHash = {}, i._defaultPlayPropsHash = {}, i.addEventListener = null, i.removeEventListener = null, i.removeAllEventListeners = null, i.dispatchEvent = null, i.hasEventListener = null, i._listeners = null, createjs.EventDispatcher.initialize(i), i.getPreloadHandlers = function() { return { callback: createjs.proxy(i.initLoad, i), types: ["sound"], extensions: i.SUPPORTED_EXTENSIONS } }, i._handleLoadComplete = function(t) { var e = t.target.getItem().src; if (i._preloadHash[e])
                        for (var n = 0, s = i._preloadHash[e].length; s > n; n++) { var o = i._preloadHash[e][n]; if (i._preloadHash[e][n] = !0, i.hasEventListener("fileload")) { var t = new createjs.Event("fileload");
                                t.src = o.src, t.id = o.id, t.data = o.data, t.sprite = o.sprite, i.dispatchEvent(t) } } }, i._handleLoadError = function(t) { var e = t.target.getItem().src; if (i._preloadHash[e])
                        for (var n = 0, s = i._preloadHash[e].length; s > n; n++) { var o = i._preloadHash[e][n]; if (i._preloadHash[e][n] = !1, i.hasEventListener("fileerror")) { var t = new createjs.Event("fileerror");
                                t.src = o.src, t.id = o.id, t.data = o.data, t.sprite = o.sprite, i.dispatchEvent(t) } } }, i._registerPlugin = function(t) { return t.isSupported() ? (i.activePlugin = new t, !0) : !1 }, i.registerPlugins = function(t) { i._pluginsRegistered = !0; for (var e = 0, n = t.length; n > e; e++)
                        if (i._registerPlugin(t[e])) return !0; return !1 }, i.initializeDefaultPlugins = function() { return null != i.activePlugin ? !0 : i._pluginsRegistered ? !1 : i.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin]) ? !0 : !1 }, i.isReady = function() { return null != i.activePlugin }, i.getCapabilities = function() { return null == i.activePlugin ? null : i.activePlugin._capabilities }, i.getCapability = function(t) { return null == i.activePlugin ? null : i.activePlugin._capabilities[t] }, i.initLoad = function(t) { return i._registerSound(t) }, i._registerSound = function(t) { if (!i.initializeDefaultPlugins()) return !1; var n; if (t.src instanceof Object ? (n = i._parseSrc(t.src), n.src = t.path + n.src) : n = i._parsePath(t.src), null == n) return !1;
                    t.src = n.src, t.type = "sound"; var s = t.data,
                        o = null; if (null != s && (isNaN(s.channels) ? isNaN(s) || (o = parseInt(s)) : o = parseInt(s.channels), s.audioSprite))
                        for (var r, a = s.audioSprite.length; a--;) r = s.audioSprite[a], i._idHash[r.id] = { src: t.src, startTime: parseInt(r.startTime), duration: parseInt(r.duration) }, r.defaultPlayProps && (i._defaultPlayPropsHash[r.id] = createjs.PlayPropsConfig.create(r.defaultPlayProps));
                    null != t.id && (i._idHash[t.id] = { src: t.src }); var h = i.activePlugin.register(t); return e.create(t.src, o), null != s && isNaN(s) ? t.data.channels = o || e.maxPerChannel() : t.data = o || e.maxPerChannel(), h.type && (t.type = h.type), t.defaultPlayProps && (i._defaultPlayPropsHash[t.src] = createjs.PlayPropsConfig.create(t.defaultPlayProps)), h }, i.registerSound = function(t, e, n, s, o) { var r = { src: t, id: e, data: n, defaultPlayProps: o };
                    t instanceof Object && t.src && (s = e, r = t), r = createjs.LoadItem.create(r), r.path = s, null == s || r.src instanceof Object || (r.src = s + t); var a = i._registerSound(r); if (!a) return !1; if (i._preloadHash[r.src] || (i._preloadHash[r.src] = []), i._preloadHash[r.src].push(r), 1 == i._preloadHash[r.src].length) a.on("complete", createjs.proxy(this._handleLoadComplete, this)), a.on("error", createjs.proxy(this._handleLoadError, this)), i.activePlugin.preload(a);
                    else if (1 == i._preloadHash[r.src][0]) return !0; return r }, i.registerSounds = function(t, e) { var i = [];
                    t.path && (e ? e += t.path : e = t.path, t = t.manifest); for (var n = 0, s = t.length; s > n; n++) i[n] = createjs.Sound.registerSound(t[n].src, t[n].id, t[n].data, e, t[n].defaultPlayProps); return i }, i.removeSound = function(t, n) { if (null == i.activePlugin) return !1;
                    t instanceof Object && t.src && (t = t.src); var s; if (t instanceof Object ? s = i._parseSrc(t) : (t = i._getSrcById(t).src, s = i._parsePath(t)), null == s) return !1;
                    t = s.src, null != n && (t = n + t); for (var o in i._idHash) i._idHash[o].src == t && delete i._idHash[o]; return e.removeSrc(t), delete i._preloadHash[t], i.activePlugin.removeSound(t), !0 }, i.removeSounds = function(t, e) { var i = [];
                    t.path && (e ? e += t.path : e = t.path, t = t.manifest); for (var n = 0, s = t.length; s > n; n++) i[n] = createjs.Sound.removeSound(t[n].src, e); return i }, i.removeAllSounds = function() { i._idHash = {}, i._preloadHash = {}, e.removeAll(), i.activePlugin && i.activePlugin.removeAllSounds() }, i.loadComplete = function(t) { if (!i.isReady()) return !1; var e = i._parsePath(t); return t = e ? i._getSrcById(e.src).src : i._getSrcById(t).src, void 0 == i._preloadHash[t] ? !1 : 1 == i._preloadHash[t][0] }, i._parsePath = function(t) { "string" != typeof t && (t = t.toString()); var e = t.match(i.FILE_PATTERN); if (null == e) return !1; for (var n = e[4], s = e[5], o = i.capabilities, r = 0; !o[s];)
                        if (s = i.alternateExtensions[r++], r > i.alternateExtensions.length) return null;
                    t = t.replace("." + e[5], "." + s); var a = { name: n, src: t, extension: s }; return a }, i._parseSrc = function(t) { var e = { name: void 0, src: void 0, extension: void 0 },
                        n = i.capabilities; for (var s in t)
                        if (t.hasOwnProperty(s) && n[s]) { e.src = t[s], e.extension = s; break } if (!e.src) return !1; var o = e.src.lastIndexOf("/"); return e.name = -1 != o ? e.src.slice(o + 1) : e.src, e }, i.play = function(t, e, n, s, o, r, a, h, l) { var u;
                    u = createjs.PlayPropsConfig.create(e instanceof Object || e instanceof createjs.PlayPropsConfig ? e : { interrupt: e, delay: n, offset: s, loop: o, volume: r, pan: a, startTime: h, duration: l }); var c = i.createInstance(t, u.startTime, u.duration),
                        d = i._playInstance(c, u); return d || c._playFailed(), c }, i.createInstance = function(t, n, s) { if (!i.initializeDefaultPlugins()) return new createjs.DefaultSoundInstance(t, n, s); var o = i._defaultPlayPropsHash[t];
                    t = i._getSrcById(t); var r = i._parsePath(t.src),
                        a = null; return null != r && null != r.src ? (e.create(r.src), null == n && (n = t.startTime), a = i.activePlugin.create(r.src, n, s || t.duration), o = o || i._defaultPlayPropsHash[r.src], o && a.applyPlayProps(o)) : a = new createjs.DefaultSoundInstance(t, n, s), a.uniqueId = i._lastID++, a }, i.stop = function() { for (var t = this._instances, e = t.length; e--;) t[e].stop() }, i.setVolume = function(t) { if (null == Number(t)) return !1; if (t = Math.max(0, Math.min(1, t)), i._masterVolume = t, !this.activePlugin || !this.activePlugin.setVolume || !this.activePlugin.setVolume(t))
                        for (var e = this._instances, n = 0, s = e.length; s > n; n++) e[n].setMasterVolume(t) }, i.getVolume = function() { return this._masterVolume }, i.setMute = function(t) { if (null == t) return !1; if (this._masterMute = t, !this.activePlugin || !this.activePlugin.setMute || !this.activePlugin.setMute(t))
                        for (var e = this._instances, i = 0, n = e.length; n > i; i++) e[i].setMasterMute(t); return !0 }, i.getMute = function() { return this._masterMute }, i.setDefaultPlayProps = function(t, e) { t = i._getSrcById(t), i._defaultPlayPropsHash[i._parsePath(t.src).src] = createjs.PlayPropsConfig.create(e) }, i.getDefaultPlayProps = function(t) { return t = i._getSrcById(t), i._defaultPlayPropsHash[i._parsePath(t.src).src] }, i._playInstance = function(t, e) { var n = i._defaultPlayPropsHash[t.src] || {}; if (null == e.interrupt && (e.interrupt = n.interrupt || i.defaultInterruptBehavior), null == e.delay && (e.delay = n.delay || 0), null == e.offset && (e.offset = t.getPosition()), null == e.loop && (e.loop = t.loop), null == e.volume && (e.volume = t.volume), null == e.pan && (e.pan = t.pan), 0 == e.delay) { var s = i._beginPlaying(t, e); if (!s) return !1 } else { var o = setTimeout(function() { i._beginPlaying(t, e) }, e.delay);
                        t.delayTimeoutId = o } return this._instances.push(t), !0 }, i._beginPlaying = function(t, i) { if (!e.add(t, i.interrupt)) return !1; var n = t._beginPlaying(i); if (!n) { var s = createjs.indexOf(this._instances, t); return s > -1 && this._instances.splice(s, 1), !1 } return !0 }, i._getSrcById = function(t) { return i._idHash[t] || { src: t } }, i._playFinished = function(t) { e.remove(t); var i = createjs.indexOf(this._instances, t);
                    i > -1 && this._instances.splice(i, 1) }, createjs.Sound = t, e.channels = {}, e.create = function(t, i) { var n = e.get(t); return null == n ? (e.channels[t] = new e(t, i), !0) : !1 }, e.removeSrc = function(t) { var i = e.get(t); return null == i ? !1 : (i._removeAll(), delete e.channels[t], !0) }, e.removeAll = function() { for (var t in e.channels) e.channels[t]._removeAll();
                    e.channels = {} }, e.add = function(t, i) { var n = e.get(t.src); return null == n ? !1 : n._add(t, i) }, e.remove = function(t) { var i = e.get(t.src); return null == i ? !1 : (i._remove(t), !0) }, e.maxPerChannel = function() { return n.maxDefault }, e.get = function(t) { return e.channels[t] }; var n = e.prototype;
                n.constructor = e, n.src = null, n.max = null, n.maxDefault = 100, n.length = 0, n.init = function(t, e) { this.src = t, this.max = e || this.maxDefault, -1 == this.max && (this.max = this.maxDefault), this._instances = [] }, n._get = function(t) { return this._instances[t] }, n._add = function(t, e) { return this._getSlot(e, t) ? (this._instances.push(t), this.length++, !0) : !1 }, n._remove = function(t) { var e = createjs.indexOf(this._instances, t); return -1 == e ? !1 : (this._instances.splice(e, 1), this.length--, !0) }, n._removeAll = function() { for (var t = this.length - 1; t >= 0; t--) this._instances[t].stop() }, n._getSlot = function(e) { var i, n; if (e != t.INTERRUPT_NONE && (n = this._get(0), null == n)) return !0; for (var s = 0, o = this.max; o > s; s++) { if (i = this._get(s), null == i) return !0; if (i.playState == t.PLAY_FINISHED || i.playState == t.PLAY_INTERRUPTED || i.playState == t.PLAY_FAILED) { n = i; break } e != t.INTERRUPT_NONE && (e == t.INTERRUPT_EARLY && i.getPosition() < n.getPosition() || e == t.INTERRUPT_LATE && i.getPosition() > n.getPosition()) && (n = i) } return null != n ? (n._interrupt(), this._remove(n), !0) : !1 }, n.toString = function() { return "[Sound SoundChannel]" } }(), window.createjs = window.createjs || {},
            function() { "use strict"; var t = function(t, e, i, n) { this.EventDispatcher_constructor(), this.src = t, this.uniqueId = -1, this.playState = null, this.delayTimeoutId = null, this._volume = 1, Object.defineProperty(this, "volume", { get: this.getVolume, set: this.setVolume }), this._pan = 0, Object.defineProperty(this, "pan", { get: this.getPan, set: this.setPan }), this._startTime = Math.max(0, e || 0), Object.defineProperty(this, "startTime", { get: this.getStartTime, set: this.setStartTime }), this._duration = Math.max(0, i || 0), Object.defineProperty(this, "duration", { get: this.getDuration, set: this.setDuration }), this._playbackResource = null, Object.defineProperty(this, "playbackResource", { get: this.getPlaybackResource, set: this.setPlaybackResource }), n !== !1 && n !== !0 && this.setPlaybackResource(n), this._position = 0, Object.defineProperty(this, "position", { get: this.getPosition, set: this.setPosition }), this._loop = 0, Object.defineProperty(this, "loop", { get: this.getLoop, set: this.setLoop }), this._muted = !1, Object.defineProperty(this, "muted", { get: this.getMuted, set: this.setMuted }), this._paused = !1, Object.defineProperty(this, "paused", { get: this.getPaused, set: this.setPaused }) },
                    e = createjs.extend(t, createjs.EventDispatcher);
                e.play = function(t, e, i, n, s, o) { var r; return r = createjs.PlayPropsConfig.create(t instanceof Object || t instanceof createjs.PlayPropsConfig ? t : { interrupt: t, delay: e, offset: i, loop: n, volume: s, pan: o }), this.playState == createjs.Sound.PLAY_SUCCEEDED ? (this.applyPlayProps(r), void(this._paused && this.setPaused(!1))) : (this._cleanUp(), createjs.Sound._playInstance(this, r), this) }, e.stop = function() { return this._position = 0, this._paused = !1, this._handleStop(), this._cleanUp(), this.playState = createjs.Sound.PLAY_FINISHED, this }, e.destroy = function() { this._cleanUp(), this.src = null, this.playbackResource = null, this.removeAllEventListeners() }, e.applyPlayProps = function(t) { return null != t.offset && this.setPosition(t.offset), null != t.loop && this.setLoop(t.loop), null != t.volume && this.setVolume(t.volume), null != t.pan && this.setPan(t.pan), null != t.startTime && (this.setStartTime(t.startTime), this.setDuration(t.duration)), this }, e.toString = function() { return "[AbstractSoundInstance]" }, e.getPaused = function() { return this._paused }, e.setPaused = function(t) { return t !== !0 && t !== !1 || this._paused == t || 1 == t && this.playState != createjs.Sound.PLAY_SUCCEEDED ? void 0 : (this._paused = t, t ? this._pause() : this._resume(), clearTimeout(this.delayTimeoutId), this) }, e.setVolume = function(t) { return t == this._volume ? this : (this._volume = Math.max(0, Math.min(1, t)), this._muted || this._updateVolume(), this) }, e.getVolume = function() { return this._volume }, e.setMuted = function(t) { return t === !0 || t === !1 ? (this._muted = t, this._updateVolume(), this) : void 0 }, e.getMuted = function() { return this._muted }, e.setPan = function(t) { return t == this._pan ? this : (this._pan = Math.max(-1, Math.min(1, t)), this._updatePan(), this) }, e.getPan = function() { return this._pan }, e.getPosition = function() { return this._paused || this.playState != createjs.Sound.PLAY_SUCCEEDED || (this._position = this._calculateCurrentPosition()), this._position }, e.setPosition = function(t) { return this._position = Math.max(0, t), this.playState == createjs.Sound.PLAY_SUCCEEDED && this._updatePosition(), this }, e.getStartTime = function() { return this._startTime }, e.setStartTime = function(t) { return t == this._startTime ? this : (this._startTime = Math.max(0, t || 0), this._updateStartTime(), this) }, e.getDuration = function() { return this._duration }, e.setDuration = function(t) { return t == this._duration ? this : (this._duration = Math.max(0, t || 0), this._updateDuration(), this) }, e.setPlaybackResource = function(t) { return this._playbackResource = t, 0 == this._duration && this._setDurationFromSource(), this }, e.getPlaybackResource = function() { return this._playbackResource }, e.getLoop = function() { return this._loop }, e.setLoop = function(t) { null != this._playbackResource && (0 != this._loop && 0 == t ? this._removeLooping(t) : 0 == this._loop && 0 != t && this._addLooping(t)), this._loop = t }, e._sendEvent = function(t) { var e = new createjs.Event(t);
                    this.dispatchEvent(e) }, e._cleanUp = function() { clearTimeout(this.delayTimeoutId), this._handleCleanUp(), this._paused = !1, createjs.Sound._playFinished(this) }, e._interrupt = function() { this._cleanUp(), this.playState = createjs.Sound.PLAY_INTERRUPTED, this._sendEvent("interrupted") }, e._beginPlaying = function(t) { return this.setPosition(t.offset), this.setLoop(t.loop), this.setVolume(t.volume), this.setPan(t.pan), null != t.startTime && (this.setStartTime(t.startTime), this.setDuration(t.duration)), null != this._playbackResource && this._position < this._duration ? (this._paused = !1, this._handleSoundReady(), this.playState = createjs.Sound.PLAY_SUCCEEDED, this._sendEvent("succeeded"), !0) : (this._playFailed(), !1) }, e._playFailed = function() { this._cleanUp(), this.playState = createjs.Sound.PLAY_FAILED, this._sendEvent("failed") }, e._handleSoundComplete = function() { return this._position = 0, 0 != this._loop ? (this._loop--, this._handleLoop(), void this._sendEvent("loop")) : (this._cleanUp(), this.playState = createjs.Sound.PLAY_FINISHED, void this._sendEvent("complete")) }, e._handleSoundReady = function() {}, e._updateVolume = function() {}, e._updatePan = function() {}, e._updateStartTime = function() {}, e._updateDuration = function() {}, e._setDurationFromSource = function() {}, e._calculateCurrentPosition = function() {}, e._updatePosition = function() {}, e._removeLooping = function() {}, e._addLooping = function() {}, e._pause = function() {}, e._resume = function() {}, e._handleStop = function() {}, e._handleCleanUp = function() {}, e._handleLoop = function() {}, createjs.AbstractSoundInstance = createjs.promote(t, "EventDispatcher"), createjs.DefaultSoundInstance = createjs.AbstractSoundInstance }(), window.createjs = window.createjs || {},
            function() { "use strict"; var t = function() { this._capabilities = null, this._loaders = {}, this._audioSources = {}, this._soundInstances = {}, this._volume = 1, this._loaderClass, this._soundInstanceClass },
                    e = t.prototype;
                t._capabilities = null, t.isSupported = function() { return !0 }, e.register = function(t) { var e = this._loaders[t.src]; return e && !e.canceled ? this._loaders[t.src] : (this._audioSources[t.src] = !0, this._soundInstances[t.src] = [], e = new this._loaderClass(t), e.on("complete", createjs.proxy(this._handlePreloadComplete, this)), this._loaders[t.src] = e, e) }, e.preload = function(t) { t.on("error", createjs.proxy(this._handlePreloadError, this)), t.load() }, e.isPreloadStarted = function(t) { return null != this._audioSources[t] }, e.isPreloadComplete = function(t) { return !(null == this._audioSources[t] || 1 == this._audioSources[t]) }, e.removeSound = function(t) { if (this._soundInstances[t]) { for (var e = this._soundInstances[t].length; e--;) { var i = this._soundInstances[t][e];
                            i.destroy() } delete this._soundInstances[t], delete this._audioSources[t], this._loaders[t] && this._loaders[t].destroy(), delete this._loaders[t] } }, e.removeAllSounds = function() { for (var t in this._audioSources) this.removeSound(t) }, e.create = function(t, e, i) { this.isPreloadStarted(t) || this.preload(this.register(t)); var n = new this._soundInstanceClass(t, e, i, this._audioSources[t]); return this._soundInstances[t].push(n), n }, e.setVolume = function(t) { return this._volume = t, this._updateVolume(), !0 }, e.getVolume = function() { return this._volume }, e.setMute = function() { return this._updateVolume(), !0 }, e.toString = function() { return "[AbstractPlugin]" }, e._handlePreloadComplete = function(t) { var e = t.target.getItem().src;
                    this._audioSources[e] = t.result; for (var i = 0, n = this._soundInstances[e].length; n > i; i++) { var s = this._soundInstances[e][i];
                        s.setPlaybackResource(this._audioSources[e]) } }, e._handlePreloadError = function() {}, e._updateVolume = function() {}, createjs.AbstractPlugin = t }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t(t) { this.AbstractLoader_constructor(t, !0, createjs.AbstractLoader.SOUND) } var e = createjs.extend(t, createjs.AbstractLoader);
                t.context = null, e.toString = function() { return "[WebAudioLoader]" }, e._createRequest = function() { this._request = new createjs.XHRRequest(this._item, !1), this._request.setResponseType("arraybuffer") }, e._sendComplete = function() { t.context.decodeAudioData(this._rawResult, createjs.proxy(this._handleAudioDecoded, this), createjs.proxy(this._sendError, this)) }, e._handleAudioDecoded = function(t) { this._result = t, this.AbstractLoader__sendComplete() }, createjs.WebAudioLoader = createjs.promote(t, "AbstractLoader") }(), window.createjs = window.createjs || {},
            function() {
                "use strict";

                function t(t, e, n, s) { this.AbstractSoundInstance_constructor(t, e, n, s), this.gainNode = i.context.createGain(), this.panNode = i.context.createPanner(), this.panNode.panningModel = i._panningModel, this.panNode.connect(this.gainNode), this.sourceNode = null, this._soundCompleteTimeout = null, this._sourceNodeNext = null, this._playbackStartTime = 0, this._endedHandler = createjs.proxy(this._handleSoundComplete, this) }
                var e = createjs.extend(t, createjs.AbstractSoundInstance),
                    i = t;
                i.context = null, i.destinationNode = null, i._panningModel = "equalpower", e.destroy = function() { this.AbstractSoundInstance_destroy(), this.panNode.disconnect(0), this.panNode = null, this.gainNode.disconnect(0), this.gainNode = null }, e.toString = function() { return "[WebAudioSoundInstance]" }, e._updatePan = function() { this.panNode.setPosition(this._pan, 0, -.5) }, e._removeLooping = function() { this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext) }, e._addLooping = function() { this.playState == createjs.Sound.PLAY_SUCCEEDED && (this._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0)) }, e._setDurationFromSource = function() { this._duration = 1e3 * this.playbackResource.duration }, e._handleCleanUp = function() { this.sourceNode && this.playState == createjs.Sound.PLAY_SUCCEEDED && (this.sourceNode = this._cleanUpAudioNode(this.sourceNode), this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext)), 0 != this.gainNode.numberOfOutputs && this.gainNode.disconnect(0), clearTimeout(this._soundCompleteTimeout), this._playbackStartTime = 0 }, e._cleanUpAudioNode = function(t) { return t && (t.stop(0), t.disconnect(0), t = null), t }, e._handleSoundReady = function() { this.gainNode.connect(i.destinationNode); var t = .001 * this._duration,
                        e = .001 * this._position;
                    e > t && (e = t), this.sourceNode = this._createAndPlayAudioNode(i.context.currentTime - t, e), this._playbackStartTime = this.sourceNode.startTime - e, this._soundCompleteTimeout = setTimeout(this._endedHandler, 1e3 * (t - e)), 0 != this._loop && (this._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0)) }, e._createAndPlayAudioNode = function(t, e) { var n = i.context.createBufferSource();
                    n.buffer = this.playbackResource, n.connect(this.panNode); var s = .001 * this._duration; return n.startTime = t + s, n.start(n.startTime, e + .001 * this._startTime, s - e), n }, e._pause = function() { this._position = 1e3 * (i.context.currentTime - this._playbackStartTime), this.sourceNode = this._cleanUpAudioNode(this.sourceNode), this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext), 0 != this.gainNode.numberOfOutputs && this.gainNode.disconnect(0), clearTimeout(this._soundCompleteTimeout) }, e._resume = function() { this._handleSoundReady() }, e._updateVolume = function() { var t = this._muted ? 0 : this._volume;
                    t != this.gainNode.gain.value && (this.gainNode.gain.value = t) }, e._calculateCurrentPosition = function() { return 1e3 * (i.context.currentTime - this._playbackStartTime) }, e._updatePosition = function() { this.sourceNode = this._cleanUpAudioNode(this.sourceNode), this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext), clearTimeout(this._soundCompleteTimeout), this._paused || this._handleSoundReady() }, e._handleLoop = function() { this._cleanUpAudioNode(this.sourceNode), this.sourceNode = this._sourceNodeNext, this._playbackStartTime = this.sourceNode.startTime, this._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0), this._soundCompleteTimeout = setTimeout(this._endedHandler, this._duration) }, e._updateDuration = function() {
                    this.playState == createjs.Sound.PLAY_SUCCEEDED && (this._pause(), this._resume())
                }, createjs.WebAudioSoundInstance = createjs.promote(t, "AbstractSoundInstance")
            }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t() { this.AbstractPlugin_constructor(), this._panningModel = i._panningModel, this.context = i.context, this.dynamicsCompressorNode = this.context.createDynamicsCompressor(), this.dynamicsCompressorNode.connect(this.context.destination), this.gainNode = this.context.createGain(), this.gainNode.connect(this.dynamicsCompressorNode), createjs.WebAudioSoundInstance.destinationNode = this.gainNode, this._capabilities = i._capabilities, this._loaderClass = createjs.WebAudioLoader, this._soundInstanceClass = createjs.WebAudioSoundInstance, this._addPropsToClasses() } var e = createjs.extend(t, createjs.AbstractPlugin),
                    i = t;
                i._capabilities = null, i._panningModel = "equalpower", i.context = null, i.isSupported = function() { var t = createjs.BrowserDetect.isIOS || createjs.BrowserDetect.isAndroid || createjs.BrowserDetect.isBlackberry; return "file:" != location.protocol || t || this._isFileXHRSupported() ? (i._generateCapabilities(), null == i.context ? !1 : !0) : !1 }, i.playEmptySound = function() { if (null != i.context) { var t = i.context.createBufferSource();
                        t.buffer = i.context.createBuffer(1, 1, 22050), t.connect(i.context.destination), t.start(0, 0, 0) } }, i._isFileXHRSupported = function() { var t = !0,
                        e = new XMLHttpRequest; try { e.open("GET", "WebAudioPluginTest.fail", !1) } catch (i) { return t = !1 } e.onerror = function() { t = !1 }, e.onload = function() { t = 404 == this.status || 200 == this.status || 0 == this.status && "" != this.response }; try { e.send() } catch (i) { t = !1 } return t }, i._generateCapabilities = function() { if (null == i._capabilities) { var t = document.createElement("audio"); if (null == t.canPlayType) return null; if (null == i.context)
                            if (window.AudioContext) i.context = new AudioContext;
                            else { if (!window.webkitAudioContext) return null;
                                i.context = new webkitAudioContext } i._compatibilitySetUp(), i.playEmptySound(), i._capabilities = { panning: !0, volume: !0, tracks: -1 }; for (var e = createjs.Sound.SUPPORTED_EXTENSIONS, n = createjs.Sound.EXTENSION_MAP, s = 0, o = e.length; o > s; s++) { var r = e[s],
                                a = n[r] || r;
                            i._capabilities[r] = "no" != t.canPlayType("audio/" + r) && "" != t.canPlayType("audio/" + r) || "no" != t.canPlayType("audio/" + a) && "" != t.canPlayType("audio/" + a) } i.context.destination.numberOfChannels < 2 && (i._capabilities.panning = !1) } }, i._compatibilitySetUp = function() { if (i._panningModel = "equalpower", !i.context.createGain) { i.context.createGain = i.context.createGainNode; var t = i.context.createBufferSource();
                        t.__proto__.start = t.__proto__.noteGrainOn, t.__proto__.stop = t.__proto__.noteOff, i._panningModel = 0 } }, e.toString = function() { return "[WebAudioPlugin]" }, e._addPropsToClasses = function() { var t = this._soundInstanceClass;
                    t.context = this.context, t.destinationNode = this.gainNode, t._panningModel = this._panningModel, this._loaderClass.context = this.context }, e._updateVolume = function() { var t = createjs.Sound._masterMute ? 0 : this._volume;
                    t != this.gainNode.gain.value && (this.gainNode.gain.value = t) }, createjs.WebAudioPlugin = createjs.promote(t, "AbstractPlugin") }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t() { throw "HTMLAudioTagPool cannot be instantiated" }

                function e() { this._tags = [] } var i = t;
                i._tags = {}, i._tagPool = new e, i._tagUsed = {}, i.get = function(t) { var e = i._tags[t]; return null == e ? (e = i._tags[t] = i._tagPool.get(), e.src = t) : i._tagUsed[t] ? (e = i._tagPool.get(), e.src = t) : i._tagUsed[t] = !0, e }, i.set = function(t, e) { e == i._tags[t] ? i._tagUsed[t] = !1 : i._tagPool.set(e) }, i.remove = function(t) { var e = i._tags[t]; return null == e ? !1 : (i._tagPool.set(e), delete i._tags[t], delete i._tagUsed[t], !0) }, i.getDuration = function(t) { var e = i._tags[t]; return null == e ? 0 : 1e3 * e.duration }, createjs.HTMLAudioTagPool = t; var n = e.prototype;
                n.constructor = e, n.get = function() { var t; return t = 0 == this._tags.length ? this._createTag() : this._tags.pop(), null == t.parentNode && document.body.appendChild(t), t }, n.set = function(t) { var e = createjs.indexOf(this._tags, t); - 1 == e && (this._tags.src = null, this._tags.push(t)) }, n.toString = function() { return "[TagPool]" }, n._createTag = function() { var t = document.createElement("audio"); return t.autoplay = !1, t.preload = "none", t } }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t(t, e, i, n) { this.AbstractSoundInstance_constructor(t, e, i, n), this._audioSpriteStopTime = null, this._delayTimeoutId = null, this._endedHandler = createjs.proxy(this._handleSoundComplete, this), this._readyHandler = createjs.proxy(this._handleTagReady, this), this._stalledHandler = createjs.proxy(this._playFailed, this), this._audioSpriteEndHandler = createjs.proxy(this._handleAudioSpriteLoop, this), this._loopHandler = createjs.proxy(this._handleSoundComplete, this), i ? this._audioSpriteStopTime = .001 * (e + i) : this._duration = createjs.HTMLAudioTagPool.getDuration(this.src) } var e = createjs.extend(t, createjs.AbstractSoundInstance);
                e.setMasterVolume = function() { this._updateVolume() }, e.setMasterMute = function() { this._updateVolume() }, e.toString = function() { return "[HTMLAudioSoundInstance]" }, e._removeLooping = function() { null != this._playbackResource && (this._playbackResource.loop = !1, this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, !1)) }, e._addLooping = function() { null == this._playbackResource || this._audioSpriteStopTime || (this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, !1), this._playbackResource.loop = !0) }, e._handleCleanUp = function() { var t = this._playbackResource; if (null != t) { t.pause(), t.loop = !1, t.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, !1), t.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, !1), t.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, !1), t.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, !1), t.removeEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, !1); try { t.currentTime = this._startTime } catch (e) {} createjs.HTMLAudioTagPool.set(this.src, t), this._playbackResource = null } }, e._beginPlaying = function(t) { return this._playbackResource = createjs.HTMLAudioTagPool.get(this.src), this.AbstractSoundInstance__beginPlaying(t) }, e._handleSoundReady = function() { if (4 !== this._playbackResource.readyState) { var t = this._playbackResource; return t.addEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, !1), t.addEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, !1), t.preload = "auto", void t.load() } this._updateVolume(), this._playbackResource.currentTime = .001 * (this._startTime + this._position), this._audioSpriteStopTime ? this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, !1) : (this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, !1), 0 != this._loop && (this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, !1), this._playbackResource.loop = !0)), this._playbackResource.play() }, e._handleTagReady = function() { this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, !1), this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, !1), this._handleSoundReady() }, e._pause = function() { this._playbackResource.pause() }, e._resume = function() { this._playbackResource.play() }, e._updateVolume = function() { if (null != this._playbackResource) { var t = this._muted || createjs.Sound._masterMute ? 0 : this._volume * createjs.Sound._masterVolume;
                        t != this._playbackResource.volume && (this._playbackResource.volume = t) } }, e._calculateCurrentPosition = function() { return 1e3 * this._playbackResource.currentTime - this._startTime }, e._updatePosition = function() { this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, !1), this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._handleSetPositionSeek, !1); try { this._playbackResource.currentTime = .001 * (this._position + this._startTime) } catch (t) { this._handleSetPositionSeek(null) } }, e._handleSetPositionSeek = function() { null != this._playbackResource && (this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._handleSetPositionSeek, !1), this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, !1)) }, e._handleAudioSpriteLoop = function() { this._playbackResource.currentTime <= this._audioSpriteStopTime || (this._playbackResource.pause(), 0 == this._loop ? this._handleSoundComplete(null) : (this._position = 0, this._loop--, this._playbackResource.currentTime = .001 * this._startTime, this._paused || this._playbackResource.play(), this._sendEvent("loop"))) }, e._handleLoop = function() { 0 == this._loop && (this._playbackResource.loop = !1, this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, !1)) }, e._updateStartTime = function() { this._audioSpriteStopTime = .001 * (this._startTime + this._duration), this.playState == createjs.Sound.PLAY_SUCCEEDED && (this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, !1), this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, !1)) }, e._updateDuration = function() { this._audioSpriteStopTime = .001 * (this._startTime + this._duration), this.playState == createjs.Sound.PLAY_SUCCEEDED && (this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, !1), this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, !1)) }, createjs.HTMLAudioSoundInstance = createjs.promote(t, "AbstractSoundInstance") }(), window.createjs = window.createjs || {},
            function() { "use strict";

                function t() { this.AbstractPlugin_constructor(), this.defaultNumChannels = 2, this._capabilities = i._capabilities, this._loaderClass = createjs.SoundLoader, this._soundInstanceClass = createjs.HTMLAudioSoundInstance } var e = createjs.extend(t, createjs.AbstractPlugin),
                    i = t;
                i.MAX_INSTANCES = 30, i._AUDIO_READY = "canplaythrough", i._AUDIO_ENDED = "ended", i._AUDIO_SEEKED = "seeked", i._AUDIO_STALLED = "stalled", i._TIME_UPDATE = "timeupdate", i._capabilities = null, i.isSupported = function() { return i._generateCapabilities(), null != i._capabilities }, i._generateCapabilities = function() { if (null == i._capabilities) { var t = document.createElement("audio"); if (null == t.canPlayType) return null;
                        i._capabilities = { panning: !1, volume: !0, tracks: -1 }; for (var e = createjs.Sound.SUPPORTED_EXTENSIONS, n = createjs.Sound.EXTENSION_MAP, s = 0, o = e.length; o > s; s++) { var r = e[s],
                                a = n[r] || r;
                            i._capabilities[r] = "no" != t.canPlayType("audio/" + r) && "" != t.canPlayType("audio/" + r) || "no" != t.canPlayType("audio/" + a) && "" != t.canPlayType("audio/" + a) } } }, e.register = function(t) { var e = createjs.HTMLAudioTagPool.get(t.src),
                        i = this.AbstractPlugin_register(t); return i.setTag(e), i }, e.removeSound = function(t) { this.AbstractPlugin_removeSound(t), createjs.HTMLAudioTagPool.remove(t) }, e.create = function(t, e, i) { var n = this.AbstractPlugin_create(t, e, i); return n.setPlaybackResource(null), n }, e.toString = function() { return "[HTMLAudioPlugin]" }, e.setVolume = e.getVolume = e.setMute = null, createjs.HTMLAudioPlugin = createjs.promote(t, "AbstractPlugin") }();
        if (typeof e === "object") { e.exports = window.createjs.Sound }
    }, {}],
    45: [function(t, e, i) { if (Date.now === undefined) { Date.now = function() { return (new Date).valueOf() } } window.TWEEN = function() { var t = []; var e = []; var i = []; return { REVISION: "14", getAll: function() { return t }, removeAll: function() { t = [] }, add: function(t) { e.push(t) }, remove: function(t) { i.push(t) }, update: function(n) { var s = 0;
                    n = n !== undefined ? n : typeof window !== "undefined" && window.performance !== undefined && window.performance.now !== undefined ? window.performance.now() : Date.now(); while (s < t.length) { if (t[s].update(n)) { s++ } else { t.splice(s, 1) } } if (i.length > 0) { i.forEach(function(e) { var i = t.indexOf(e); if (i !== -1) { t.splice(i, 1) } });
                        i = [] } if (e.length > 0) { e.forEach(function(e) { t.push(e) });
                        e = [] } return true } } }();
        TWEEN.Tween = function(t) { var e; var i; var n; var s; var o; var r; var a; var h; var l; var u; var c; var d; var f; var p; var v; var g; var m; var y; var w; var E;
            this.reset = function(t) { e = t;
                i = 0;
                n = {};
                s = {};
                o = {};
                r = 1e3;
                a = 0;
                h = false;
                l = false;
                u = false;
                c = 0;
                d = null;
                f = TWEEN.Easing.Linear.None;
                p = TWEEN.Interpolation.Linear;
                v = [];
                g = null;
                m = false;
                y = null;
                w = null;
                E = null; return this };
            this.to = function(t, e) { if (e !== undefined) { r = e } s = t; return this };
            this.start = function(t) { TWEEN.add(this);
                l = true;
                m = false;
                d = t !== undefined ? t : typeof window !== "undefined" && window.performance !== undefined && window.performance.now !== undefined ? window.performance.now() : Date.now();
                d += c; for (var i in s) { n[i] = e[i];
                    o[i] = n[i] || 0 } return this };
            this.stop = function() { if (!l) { return this } TWEEN.remove(this);
                l = false; if (E !== null) { E.call(e) } this.stopChainedTweens(); return this };
            this.stopChainedTweens = function() { for (var t = 0, e = v.length; t < e; t++) { v[t].stop() } };
            this.delay = function(t) { c = t; return this };
            this.repeat = function(t) { a = t; return this };
            this.yoyo = function(t) { h = t; return this };
            this.easing = function(t) { f = t; return this };
            this.interpolation = function(t) { p = t; return this };
            this.chain = function() { v = arguments; return this };
            this.onStart = function(t) { g = t; return this };
            this.onUpdate = function(t) { y = t; return this };
            this.onComplete = function(t) { w = t; return this };
            this.onStop = function(t) { E = t; return this };
            this.update = function(t) { var o; if (t < d) { return true } if (!l) { return false } if (m === false) { if (g !== null) { g.call(e) } m = true } var a = (t - d) / r;
                a = a > 1 ? 1 : a;
                i = a; var h = f(a); for (o in s) { var u = n[o] || 0; var c = s[o];
                    e[o] = u + (c - u) * h } if (y !== null) { y.call(e, h) } if (a == 1) { if (w !== null) { w.call(e) } for (var p = 0, E = v.length; p < E; p++) { v[p].start(t) } return false } return true };
            this.getProgress = function() { return i }; if (t !== undefined) { this.reset(t) } };
        TWEEN.Easing = { Linear: { None: function(t) { return t } }, Quadratic: { In: function(t) { return t * t }, Out: function(t) { return t * (2 - t) }, InOut: function(t) { if ((t *= 2) < 1) return .5 * t * t; return -.5 * (--t * (t - 2) - 1) } }, Cubic: { In: function(t) { return t * t * t }, Out: function(t) { return --t * t * t + 1 }, InOut: function(t) { if ((t *= 2) < 1) return .5 * t * t * t; return .5 * ((t -= 2) * t * t + 2) } }, Quartic: { In: function(t) { return t * t * t * t }, Out: function(t) { return 1 - --t * t * t * t }, InOut: function(t) { if ((t *= 2) < 1) return .5 * t * t * t * t; return -.5 * ((t -= 2) * t * t * t - 2) } }, Quintic: { In: function(t) { return t * t * t * t * t }, Out: function(t) { return --t * t * t * t * t + 1 }, InOut: function(t) { if ((t *= 2) < 1) return .5 * t * t * t * t * t; return .5 * ((t -= 2) * t * t * t * t + 2) } }, Sinusoidal: { In: function(t) { return 1 - Math.cos(t * Math.PI / 2) }, Out: function(t) { return Math.sin(t * Math.PI / 2) }, InOut: function(t) { return .5 * (1 - Math.cos(Math.PI * t)) } }, Exponential: { In: function(t) { return t === 0 ? 0 : Math.pow(1024, t - 1) }, Out: function(t) { return t === 1 ? 1 : 1 - Math.pow(2, -10 * t) }, InOut: function(t) { if (t === 0) return 0; if (t === 1) return 1; if ((t *= 2) < 1) return .5 * Math.pow(1024, t - 1); return .5 * (-Math.pow(2, -10 * (t - 1)) + 2) } }, Circular: { In: function(t) { return 1 - Math.sqrt(1 - t * t) }, Out: function(t) { return Math.sqrt(1 - --t * t) }, InOut: function(t) { if ((t *= 2) < 1) return -.5 * (Math.sqrt(1 - t * t) - 1); return .5 * (Math.sqrt(1 - (t -= 2) * t) + 1) } }, Elastic: { In: function(t) { var e, i = .1,
                        n = .4; if (t === 0) return 0; if (t === 1) return 1; if (!i || i < 1) { i = 1;
                        e = n / 4 } else e = n * Math.asin(1 / i) / (2 * Math.PI); return -(i * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / n)) }, Out: function(t) { var e, i = .1,
                        n = .4; if (t === 0) return 0; if (t === 1) return 1; if (!i || i < 1) { i = 1;
                        e = n / 4 } else e = n * Math.asin(1 / i) / (2 * Math.PI); return i * Math.pow(2, -10 * t) * Math.sin((t - e) * (2 * Math.PI) / n) + 1 }, InOut: function(t) { var e, i = .1,
                        n = .4; if (t === 0) return 0; if (t === 1) return 1; if (!i || i < 1) { i = 1;
                        e = n / 4 } else e = n * Math.asin(1 / i) / (2 * Math.PI); if ((t *= 2) < 1) return -.5 * (i * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / n)); return i * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / n) * .5 + 1 } }, Back: { In: function(t) { var e = 1.70158; return t * t * ((e + 1) * t - e) }, Out: function(t) { var e = 1.70158; return --t * t * ((e + 1) * t + e) + 1 }, InOut: function(t) { var e = 1.70158 * 1.525; if ((t *= 2) < 1) return .5 * (t * t * ((e + 1) * t - e)); return .5 * ((t -= 2) * t * ((e + 1) * t + e) + 2) } }, Bounce: { In: function(t) { return 1 - TWEEN.Easing.Bounce.Out(1 - t) }, Out: function(t) { if (t < 1 / 2.75) { return 7.5625 * t * t } else if (t < 2 / 2.75) { return 7.5625 * (t -= 1.5 / 2.75) * t + .75 } else if (t < 2.5 / 2.75) { return 7.5625 * (t -= 2.25 / 2.75) * t + .9375 } else { return 7.5625 * (t -= 2.625 / 2.75) * t + .984375 } }, InOut: function(t) { if (t < .5) return TWEEN.Easing.Bounce.In(t * 2) * .5; return TWEEN.Easing.Bounce.Out(t * 2 - 1) * .5 + .5 } } };
        TWEEN.Interpolation = { Linear: function(t, e) { var i = t.length - 1,
                    n = i * e,
                    s = Math.floor(n),
                    o = TWEEN.Interpolation.Utils.Linear; if (e < 0) return o(t[0], t[1], n); if (e > 1) return o(t[i], t[i - 1], i - n); return o(t[s], t[s + 1 > i ? i : s + 1], n - s) }, Bezier: function(t, e) { var i = 0,
                    n = t.length - 1,
                    s = Math.pow,
                    o = TWEEN.Interpolation.Utils.Bernstein,
                    r; for (r = 0; r <= n; r++) { i += s(1 - e, n - r) * s(e, r) * t[r] * o(n, r) } return i }, CatmullRom: function(t, e) { var i = t.length - 1,
                    n = i * e,
                    s = Math.floor(n),
                    o = TWEEN.Interpolation.Utils.CatmullRom; if (t[0] === t[i]) { if (e < 0) s = Math.floor(n = i * (1 + e)); return o(t[(s - 1 + i) % i], t[s], t[(s + 1) % i], t[(s + 2) % i], n - s) } else { if (e < 0) return t[0] - (o(t[0], t[0], t[1], t[1], -n) - t[0]); if (e > 1) return t[i] - (o(t[i], t[i], t[i - 1], t[i - 1], n - i) - t[i]); return o(t[s ? s - 1 : 0], t[s], t[i < s + 1 ? i : s + 1], t[i < s + 2 ? i : s + 2], n - s) } }, Utils: { Linear: function(t, e, i) { return (e - t) * i + t }, Bernstein: function(t, e) { var i = TWEEN.Interpolation.Utils.Factorial; return i(t) / i(e) / i(t - e) }, Factorial: function() { var t = [1]; return function(e) { var i = 1,
                            n; if (t[e]) return t[e]; for (n = e; n > 1; n--) i *= n; return t[e] = i } }(), CatmullRom: function(t, e, i, n, s) { var o = (i - t) * .5,
                        r = (n - e) * .5,
                        a = s * s,
                        h = s * a; return (2 * e - 2 * i + o + r) * h + (-3 * e + 3 * i - 2 * o - r) * a + o * s + e } } }; if (typeof e !== "undefined" && e.exports) { e.exports = TWEEN } }, {}],
    46: [function(t, e, i) { Number.prototype.lerp = function(t, e) { return this + (t - this) * e };
        Function.prototype.inherit = function(t, e) { if (!t || !_.isFunction(t)) { throw "parent argument must be a function" } this.prototype = _.extend(Object.create(t.prototype), e) };
        Function.prototype.mixin = function(t) { _.each(t, function(t, e) { if (this.prototype[e] === undefined) { this.prototype[e] = t } }, this) } }, {}],
    47: [function(t, e, i) { t("48");
        t("11"); var n = t("8"); var s = t("49"); var o = t("29"); var r = t("133");
        window.initGame = function(t, e) { r.setCaches.apply(null, t); var i = new n({ game: new o, width: window.innerWidth, height: window.innerHeight, enableCompositing: false });
            i.setViews(e);
            s.setup(i);
            $(window).on("resize", function() { window.WIDTH = window.innerWidth;
                window.HEIGHT = window.innerHeight }); return i } }, { 11: 11, 133: 133, 29: 29, 48: 48, 49: 49, 8: 8 }],
    48: [function(t, e, i) { t("46");
        THREE.customMaterials = [];
        t("45");
        Backbone.$ = $;
        window.WIDTH = window.innerWidth;
        window.HEIGHT = window.innerHeight;
        window.lerp = function(t, e, i) { return t + (e - t) * i };
        window.toggleFullScreen = function() { var t = window.document; var e = t.documentElement; var i = e.requestFullscreen || e.mozRequestFullScreen || e.webkitRequestFullScreen || e.msRequestFullscreen; var n = t.exitFullscreen || t.mozCancelFullScreen || t.webkitExitFullscreen || t.msExitFullscreen; if (!t.fullscreenElement && !t.mozFullScreenElement && !t.webkitFullscreenElement && !t.msFullscreenElement) { i.call(e) } else { n.call(t) } } }, { 45: 45, 46: 46 }],
    49: [function(t, e, i) { var n, s; if (typeof document.hidden !== "undefined") { n = "hidden";
            s = "visibilitychange" } else if (typeof document.mozHidden !== "undefined") { n = "mozHidden";
            s = "mozvisibilitychange" } else if (typeof document.msHidden !== "undefined") { n = "msHidden";
            s = "msvisibilitychange" } else if (typeof document.webkitHidden !== "undefined") { n = "webkitHidden";
            s = "webkitvisibilitychange" } e.exports = { setup: function(t) { if (typeof document.addEventListener !== "undefined") { document.addEventListener(s, function e() { if (document[n]) { t.onLeaveTab() } else { setTimeout(t.onFocusTab.bind(t), 50) } }, false) } } } }, {}],
    50: [function(t, e, i) { var n = 20; var s = new Image;
        s.src = "img/game/map-tileset.png"; var o = function(t) { this.level = t.level;
            this.player = t.player;
            this.chunkSize = t.chunkSize;
            this.exitCoords = this.level.getPosition("exit");
            this.visitedChunks = [];
            this.canvas = $(".js-map")[0];
            this.ctx = this.canvas.getContext("2d");
            this.colors = { cell: "#fff3e4", grid: "#d3bea6", outline: "#ed944c" };
            this.initCanvas();
            this.active = false };
        o.prototype = { getChunkCoords: function(t) { return new THREE.Vector2(Math.floor(t.x / this.chunkSize), Math.floor(t.y / this.chunkSize)) }, getChunkData: function(t) { var e = []; for (var i = 0; i < this.chunkSize; i++) { for (var n = 0; n < this.chunkSize; n++) { e.push(this.level.grid.at(t.x * 5 + n, t.y * 5 + i)) } } return e }, isVisitedChunk: function(t) { var e = false; for (var i = 0; i < this.visitedChunks.length; i++) { var n = this.visitedChunks[i]; if (n.equals(t)) { e = true; break } } return e }, isUnvisitedCellAt: function(t) { return !this.isVisitedChunk(this.getChunkCoords(t)) }, initCanvas: function() { this.canvas.width = this.level.width * n * 2;
                this.canvas.height = this.level.height * n * 2;
                this.ctx.fillStyle = this.colors.cell;
                this.ctx.strokeStyle = this.colors.grid;
                this.ctx.lineWidth = .5;
                this.update() }, drawOutline: function(t, e, i, s) { this.ctx.save();
                this.ctx.lineWidth = 6;
                this.ctx.lineCap = "round";
                this.ctx.strokeStyle = this.colors.outline;
                this.ctx.beginPath();
                this.ctx.moveTo(t * n, e * n);
                this.ctx.lineTo(i * n, s * n);
                this.ctx.stroke();
                this.ctx.closePath();
                this.ctx.restore() }, drawCellOutline: function() { var t = new THREE.Vector2; return function(e) { t.copy(e); var i = t.x; var n = t.y; if (this.level.grid.at(t.set(i - 1, n)) === 1) { this.drawOutline(i, n, i, n + 1) } if (this.level.grid.at(t.set(i + 1, n)) === 1) { this.drawOutline(i + 1, n, i + 1, n + 1) } if (this.level.grid.at(t.set(i, n - 1)) === 1) { this.drawOutline(i, n, i + 1, n) } if (this.level.grid.at(t.set(i, n + 1)) === 1) { this.drawOutline(i, n + 1, i + 1, n + 1) } } }(), drawCells: function() { var t = new THREE.Vector2; return function() { this.visitedChunks.forEach(function(e, i) { for (var n = 0; n < this.chunkSize; n++) { for (var s = 0; s < this.chunkSize; s++) { var o = e.x * 5 + s; var r = e.y * 5 + n; var a = this.level.grid.at(t.set(o, r)); if (a !== 1) { this.drawCellOutline(t) } } } }, this);
                    this.visitedChunks.forEach(function(e, i) { for (var n = 0; n < this.chunkSize; n++) { for (var s = 0; s < this.chunkSize; s++) { var o = e.x * 5 + s; var r = e.y * 5 + n; var a = this.level.grid.at(t.set(o, r)); if (a !== 1) { this.drawPassages(t) } } } }, this);
                    this.visitedChunks.forEach(function(e, i) { for (var s = 0; s < this.chunkSize; s++) { for (var o = 0; o < this.chunkSize; o++) { var r = e.x * 5 + o; var a = e.y * 5 + s; var h = this.level.grid.at(t.set(r, a)); var l = this.level.getCoordsIndex(t); if (h !== 1) { this.ctx.fillStyle = this.colors.cell;
                                    this.ctx.fillRect(r * n, a * n, n, n);
                                    this.ctx.strokeRect(r * n, a * n, n, n) } if (t.equals(this.exitCoords)) { this.drawExit(t) } if (this.level.isDoor(l)) { this.drawDoor(t) } } } }, this) } }(), drawPlayer: function() { var t; var e = 0; if (this.player.orientation.y === -1) { t = 0 } if (this.player.orientation.x === 1) { t = 20 } if (this.player.orientation.y === 1) { t = 40 } if (this.player.orientation.x === -1) { t = 60 } this.ctx.drawImage(s, t, e, n, n, this.player.coords.x * n, this.player.coords.y * n, n, n) }, drawPassages: function() { var t = new THREE.Vector2; return function(e) { t.copy(e); var i = t.x; var n = t.y; if (this.level.grid.at(t.set(i - 1, n)) !== 1 && this.isUnvisitedCellAt(t)) { this.drawPassage(t, "left") } if (this.level.grid.at(t.set(i + 1, n)) !== 1 && this.isUnvisitedCellAt(t)) { this.drawPassage(t, "right") } if (this.level.grid.at(t.set(i, n - 1)) !== 1 && this.isUnvisitedCellAt(t)) { this.drawPassage(t, "top") } if (this.level.grid.at(t.set(i, n + 1)) !== 1 && this.isUnvisitedCellAt(t)) { this.drawPassage(t, "bottom") } } }(), drawPassage: function(t, e) { if (e === "left") { var i = this.ctx.createLinearGradient((t.x + 1) * n, t.y * n, t.x * n, t.y * n) } if (e === "right") { var i = this.ctx.createLinearGradient(t.x * n, t.y * n, (t.x + 1) * n, t.y * n) } if (e === "top") { var i = this.ctx.createLinearGradient(t.x * n, (t.y + 1) * n, t.x * n, t.y * n) } if (e === "bottom") { var i = this.ctx.createLinearGradient(t.x * n, t.y * n, t.x * n, (t.y + 1) * n) } i.addColorStop(0, this.colors.cell);
                i.addColorStop(1, "transparent");
                this.ctx.fillStyle = i;
                this.ctx.fillRect(t.x * n, t.y * n, n, n) }, drawExit: function(t) { this.ctx.drawImage(s, 0, 20, n, n, t.x * n, t.y * n, n, n) }, drawDoor: function(t) { this.ctx.drawImage(s, 20, 20, n, n, t.x * n, t.y * n, n, n) }, update: function() { var t = this.getChunkCoords(this.player.coords); if (!this.isVisitedChunk(t)) { this.visitedChunks.push(t) } if (this.active) { this.refreshCanvas() } }, refreshCanvas: function() { this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); var t = this.canvas.width / 2 - this.player.coords.x * n - n / 2; var e = this.canvas.height / 2 - this.player.coords.y * n - n / 2;
                this.ctx.translate(t, e);
                this.drawCells();
                this.drawPlayer(this.player);
                this.ctx.setTransform(1, 0, 0, 1, 0, 0) }, open: function() { this.active = true;
                this.refreshCanvas() }, close: function() { this.active = false }, toggle: function() { this.active = !this.active; if (this.active) { this.refreshCanvas() } }, reset: function(t) { this.level = t;
                this.initCanvas();
                this.visitedChunks = [];
                this.exitCoords = this.level.getPosition("exit");
                this.update() } };
        e.exports = o }, {}],
    51: [function(t, e, i) { var n = "#ifdef USE_MAP\n  varying vec2 vUv;\n  uniform vec4 offsetRepeat;\n#endif\n\nvoid main() {\n  #ifdef USE_MAP\n    vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n  #endif\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"; var s = "#ifdef USE_MAP\n  varying vec2 vUv;\n\n  uniform sampler2D map;\n#endif\n\nuniform vec3 fogColor;\n\nuniform vec3 diffuse;\nuniform float opacity;\nuniform float whiteness;\n\nuniform float fogNear;\nuniform float fogFar;\n\nvoid main() {\n  gl_FragColor = vec4(diffuse, opacity);\n\n  #ifdef USE_MAP\n    gl_FragColor = gl_FragColor * texture2D(map, vUv);\n  #endif\n\n  #ifdef ALPHATEST\n    if ( gl_FragColor.a < ALPHATEST ) discard;\n  #endif\n\n  float depth = gl_FragCoord.z / gl_FragCoord.w;\n  float fogFactor = clamp((depth - fogNear) / (fogFar - fogNear), 0.0, 1.0);\n\n  gl_FragColor = mix(gl_FragColor, vec4(1.0), whiteness);\n\n  gl_FragColor = mix(gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor);\n}"; var o = t("57"); var r = function(t) { t = _.extend({ vertexShader: n, fragmentShader: s, uniforms: THREE.UniformsUtils.clone(r.uniforms) }, t);
            o.call(this, t);
            this.onPropertyChange("color", function(t) { this.uniforms.diffuse.value = t });
            this.onPropertyChange("map", function(t) { this.uniforms.map.value = t; if (t) { this.uniforms.offsetRepeat.value.set(t.offset.x, t.offset.y, t.repeat.x, t.repeat.y) } });
            this.onPropertyChange("opacity", function(t) { this.uniforms.opacity.value = t });
            this.onPropertyChange("whiteness", function(t) { this.uniforms.whiteness.value = t });
            this.fog = t.fog || true;
            this.opacity = t.opacity !== undefined ? t.opacity : 1;
            this.color = new THREE.Color(t.color !== undefined ? t.color : 16777215);
            this.map = t.map || null;
            this.whiteness = t.whiteness || 0 };
        r.uniforms = { diffuse: { type: "c", value: new THREE.Color(15658734) }, opacity: { type: "f", value: 1 }, whiteness: { type: "f", value: 1 }, map: { type: "t", value: null }, offsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) }, fogNear: { type: "f", value: 1 }, fogFar: { type: "f", value: 2e3 }, fogColor: { type: "c", value: new THREE.Color(16777215) } };
        r.inherit(o, { clone: function(t) { var e = t || new r;
                o.prototype.clone.call(this, e);
                e.map = this.map;
                e.whiteness = this.whiteness;
                e.transparent = this.transparent; return e } });
        e.exports = r }, { 57: 57 }],
    52: [function(t, e, i) { var n = "#ifdef USE_MAP\n  varying vec2 vUv;\n  uniform vec4 offsetRepeat;\n#endif\n\nvarying vec3 vPosition;\n\nvoid main() {\n  #ifdef USE_MAP\n    vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n  #endif\n\n  vPosition = position;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"; var s = "varying vec3 vPosition;\n\n#ifdef USE_MAP\n  varying vec2 vUv;\n\n  uniform sampler2D map;\n#endif\n\nuniform vec3 fogColor;\n\nuniform vec3 diffuse;\nuniform float opacity;\nuniform float whiteness;\n\nuniform float fogNear;\nuniform float fogFar;\n\nuniform float sparksPosition;\n\nvoid main() {\n  gl_FragColor = vec4(diffuse, opacity);\n\n  #ifdef USE_MAP\n    gl_FragColor = gl_FragColor * texture2D(map, vUv);\n  #endif\n\n  #ifdef ALPHATEST\n    if ( gl_FragColor.a < ALPHATEST ) discard;\n  #endif\n\n  float depth = gl_FragCoord.z / gl_FragCoord.w;\n  float fogFactor = clamp((depth - fogNear) / (fogFar - fogNear), 0.0, 1.0);\n\n  gl_FragColor = mix(gl_FragColor, vec4(1.0), whiteness);\n\n  gl_FragColor = mix(gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor);\n\n  if (vPosition.y > sparksPosition) {\n    discard;\n  }\n}"; var o = t("51"); var r = function(t) { t = _.extend({ vertexShader: n, fragmentShader: s, uniforms: THREE.UniformsUtils.clone(r.uniforms) }, t);
            o.call(this, t) };
        r.uniforms = { diffuse: { type: "c", value: new THREE.Color(15658734) }, opacity: { type: "f", value: 1 }, whiteness: { type: "f", value: 1 }, map: { type: "t", value: null }, offsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) }, fogNear: { type: "f", value: 1 }, fogFar: { type: "f", value: 2e3 }, fogColor: { type: "c", value: new THREE.Color(16777215) }, sparksPosition: { type: "f", value: 1 } };
        r.inherit(o);
        e.exports = r }, { 51: 51 }],
    53: [function(t, e, i) {
        function n() { var t = new THREE.SpriteMaterial({ fog: false });
            THREE.customMaterials.push(t);
            t.update = function(t) { this.rotation += .1 };
            t.refreshLightUniforms = function() {}; return t } e.exports = n }, {}],
    54: [function(t, e, i) { var n = "#ifdef USE_MAP\n  varying vec2 vUv;\n  uniform vec4 offsetRepeat;\n#endif\n\nvoid main() {\n  #ifdef USE_MAP\n    vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n  #endif\n\n  gl_Position = vec4(position.x, position.y, 0.0, 1.0);\n}"; var s = "#ifdef USE_MAP\n  varying vec2 vUv;\n\n  uniform sampler2D map;\n#endif\n\nuniform vec3 fogColor;\n\nuniform vec3 diffuse;\nuniform float opacity;\nuniform float whiteness;\n\nuniform float fogNear;\nuniform float fogFar;\n\nvoid main() {\n  gl_FragColor = vec4(diffuse, opacity);\n\n  #ifdef USE_MAP\n    gl_FragColor = gl_FragColor * texture2D(map, vUv);\n  #endif\n\n  #ifdef ALPHATEST\n    if ( gl_FragColor.a < ALPHATEST ) discard;\n  #endif\n\n  float depth = gl_FragCoord.z / gl_FragCoord.w;\n  float fogFactor = clamp((depth - fogNear) / (fogFar - fogNear), 0.0, 1.0);\n\n  gl_FragColor = mix(gl_FragColor, vec4(1.0), whiteness);\n\n  gl_FragColor = mix(gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor);\n}"; var o = t("51"); var r = function(t) { t = _.extend({ vertexShader: n, fragmentShader: s, uniforms: THREE.UniformsUtils.clone(r.uniforms) }, t);
            o.call(this, t) };
        r.uniforms = { diffuse: { type: "c", value: new THREE.Color(15658734) }, opacity: { type: "f", value: 1 }, map: { type: "t", value: null }, offsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) }, envMap: { type: "t", value: null }, combine: { type: "t", value: 0 }, fogNear: { type: "f", value: 1 }, fogFar: { type: "f", value: 2e3 }, fogColor: { type: "c", value: new THREE.Color(16777215) }, whiteness: { type: "f", value: 0 } };
        r.inherit(o, { clone: function(t) { var e = t || new r;
                Material.prototype.clone.call(this, t);
                e.map = this.map;
                e.transparent = this.transparent; return e } });
        e.exports = r }, { 51: 51 }],
    55: [function(t, e, i) {
        var n = "#ifdef USE_MAP\n  varying vec2 vUv;\n  uniform vec4 offsetRepeat;\n  uniform vec4 mapOffsetRepeat;\n#endif\n\nattribute float index;\nuniform vec2 scale;\nuniform float size;\nuniform float aspectRatio;\nuniform float scaleOffset;\nuniform float animationDelay;\n\nvarying float vPosX;\n\nvoid main() {\n  #ifdef USE_MAP\n    vUv = uv;\n  #endif\n\n  // Get vertex position in screen space\n  vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n\n  // Animate worldPosition to create animation effect\n  worldPosition.xyz *= scaleOffset;\n\n  vec4 viewPosition = viewMatrix * worldPosition;\n  vec4 pPosition = projectionMatrix * viewPosition;\n  pPosition.xy /= pPosition.w;\n\n\n  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n  float sx = size * ( scale.x / length( mvPosition.xyz ) );\n  float sy = size * ( scale.y / length( mvPosition.xyz ) );\n\n\n  // Offset screen-space vertex position to create view-facing quad\n  int i = int(index);\n  if (i == 0) pPosition.xy += vec2(-sx * aspectRatio, sy);\n  if (i == 1) pPosition.xy += vec2(-sx * aspectRatio, -sy);\n  if (i == 2) pPosition.xy += vec2(sx * aspectRatio, sy);\n  if (i == 3) pPosition.xy += vec2(sx * aspectRatio, -sy);\n\n  if (i < 2) {\n    vPosX = 0.0;\n  } else {\n    vPosX = 1.0;\n  }\n\n  // Convert position back to clip space\n  pPosition.xy *= pPosition.w;\n\n  gl_Position = pPosition;\n}";
        var s = "varying float vPosX;\n\n#ifdef USE_MAP\n  varying vec2 vUv;\n  varying vec2 vUv2;\n  uniform sampler2D map;\n  uniform sampler2D map2;\n#endif\n\nuniform vec3 baseColor;\nuniform vec3 fillColor;\nuniform float opacity;\nuniform float fullness;\n\nvoid main() {\n  gl_FragColor = vec4(baseColor, 1.0);\n\n  float t = step(fullness, vPosX);\n\n  gl_FragColor.xyz = mix(fillColor, baseColor, t);\n\n  #ifdef USE_MAP\n    vec4 texel1 = texture2D(map, vUv);\n    gl_FragColor.a = texel1.a;\n  #endif\n\n  gl_FragColor.a *= opacity;\n\n}";
        var o = t("61");
        var r = function(t) {
            t = _.extend({ vertexShader: n, fragmentShader: s, uniforms: THREE.UniformsUtils.clone(r.uniforms), attributes: THREE.UniformsUtils.clone(r.attributes) }, t);
            o.call(this, t);
            this.onPropertyChange("baseColor", function(t) {
                this.uniforms.baseColor.value = t
            });
            this.onPropertyChange("fillColor", function(t) { this.uniforms.fillColor.value = t });
            this.onPropertyChange("fullness", function(t) { this.uniforms.fullness.value = t });
            this.onPropertyChange("opacity", function(t) { this.uniforms.opacity.value = t });
            this.fullness = t.fullness !== undefined ? t.fullness : 1;
            this.opacity = t.opacity !== undefined ? t.opacity : 1;
            this.baseColor = new THREE.Color(t.baseColor !== undefined ? t.baseColor : 0);
            this.fillColor = new THREE.Color(t.fillColor !== undefined ? t.fillColor : 16711680)
        };
        r.attributes = { index: { type: "i", value: 0 } };
        r.uniforms = { diffuse: { type: "c", value: null }, baseColor: { type: "c", value: null }, fillColor: { type: "c", value: null }, size: { type: "f", value: 0 }, aspectRatio: { type: "f", value: 1 }, map: { type: "t", value: null }, offsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) }, mapOffsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) }, scaleOffset: { type: "f", value: 1 }, scale: { type: "v2", value: new THREE.Vector2(1, 1) }, fullness: { type: "f", value: 1 }, opacity: { type: "f", value: 1 } };
        r.inherit(o, {});
        e.exports = r
    }, { 61: 61 }],
    56: [function(t, e, i) { var n = "varying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif\n\n#ifdef USE_MAP\n  varying vec2 vUv;\n  uniform vec4 offsetRepeat;\n#endif\n\n#if defined(USE_AOMAP) || defined(LIGHTMAP_ENABLED)\n  varying vec2 vUv2;\n#endif\n\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n\n#ifdef WRAP_AROUND\n  uniform vec3 wrapRGB;\n#endif\n\n#ifdef SKINNED\n  uniform mat4 bindMatrix;\n  uniform mat4 bindMatrixInverse;\n\n  uniform sampler2D boneTexture;\n  uniform int boneTextureWidth;\n  uniform int boneTextureHeight;\n\n  mat4 getBoneMatrix(const in float i) {\n    float j = i * 4.0;\n    float x = mod( j, float( boneTextureWidth ) );\n    float y = floor( j / float( boneTextureWidth ) );\n\n    float dx = 1.0 / float( boneTextureWidth );\n    float dy = 1.0 / float( boneTextureHeight );\n\n    y = dy * ( y + 0.5 );\n\n    vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n    vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n    vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n    vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n    mat4 bone = mat4( v1, v2, v3, v4 );\n\n    return bone;\n  }\n#endif\n\nvoid main() {\n  #ifdef SKINNED\n    mat4 boneMatX = getBoneMatrix( skinIndex.x );\n    mat4 boneMatY = getBoneMatrix( skinIndex.y );\n    mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n    mat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n    vec4 skinVertex = bindMatrix * vec4( position, 1.0 );\n\n    vec4 skinned = vec4( 0.0 );\n    skinned += boneMatX * skinVertex * skinWeight.x;\n    skinned += boneMatY * skinVertex * skinWeight.y;\n    skinned += boneMatZ * skinVertex * skinWeight.z;\n    skinned += boneMatW * skinVertex * skinWeight.w;\n    skinned = bindMatrixInverse * skinned;\n\n    vec4 mvPosition = modelViewMatrix * skinned;\n  #else\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n  #endif\n\n  vec3 transformedNormal = normalMatrix * normal;\n\n  gl_Position = projectionMatrix * mvPosition;\n\n  #ifdef USE_MAP\n    vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n  #endif\n\n  #if defined(USE_AOMAP) || defined(LIGHTMAP_ENABLED)\n    vUv2 = uv;\n  #endif\n\n  vLightFront = vec3( 0.0 );\n  #ifdef DOUBLE_SIDED\n  vLightBack = vec3( 0.0 );\n  #endif\n\n  #if MAX_POINT_LIGHTS > 0\n    for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n      vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n      vec3 lVector = lPosition.xyz - mvPosition.xyz;\n      float lDistance = 1.0;\n\n      if ( pointLightDistance[ i ] > 0.0 ) {\n        lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n      }\n\n      lVector = normalize( lVector );\n      float dotProduct = dot( transformedNormal, lVector );\n      vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n      #ifdef DOUBLE_SIDED\n        vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n        #ifdef WRAP_AROUND\n          vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n        #endif\n      #endif\n      #ifdef WRAP_AROUND\n        vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n        pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n        #ifdef DOUBLE_SIDED\n          pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n        #endif\n      #endif\n      vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n      #ifdef DOUBLE_SIDED\n        vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n      #endif\n    }\n  #endif\n\n}"; var s = "uniform float lightVariance;\n\n#ifdef USE_MAP\n  varying vec2 vUv;\n  uniform sampler2D map;\n#endif\n\n#if defined(USE_AOMAP) || defined(LIGHTMAP_ENABLED)\n  varying vec2 vUv2;\n#endif\n\nuniform vec3 fogColor;\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nuniform float whiteness;\n\nuniform vec3 overlayColor;\nuniform float overlayBlend;\n\nuniform float fogNear;\nuniform float fogFar;\n\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n  varying vec3 vLightBack;\n#endif\n\n#ifdef USE_AOMAP\n  uniform float aoFactor;\n  uniform sampler2D aoMap;\n#endif\n\n#ifdef LIGHTMAP_ENABLED\n  uniform sampler2D lightMap;\n#endif\n\nvoid overlay(vec3 blend) {\n  if (gl_FragColor.x < 0.5) {\n      gl_FragColor.x = 2.0 * gl_FragColor.x * blend.x;\n  } else {\n      gl_FragColor.x = 1.0 - 2.0 * (1.0 - blend.x) * (1.0 - gl_FragColor.x);\n  }\n\n  if (gl_FragColor.y < 0.5) {\n      gl_FragColor.y = 2.0 * gl_FragColor.y * blend.y;\n  } else {\n      gl_FragColor.y = 1.0 - 2.0 * (1.0 - blend.y) * (1.0 - gl_FragColor.y);\n  }\n\n  if (gl_FragColor.z < 0.5) {\n      gl_FragColor.z = 2.0 * gl_FragColor.z * blend.z;\n  } else {\n      gl_FragColor.z = 1.0 - 2.0 * (1.0 - blend.z) * (1.0 - gl_FragColor.z);\n  }\n}\n\nvoid main() {\n  gl_FragColor = vec4(diffuse, opacity);\n\n  #ifdef USE_MAP\n    vec4 texelColor = texture2D( map, vUv );\n\n    gl_FragColor *= texelColor;\n  #endif\n\n  vec3 lightFront = vLightFront + (lightVariance / 4.0);\n\n  #ifdef DOUBLE_SIDED\n    if ( gl_FrontFacing )\n      // overlay(lightFront);\n      gl_FragColor.xyz *= lightFront;\n    else\n      // overlay(vLightBack);\n      gl_FragColor.xyz *= vLightBack;\n  #else\n    // overlay(lightFront);\n    gl_FragColor.xyz *= lightFront;\n  #endif\n\n  #ifdef USE_MAP\n  vec3 emissiveColor = emissive * texelColor.xyz * diffuse;\n  #else\n  vec3 emissiveColor = emissive * diffuse;\n  #endif\n  gl_FragColor.xyz += emissiveColor;\n\n  #ifdef LIGHTMAP_ENABLED\n    gl_FragColor *= texture2D(lightMap, vUv2);\n  #endif\n\n  float depth = gl_FragCoord.z / gl_FragCoord.w;\n  float fogFactor = clamp((depth - fogNear) / (fogFar - fogNear), 0.0, 1.0);\n\n  gl_FragColor.rgb = mix(gl_FragColor.rgb, overlayColor, overlayBlend);\n\n  gl_FragColor = mix(gl_FragColor, vec4(1.0), whiteness);\n\n  gl_FragColor = mix(gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor);\n\n  #ifdef USE_AOMAP\n    vec4 aoTexel = texture2D(aoMap, vUv2);\n    aoTexel.xyz = mix(aoTexel.xyz, vec3(1.0), vLightFront.r);\n\n    gl_FragColor = mix(gl_FragColor, gl_FragColor * aoTexel, aoFactor);\n  #endif\n\n  #ifdef ALPHATEST\n    if ( gl_FragColor.a < 0.75 ) discard;\n  #endif\n}"; var o = t("57"); var r = function(t) { t = _.extend({ vertexShader: n, fragmentShader: s, uniforms: THREE.UniformsUtils.clone(r.uniforms), defines: { USE_AOMAP: false, LIGHTMAP_ENABLED: false, SKINNED: false } }, t);
            o.call(this, t);
            this.onPropertyChange("color", function(t) { this.uniforms.diffuse.value = t });
            this.onPropertyChange("overlayColor", function(t) { this.uniforms.overlayColor.value = t });
            this.onPropertyChange("overlayBlend", function(t) { this.uniforms.overlayBlend.value = t });
            this.onPropertyChange("map", function(t) { this.uniforms.map.value = t; if (t) { this.uniforms.offsetRepeat.value.set(t.offset.x, t.offset.y, t.repeat.x, t.repeat.y) } });
            this.onPropertyChange("opacity", function(t) { this.uniforms.opacity.value = t });
            this.onPropertyChange("whiteness", function(t) { this.uniforms.whiteness.value = t });
            this.onPropertyChange("emissive", function(t) { this.uniforms.emissive.value = t });
            this.onPropertyChange("aoFactor", function(t) { this.uniforms.aoFactor.value = t });
            this.onPropertyChange("aoMap", function(t) { this.uniforms.aoMap.value = t;
                this.defines.USE_AOMAP = !!t });
            this.onPropertyChange("lightMap", function(t) { this.uniforms.lightMap.value = t;
                this.defines.LIGHTMAP_ENABLED = !!t });
            this.onPropertyChange("skinning", function(t) { this.useVertexTexture = !!t;
                this.defines.SKINNED = !!t });
            this.onPropertyChange("lightVariance", function(t) { this.uniforms.lightVariance.value = t });
            this.fog = t.fog || true;
            this.opacity = 1;
            this.color = new THREE.Color(t.color || 16777215);
            this.overlayColor = new THREE.Color(t.color || 16777215);
            this.overlayBlend = t.overlayBlend || 0;
            this.map = t.map || null;
            this.whiteness = t.whiteness || 0;
            this.emissive = new THREE.Color(t.emissive);
            this.aoFactor = t.aoFactor || 1;
            this.aoMap = t.aoMap || null;
            this.lightMap = t.lightMap || null;
            this.lightVariance = 0;
            this.lightVarianceSign = 1;
            this.skinning = t.skinning || false };
        r.uniforms = { diffuse: { type: "c", value: new THREE.Color(15658734) }, opacity: { type: "f", value: 1 }, whiteness: { type: "f", value: 1 }, overlayColor: { type: "c", value: new THREE.Color(16777215) }, overlayBlend: { type: "f", value: 0 }, map: { type: "t", value: null }, aoMap: { type: "t", value: null }, aoFactor: { type: "f", value: 1 }, lightMap: { type: "t", value: null }, offsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) }, fogNear: { type: "f", value: 1 }, fogFar: { type: "f", value: 2e3 }, fogColor: { type: "c", value: new THREE.Color(16777215) }, emissive: { type: "c", value: new THREE.Color(0) }, wrapRGB: { type: "v3", value: new THREE.Vector3(1, 1, 1) }, pointLightColor: { type: "fv", value: [] }, pointLightPosition: { type: "fv", value: [] }, pointLightDistance: { type: "fv1", value: [] }, lightVariance: { type: "f", value: 0 } };
        r.inherit(o, { clone: function(t) { var e = t || new r;
                o.prototype.clone.call(this, e);
                e.map = this.map;
                e.whiteness = this.whiteness;
                e.transparent = this.transparent;
                e.emissive = this.emissive;
                e.fog = this.fog;
                e.color = this.color;
                e.aoMap = this.aoMap;
                e.aoFactor = this.aoFactor; return e }, refreshLightUniforms: function() { var t = new THREE.Vector3; return function(e) { var i = this.uniforms.pointLightColor.value; var n = this.uniforms.pointLightPosition.value; var s = this.uniforms.pointLightDistance.value; var o = 0;
                    e.forEach(function(e, r) { if (!e.visible) return;
                        o = r * 3;
                        i[o] = e.color.r * e.intensity;
                        i[o + 1] = e.color.g * e.intensity;
                        i[o + 2] = e.color.b * e.intensity;
                        t.setFromMatrixPosition(e.matrixWorld);
                        n[o] = t.x;
                        n[o + 1] = t.y;
                        n[o + 2] = t.z;
                        s[r] = e.distance }, this) } }(), update: function() {} });
        e.exports = r }, { 57: 57 }],
    57: [function(t, e, i) { var n = ["side", "alphaTest", "transparent", "depthWrite", "shading", "wireframe"]; var s = function(t) { t = t || {};
            THREE.ShaderMaterial.call(this, t);
            _.each(n, function(e) { var i = t[e]; if (i !== undefined) { this[e] = i } });
            THREE.customMaterials.push(this) };
        s.inherit(THREE.ShaderMaterial, { onPropertyChange: function(t, e) { Object.defineProperty(this, t, { get: function() { return this["_" + t] }, set: function(i) { this["_" + t] = i;
                        e.call(this, i) } }) }, refreshLightUniforms: function(t) {}, clone: function(t) { var e = t || new s;
                THREE.Material.prototype.clone.call(this, e);
                e.shading = this.shading;
                e.wireframe = this.wireframe;
                e.wireframeLinewidth = this.wireframeLinewidth;
                e.fog = this.fog;
                e.lights = this.lights;
                e.vertexColors = this.vertexColors;
                e.skinning = this.skinning;
                e.morphTargets = this.morphTargets;
                e.morphNormals = this.morphNormals; return e }, dispose: function() {} });
        e.exports = s }, {}],
    58: [function(t, e, i) { var n = "attribute float size;\nattribute float opacity;\n\nvarying float vOpacity;\n\nuniform float scale;\n\nvoid main() {\n  vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n  vec4 mvPosition = viewMatrix * worldPosition;\n\n  vOpacity = opacity;\n\n  float dist = length(mvPosition.xyz);\n\n  gl_PointSize = size;\n\n  gl_Position = projectionMatrix * mvPosition;\n\n  gl_PointSize = size * ( scale / dist );\n\n  // reduce size of particles with distance\n  // gl_PointSize = max(gl_PointSize - (abs(mvPosition.z) / 500.0), 0.0);\n}"; var s = "varying float vOpacity;\n\nuniform vec3 color;\nuniform sampler2D map;\n\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\n\nvoid main() {\n\n  gl_FragColor = vec4( color, vOpacity );\n\n  gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n\n  float depth = gl_FragCoord.z / gl_FragCoord.w;\n  float fogFactor = clamp((depth - fogNear) / (fogFar - fogNear), 0.0, 1.0);\n\n  gl_FragColor = mix(gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor);\n}"; var o = t("57"); var r = function(t) { t = _.extend({ vertexShader: n, fragmentShader: s, uniforms: THREE.UniformsUtils.clone(r.uniforms), attributes: THREE.UniformsUtils.clone(r.attributes) }, t);
            o.call(this, t);
            this.onPropertyChange("color", function(t) { this.uniforms.color.value = t });
            this.onPropertyChange("map", function(t) { this.uniforms.map.value = t });
            this.onPropertyChange("scale", function(t) { this.uniforms.scale.value = t });
            this.fog = t.fog || false;
            this.opacity = t.opacity || 1;
            this.color = new THREE.Color(t.color || 16777215);
            this.map = t.map || null;
            this.size = t.size || 1;
            this.scale = window.HEIGHT / 2 };
        r.attributes = { size: { type: "f", value: 1 }, opacity: { type: "f", value: 1 } };
        r.uniforms = { color: { type: "c", value: new THREE.Color(16711935) }, scale: { type: "f", value: 1 }, map: { type: "t", value: null }, fogNear: { type: "f", value: 1 }, fogFar: { type: "f", value: 2e3 }, fogColor: { type: "c", value: new THREE.Color(16777215) } };
        r.inherit(o, { clone: function(t) { var e = t || new r;
                o.prototype.clone.call(this, t);
                e.color = this.color;
                e.map = this.map;
                e.scale = this.scale;
                e.size = this.size; return e } });
        e.exports = r }, { 57: 57 }],
    59: [function(t, e, i) { var n = "varying vec3 vReflect;\n\nuniform float refractionRatio;\n\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif\n\n#ifdef USE_MAP\n  varying vec2 vUv;\n  uniform vec4 offsetRepeat;\n#endif\n\n#if defined(USE_AOMAP) || defined(LIGHTMAP_ENABLED)\n  varying vec2 vUv2;\n#endif\n\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nuniform float lightVariance;\n#endif\n\n#ifdef WRAP_AROUND\n  uniform vec3 wrapRGB;\n#endif\n\n#ifdef SKINNED\n  uniform mat4 bindMatrix;\n  uniform mat4 bindMatrixInverse;\n\n  uniform sampler2D boneTexture;\n  uniform int boneTextureWidth;\n  uniform int boneTextureHeight;\n\n  mat4 getBoneMatrix(const in float i) {\n    float j = i * 4.0;\n    float x = mod( j, float( boneTextureWidth ) );\n    float y = floor( j / float( boneTextureWidth ) );\n\n    float dx = 1.0 / float( boneTextureWidth );\n    float dy = 1.0 / float( boneTextureHeight );\n\n    y = dy * ( y + 0.5 );\n\n    vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n    vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n    vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n    vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n    mat4 bone = mat4( v1, v2, v3, v4 );\n\n    return bone;\n  }\n#endif\n\nvec3 transformDirection( in vec3 normal, in mat4 matrix ) {\n    return normalize( ( matrix * vec4( normal, 0.0 ) ).xyz );\n}\n\nvoid main() {\n  #ifdef SKINNED\n    mat4 boneMatX = getBoneMatrix( skinIndex.x );\n    mat4 boneMatY = getBoneMatrix( skinIndex.y );\n    mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n    mat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n    vec4 skinVertex = bindMatrix * vec4( position, 1.0 );\n\n    vec4 skinned = vec4( 0.0 );\n    skinned += boneMatX * skinVertex * skinWeight.x;\n    skinned += boneMatY * skinVertex * skinWeight.y;\n    skinned += boneMatZ * skinVertex * skinWeight.z;\n    skinned += boneMatW * skinVertex * skinWeight.w;\n    skinned = bindMatrixInverse * skinned;\n\n    vec4 mvPosition = modelViewMatrix * skinned;\n  #else\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n  #endif\n\n  vec3 transformedNormal = normalMatrix * normal;\n\n  gl_Position = projectionMatrix * mvPosition;\n\n  #ifdef USE_MAP\n    vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n  #endif\n\n  #if defined(USE_AOMAP) || defined(LIGHTMAP_ENABLED)\n    vUv2 = uv;\n  #endif\n\n  vLightFront = vec3( 0.0 );\n  #ifdef DOUBLE_SIDED\n  vLightBack = vec3( 0.0 );\n  #endif\n\n  #if MAX_POINT_LIGHTS > 0\n    for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n      vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n      vec3 lVector = lPosition.xyz - mvPosition.xyz;\n      float lDistance = 1.0;\n\n      if ( pointLightDistance[ i ] > 0.0 ) {\n        lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n      }\n\n      lVector = normalize( lVector );\n      float dotProduct = dot( transformedNormal, lVector );\n      vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n      #ifdef DOUBLE_SIDED\n        vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n        #ifdef WRAP_AROUND\n          vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n        #endif\n      #endif\n      #ifdef WRAP_AROUND\n        vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n        pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n        #ifdef DOUBLE_SIDED\n          pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n        #endif\n      #endif\n      vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n      #ifdef DOUBLE_SIDED\n        vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n        vLightBack += lightVariance / 250.0;\n      #endif\n\n      vLightFront += lightVariance / 250.0;\n    }\n  #endif\n\n  vec3 objectNormal = normal;\n\n  vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\n  vec3 worldNormal = transformDirection( objectNormal, modelMatrix );\n\n  vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n  vReflect = reflect( cameraToVertex, worldNormal );\n\n}"; var s = "\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform float flipEnvMap;\nvarying vec3 vReflect;\n\n#ifdef USE_MAP\n  varying vec2 vUv;\n  uniform sampler2D map;\n#endif\n\n#if defined(USE_AOMAP) || defined(LIGHTMAP_ENABLED)\n  varying vec2 vUv2;\n#endif\n\nuniform vec3 fogColor;\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nuniform float whiteness;\n\nuniform float fogNear;\nuniform float fogFar;\n\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n  varying vec3 vLightBack;\n#endif\n\n#ifdef USE_AOMAP\n  uniform float aoFactor;\n  uniform sampler2D aoMap;\n#endif\n\n#ifdef LIGHTMAP_ENABLED\n  uniform sampler2D lightMap;\n#endif\n\nvec3 inputToLinear( in vec3 a ) {\n#ifdef GAMMA_INPUT\n    return pow( a, vec3( float( GAMMA_FACTOR ) ) );\n#else\n    return a;\n#endif\n}\n\nvoid overlay(vec3 blend) {\n  if (gl_FragColor.x < 0.5) {\n      gl_FragColor.x = 2.0 * gl_FragColor.x * blend.x;\n  } else {\n      gl_FragColor.x = 1.0 - 2.0 * (1.0 - blend.x) * (1.0 - gl_FragColor.x);\n  }\n\n  if (gl_FragColor.y < 0.5) {\n      gl_FragColor.y = 2.0 * gl_FragColor.y * blend.y;\n  } else {\n      gl_FragColor.y = 1.0 - 2.0 * (1.0 - blend.y) * (1.0 - gl_FragColor.y);\n  }\n\n  if (gl_FragColor.z < 0.5) {\n      gl_FragColor.z = 2.0 * gl_FragColor.z * blend.z;\n  } else {\n      gl_FragColor.z = 1.0 - 2.0 * (1.0 - blend.z) * (1.0 - gl_FragColor.z);\n  }\n}\n\nvoid main() {\n  gl_FragColor = vec4(diffuse, opacity);\n\n  #ifdef USE_MAP\n    vec4 texelColor = texture2D( map, vUv );\n\n    gl_FragColor = gl_FragColor * texelColor;\n  #endif\n\n  #ifdef ALPHATEST\n    if ( gl_FragColor.a < ALPHATEST ) discard;\n  #endif\n\n  #ifdef DOUBLE_SIDED\n    if ( gl_FrontFacing )\n    // overlay(vLightFront);\n    gl_FragColor.xyz *= vLightFront;\n    else\n    // overlay(vLightBack);\n    gl_FragColor.xyz *= vLightBack;\n    #else\n    // overlay(vLightFront);\n    gl_FragColor.xyz *= vLightFront;\n  #endif\n\n  #ifdef USE_MAP\n  vec3 emissiveColor = emissive * texelColor.xyz * diffuse;\n  #else\n  vec3 emissiveColor = emissive * diffuse;\n  #endif\n  gl_FragColor.xyz += emissiveColor;\n\n\n  vec3 reflectVec = vReflect;\n\n  #ifdef DOUBLE_SIDED\n      float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n  #else\n      float flipNormal = 1.0;\n  #endif\n\n  vec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n  envColor.xyz = inputToLinear( envColor.xyz );\n\n  float specularStrength = 1.0;\n\n  vec3 outgoingLight = vec3(0.0);\n\n  #ifdef ENVMAP_BLENDING_MULTIPLY\n    gl_FragColor.rgb = mix(gl_FragColor.rgb, gl_FragColor.rgb * envColor.xyz, specularStrength * reflectivity);\n\n  #elif defined( ENVMAP_BLENDING_MIX )\n\n    gl_FragColor.rgb = mix( gl_FragColor.rgb, envColor.xyz, specularStrength * reflectivity );\n\n  #elif defined( ENVMAP_BLENDING_ADD )\n\n    gl_FragColor.rgb += envColor.xyz * specularStrength * reflectivity;\n\n  #endif\n\n\n  #ifdef LIGHTMAP_ENABLED\n    gl_FragColor *= texture2D(lightMap, vUv2);\n  #endif\n\n  float depth = gl_FragCoord.z / gl_FragCoord.w;\n  float fogFactor = clamp((depth - fogNear) / (fogFar - fogNear), 0.0, 1.0);\n\n  gl_FragColor = mix(gl_FragColor, vec4(1.0), whiteness);\n\n  gl_FragColor = mix(gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor);\n\n  #ifdef USE_AOMAP\n    vec4 aoTexel = texture2D(aoMap, vUv2);\n    aoTexel.xyz = mix(aoTexel.xyz, vec3(1.0), vLightFront.r);\n\n    gl_FragColor = mix(gl_FragColor, gl_FragColor * aoTexel, aoFactor);\n  #endif\n}"; var o = t("56"); var r = function(t) { t = _.extend({ vertexShader: n, fragmentShader: s, uniforms: THREE.UniformsUtils.clone(r.uniforms), defines: { USE_AOMAP: false, LIGHTMAP_ENABLED: false, SKINNED: false } }, t);
            o.call(this, t);
            this.onPropertyChange("envMap", function(t) { this.uniforms.envMap.value = t });
            this.onPropertyChange("reflectivity", function(t) { this.uniforms.reflectivity.value = t });
            this.envMap = t.envMap || null;
            this.reflectivity = t.reflectivity || .5 };
        r.uniforms = { diffuse: { type: "c", value: new THREE.Color(15658734) }, opacity: { type: "f", value: 1 }, whiteness: { type: "f", value: 1 }, overlayColor: { type: "c", value: new THREE.Color(16777215) }, overlayBlend: { type: "f", value: 0 }, map: { type: "t", value: null }, aoMap: { type: "t", value: null }, aoFactor: { type: "f", value: 1 }, lightMap: { type: "t", value: null }, offsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) }, fogNear: { type: "f", value: 1 }, fogFar: { type: "f", value: 2e3 }, fogColor: { type: "c", value: new THREE.Color(16777215) }, emissive: { type: "c", value: new THREE.Color(0) }, wrapRGB: { type: "v3", value: new THREE.Vector3(1, 1, 1) }, pointLightColor: { type: "fv", value: [] }, pointLightPosition: { type: "fv", value: [] }, pointLightDistance: { type: "fv1", value: [] }, lightVariance: { type: "f", value: 0 }, envMap: { type: "t", value: null }, reflectivity: { type: "f", value: .5 } };
        r.inherit(o, { clone: function(t) { var e = t || new r;
                Material.prototype.clone.call(this, t);
                e.map = this.map;
                e.whiteness = this.whiteness;
                e.transparent = this.transparent;
                e.emissive = this.emissive;
                e.fog = this.fog;
                e.color = this.color;
                e.aoMap = this.aoMap;
                e.aoFactor = this.aoFactor; return e }, update: function(t) { o.prototype.update.call(this, t) } });
        e.exports = r }, { 56: 56 }],
    60: [function(t, e, i) { var n = "attribute float quadIndex;\nattribute float timeDelay;\n\nvarying vec2 vUv;\n\nuniform float timeElapsed;\n\nconst float quadSize = 0.035;\nconst float thickness = 0.01;\nconst float radius = 0.25;\nconst float speed = 0.35;\n\nvec3 setLength(vec3 v, float l) {\n  normalize(v);\n  return v * l;\n}\n\nvoid main() {\n  vUv = uv;\n\n  float t = max(timeElapsed - timeDelay, 0.0);\n  float offset = mod(t, radius) * speed;\n  vec3 direction = vec3(position);\n  vec3 pos = direction * offset;\n\n  vec4 worldPos = modelMatrix * vec4(pos, 1.0);\n  vec4 worldOrigin = worldPos;\n\n  if (quadIndex == 3.0 || quadIndex == 1.0) {\n    worldPos.xyz += (direction * quadSize);\n  }\n\n  if (quadIndex == 0.0 || quadIndex == 2.0) {\n    worldPos.xyz -= (direction * quadSize);\n  }\n\n  vec4 viewPosition = viewMatrix * worldPos;\n  vec4 pPosition = projectionMatrix * viewPosition;\n  vec4 viewOrigin = viewMatrix * worldOrigin;\n  vec4 pOrigin = projectionMatrix * viewOrigin;\n\n  pPosition.xy /= pPosition.w;\n  pOrigin.xy /= pOrigin.w;\n\n  vec2 v = normalize(pOrigin.xy - pPosition.xy);\n  vec2 w = vec2(-v.y, v.x) * thickness;\n  w /= length(viewPosition);\n  float s = 1.0;\n\n  if (quadIndex == 0.0) {\n    pPosition.xy += w / s;\n  }\n\n  if (quadIndex == 1.0) {\n    pPosition.xy -= w / s;\n  }\n\n  if (quadIndex == 2.0) {\n    pPosition.xy -= w / s;\n  }\n\n  if (quadIndex == 3.0) {\n    pPosition.xy += w / s;\n  }\n\n  pPosition.xy *= pPosition.w;\n\n  gl_Position = pPosition;\n}"; var s = "varying vec2 vUv;\n\nuniform vec3 color;\nuniform sampler2D map;\n\nvoid main() {\n  gl_FragColor = vec4(color, 1.0);\n\n  gl_FragColor *= texture2D(map, vUv);\n  gl_FragColor.a = gl_FragColor.r;\n}"; var o = t("57"); var r = function(t) { t = _.extend({ vertexShader: n, fragmentShader: s, uniforms: THREE.UniformsUtils.clone(r.uniforms), attributes: THREE.UniformsUtils.clone(r.attributes) }, t);
            o.call(this, t);
            this.onPropertyChange("color", function(t) { this.uniforms.color.value = t });
            this.onPropertyChange("map", function(t) { this.uniforms.map.value = t });
            this.fog = false;
            this.side = THREE.DoubleSide;
            this.transparent = true; if (t.color) this.color = new THREE.Color(t.color); if (t.map) this.map = t.map };
        r.uniforms = { color: { type: "c", value: new THREE.Color(16777215) }, map: { type: "t", value: null }, timeElapsed: { type: "f", value: 0 } };
        r.attributes = { quadIndex: { type: "i", value: null }, timeDelay: { type: "f", value: null } };
        r.inherit(o, { update: function(t) { this.uniforms.timeElapsed.value += t.delta }, clone: function(t) { var e = t || new r;
                o.prototype.clone.call(this, t);
                e.color = this.color;
                e.map = this.map;
                e.transparent = this.transparent; return e } });
        e.exports = r }, { 57: 57 }],
    61: [function(t, e, i) { var n = "#ifdef USE_MAP\n  varying vec2 vUv;\n  varying vec2 vUv2;\n  uniform vec4 offsetRepeat;\n  uniform vec4 mapOffsetRepeat;\n#endif\n\nattribute float index;\nuniform vec2 scale;\nuniform float size;\nuniform float aspectRatio;\nuniform float scaleOffset;\nuniform float animationDelay;\n\nvoid main() {\n  #ifdef USE_MAP\n    vUv = uv;\n    vUv2 = uv * mapOffsetRepeat.zw + mapOffsetRepeat.xy;\n  #endif\n\n  // Get vertex position in screen space\n  vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n\n  // Animate worldPosition to create animation effect\n  worldPosition.xyz *= scaleOffset;\n\n  vec4 viewPosition = viewMatrix * worldPosition;\n  vec4 pPosition = projectionMatrix * viewPosition;\n  pPosition.xy /= pPosition.w;\n\n\n  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n  float sx = size * ( scale.x / -mvPosition.z );\n  float sy = size * ( scale.y / -mvPosition.z );\n\n\n  // Offset screen-space vertex position to create view-facing quad\n  int i = int(index);\n  if (i == 0) pPosition.xy += vec2(-sx * aspectRatio, sy);\n  if (i == 1) pPosition.xy += vec2(-sx * aspectRatio, -sy);\n  if (i == 2) pPosition.xy += vec2(sx * aspectRatio, sy);\n  if (i == 3) pPosition.xy += vec2(sx * aspectRatio, -sy);\n\n  // Convert position back to clip space\n  pPosition.xy *= pPosition.w;\n\n  gl_Position = pPosition;\n}"; var s = "#ifdef USE_MAP\n  varying vec2 vUv;\n  varying vec2 vUv2;\n  uniform sampler2D map;\n  uniform sampler2D map2;\n#endif\n\nuniform vec3 diffuse;\n\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\n\nvoid main() {\n  gl_FragColor = vec4(diffuse, 1.0);\n\n  #ifdef USE_MAP\n    vec4 texel1 = texture2D(map, vUv, -2.0);\n    vec4 texel2 = texture2D(map2, vUv2, -2.0);\n    gl_FragColor *= texel1;\n    gl_FragColor = mix(gl_FragColor, texel2, texel2.a);\n  #endif\n\n  #ifdef FOG_ENABLED\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\n    float fogFactor = smoothstep( fogNear, fogFar, depth );\n    gl_FragColor = mix(gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor);\n  #endif\n}"; var o = t("57"); var r = t("10"); var a = function(t) { t = _.extend({ vertexShader: n, fragmentShader: s, uniforms: THREE.UniformsUtils.clone(a.uniforms), attributes: THREE.UniformsUtils.clone(a.attributes), defines: { FOG_ENABLED: t.fogEnabled !== undefined ? t.fogEnabled : true } }, t);
            o.call(this, t);
            this.needsAspectRatio = true;
            this.onPropertyChange("color", function(t) { this.uniforms.diffuse.value = t });
            this.onPropertyChange("size", function(t) { this.uniforms.size.value = t });
            this.onPropertyChange("scale", function(t) { this.uniforms.scale.value = t });
            this.onPropertyChange("map", function(t) { this.uniforms.map.value = t });
            this.onPropertyChange("scaleOffset", function(t) { this.uniforms.scaleOffset.value = t });
            this.onPropertyChange("aspectRatio", function(t) { this.uniforms.aspectRatio.value = t });
            this.color = new THREE.Color(t.color || new THREE.Color(16777215));
            this.size = t.size || .1;
            this.aspectRatio = t.aspectRatio || 1;
            this.map = t.map || null;
            this.scaleOffset = t.scaleOffset || 1;
            this.scale = t.scale || new THREE.Vector2(1, 1) };
        a.attributes = { index: { type: "i", value: 0 } };
        a.uniforms = { diffuse: { type: "c", value: null }, size: { type: "f", value: 0 }, aspectRatio: { type: "f", value: 1 }, map: { type: "t", value: null }, offsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) }, mapOffsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) }, scaleOffset: { type: "f", value: 1 }, scale: { type: "v2", value: new THREE.Vector2(1, 1) }, fogColor: { type: "c", value: new THREE.Color(0) }, fogNear: { type: "f", value: r.UNIT * 3 }, fogFar: { type: "f", value: r.UNIT * 10 } };
        a.inherit(o, { setOffsetRepeat: function(t, e, i, n) { this.uniforms.mapOffsetRepeat.value.set(t, e, i, n) } });
        e.exports = a }, { 10: 10, 57: 57 }],
    62: [function(t, e, i) { var n = "#ifdef USE_MAP\n  varying vec2 vUv;\n  uniform vec4 offsetRepeat;\n#endif\n\nvoid main() {\n  #ifdef USE_MAP\n    vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n  #endif\n\n  gl_Position = vec4(position.x, position.y, 0.0, 1.0);\n}"; var s = "#ifdef USE_MAP\n  varying vec2 vUv;\n\n  uniform sampler2D map;\n#endif\n\nuniform vec3 fogColor;\n\nuniform vec3 diffuse;\nuniform float opacity;\nuniform float whiteness;\n\nuniform float fogNear;\nuniform float fogFar;\n\nuniform float progress;\n\nvoid main() {\n  float o = smoothstep(progress + 0.4, progress, (1.0 - vUv.x));\n  float o2 = smoothstep(progress - 0.4, progress, (1.0 - vUv.x));\n\n  gl_FragColor = vec4(diffuse, min(o, o2));\n\n  #ifdef USE_MAP\n    gl_FragColor = gl_FragColor * texture2D(map, vUv);\n  #endif\n\n  #ifdef ALPHATEST\n    if ( gl_FragColor.a < ALPHATEST ) discard;\n  #endif\n\n  float depth = gl_FragCoord.z / gl_FragCoord.w;\n  float fogFactor = clamp((depth - fogNear) / (fogFar - fogNear), 0.0, 1.0);\n\n  gl_FragColor = mix(gl_FragColor, vec4(1.0), whiteness);\n\n  gl_FragColor = mix(gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor);\n}"; var o = t("54"); var r = function(t) { t = _.extend({ vertexShader: n, fragmentShader: s, uniforms: THREE.UniformsUtils.clone(r.uniforms) }, t);
            o.call(this, t);
            this.onPropertyChange("progress", function(t) { this.uniforms.progress.value = t }, this);
            this.progress = t.progress !== undefined ? t.progress : -.4 };
        r.uniforms = { diffuse: { type: "c", value: new THREE.Color(15658734) }, opacity: { type: "f", value: 1 }, map: { type: "t", value: null }, offsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) }, envMap: { type: "t", value: null }, combine: { type: "t", value: 0 }, fogNear: { type: "f", value: 1 }, fogFar: { type: "f", value: 2e3 }, fogColor: { type: "c", value: new THREE.Color(16777215) }, whiteness: { type: "f", value: 0 }, progress: { type: "f", value: 0 } };
        r.inherit(o);
        e.exports = r }, { 54: 54 }],
    63: [function(t, e, i) {
        var n = {
            initAnimation: function(t, e) { if (!(t instanceof THREE.SkinnedMesh)) { throw "First argument must be an instance of THREE.SkinnedMesh" } this.animated = true;
                this.mesh = t;
                this.add(this.mesh);
                this.animation = new THREE.Animation(this.mesh, this.mesh.geometry.animations[0]);
                this.animation.loop = false;
                this.animation.fps = this.animation.data.fps;
                this.initAnimations(e);
                this.playAnimation("idle");
                this.animate() },
            initAnimations: function(t) {
                var e = this.animation.data.length;
                this.animations = t;
                _.each(this.animations, function(t, i) { t.name = i;
                    t.start /= this.animation.fps;
                    t.end /= this.animation.fps;
                    t.end = t.end < e ? t.end : e;
                    t.duration = t.end - t.start;
                    t.progress = 0 }, this)
            },
            animate: function() { this.animation.play(this.currentAnimation.start) },
            playAnimation: function(t) { if (this.animations[t] === undefined || this.currentAnimation && this.currentAnimation.name === t && !this.currentAnimation.ended && !this.currentAnimation.restart) return;
                this.currentAnimation = this.animations[t];
                this.currentAnimation.ended = false;
                this.currentAnimation.progress = 0;
                this.animate();
                this.currentAnimation.startTime = this.elapsedTime },
            stopAnimation: function() { this.animation.stop() },
            updateAnimation: function(t) { if (this.animation) { var e = this.currentAnimation;
                    this.animation.currentTime = e.start + (t.elapsed - e.startTime);
                    this.animation.update(0);
                    e.progress = (this.animation.currentTime - e.start) / e.duration; if (e.progress >= 1) { e.ended = true;
                        e.progress = 1 } if (e.ended) { if (e.loop) { this.playAnimation(e.name) } else if (this.currentAnimation.freeze) { this.stopAnimation() } else { this.playAnimation("idle") } } } }
        };
        e.exports = n
    }, {}],
    64: [function(t, e, i) { var n = t("10"); var s = t("138"); var o = { initCombat: function(t) { this.combatEnabled = true;
                this.alive = true;
                this.maxHealth = t.maxHealth;
                this.health = this.maxHealth;
                this.blockEnabled = t.block }, canHit: function(t) { if (t.moving && t.tweens.move.getProgress() < .65) { return false } return true }, takeDamage: function(t, e) { if (!this.alive) return; if (n.INVINCIBLE && this.type === "player") t = 0; if (e && (e.type === "projectile" || e.type === "player") && this.canBlock(e)) { this.trigger("block", e) } else { this.health -= t; if (this.health <= 0) { this.die() } this.trigger("hit", t, e) } }, hasRangeAmmo: function() { return true }, die: function() { this.alive = false;
                this.trigger("die");
                s.delay(2e3, function() { this.trigger("dead") }, this) } };
        e.exports = o }, { 10: 10, 138: 138 }],
    65: [function(t, e, i) { var n = t("15"); var s = { initEffects: function(t) { this.effects = []; var e = new n;
                e.parse(t).forEach(this.pushEffect, this) }, pushEffect: function(t) { this.effects.push(t);
                t.setParent(this) }, triggerEffects: function() { this.trigger("effects", this.effects) } };
        e.exports = s }, { 15: 15 }],
    66: [function(t, e, i) { var n = { on: function(t, e, i) { if (!a(this, "on", t, [e, i]) || !e) return this;
                this._events || (this._events = {}); var n = this._events[t] || (this._events[t] = []);
                n.push({ callback: e, context: i, ctx: i || this }); return this }, once: function(t, e, i) { if (!a(this, "once", t, [e, i]) || !e) return this; var n = this; var s = _.once(function() { n.off(t, s);
                    e.apply(this, arguments) });
                s._callback = e; return this.on(t, s, i) }, off: function(t, e, i) { var n, s, o, r, h, l, u, c; if (!this._events || !a(this, "off", t, [e, i])) return this; if (!t && !e && !i) { this._events = void 0; return this } r = t ? [t] : _.keys(this._events); for (h = 0, l = r.length; h < l; h++) { t = r[h]; if (o = this._events[t]) { this._events[t] = n = []; if (e || i) { for (u = 0, c = o.length; u < c; u++) { s = o[u]; if (e && e !== s.callback && e !== s.callback._callback || i && i !== s.context) { n.push(s) } } } if (!n.length) delete this._events[t] } } return this }, trigger: function(t) { if (!this._events) return this; var e = r.call(arguments, 1); if (!a(this, "trigger", t, e)) return this; var i = this._events[t]; var n = this._events.all; if (i) h(i, e); if (n) h(n, arguments); return this }, stopListening: function(t, e, i) { var n = this._listeningTo; if (!n) return this; var s = !e && !i; if (!i && typeof e === "object") i = this; if (t)(n = {})[t._listenId] = t; for (var o in n) { t = n[o];
                    t.off(e, i, this); if (s || _.isEmpty(t._events)) delete this._listeningTo[o] } return this } }; var s = /\s+/; var o = []; var r = o.slice; var a = function(t, e, i, n) { if (!i) return true; if (typeof i === "object") { for (var o in i) { t[e].apply(t, [o, i[o]].concat(n)) } return false } if (s.test(i)) { var r = i.split(s); for (var a = 0, h = r.length; a < h; a++) { t[e].apply(t, [r[a]].concat(n)) } return false } return true }; var h = function(t, e) { var i, n = -1,
                s = t.length,
                o = e[0],
                r = e[1],
                a = e[2]; switch (e.length) {
                case 0:
                    while (++n < s)(i = t[n]).callback.call(i.ctx); return;
                case 1:
                    while (++n < s)(i = t[n]).callback.call(i.ctx, o); return;
                case 2:
                    while (++n < s)(i = t[n]).callback.call(i.ctx, o, r); return;
                case 3:
                    while (++n < s)(i = t[n]).callback.call(i.ctx, o, r, a); return;
                default:
                    while (++n < s)(i = t[n]).callback.apply(i.ctx, e); return } }; var l = { listenTo: "on", listenToOnce: "once" };
        _.each(l, function(t, e) { n[e] = function(e, i, n) { var s = this._listeningTo || (this._listeningTo = {}); var o = e._listenId || (e._listenId = _.uniqueId("l"));
                s[o] = e; if (!n && typeof i === "object") n = this;
                e[t](i, n, this); return this } });
        e.exports = n }, {}],
    67: [function(t, e, i) { var n = t("133"); var s = { initMesh: function(t) { if (t.id) { var e = n.getMeshData(t.id); if (t.skinned) { this.mesh = new THREE.SkinnedMesh(e.geometry) } else { this.mesh = new THREE.Mesh(e.geometry) } } else if (t.mesh) { this.mesh = t.mesh } this.mesh._id = t.id;
                this.add(this.mesh) } };
        e.exports = s }, { 133: 133 }],
    68: [function(t, e, i) { var n = t("30"); var s = t("129"); var o = { initMovement: function(t) { this.moveEasing = TWEEN.Easing.Linear.None;
                this.turnEasing = TWEEN.Easing.Cubic.Out;
                this.moveDuration = 300;
                this.turnDuration = 400;
                this.nextCoords = new THREE.Vector2; if (t) _.extend(this, t);
                this.moving = false;
                this.turning = false;
                this.tweens.move = new TWEEN.Tween;
                this.tweens.turn = new TWEEN.Tween }, moveForward: function() { this.moveTo(this.getFrontCoords()) }, moveBackward: function() { this.moveTo(this.getBackCoords()) }, strafeLeft: function() { this.moveTo(this.getLeftCoords()) }, strafeRight: function() { this.moveTo(this.getRightCoords()) }, moveTo: function(t) { this.trigger("move", t) }, onMove: function(t) {}, turnLeft: function() { this.turn("left") }, turnRight: function() { this.turn("right") }, turn: function(t) { this.animateTurn(t) }, turnTo: function(t) { this.turn(this.getTurnDirectionTo(t)) }, getTurnDirectionTo: function() { var t = new THREE.Vector2; return function(e) { t.subVectors(e, this.coords).normalize(); return h(this.orientation, t) } }(), knockback: function() { var t = new THREE.Vector2; return function(t) { var e = new THREE.Vector2; var i = this.moving ? this.nextCoords : this.coords;
                    e.addVectors(i, t.orientation); if (!this.isImmuneTo("knockback") && this.level.canMoveTo(e)) { this.trigger("knockback", e); return true } return false } }(), isFacing: function() { var t = new THREE.Vector2; return function(e, i) { t.subVectors(e, i || this.coords).normalize(); return this.orientation.equals(t) } }(), getFrontCoords: function() { var t = new THREE.Vector2; return function() { return t.addVectors(this.coords, this.orientation) } }(), getBackCoords: function() { var t = new THREE.Vector2; return function() { return t.subVectors(this.coords, this.orientation) } }(), getLeftCoords: function() { var t = new THREE.Vector2; return function() { return t.addVectors(this.coords, r(this.orientation)) } }(), getRightCoords: function() { var t = new THREE.Vector2; return function() { return t.addVectors(this.coords, a(this.orientation)) } }(), getNextCoords: function(t) { if (t === "forward") return this.getFrontCoords(); if (t === "backward") return this.getBackCoords(); if (t === "left") return this.getLeftCoords(); if (t === "right") return this.getRightCoords() }, getSurroundingCoords: function() { var t = new THREE.Vector2; var e = new THREE.Vector2; var i = new THREE.Vector2; var n = new THREE.Vector2; var o = new THREE.Vector2; var r = new THREE.Vector2; var a = new THREE.Vector2; var h = new THREE.Vector2; return function(l) { var u = [t.addVectors(this.coords, s.NORTH), e.addVectors(t, s.EAST), i.addVectors(this.coords, s.EAST), n.addVectors(i, s.SOUTH), o.addVectors(this.coords, s.SOUTH), r.addVectors(o, s.WEST), a.addVectors(this.coords, s.WEST), h.addVectors(a, s.NORTH)]; if (!l) { u.push(this.coords) } return u } }(), resetMovement: function() { this.turning = false;
                this.moving = false }, animateMove: function(t, e, i, s) { if (this.moving) return; if (!this.targetCoords) this.targetCoords = new THREE.Vector2; if (i === undefined) i = 1; var o = n.getWorldPosition(t);
                this.tweens.move.reset(this.position).to({ x: this.position.x.lerp(o.x, i), z: this.position.z.lerp(o.z, i) }, s * i || this.moveDuration * i).easing(this.moveEasing).onComplete(function() { this.setCoords(this.targetCoords);
                    this.moving = false; if (e) e() }.bind(this)).start();
                this.moving = true;
                this.targetCoords.copy(t) }, stopMoving: function() { this.tweens.move.stop();
                this.moving = false }, animateKnockback: function(t, e) { if (this.moving) { this.stopMoving() } if (!this.targetCoords) this.targetCoords = new THREE.Vector2; var i = n.getWorldPosition(t);
                this.tweens.move.reset(this.position).to({ x: i.x, z: i.z }, this.knockbackDuration || 150).easing(this.knockbackEasing || TWEEN.Easing.Quartic.Out).onComplete(function() { this.setCoords(this.targetCoords);
                    this.moving = false; if (e) e() }.bind(this)).start();
                this.moving = true;
                this.targetCoords.copy(t) }, animateTurn: function(t) { if (this.turning) return; var e, i; if (t === "left") { e = this.rotation.y + Math.PI / 2;
                    i = r(this.orientation) } else if (t === "right") { e = this.rotation.y - Math.PI / 2;
                    i = a(this.orientation) } else { throw "Invalid direction" } this.tweens.turn.reset(this.rotation).to({ y: e }, this.turnDuration).easing(this.turnEasing).onComplete(function() { this.turning = false }.bind(this)).start();
                this.turning = true;
                this.setOrientation(i, true);
                this.trigger("turn", e) }, isAdjacentTo: function(t) { var e = t.coords.distanceTo(this.coords); return Math.floor(e) === 1 }, hasInFront: function() { var t = new THREE.Vector2; var e = new THREE.Vector2; var i = new THREE.Vector2; var n = new THREE.Vector2; var o = new THREE.Vector2; return function(r) { if (this.orientation.equals(s.NORTH)) { t.set(-1, -1);
                        e.set(1, -1) } else if (this.orientation.equals(s.WEST)) { t.set(-1, 1);
                        e.set(-1, -1) } else if (this.orientation.equals(s.SOUTH)) { t.set(1, 1);
                        e.set(-1, 1) } else if (this.orientation.equals(s.EAST)) { t.set(1, -1);
                        e.set(1, 1) } i.copy(this.getFrontCoords());
                    n.addVectors(this.coords, t);
                    o.addVectors(this.coords, e); if (this.isAdjacentTo(r) && (r.coords.equals(i) || r.coords.equals(n) || r.coords.equals(o))) { return true } return false } }() };

        function r(t) { if (t.equals(s.NORTH)) { return s.WEST } else if (t.equals(s.SOUTH)) { return s.EAST } else if (t.equals(s.WEST)) { return s.SOUTH } else if (t.equals(s.EAST)) { return s.NORTH } throw Error("wrong orientation argument") }

        function a(t) { if (t.equals(s.NORTH)) { return s.EAST } else if (t.equals(s.SOUTH)) { return s.WEST } else if (t.equals(s.WEST)) { return s.NORTH } else if (t.equals(s.EAST)) { return s.SOUTH } throw Error("wrong orientation argument") }

        function h(t, e) { var i = a(t); var n = a(i); if (i.equals(e) || n.equals(e)) return "right"; return "left" } e.exports = o }, { 129: 129, 30: 30 }],
    69: [function(t, e, i) { var n = t("129"); var s = { setOrientation: function(t, e) { if (!this.orientation) { this.orientation = new THREE.Vector2 } this.orientation.copy(t); if (e) { return } if (t.equals(n.NORTH)) { this.rotation.y = Math.PI / 2 } if (t.equals(n.WEST)) { this.rotation.y = Math.PI } if (t.equals(n.EAST)) { this.rotation.y = 0 } if (t.equals(n.SOUTH)) { this.rotation.y = -Math.PI / 2 } } };
        e.exports = s }, { 129: 129 }],
    70: [function(t, e, i) { var n = t("10"); var s = t("133"); var o = t("51"); var r = new THREE.PlaneBufferGeometry(1, 1, 1, 1); var a = new o({ transparent: true, depthWrite: false }); var h = { initShadow: function(t) { if (!a.map) { a.map = s.getTexture("shadow.png") } this.shadow = new THREE.Mesh(r, a);
                this.shadow.name = "shadow";
                this.shadow.rotation.x = -Math.PI / 2;
                this.shadow.position.y = -(n.UNIT / 2) + .001;
                this.add(this.shadow) } };
        e.exports = h }, { 10: 10, 133: 133, 51: 51 }],
    71: [function(t, e, i) { var n = { initStateMachine: function(t) { this.states = {};
                this.conditions = [];
                this.currentState = null;
                this.stateNeedsUpdate = true;
                _.each(t.states, this.addState.bind(this)) }, addState: function(t) { if (!_.isFunction(this[t])) { throw "Invalid state method: " + t } this.states[t] = this[t].bind(this) }, removeState: function() { throw "Not implemented" }, setState: function(t) { if (t !== undefined) { this.currentState = t } }, getState: function() { return this.currentState }, pushStateCondition: function(t, e) { this.conditions.push({ state: t, func: e.bind(this) }) }, insertStateCondition: function(t, e, i) { this.conditions.splice(t, 0, { state: e, func: i.bind(this) }) }, replaceStateCondition: function(t, e) { var i = _.findIndex(this.conditions, function(e) { return e.state === t }); if (i !== -1) { this.conditions.splice(i, 1, { state: t, func: e.bind(this) }) } }, chooseState: function() { return _.find(this.conditions, function(t) { return t.func() }, this).state }, canChooseState: function() { return true }, updateStateMachine: function(t) { if (this.canChooseState()) { this.stateNeedsUpdate = false;
                    this.setState(this.chooseState()); if (this.currentState) { this.states[this.currentState](t) } } } };
        e.exports = n }, {}],
    72: [function(t, e, i) { var n = t("10"); var s = t("30"); var o = t("133"); var r = t("138"); var a = t("76"); var h = t("85"); var l = t("67"); var u = t("70"); var c = t("68"); var d = t("65"); var f = t("52"); var p = t("9"); var v = function(t) { a.call(this, t);
            this.name = "bomb";
            this.type = "autonomous";
            this.duration = 2e3; var e = new f({ map: o.getTexture("bomb.png") });
            this.defaultMap = e.map;
            this.blinkMap = o.getTexture("bomb-blink.png");
            this.initMesh({ id: "bomb" });
            this.mesh.material = e;
            this.initShadow();
            this.shadow.scale.multiplyScalar(.5);
            this.mesh.position.y = -(n.UNIT / 4);
            this.initEffects(t.effects);
            this.sparks = new h;
            this.sparks.position.set(0, .47, 0);
            this.mesh.add(this.sparks);
            this.tweens = { drop: new TWEEN.Tween, launch: new TWEEN.Tween, burn: new TWEEN.Tween } };
        v.inherit(a, { onSpawn: function(t, e, i) { a.prototype.onSpawn.apply(this, arguments);
                this.toss(i);
                this.burn();
                r.delay(this.duration - 1e3, this.blink, this);
                this.detonationTimer = r.delay(this.duration, this.detonate, this);
                p.play("wick") }, onRemove: function() { this.detonationTimer.stop();
                this.detonationTimer = null }, detonate: function() { this.triggerEffects();
                p.play("explosion", this.level.distanceToPlayer(this));
                this.level.removeEntity(this) }, blink: function() { r.repeat(2, 300, function() { this.mesh.material.map = this.blinkMap;
                    r.delay(200, function() { this.mesh.material.map = this.defaultMap }, this) }, this) }, burn: function() { this.tweens.burn.reset(this.sparks.position).to({ y: .33 }, this.duration).easing(TWEEN.Easing.Linear.None).onUpdate(function() { this.mesh.material.uniforms.sparksPosition.value = this.sparks.position.y }.bind(this));
                this.tweens.burn.start() }, toss: function() { var t = new THREE.Vector2; return function(e) { t.copy(e.getFrontCoords()); if (!this.level.canMoveTo(t)) { t.copy(this.coords) } this.tweens.drop.reset(this.mesh.position).to({ y: -(n.UNIT / 2) }, 600).easing(TWEEN.Easing.Bounce.Out); var i = s.getWorldPosition(t);
                    this.tweens.launch.reset(this.position).to({ x: i.x, z: i.z }, 500).easing(TWEEN.Easing.Quadratic.Out).onComplete(function() { this.setCoords(t) }.bind(this));
                    this.tweens.drop.start();
                    this.tweens.launch.start() } }() });
        v.mixin(l);
        v.mixin(u);
        v.mixin(c);
        v.mixin(d);
        e.exports = v }, { 10: 10, 133: 133, 138: 138, 30: 30, 52: 52, 65: 65, 67: 67, 68: 68, 70: 70, 76: 76, 85: 85, 9: 9 }],
    73: [function(t, e, i) { var n = t("133"); var s = t("10"); var o = t("51"); var r = t("9"); var a = function() { THREE.Object3D.call(this); var t = new o({ map: n.getTexture("bow.png"), transparent: true, side: THREE.DoubleSide }); var e = n.getMeshData("bow");
            this.mesh = new THREE.Mesh(e.geometry, t);
            this.mesh.name = "bow"; var i = n.getMeshData("arrow");
            this.arrow = new THREE.Mesh(i.geometry, t);
            this.arrow.name = "arrow";
            this.mesh.add(this.arrow);
            this.arrow.rotation.z = -Math.PI / 2;
            this.arrow.position.z -= .12;
            this.arrow.position.x += .01;
            this.arrow.rotation.y = .25;
            this.arrow.scale.multiplyScalar(.5);
            this.arrow.renderDepth = 10;
            this.mesh.renderDepth = 5;
            this.mesh.rotation.y = Math.PI / 2;
            this.mesh.rotation.x = Math.PI / 4;
            this.mesh.scale.multiplyScalar(1.25);
            this.add(this.mesh);
            this.position.y = -s.UNIT * .3;
            this.position.x = -s.UNIT * .25;
            this.position.z = s.UNIT * .1;
            this.visible = false;
            this.moving = false;
            this.tweens = { draw: new TWEEN.Tween, release: new TWEEN.Tween } };
        a.inherit(THREE.Object3D, { animateDraw: function(t) { this.tweens.draw.reset(this.position).to({ y: -s.UNIT * .15, x: -s.UNIT * .05 }, 400).easing(TWEEN.Easing.Quartic.Out).onComplete(t).start();
                this.visible = true;
                r.play("bowDraw") }, animateRelease: function() { this.arrow.visible = false;
                this.tweens.release.reset(this.position).to({ y: -s.UNIT * .2, x: -s.UNIT * .25 }, 300).easing(TWEEN.Easing.Quartic.Out).onComplete(function() { this.visible = false;
                    this.arrow.visible = true }.bind(this)).start();
                r.play("bowRelease") } });
        e.exports = a }, { 10: 10, 133: 133, 51: 51, 9: 9 }],
    74: [function(t, e, i) { var n = function(t) { t = _.extend({ fov: 45, aspectRatio: window.innerWidth / window.innerHeight, near: 1, far: 1e4 }, t);
            THREE.PerspectiveCamera.call(this, t.fov, t.aspectRatio, t.near, t.far) };
        n.inherit(THREE.PerspectiveCamera);
        e.exports = n }, {}],
    75: [function(t, e, i) { var n = t("10"); var s = t("133"); var o = t("76"); var r = t("67"); var a = t("56"); var h = t("70"); var l = new a({ emissive: 11184810 }); var u = function(t) { o.call(this, t);
            this.type = "door";
            this.initMesh({ id: "gate" });
            this.mesh.material = l; if (!l.map) { l.map = s.getTexture("gate.png") } this.initShadow();
            this.shadow.scale.set(3, .5, 1);
            this.tweens.open = new TWEEN.Tween };
        u.inherit(o, { update: function(t) {}, unlock: function() { this.tweens.open.reset(this.mesh.position).to({ y: this.position.y + n.UNIT }, 700).onComplete(function() { this.trigger("unlock", this) }.bind(this)).start();
                this.shadow.visible = false } });
        u.mixin(r);
        u.mixin(h);
        e.exports = u }, { 10: 10, 133: 133, 56: 56, 67: 67, 70: 70, 76: 76 }],
    76: [function(t, e, i) { var n = t("10"); var s = t("30"); var o = t("66"); var r = function(t) { t = _.extend({}, { immune: [] }, t);
            THREE.Object3D.call(this);
            this.level = t.level;
            this.name = t.name;
            this.coords = new THREE.Vector2(0, 0);
            this.tweens = {};
            this.immune = t.immune };
        r.inherit(THREE.Object3D, { update: function(t) {}, setCoords: function(t) { this.coords.copy(t);
                this.position.copy(s.getWorldPosition(t)) }, onSpawn: function() {}, onEffect: function() {}, isImmuneTo: function(t) { return _.include(this.immune, t) }, onAdd: function(t) {}, onRemove: function(t) {}, dispose: function() { var t = [];
                this.children.forEach(function(e) { t.push(e) }, this);
                t.forEach(function(t) { this.remove(t) }, this);
                t = null } });
        r.mixin(o);
        e.exports = r }, { 10: 10, 30: 30, 66: 66 }],
    77: [function(t, e, i) { var n = t("133"); var s = t("10"); var o = t("67"); var r = t("66"); var a = t("56"); var h = new a({ emissive: 11184810 }); var l = function(t) { THREE.Object3D.call(this);
            this.initMesh({ id: "exitframe" });
            this.frame = this.mesh;
            this.frame.material = h; var e = n.getMeshData("exitdoor").geometry; var i = new THREE.Mesh(e, h);
            i.name = "exit_door";
            this.door = new THREE.Object3D;
            this.door.add(i);
            i.position.x -= s.UNIT / 2;
            this.door.position.x += s.UNIT / 2;
            this.add(this.door);
            this.doorMaterial = h; if (!h.map) { h.map = n.getTexture("door.png") } this.tweens = { open: new TWEEN.Tween } };
        l.inherit(THREE.Object3D, { update: function(t) {}, setOrientation: function(t) { if (t === "north") { this.rotation.y = Math.PI;
                    this.position.z += s.UNIT * .15 } else if (t === "east") { this.rotation.y = Math.PI / 2;
                    this.position.z += s.UNIT / 2;
                    this.position.x += s.UNIT * .35 } else if (t === "west") { this.rotation.y = -Math.PI / 2;
                    this.position.z += s.UNIT / 2;
                    this.position.x -= s.UNIT * .35 } else if (t === "south") { this.position.z += s.UNIT * .85 } }, animate: function() { this.tweens.open.reset(this.door.rotation).to({ y: -Math.PI / 2.15 }, 800).easing(TWEEN.Easing.Quadratic.InOut).onComplete(function() { this.trigger("opened") }.bind(this));
                this.tweens.open.start() } });
        l.mixin(o);
        l.mixin(r);
        e.exports = l }, { 10: 10, 133: 133, 56: 56, 66: 66, 67: 67 }],
    78: [function(t, e, i) { var n = t("139"); var s = t("133"); var o = t("10"); var r = t("76"); var a = t("58"); var h = function(t) { THREE.Object3D.call(this);
            this.type = "diseaseCloud";
            this.source = t.source;
            this.spriteColor = new THREE.Color;
            this.material = new a({ fog: true, transparent: true, color: 39219, depthWrite: false, map: s.getTexture("smoke-cloud.png") });
            this.material.prune = true;
            this.material.uvScale = new THREE.Vector2(1, 1);
            this.initPointCloud() };
        h.inherit(THREE.Object3D, { setRenderOrder: function(t) { this.cloud.renderOrder = t }, update: function(t) { this.cloud.geometry.vertices.forEach(function(e, i) { var n = e.age / e.duration;
                    e.age += t.delta * 1e3;
                    e.lerp(e.target, .01); if (this.source.alive && n > 1) { e.copy(this.source.position);
                        e.target.copy(this.getRandomPosition());
                        e.age = 0 } if (n > .75) { this.cloud.material.attributes.opacity.value[i] = .5 - .5 * (n - .75) / .25 } else if (n < .25) { this.cloud.material.attributes.opacity.value[i] = .5 * (n / .25) } else { this.cloud.material.attributes.opacity.value[i] = .5 } }, this);
                this.cloud.geometry.verticesNeedUpdate = true;
                this.cloud.material.attributes.opacity.needsUpdate = true }, initPointCloud: function() { var t = new THREE.Geometry; var e = 50; var i = []; var s = []; for (var r = 0; r < e; r++) { var a = (new THREE.Vector3).copy(this.source.position);
                    a.target = (new THREE.Vector3).copy(this.getRandomPosition());
                    a.duration = 3e3;
                    a.age = a.duration / e * r;
                    a.alive = true;
                    t.vertices.push(a);
                    i.push(n.getRandomFloat(.2 * window.PIXEL_RATIO, 1.25 * window.PIXEL_RATIO));
                    s.push(.5) } this.material.attributes.size.value = i;
                this.material.attributes.opacity.value = s;
                this.cloud = new THREE.PointCloud(t, this.material);
                this.cloud.position.y = -(o.UNIT / 4);
                this.cloud.frustumCulled = false;
                this.add(this.cloud) }, getRandomPosition: function() { var t = new THREE.Vector3; return function() { t.copy(this.source.position);
                    t.x += -(o.UNIT / 2) + Math.random() * o.UNIT;
                    t.z += -(o.UNIT / 2) + Math.random() * o.UNIT;
                    t.y += Math.random() * (o.UNIT / 4); return t } }() });
        e.exports = h }, { 10: 10, 133: 133, 139: 139, 58: 58, 76: 76 }],
    79: [function(t, e, i) { var n = t("139"); var s = t("133"); var o = new THREE.SpriteMaterial({ color: 16777215, depthWrite: false, transparent: true }); var r = function(t) { t = _.extend({ count: 5 }, t);
            THREE.Object3D.call(this); if (!o.map) { o.map = s.getTexture("star.png") } this.initStars(t.count);
            this.radius = .2;
            this.angleStep = 2 * Math.PI / t.count;
            this.angleOffset = 0;
            this.speed = 2;
            this.offset = t.offset !== undefined ? t.offset : 0 };
        r.inherit(THREE.Object3D, { initStars: function(t) { this.stars = []; for (var e = 0; e < t; e++) { var i = new THREE.Sprite(o); var s = n.getRandomFloat(.075, .09);
                    this.stars.push(i);
                    this.add(i);
                    i.scale.set(s, s) } }, show: function() { this.visible = true }, hide: function() { this.visible = false }, update: function(t) { this.angleOffset += t.delta * this.speed;
                this.stars.forEach(function(t, e) { t.position.x = this.radius * Math.cos(this.angleStep * e + this.angleOffset);
                    t.position.z = this.radius * Math.sin(this.angleStep * e + this.angleOffset);
                    t.position.y = this.offset }, this);
                this.rotation.x = .15 * Math.sin(t.elapsed);
                this.rotation.z = .15 * Math.sin(t.elapsed) } });
        e.exports = r }, { 133: 133, 139: 139 }],
    80: [function(t, e, i) { var n = t("139"); var s = t("30"); var o = t("133"); var r = t("10"); var a = new THREE.SpriteMaterial({ fog: true }); var h = new THREE.SpriteMaterial; var l = function() { THREE.Object3D.call(this);
            this.type = "explosion";
            this.radius = 0;
            this.spriteScale = 1;
            this.sprites = [];
            this.spriteColor = new THREE.Color(16747008);
            this.saturation = 1;
            this.luminosity = 1;
            this.epicenterSize = 1.5;
            a.color = this.spriteColor;
            this.tweens = { expand: new TWEEN.Tween, shrink: new TWEEN.Tween, desaturate: new TWEEN.Tween, fadeout: new TWEEN.Tween }; if (!a.map) { a.map = o.getTexture("smoke-cloud.png") } if (!h.map) { h.map = o.getTexture("explosion.png") } this.addSprites(16);
            this.epicenter = new THREE.Sprite(h);
            this.epicenter.material.uvScale = new THREE.Vector2(1, 1);
            this.epicenter.position.y -= r.UNIT / 4;
            this.epicenter.scale.multiplyScalar(2);
            this.add(this.epicenter);
            this.explode() };
        l.inherit(THREE.Object3D, { update: function(t) {}, addSprites: function(t) { var e = 0; for (var i = 0; i < t; i++) { var s = new THREE.Sprite(a.clone());
                    s.material.prune = true;
                    s.material.uvScale = new THREE.Vector2(1, 1);
                    s.material.luminosity = n.getRandomFloat(.7, 1);
                    s.scale.multiplyScalar(n.getRandomFloat(.4, .8));
                    this.add(s);
                    this.sprites.push(s);
                    s.angle = e;
                    s.angleOffset = n.getRandomFloat(0, .5);
                    s.position.y -= r.UNIT / 4 * n.getRandomFloat(.8, 1.2);
                    this.updateSpritePositions();
                    e += Math.PI * 2 / t } }, updateSpritePositions: function() { this.sprites.forEach(function(t) { t.position.x = Math.cos(t.angle + t.angleOffset) * this.radius;
                    t.position.z = Math.sin(t.angle + t.angleOffset) * this.radius }, this) }, updateSpriteScales: function() { this.sprites.forEach(function(t) { var e = t.scale.x * this.spriteScale;
                    t.scale.set(e, e, e) }, this) }, updateSpriteColors: function() { var t = this.spriteColor.getHSL();
                this.sprites.forEach(function(e) { e.material.color.setHSL(t.h, this.saturation, t.l * this.luminosity * e.material.luminosity) }, this) }, explode: function() { var t = 1.5;
                this.tweens.expand.reset(this).to({ radius: 1 }, 1e3 * t).easing(TWEEN.Easing.Circular.Out).onUpdate(this.updateSpritePositions.bind(this));
                this.tweens.shrink.reset(this).to({ spriteScale: 0 }, 1e3 * t).easing(TWEEN.Easing.Exponential.In).onUpdate(this.updateSpriteScales.bind(this));
                this.tweens.desaturate.reset(this).to({ saturation: 0, luminosity: .95 }, 500 * t).easing(TWEEN.Easing.Linear.None).onUpdate(this.updateSpriteColors.bind(this));
                this.tweens.fadeout.reset(this).to({ epicenterSize: 0 }, 350 * t).easing(TWEEN.Easing.Cubic.In).onUpdate(function() { this.epicenter.scale.set(this.epicenterSize, this.epicenterSize, this.epicenterSize) }.bind(this));
                this.tweens.expand.start();
                this.tweens.shrink.start();
                this.tweens.desaturate.start();
                this.tweens.fadeout.start() }, onApply: function(t) { if (t.hasAvailableLights()) { t.lightSources.push(this);
                    this.light = t.movingLights[t.lightSources.length - 1];
                    this.light.color.setHex(16775541);
                    this.light.intensity = 3;
                    this.light.distance = r.UNIT * 2.5;
                    s.tween(400, TWEEN.Easing.Sinusoidal.In).onUpdate(function(t) { this.light.intensity = 3 * (1 - t);
                        this.light.distance = r.UNIT * (2.5 - t) }.bind(this)).onComplete(function() { t.lightSources.splice(t.lightSources.indexOf(this), 1);
                        this.light.intensity = 1.5;
                        this.light.distance = r.UNIT * 1.5;
                        this.light.position.set(1e3, 1e3, 1e3) }.bind(this)) } } });
        e.exports = l }, { 10: 10, 133: 133, 139: 139, 30: 30 }],
    81: [function(t, e, i) { var n = t("139"); var s = t("133"); var o = t("10"); var r = t("76"); var a = t("58"); var h = function(t) { THREE.Object3D.call(this);
            this.type = "freeze";
            this.source = t.source;
            this.spriteColor = new THREE.Color;
            this.material = new a({ fog: true, transparent: true, color: 57855, depthWrite: false, map: s.getTexture("smoke-cloud.png") });
            this.material.uvScale = new THREE.Vector2(1, 1);
            this.offset = t.offset !== undefined ? t.offset : o.UNIT * .2;
            this.initPointCloud();
            this.age = 0 };
        h.inherit(THREE.Object3D, { setRenderOrder: function(t) { this.cloud.renderOrder = t }, update: function(t) { this.age += t.delta * 1e3;
                this.cloud.geometry.vertices.forEach(function(e, i) { var n = e.age / e.duration;
                    e.age += t.delta * 1e3;
                    e.lerp(e.target, .01); if (n > .75) { this.cloud.material.attributes.opacity.value[i] = .5 - .5 * (n - .75) / .25 } else if (n < .25) { this.cloud.material.attributes.opacity.value[i] = .5 * (n / .25) } else { this.cloud.material.attributes.opacity.value[i] = .5 } }, this);
                this.cloud.geometry.verticesNeedUpdate = true;
                this.cloud.material.attributes.opacity.needsUpdate = true }, initPointCloud: function() { var t = new THREE.Geometry; var e = 10; var i = []; var s = []; for (var o = 0; o < e; o++) { var r = (new THREE.Vector3).copy(this.source.position);
                    r.target = (new THREE.Vector3).copy(this.getRandomPosition());
                    r.duration = 2e3;
                    r.age = r.duration / e * o;
                    r.alive = true;
                    t.vertices.push(r);
                    i.push(n.getRandomFloat(.5 * window.PIXEL_RATIO, 1.25 * window.PIXEL_RATIO));
                    s.push(.75) } this.material.attributes.size.value = i;
                this.material.attributes.opacity.value = s;
                this.cloud = new THREE.PointCloud(t, this.material);
                this.cloud.position.y = this.offset;
                this.cloud.frustumCulled = false;
                this.add(this.cloud) }, getRandomPosition: function() { var t = new THREE.Vector3; return function() { t.copy(this.source.position);
                    t.x += n.getRandomFloat(-.75, .75);
                    t.z += n.getRandomFloat(-.75, .75);
                    t.y += Math.random() * (o.UNIT / 4); return t } }() });
        e.exports = h }, { 10: 10, 133: 133, 139: 139, 58: 58, 76: 76 }],
    82: [function(t, e, i) { var n = t("133"); var s = t("54"); var o = function() { var t = new THREE.PlaneBufferGeometry(2, 2, 1); var e = new s({ color: 16777215, map: n.getTexture("frost.jpg"), opacity: 1, transparent: true, depthWrite: false, depthTest: false, blending: THREE.AdditiveBlending }); var i = [-1, 1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0]; for (var o = 0; o < i.length; o++) { t.attributes.position[o] = i[o] } t.verticesNeedUpdate = true;
            THREE.Mesh.call(this, t, e);
            this.material = e;
            this.frustumCulled = false;
            this.renderOrder = 20;
            this.visible = false };
        o.inherit(THREE.Mesh, { show: function() { this.visible = true }, hide: function() { this.visible = false } });
        e.exports = o }, { 133: 133, 54: 54 }],
    83: [function(t, e, i) { var n = t("133"); var s = t("54"); var o = function() { var t = new THREE.PlaneBufferGeometry(2, 2, 1); var e = new s({ color: 16777215, map: n.getTexture("hurt.png"), opacity: 0, transparent: true, depthWrite: false }); var i = [-1, 1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0]; for (var o = 0; o < i.length; o++) { t.attributes.position[o] = i[o] } t.verticesNeedUpdate = true;
            THREE.Mesh.call(this, t, e);
            this.material = e;
            this.tweens = { opacity: new TWEEN.Tween };
            this.frustumCulled = false;
            this.visible = false };
        o.inherit(THREE.Mesh, { trigger: function() { this.visible = true;
                this.material.opacity = 1;
                this.tweens.opacity.reset(this.material).to({ opacity: 0 }, 750).easing(TWEEN.Easing.Quadratic.In).onComplete(function() { this.visible = false }.bind(this)).start() } });
        e.exports = o }, { 133: 133, 54: 54 }],
    84: [function(t, e, i) { var n = t("10"); var s = t("139"); var o = t("133"); var r = t("138"); var a = t("76"); var h = t("58"); var l = new THREE.SpriteMaterial({ depthWrite: false, blending: THREE.AdditiveBlending, opacity: .5, transparent: true }); var u = function(t) { THREE.Object3D.call(this);
            this.type = "magicsparks";
            this.source = t.source;
            this.material = new h({ fog: true, transparent: true, color: 5997311, depthWrite: false, map: o.getTexture("trail-glitter.png"), blending: THREE.AdditiveBlending });
            this.material.uvScale = new THREE.Vector2(1, 1);
            this.initPointCloud();
            this.age = 0; if (!l.map) l.map = o.getTexture("arrowfxcore.png");
            this.epicenter = new THREE.Sprite(l);
            this.epicenter.material.uvScale = new THREE.Vector2(1, 1);
            this.epicenter.scale.multiplyScalar(.5);
            this.add(this.epicenter);
            this.epicenter.position.copy(this.cloud.position) };
        u.inherit(THREE.Object3D, { setRenderOrder: function(t) { this.cloud.renderOrder = t }, update: function(t) { this.age += t.delta * 1e3;
                this.epicenter.position.copy(this.cloud.position);
                this.cloud.geometry.vertices.forEach(function(e, i) { var n = e.age / e.duration;
                    e.age += t.delta * 1e3;
                    e.lerp(e.target, .01); if (this.source && n > 1) { e.set(0, 0, 0);
                        e.target.copy(this.getRandomPosition());
                        e.age = 0 } if (e.age > this.age) { this.cloud.material.attributes.opacity.value[i] = 0 } else if (n > .75) { this.cloud.material.attributes.opacity.value[i] = .5 - .5 * (n - .75) / .25 } else if (n < .25) { this.cloud.material.attributes.opacity.value[i] = 1 } else { this.cloud.material.attributes.opacity.value[i] = 1 } }, this);
                this.cloud.geometry.verticesNeedUpdate = true;
                this.cloud.material.attributes.opacity.needsUpdate = true }, initPointCloud: function() { var t = new THREE.Geometry; var e = 50; var i = []; var n = []; for (var o = 0; o < e; o++) { var r = new THREE.Vector3;
                    r.target = (new THREE.Vector3).copy(this.getRandomPosition());
                    r.duration = 1e3;
                    r.age = r.duration / e * o;
                    r.alive = true;
                    t.vertices.push(r);
                    i.push(s.getRandomFloat(.05 * window.PIXEL_RATIO, .2 * window.PIXEL_RATIO));
                    n.push(1) } this.material.attributes.size.value = i;
                this.material.attributes.opacity.value = n;
                this.cloud = new THREE.PointCloud(t, this.material);
                this.cloud.frustumCulled = false;
                this.add(this.cloud) }, getRandomPosition: function() { var t = new THREE.Vector3; return function() { t.x += s.getRandomFloat(-1, 1);
                    t.y += s.getRandomFloat(-1, 1);
                    t.z += s.getRandomFloat(-1, 1);
                    t.normalize();
                    t.multiplyScalar(.5); return t } }(), destroy: function() { r.delay(3e3, function() { this.trigger("clear") }, this) } });
        e.exports = u }, { 10: 10, 133: 133, 138: 138, 139: 139, 58: 58, 76: 76 }],
    85: [function(t, e, i) { var n = t("139"); var s = t("133"); var o = t("60"); var r = new THREE.SpriteMaterial({ depthWrite: false }); var a = function(t) { t = _.extend({ count: 30 }, t);
            THREE.Object3D.call(this);
            this.type = "sparks";
            this.material = new o({ color: new THREE.Color(16771675), map: s.getTexture("spark.png"), depthWrite: false });
            this.material.prune = true; var e = u(t.count); var i = h(e); var n = l(i); var a = new THREE.Mesh(i, this.material);
            a.name = "sparks";
            this.material.attributes.quadIndex.value = n.quadIndex;
            this.material.attributes.timeDelay.value = n.timeDelay;
            this.add(a); if (!r.map) { r.map = s.getTexture("explosion.png") } this.epicenter = new THREE.Sprite(r);
            this.epicenter.material.uvScale = new THREE.Vector2(1, 1);
            this.epicenter.scale.multiplyScalar(.1);
            this.add(this.epicenter) };
        a.inherit(THREE.Object3D, {});

        function h(t) { var e = new THREE.Geometry; var i = new THREE.Vector3(0, 0, 1); var n = .25;
            t.forEach(function(t, s) { for (var o = 0; o < 4; o++) { e.vertices.push(t.clone()) } var r = s * 4; var a = new THREE.Face3(r, r + 1, r + 2);
                a.normal.copy(i);
                a.vertexNormals.push(i.clone(), i.clone(), i.clone());
                e.faceVertexUvs[0].push([new THREE.Vector2(0, 1), new THREE.Vector2(1, 1), new THREE.Vector2(0, 1 - n)]);
                e.faces.push(a); var h = new THREE.Face3(r + 1, r + 3, r + 2);
                h.normal.copy(i);
                h.vertexNormals.push(i.clone(), i.clone(), i.clone());
                e.faceVertexUvs[0].push([new THREE.Vector2(1, 1), new THREE.Vector2(1, 1 - n), new THREE.Vector2(0, 1 - n)]);
                e.faces.push(h) }); return e }

        function l(t) { var e = { quadIndex: [], timeDelay: [] }; var i = 0; var s = n.getRandomFloat(0, 1);
            t.vertices.forEach(function(t) { e.timeDelay.push(s);
                e.quadIndex.push(i++); if (i > 3) { i = 0;
                    s = n.getRandomFloat(0, 1) } }); return e }

        function u(t) { var e = [];
            e.push(new THREE.Vector3); for (var i = 0; i < t; i++) { var s = new THREE.Vector3;
                s.setX(n.getRandomFloat(-1, 1));
                s.setY(n.getRandomFloat(-1, 1));
                s.setZ(n.getRandomFloat(-1, 1));
                s.normalize();
                e.push(s) } return e } e.exports = a }, { 133: 133, 139: 139, 60: 60 }],
    86: [function(t, e, i) {
        var n = t("133");
        var s = t("62");
        var o = t("131");
        var r = function() {
            var t = new o(1, 1, 1);
            var e = new s({ color: 16777215, map: n.getTexture("sword-glitter.png"), opacity: 1, transparent: true, depthWrite: false });
            t.vertices[0].set(-1, 1, 0);
            t.vertices[1].set(1, 1, 0);
            t.vertices[2].set(-1, -1, 0);
            t.vertices[3].set(1, -1, 0);
            t.verticesNeedUpdate = true;
            THREE.Mesh.call(this, t, e);
            this.material = e;
            this.tweens = { progress: new TWEEN.Tween };
            this.frustumCulled = false;
            this.renderOrder = 10;
            this.visible = false
        };
        r.inherit(THREE.Mesh, { animate: function() { this.visible = true;
                this.material.progress = -.4;
                this.tweens.progress.reset(this.material).to({ progress: 1.4 }, 500).easing(TWEEN.Easing.Quartic.Out).onComplete(function() { this.visible = false }.bind(this)).start() } });
        e.exports = r
    }, { 131: 131, 133: 133, 62: 62 }],
    87: [function(t, e, i) { var n = t("139"); var s = t("133"); var o = t("10"); var r = t("76"); var a = t("58"); var h = function(t) { THREE.Object3D.call(this);
            this.type = "trail";
            this.source = t.source;
            this.material = new a({ fog: true, transparent: true, color: 5997311, depthWrite: false, map: s.getTexture("trail-glitter.png"), blending: THREE.AdditiveBlending });
            this.material.uvScale = new THREE.Vector2(1, 1);
            this.initPointCloud();
            this.age = 0 };
        h.inherit(r, { setRenderOrder: function(t) { this.cloud.renderOrder = t }, update: function(t) { this.age += t.delta * 1e3;
                this.cloud.geometry.vertices.forEach(function(e, i) { var n = e.age / e.duration;
                    e.age += t.delta * 1e3;
                    e.lerp(e.target, .01); if (this.source && n > 1) { this.source.updateMatrixWorld();
                        e.setFromMatrixPosition(this.source.mesh.matrixWorld);
                        e.target.copy(this.getRandomPosition());
                        e.age = 0 } if (e.age > this.age) { this.cloud.material.attributes.opacity.value[i] = 0 } else if (n > .75) { this.cloud.material.attributes.opacity.value[i] = .5 - .5 * (n - .75) / .25 } else if (n < .25) { this.cloud.material.attributes.opacity.value[i] = .5 * (n / .25) } else { this.cloud.material.attributes.opacity.value[i] = .5 } }, this);
                this.cloud.geometry.verticesNeedUpdate = true;
                this.cloud.material.attributes.opacity.needsUpdate = true }, initPointCloud: function() { var t = new THREE.Geometry; var e = 50; var i = []; var s = []; for (var o = 0; o < e; o++) { var r = new THREE.Vector3;
                    this.source.updateMatrixWorld();
                    r.setFromMatrixPosition(this.source.mesh.matrixWorld);
                    r.target = (new THREE.Vector3).copy(this.getRandomPosition());
                    r.duration = 500;
                    r.age = r.duration / e * o;
                    r.alive = true;
                    t.vertices.push(r);
                    i.push(n.getRandomFloat(.1 * window.PIXEL_RATIO, .2 * window.PIXEL_RATIO));
                    s.push(.5) } this.material.attributes.size.value = i;
                this.material.attributes.opacity.value = s;
                this.cloud = new THREE.PointCloud(t, this.material);
                this.cloud.frustumCulled = false;
                this.add(this.cloud) }, getRandomPosition: function() { var t = new THREE.Vector3; return function() { t.copy(this.source.position);
                    t.x += -(o.UNIT / 4) + Math.random() * o.UNIT / 2;
                    t.z += -(o.UNIT / 4) + Math.random() * o.UNIT / 2;
                    t.y += -(o.UNIT / 4) + Math.random() * o.UNIT / 2; return t } }() });
        e.exports = h }, { 10: 10, 133: 133, 139: 139, 58: 58, 76: 76 }],
    88: [function(t, e, i) { var n = t("54"); var s = t("131"); var o = function() { var t = new s(1, 1, 1); var e = new n({ color: 0, opacity: 1, transparent: true, depthWrite: false, depthTest: false });
            t.vertices[0].set(-1, 1, 0);
            t.vertices[1].set(1, 1, 0);
            t.vertices[2].set(-1, -1, 0);
            t.vertices[3].set(1, -1, 0);
            t.verticesNeedUpdate = true;
            THREE.Mesh.call(this, t, e);
            this.material = e;
            this.tweens = { opacity: new TWEEN.Tween };
            this.frustumCulled = false;
            this.visible = true;
            this.renderOrder = 100 };
        o.inherit(THREE.Mesh, { trigger: function() { this.visible = true;
                this.material.opacity = 1;
                this.tweens.opacity.reset(this.material).to({ opacity: 0 }, 750).easing(TWEEN.Easing.Quadratic.In).onComplete(function() { this.visible = false }.bind(this)).start() }, setOpacity: function(t) { this.material.opacity = t }, fadeOut: function(t, e) { var i = t !== undefined ? t : 0; var n = e !== undefined ? e : 350;
                this.tweens.opacity.reset(this.material).to({ opacity: i }, n).start() }, fadeIn: function(t, e) { var i = t !== undefined ? t : .65; var n = e !== undefined ? e : 350;
                this.tweens.opacity.reset(this.material).to({ opacity: i }, n).start() } });
        e.exports = o }, { 131: 131, 54: 54 }],
    89: [function(t, e, i) { var n = t("139"); var s = t("133"); var o = t("55"); var r = t("124"); var a = function(t) { THREE.Object3D.call(this); var e = n.getAspectRatio(); var i = new o({ color: 16777215, map: s.getTexture("mob-healthbar.png"), baseColor: 3932160, fillColor: 14296093, scale: new THREE.Vector2(3, 3), aspectRatio: e, transparent: true, opacity: 0, depthWrite: false });
            i.prune = true;
            this.material = i; var a = new r;
            this.material.attributes = a.material.attributes;
            a.material = this.material;
            this.add(a);
            this.tweens = { fullness: new TWEEN.Tween, opacity: new TWEEN.Tween };
            a.renderOrder = 10;
            this.visible = false };
        a.inherit(THREE.Object3D, { update: function(t) { this.tweens.fullness.reset(this.material).to({ fullness: t }, 250).easing(TWEEN.Easing.Quadratic.Out).start() }, show: function() { this.visible = true;
                this.tweens.opacity.reset();
                this.material.opacity = 1 }, hide: function() { this.tweens.opacity.reset(this.material).to({ opacity: 0 }, 350).onComplete(function() { this.visible = false }.bind(this)).start() } });
        e.exports = a }, { 124: 124, 133: 133, 139: 139, 55: 55 }],
    90: [function(t, e, i) { var n = t("10"); var s = t("30"); var o = t("133"); var r = t("76"); var a = t("67"); var h = t("70"); var l = function(t) { r.call(this, t);
            this.type = "item";
            this.initMesh({ id: t.id });
            this.initShadow();
            this.mesh.material = t.material; if (!this.mesh.material.map) { var e = t.textureOverride || t.id + ".png";
                this.mesh.material.map = o.getTexture(e) } this.mesh.material.emissive.setHex(12303291);
            this.shadow.position.y = -(n.UNIT / 4) + .01;
            this.shadow.scale.set(.3, .3, 1);
            this.mesh.renderOrder = 3 };
        l.inherit(r, { spawn: function(t, e) { this.position.set((t + .5) * n.UNIT, n.UNIT / 4, (e + .5) * n.UNIT);
                s.tween(800, TWEEN.Easing.Elastic.Out).onUpdate(function(t) { this.scale.set(t, t, t) }.bind(this)) }, loot: function(t) {}, rotate: function() { var t = new THREE.Vector3(0, 1, 0); return function(e) { this.rotateOnAxis(t, .05) } }(), update: function(t) { this.rotate(t) } });
        l.mixin(a);
        l.mixin(h);
        e.exports = l }, { 10: 10, 133: 133, 30: 30, 67: 67, 70: 70, 76: 76 }],
    91: [function(t, e, i) { var n = t("10"); var s = t("90"); var o = t("56"); var r = new o; var a = function() { s.call(this, { id: "bag", material: r });
            this.lootMessage = "You have looted 10 gold.";
            this.mesh.rotation.x = Math.PI / 6;
            this.shadow.scale.set(.5, .5, 1) };
        a.inherit(s, { loot: function(t) { t.lootBag() } });
        e.exports = a }, { 10: 10, 56: 56, 90: 90 }],
    92: [function(t, e, i) { var n = t("10"); var s = t("90"); var o = t("56"); var r = new o; var a = function() { s.call(this, { id: "bomb", material: r });
            this.lootMessage = "You have looted a bomb.";
            this.mesh.scale.multiplyScalar(.8);
            this.mesh.rotation.x = Math.PI / 6;
            this.mesh.position.z -= .1;
            this.mesh.position.y -= .1;
            this.shadow.scale.set(.5, .5, 1) };
        a.inherit(s, { loot: function(t) { t.lootBomb() } });
        e.exports = a }, { 10: 10, 56: 56, 90: 90 }],
    93: [function(t, e, i) { var n = t("10"); var s = t("90"); var o = t("56"); var r = new o;
        r.side = THREE.DoubleSide; var a = function() { s.call(this, { id: "chest", material: r });
            this.lootMessage = "You have looted 50 gold.";
            this.shadow.scale.set(.85, .85, 1) };
        a.inherit(s, { loot: function(t) { t.lootChest() } });
        e.exports = a }, { 10: 10, 56: 56, 90: 90 }],
    94: [function(t, e, i) { var n = t("10"); var s = t("90"); var o = t("59"); var r = new THREE.ImageUtils.loadTextureCube(["textures/level/envmap/posx.jpg", "textures/level/envmap/negx.jpg", "textures/level/envmap/posy.jpg", "textures/level/envmap/negy.jpg", "textures/level/envmap/posz.jpg", "textures/level/envmap/negz.jpg"]); var a = new o({ color: 12819456, shading: THREE.FlatShading, envMap: r, reflectivity: .5, map: null }); var h = function() { s.call(this, { id: "key", material: a });
            this.mesh.material.map = null;
            this.mesh.material.combine = THREE.MultiplyOperation;
            this.lootMessage = "You have looted a key.";
            this.mesh.rotation.x = Math.PI / 2;
            this.mesh.rotation.y = Math.PI / 4;
            this.shadow.scale.x = .4 };
        h.inherit(s, { loot: function(t) { t.lootKey() } });
        e.exports = h }, { 10: 10, 59: 59, 90: 90 }],
    95: [function(t, e, i) { var n = t("10"); var s = t("90"); var o = t("56"); var r = new o; var a = function() { s.call(this, { id: "potion", material: r });
            this.lootMessage = "You have looted a potion.";
            this.mesh.rotation.x = Math.PI / 6 };
        a.inherit(s, { loot: function(t) { t.lootPotion() } });
        e.exports = a }, { 10: 10, 56: 56, 90: 90 }],
    96: [function(t, e, i) { var n = t("10"); var s = t("90"); var o = t("56"); var r = new o({ alphaTest: 1, side: THREE.DoubleSide }); var a = function() { s.call(this, { id: "quiver", material: r, textureOverride: "bow.png" });
            r.transparent = true;
            r.side = THREE.DoubleSide;
            this.lootMessage = "You have looted a bunch of arrows.";
            this.mesh.rotation.x = Math.PI / 4 };
        a.inherit(s, { loot: function(t) { t.lootQuiver() } });
        e.exports = a }, { 10: 10, 56: 56, 90: 90 }],
    97: [function(t, e, i) { var n = t("10"); var s = t("129"); var o = t("139"); var r = t("30"); var a = t("133"); var h = t("138"); var l = t("41"); var u = t("66"); var c = t("51"); var d = t("120"); var f = t("121"); var p = t("123"); var v = t("126"); var g = t("77"); var m = t("14"); var y = t("94"); var w = t("95"); var E = t("96"); var b = t("92"); var T = t("91"); var x = t("93"); var C = t("9"); var P = function(t) { THREE.Object3D.call(this);
            this.width = t.width;
            this.height = t.height;
            this.filepath = t.filepath;
            this.objects = {};
            this.entities = {};
            this.positions = {};
            this.mobs = [];
            this.items = {};
            this.torches = {};
            this.doors = {};
            this.diseaseCloudCoords = {};
            this.clouds = {};
            this.lights = [];
            this.trails = [];
            this.lightVariance = 0;
            this.lightVarianceSign = 1;
            this.lightVarianceSpeed = 60;
            this.grid = new l(this.width, this.height); if (n.DEBUG) this.initGridCubes();
            this.initMovingLights() };
        P.inherit(THREE.Object3D, { onPlayerReset: function() { var t = this.getCoordsIndex(this.player.coords);
                this.player.nextCoords.copy(this.player.coords); if (this.torches[t]) { var e = this.torches[t]; if (e.orientation.equals(this.player.orientation)) { e.hide();
                        this.hiddenTorch = e } } }, getPosition: function(t) { return this.positions[t] }, onItemDrop: function(t, e) { var i = t.moving ? this.grid.getClosestCoords(t.position) : t.coords; var n = e ? "key" : m.dropItem(this.player); if (n === "key") { this.addItem(new y, i) } if (n === "potion") { this.addItem(new w, i) } if (n === "quiver") { this.addItem(new E, i) } if (n === "bomb") { this.addItem(new b, i) } if (n === "bag") { this.addItem(new T, i) } if (n === "chest") { this.addItem(new x, i) } }, addItem: function(t, e) { var i = this.getCoordsIndex(e);
                t.spawn(e.x, e.y);
                this.add(t);
                t.level = this; if (!this.items[i]) { this.items[i] = [] } this.items[i].push(t);
                t.coords = e;
                this.addObject(t) }, addKey: function(t) { var e = new y;
                this.addItem(e, t);
                this.addObject(e) }, addTorch: function(t, e) { var i = new v; var n = this.getCoordsIndex(t); if (!this.torchSpriteMaterial) this.torchSpriteMaterial = i.sprite.material;
                i.orientation = s[e.toUpperCase()];
                i.setCoords(t, e);
                this.add(i);
                this.torches[n] = i;
                i.updateMatrixWorld();
                i.light.position.setFromMatrixPosition(i.light.matrixWorld);
                this.add(i.light);
                this.lights.push(i.light);
                this.addObject(i) }, addProp: function(t, e) { var i = new d({ id: t, coords: e });
                this.add(i);
                i.level = this;
                this.addObject(i) }, addJar: function(t) { var e = new f({ id: "jar", coords: t, destructible: true });
                this.add(e);
                e.level = this;
                e.type = "jar";
                this.grid.set(t, e);
                this.setupEntityEvents(e);
                this.addObject(e) }, addExitDoor: function(t) { this.exitDoor = new g;
                this.exitDoor.position.set(t.x * n.UNIT, 0, t.y * n.UNIT);
                this.exitDoor.position.x += n.UNIT / 2; var e = this.getAdjacentCoords(t); var i = ["north", "east", "south", "west"]; for (var s = 0; s < 4; s++) { if (!this.isWallAt(e[s])) { this.exitDoor.setOrientation(i[s]); break } } this.add(this.exitDoor);
                this.exitDoor.coords = t;
                this.addObject(this.exitDoor) }, addTable: function(t, e) { var i = new p({ coords: t }); if (e === "north") { i.rotation.y -= Math.PI / 2 } this.add(i);
                this.grid.set(t, i);
                this.addObject(i) }, addDoor: function(t, e) { var i = this.getCoordsIndex(e);
                this.doors[i] = t;
                this.addEntity(t, e) }, addObject: function(t) { this.objects[t.id] = t }, removeObject: function(t) { delete this.objects[t.id] }, unlockDoor: function(t) { this.doors[t].unlock();
                delete this.doors[t];
                C.play("gate") }, getStartingOrientation: function() { var t = this.positions.entrance; var e = this.getAdjacentCoords(t); var i = ["north", "east", "south", "west"]; for (var n = 0; n < 4; n++) { if (!this.isWallAt(e[n])) { return i[n] } } }, getAdjacentCoords: function(t) { return [new THREE.Vector2(t.x, t.y - 1), new THREE.Vector2(t.x + 1, t.y), new THREE.Vector2(t.x, t.y + 1), new THREE.Vector2(t.x - 1, t.y)] }, getIndexCoords: function(t) { var e = t % this.width; var i = Math.floor(t / this.height); return new THREE.Vector2(e, i) }, getCoordsIndex: function(t) { return t.x + t.y * this.width }, onEntityMoving: function(t) { if (t.type == "projectile") return;
                this.grid.clear(t.coords);
                this.grid.set(t.nextCoords, t);
                t.onMove(this) }, cancelEntityMovement: function(t) { if (t.moving) { this.grid.clear(t.nextCoords);
                    this.grid.set(t.coords, t) } }, onPlayerHasMoved: function(t) { var e = this.getCoordsIndex(t.coords); if (this.items[e]) { this.items[e].forEach(function(i, n) { var i = this.items[e][n]; var s = i.id;
                        i.loot(t);
                        this.remove(this.getObjectById(s));
                        this.removeObject(i);
                        this.trigger("message", i.lootMessage, i) }, this);
                    delete this.items[e] } if (this.isDiseaseCloudAt(t.coords)) { t.takeDamage(10) } if (this.torchOnPlayerCoords && !this.torchOnPlayerCoords.coords.equals(t.coords)) { this.torchOnPlayerCoords.setFrustumCulling(true);
                    this.torchOnPlayerCoords = null } this.updateIdleMobs();
                C.setTorchVolume(this.distanceToClosestTorch()) }, onPlayerMove: function(t) { this.updateTorchVisibility(t);
                this.sortClouds() }, onPlayerTurn: function(t) { this.updateTorchVisibility(t);
                this.sortClouds() }, updateTorchVisibility: function(t) { var e = this.getCoordsIndex(t.nextCoords); if (this.torches[e]) { var i = this.torches[e];
                    i.setFrustumCulling(false);
                    this.torchOnPlayerCoords = i; if (i.orientation.equals(t.orientation)) { i.hide();
                        this.hiddenTorch = i } else if (this.hiddenTorch) { i.show();
                        this.hiddenTorch = null } } else if (this.hiddenTorch) { this.hiddenTorch.show();
                    this.hiddenTorch = null } }, updateIdleMobs: function() { _.each(this.mobs, function(t) { if (t.currentState === "idle") { t.stateNeedsUpdate = true } }, this) }, canMoveTo: function(t) { var e = this.grid.at(t); if (!_.isNumber(e) && e.type === "mob" && (!e.alive || (!e.moving && !t.equals(e.coords) || e.moving && !t.equals(e.nextCoords)))) { this.grid.clear(t);
                    e = 0 } return e === 0 && !t.equals(this.positions.exit) }, isWallAt: function(t) { return this.grid.at(t) === 1 }, addDiseaseCloud: function(t) { var e = t.x + "," + t.y;

                function i(t) { this.diseaseCloudCoords[t].stop();
                    delete this.diseaseCloudCoords[t] } if (this.isDiseaseCloudAt(t)) { i.call(this, e) } this.diseaseCloudCoords[e] = h.delay(2500, i.bind(this, e)) }, isDiseaseCloudAt: function(t) { var e = t.x + "," + t.y; return _.has(this.diseaseCloudCoords, e) }, tryOpeningDoor: function(t, e) { var i = this.getCoordsIndex(t); var n = e.getFrontCoords().equals(t); if (n && this.isDoor(i)) { if (e.hasKey()) { e.useKey();
                        this.grid.clear(t);
                        this.unlockDoor(i);
                        this.trigger("message", "You have unlocked the gate."); return true } else { this.trigger("message", "You need a key to open this gate.");
                        C.play("locked"); return false } } }, isDoor: function(t) { return _.has(this.doors, t) }, hasEntity: function(t) { return t && _.has(this.entities, t.id) }, addEntity: function(t, e) { t.level = this; if (e) { t.setCoords(e) } this.entities[t.id] = t;
                this.add(t); if (t.type === "player" || t.type === "mob" || t.type === "door") { this.grid.set(t.coords, t) } if (t.lightSource && this.hasAvailableLights()) { this.lightSources.push(t);
                    t.light = this.movingLights[this.lightSources.length - 1];
                    t.light.color.setHex(t.lightColor) } t.onAdd(this);
                this.setupEntityEvents(t);
                this.addObject(t) }, removeEntity: function(t) { if (!this.hasEntity(t)) return; if (this.grid.at(t.coords) === t) { this.grid.clear(t.coords) } t.onRemove(this); if (t.lightSource) { this.lightSources.splice(this.lightSources.indexOf(t), 1);
                    t.light.position.set(1e3, 1e3, 1e3) } if (t.type !== "player") { t.off && t.off();
                    t.dispose() } delete this.entities[t.id];
                this.remove(t);
                this.removeObject(t) }, setupEntityEvents: function(t) { if (t.type === "mob") { var e = t;
                    this.mobs.push(t);
                    e.on("drop", this.onItemDrop.bind(this, e));
                    e.on("die", function() { if (e.moving) { this.grid.clear(e.nextCoords) } else { this.grid.clear(e.coords) } e.stopMoving() }.bind(this));
                    e.on("dead", function() { this.removeEntity(e) }.bind(this)) } if (t.type === "jar") { var i = t;
                    i.on("drop", this.onItemDrop.bind(this, i));
                    i.on("destroyed", function() { this.grid.clear(i.coords);
                        i.on("remove", function() { this.remove(i);
                            this.removeObject(i) }.bind(this)) }.bind(this)) } }, setPlayer: function(t) { this.player = t }, getPlayerCoords: function() { return this.player.moving ? this.player.nextCoords : this.player.coords }, isPlayerAlive: function() { return this.player.alive }, distanceToPlayer: function(t) { return t.coords.distanceTo(this.player.coords) }, distanceToClosestTorch: function() { _.each(this.torches, function(t, e) { t.distance = this.distanceToPlayer(t) }, this); return _.sortBy(this.torches, function(t) { return t.distance })[0].distance }, hasFreeLineOfSight: function() { var t = new THREE.Vector2; return function(e, i) { var n = true;
                    t.addVectors(e.coords, e.orientation); while (!t.equals(i)) { if (this.grid.at(t) !== 0) { n = false; break } t.add(e.orientation) } return n } }(), getPathToPlayer: function(t) { var e; var i = this.player.moving ? this.player.nextCoords : this.player.coords;
                this.grid.clear(t.coords);
                this.grid.clear(i);
                e = this.grid.findPath(t.coords, i);
                this.grid.set(t.coords, t);
                this.grid.set(i, this.player); return e }, getEntitiesAround: function(t, e) { var i = t.getSurroundingCoords(e); var n = [];
                i.forEach(function(t) { if (this.getEntityAt(t)) { n.push(this.getEntityAt(t)) } }.bind(this)); return n }, getEntityAt: function(t, e) { var i = this.grid.at(t);
                e = e || []; if (i && _.isFunction(i.setCoords) && !_.include(e, i.type)) { return i } }, destroy: function() { _.each(this.entities, function(t) { if (t.type !== "player") { t.off() } if (t.animated) { t.stopAnimation() } this.removeEntity(t) }, this) }, openExit: function() { this.exitDoor.animate() }, exit: function() { this.trigger("exit");
                this.destroy() }, initGridCubes: function() { var t = new THREE.BoxGeometry(n.UNIT * .9, .01, n.UNIT * .9); var e = new c({ color: 16711935 });
                this.gridCubes = [];
                this.cubes = new THREE.Object3D;
                this.add(this.cubes); for (var i = 0; i < this.height; i++) { this.gridCubes[i] = []; for (var s = 0; s < this.width; s++) { var o = new THREE.Mesh(t, e);
                        o.position.copy(r.getWorldPosition({ x: s, y: i }, .01));
                        this.gridCubes[i][s] = o;
                        this.cubes.add(o) } } }, initMovingLights: function() { var t = 5;
                this.lightSources = [];
                this.movingLights = []; for (var e = 0; e < t; e++) { var i = new THREE.PointLight(16759296, 1.5, 1.5 * n.UNIT);
                    i.position.set(1e3, 1e3, 1e3);
                    this.add(i);
                    this.movingLights.push(i) } this.lights = this.lights.concat(this.movingLights) }, hasAvailableLights: function() { return this.lightSources.length < this.movingLights.length }, updateGridCubes: function() { if (!this.gridCubes) return; for (var t = 0; t < this.height; t++) { for (var e = 0; e < this.width; e++) { this.gridCubes[t][e].visible = !!this.grid.at({ x: e, y: t }) } } }, updateEntities: function(t) { _.invoke(this.entities, "update", t) }, updatePlayer: function(t) { this.player.update(t) }, updateTorches: function(t) { var e = .2; if (!this.torchSpriteMaterial) return; if (!this.lastTorchUpdate) { this.lastTorchUpdate = t.elapsed } if (t.elapsed - this.lastTorchUpdate > e) { _.forEach(this.torches, function(t) { t.updateSprite() }, this);
                    this.lastTorchUpdate = t.elapsed } }, updateItems: function(t) { _.each(this.items, function(e) { _.invoke(e, "update", t) }) }, updateMovingLights: function() { if (this.lightSources.length > 0) { this.lightSources.forEach(function(t, e) { t.light.position.copy(t.position) }, this) } }, updateLightVariance: function(t) { this.lightVariance += t.delta * (o.getRandomFloat(-.075, .1) * this.lightVarianceSign) * this.lightVarianceSpeed; if (this.lightVariance > 0) { this.lightVariance = 0;
                    this.lightVarianceSign = -1 } if (this.lightVariance < -1) { this.lightVariance = -1;
                    this.lightVarianceSign = 1 } this.walls.material.lightVariance = this.lightVariance;
                this.ground.material.lightVariance = this.lightVariance;
                this.ceiling.material.lightVariance = this.lightVariance }, sortClouds: function() { _.each(this.clouds, function(t, e) { if (t.source) { t.distance = this.distanceToPlayer(t.source) } }, this);
                this.sortedClouds = _.sortBy(this.clouds, function(t) { return t.distance }).reverse();
                _.each(this.sortedClouds, function(t, e) { t.setRenderOrder(e + 1) }) }, updateObjectVisibility: function() { var t = []; var e = this.chunkGrid.getChunkFromLevelCoords(this.player.coords); var i = [e.id];
                _.each(e.connectedChunks, function(t) { if (t.length > 0) { i.push(t[0].id) } }); var n = r.getOrientationName(this.player.orientation); var s = e.connectedChunks[n]; if (s.length > 1) { i.push(s[1].id) } _.each(this.objects, function(e) { var n = this.chunkGrid.getChunkFromLevelCoords(e.coords); if (n && (e.type === undefined || e.type !== "player")) { e.visible = false; if (_.contains(i, n.id)) { t.push(e);
                            e.visible = true } } }, this) }, updateDiseaseClouds: function(t) { _.each(this.clouds, function(e) { e.update(t) }) }, updateTrails: function(t) { this.trails.forEach(function(e) { e.update(t) }) }, update: function(t) { if (!this.exiting) { this.updateEntities(t);
                    this.updateItems(t);
                    this.updateGridCubes();
                    this.updateTorches(t);
                    this.updateMovingLights();
                    this.updateDiseaseClouds(t);
                    this.updateTrails(t);
                    this.updateObjectVisibility() } else { this.updatePlayer(t) } }, dispose: function() { var t = [];
                this.children.forEach(function(e) { t.push(e) }, this);
                t.forEach(function(t) { this.remove(t) }, this);
                t = null;
                _.each(this.objects, function(t) { t.level = null;
                    t.owner = null; if (t.type !== "player") { t.off && t.off();
                        t.dispose && t.dispose() } }, this);
                this.off() } });
        P.mixin(u);
        e.exports = P }, { 10: 10, 120: 120, 121: 121, 123: 123, 126: 126, 129: 129, 133: 133, 138: 138, 139: 139, 14: 14, 30: 30, 41: 41, 51: 51, 66: 66, 77: 77, 9: 9, 91: 91, 92: 92, 93: 93, 94: 94, 95: 95, 96: 96 }],
    98: [function(t, e, i) { var n = t("10"); var s = t("30"); var o = t("133"); var r = t("138"); var a = t("76"); var h = t("67"); var l = t("69"); var u = t("68"); var c = t("63"); var d = t("64"); var f = t("71"); var p = t("70"); var v = t("56"); var g = t("89"); var m = t("79"); var y = t("9"); var w = t("81"); var E = function(t) { t = _.extend({}, { moveDuration: 750, turnDuration: 400, strafe: false, strafeDelay: 100, maxHealth: 50, aggroRange: 4, followMaxLength: 10, healthbarOffset: 0, wakeupCooldown: 500, hurtCooldown: 700 }, t);
            a.call(this, t);
            this.type = "mob";
            this.aggroed = false;
            this.attacking = false;
            this.waiting = false;
            this.hurting = false;
            this.elapsedTime = 0;
            this.frozenColor = new THREE.Color(57855);
            this.wakeupCooldown = t.wakeupCooldown;
            this.hurtCooldown = t.hurtCooldown;
            this.aggroRange = t.aggroRange;
            this.followMaxLength = t.followMaxLength;
            this.strafeEnabled = t.strafe;
            this.strafeDelay = t.strafeDelay;
            this.freezeOffset = t.freezeOffset;
            this.dizzyOffset = t.dizzyOffset; if (t.weapon) { this.weapon = t.weapon;
                this.initWeapon(this.weapon) } this.initMesh({ id: t.model || t.id, skinned: true });
            this.mesh.material = new v({ map: o.getTexture(t.id + ".png"), skinning: true, emissive: 12303291 });
            this.mesh.material.prune = true;
            this.mesh.position.y -= .5 * n.UNIT;
            this.mesh.rotation.y = Math.PI / 2;
            this.mesh.renderOrder = 4;
            this.initAnimation(this.mesh, t.animations);
            this.initMovement({ moveDuration: t.moveDuration, turnDuration: t.turnDuration });
            this.initCombat({ maxHealth: t.maxHealth, block: t.block });
            this.initStateMachine({ states: ["idle", "follow", "dead", "melee", "range", "stun"] });
            this.initStateConditions();
            this.initShadow();
            this.initHealthBar(t.healthbarOffset);
            this.initDizzyEffect();
            this.initEffectHandlers();
            this.on("hit", this.onHit, this);
            this.on("block", this.onBlock, this);
            this.on("die", this.onDeath, this);
            this.tweens.flash = new TWEEN.Tween };
        E.inherit(a, { update: function(t) { this.weapon.update(t);
                this.elapsedTime = t.elapsed; if (!this.frozen) { if (n.AI) { this.updateStateMachine(t) } if (this.needsAnimationUpdate) { this.updateAnimation(t) } if (this.stunned) { this.dizzyEffect.update(t) } } if (this.freezeEffect) { this.freezeEffect.update(t) } }, initHealthBar: function(t) { this.healthBar = new g;
                this.add(this.healthBar);
                this.healthBar.position.y = n.UNIT * .05 + t }, initDizzyEffect: function() { this.dizzyEffect = new m({ offset: this.dizzyOffset });
                this.add(this.dizzyEffect);
                this.dizzyEffect.hide() }, initEffectHandlers: function() { Object.defineProperty(this, "frozen", { get: function() { if (this._frozen === undefined) { this._frozen = false } return this._frozen }, set: function(t) { this._frozen = t; if (t == true) { this.mesh.material.overlayColor = this.frozenColor;
                            this.mesh.material.overlayBlend = .25 } else { this.mesh.material.overlayBlend = 0 } } });
                Object.defineProperty(this, "stunned", { get: function() { if (this._stunned === undefined) { this._stunned = false } return this._stunned }, set: function(t) { this._stunned = t; if (t === false) { this.unstun();
                            this.stunTimer.stop() } this.stateNeedsUpdate = true } }) }, initWeapon: function(t) { t.on("use", this.onWeaponUse, this);
                t.on("ready", function() { this.attacking = false }, this) }, onWeaponUse: function() { this.playAnimation("attack") }, onHit: function(t, e) { var i = this.stunned; var n = false; if (!this.aggroed && e.type === "projectile" && e.sender.type === "player") { this.aggroed = true;
                    this.stateNeedsUpdate = true } if (t > 0) { if (this.stunned) { this.stunned = false;
                        n = true } if (this.frozen) { this.timesHurtWhileFrozen++; if (this.timesHurtWhileFrozen === 2) { delete this.timesHurtWhileFrozen;
                            this.frozen = false;
                            this.freezeTimer.stop();
                            this.onUnfreeze();
                            n = true } } if (n) { if (this.weapon) { this.weapon.resetCooldown();
                            this.weapon.setCooldownDuration(this.wakeupCooldown, true) } } this.flash(); if (this.alive) { this.hurt(); if (n) { this.hurting = false } y.playHit(this.level.distanceToPlayer(this)) } else { y.play("kill", this.level.distanceToPlayer(this)) } } }, onBlock: function(t) { this.onHit(0, t);
                y.play("block") }, onFreeze: function() { this.freezeEffect = new w({ source: this.mesh, offset: this.freezeOffset });
                this.add(this.freezeEffect);
                r.delay(2e3, function() { this.remove(this.freezeEffect);
                    this.freezeEffect = null }, this) }, onDeath: function() { this.weapon.cancelUse();
                this.healthBar.update(0);
                this.healthBar.hide();
                this.trigger("drop", this.hasKey);
                this.frozen = false }, hurt: function() { this.hurting = true;
                r.delay(this.hurtCooldown, function() { this.hurting = false }, this);
                this.playHurtAnimation();
                this.updateHealthBar() }, playHurtAnimation: function() { if (this.currentAnimation.name !== "attack" || this.knockedBack) { this.playAnimation("hurt") } }, updateHealthBar: function() { if (this.healthBarTimer) { this.healthBarTimer.stop() } this.healthBar.show();
                this.healthBar.update(this.health / this.maxHealth);
                this.healthBarTimer = r.delay(1e3, function() { this.healthBar.hide() }, this) }, flash: function() { this.mesh.material.whiteness = .75;
                this.tweens.flash.reset(this.mesh.material).to({ whiteness: 0 }, 250).easing(TWEEN.Easing.Cubic.In).start() }, isBusy: function() { if (!this.alive) return false; return this.moving || this.turning || this.attacking || this.waiting || this.hurting }, canChooseState: function() { var t = this.getState(); return !(t === "dead") && (this.stateNeedsUpdate || !this.isBusy() && t !== "idle") }, initStateConditions: function() { var t = this.pushStateCondition.bind(this);
                t("dead", function() { return !this.alive });
                t("stun", function() { return this.stunned });
                t("idle", function() { return !this.level.isPlayerAlive() || !this.aggroed && this.level.distanceToPlayer(this) > this.aggroRange || this.aggroed && this.level.getPathToPlayer(this).length > this.followMaxLength + 1 });
                t("range", function() { return this.weapon.type === "range" && this.isFacing(this.level.getPlayerCoords()) && this.level.hasFreeLineOfSight(this, this.level.getPlayerCoords()) && this.level.distanceToPlayer(this) <= this.aggroRange });
                t("melee", function() { return this.level.distanceToPlayer(this) <= 1 && this.isFacing(this.level.getPlayerCoords()) });
                t("follow", function() { return this.aggroed || !this.aggroed && this.level.distanceToPlayer(this) <= this.aggroRange });
                t("idle", function() { return true }) }, idle: function() { if (this.currentAnimation.name === "idle") return; if (this.currentAnimation.loop) { this.playAnimation("idle") } }, roam: function() { if (!this.moving) { this.moveForward() } }, dead: function() { this.playAnimation("die") }, follow: function() { var t = new THREE.Vector2; return function() { if (!this.aggroed) this.aggroed = true; if (!this.isBusy()) { this.path = this.level.getPathToPlayer(this); if (this.path.length === 0 || this.path.length > this.followMaxLength) { this.wait(1e3); if (!this.hasStartedFollowing) { this.aggroed = false } return } this.hasStartedFollowing = true;
                        t.fromArray(this.path[1]); if (this.canStrafe(t)) { if (this.strafeTimer || this.strafing || this.level.player.moving) return;
                            this.strafeTimer = r.delay(this.strafeDelay, function() { this.strafeTo(t) }, this) } else { this.clearStrafeTimer(); if (!this.isFacing(t)) { this.turnTo(t);
                                this.playAnimation("idle") } else if (this.path.length > 2) { this.moveTo(t);
                                this.playAnimation("walk") } else { if (n.VERBOSE) console.warn("Should not happen") } } } } }(), canStrafe: function() { var t = new THREE.Vector2; return function(e) { if (!this.strafeEnabled) return false;
                    t.fromArray(this.path[this.path.length - 1]); return !this.isFacing(t) && this.isFacing(t, e) } }(), canBlock: function(t) { return this.blockEnabled && !this.stunned && !this.frozen && s.areOpposite(this.orientation, t.orientation) && (!this.turning || this.turning && this.tweens.turn.getProgress() > .5) }, strafeTo: function(t) { var e = this.moveEasing;
                this.moveEasing = TWEEN.Easing.Quadratic.InOut;
                this.moveTo(t);
                this.moveEasing = e;
                this.playAnimation(this.getTurnDirectionTo(t));
                this.clearStrafeTimer();
                this.strafing = true }, clearStrafeTimer: function() { if (this.strafeTimer) { this.strafeTimer.stop();
                    delete this.strafeTimer } }, melee: function() { if (!this.attacking && this.weapon.isReady()) { this.attacking = true;
                    this.weapon.use();
                    this.clearStrafeTimer() } }, range: function() { if (!this.attacking) { this.attacking = true;
                    this.trigger("range");
                    r.delay(this.weapon.delay, function() { this.attacking = false }, this);
                    this.clearStrafeTimer() } }, stun: function() { this.playAnimation("dizzy");
                this.dizzyEffect.show() }, unstun: function() { this.dizzyEffect.hide() }, wait: function(t) { this.waiting = true;
                r.delay(t, function() { this.waiting = false }, this) }, onRemove: function(t) { t.mobs.splice(t.mobs.indexOf(this), 1) }, onUnfreeze: function() {}, dispose: function() { a.prototype.dispose.call(this);
                this.level = null;
                this.tweens = null;
                this.off() } });
        E.mixin(h);
        E.mixin(l);
        E.mixin(u);
        E.mixin(d);
        E.mixin(c);
        E.mixin(f);
        E.mixin(p);
        e.exports = E }, { 10: 10, 133: 133, 138: 138, 30: 30, 56: 56, 63: 63, 64: 64, 67: 67, 68: 68, 69: 69, 70: 70, 71: 71, 76: 76, 79: 79, 81: 81, 89: 89, 9: 9 }],
    99: [function(t, e, i) { var n = t("10"); var s = t("98"); var o = t("167"); var r = function(t) { s.call(this, _.extend({ id: "bat", moveDuration: 400, strafe: true, strafeDelay: 150, maxHealth: 20, animations: { idle: { start: 12, end: 68, loop: true }, walk: { start: 12, end: 68, loop: true }, left: { start: 137, end: 156, restart: true }, right: { start: 117, end: 136, restart: true }, attack: { start: 156, end: 175, restart: true }, hurt: { start: 100, end: 115, restart: true }, die: { start: 245, end: 276, freeze: true }, dizzy: { start: 12, end: 68, loop: true } }, weapon: new o(this, { cooldown: 700, delay: 100, damage: 5 }), freezeOffset: n.UNIT * .1 }, t));
            this.mesh.scale.multiplyScalar(.25);
            this.mesh.position.y += n.UNIT / 4;
            this.healthBar.position.set(.1, .15, 0);
            this.dizzyEffect.position.set(0, .15, 0) };
        r.inherit(s, {});
        e.exports = r }, { 10: 10, 167: 167, 98: 98 }],
    100: [function(t, e, i) { var n = t("10"); var s = t("98"); var o = t("138"); var r = t("167"); var a = function(t) { s.call(this, _.extend({ id: "demon", maxHealth: 40, turnDuration: 600, animations: { idle: { start: 15, end: 65, loop: true }, walk: { start: 10, end: 65, loop: true }, attack: { start: 156, end: 175, restart: true }, hurt: { start: 96, end: 115, restart: true }, die: { start: 245, end: 270, freeze: true }, block: { start: 70, end: 95, restart: true }, dizzy: { start: 15, end: 65, loop: true } }, block: true, weapon: new r(this, { delay: 150, knockback: true, damage: 20 }) }, t));
            this.turnEasing = TWEEN.Easing.Sinusoidal.Out;
            this.mesh.scale.multiplyScalar(.4);
            this.mesh.position.y += n.UNIT / 4;
            this.healthBar.position.set(0, .3, 0);
            this.dizzyEffect.position.set(0, .3, 0) };
        a.inherit(s, { isBusy: function() { if (!this.alive) return false; return s.prototype.isBusy.call(this) || this.blocking }, onBlock: function() { s.prototype.onBlock.apply(this, arguments);
                this.weapon.cancelUse();
                this.playAnimation("block");
                o.delay(this.level.player.meleeDelay, this.knockback, this);
                this.blocking = true;
                o.delay(800, function() { this.blocking = false }, this) } });
        e.exports = a }, { 10: 10, 138: 138, 167: 167, 98: 98 }],
    101: [function(t, e, i) { var n = t("10"); var s = t("98"); var o = t("164"); var r = function(t) { s.call(this, _.extend({ id: "dragon", strafe: true, animations: { idle: { start: 6, end: 58, loop: true }, right: { start: 101, end: 120, restart: true }, left: { start: 121, end: 140, restart: true }, walk: { start: 6, end: 60, loop: true }, attack: { start: 61, end: 80, restart: true }, hurt: { start: 81, end: 98, restart: true }, die: { start: 311, end: 346, freeze: true }, dizzy: { start: 560, end: 650, loop: true } }, weapon: new o(this) }, t));
            this.mesh.scale.multiplyScalar(.35);
            this.mesh.position.y += n.UNIT / 4;
            this.healthBar.position.set(0, .25, 0);
            this.dizzyEffect.position.set(0, .2, 0) };
        r.inherit(s, {});
        e.exports = r }, { 10: 10, 164: 164, 98: 98 }],
    102: [function(t, e, i) {
        var n = t("10");
        var s = t("98");
        var o = t("171");
        var r = t("173");
        var a = function(t) { s.call(this, _.extend({ id: "eliteorc", model: "orc", immune: ["knockback"], moveDuration: 500, maxHealth: 60, animations: { idle: { start: 5, end: 120, loop: true }, walk: { start: 841, end: 860, loop: true }, attack: { start: 142, end: 160, restart: true }, hurt: { start: 162, end: 181, restart: true }, die: { start: 305, end: 325, freeze: true }, dizzy: { start: 475, end: 565, loop: true }, tripleattack: { start: 425, end: 475 }, whirl: { start: 568, end: 585 } }, freezeOffset: n.UNIT * -.1, dizzyOffset: n.UNIT * .25, healthbarOffset: n.UNIT * .25 }, t));
            this.mesh.scale.multiplyScalar(1.5);
            this.tripleAttack = new o(this, { cooldown: 3e3, damage: 15 });
            this.tripleAttack.animationName = "tripleattack";
            this.initWeapon(this.tripleAttack);
            this.whirlAttack = new r(this, { cooldown: 900, damage: 25, delay: 300 });
            this.whirlAttack.animationName = "whirl";
            this.initWeapon(this.whirlAttack);
            this.weapon = this.whirlAttack };
        a.inherit(s, {
            playHurtAnimation: function() {
                if (this.currentAnimation.name !== this.tripleAttack.animationName && this.currentAnimation.name !== this.whirlAttack.animationName) { this.playAnimation("hurt") }
            },
            onWeaponUse: function() { this.playAnimation(this.weapon.animationName) }
        });
        e.exports = a
    }, { 10: 10, 171: 171, 173: 173, 98: 98 }],
    103: [function(t, e, i) { var n = t("10"); var s = t("98"); var o = t("162"); var r = function(t) { s.call(this, _.extend(t, { id: "eliteskeleton", model: "skeleton", moveDuration: 550, animations: { idle: { start: 6, end: 65, loop: true }, walk: { start: 145, end: 205, loop: true }, attack: { start: 228, end: 245, restart: true }, hurt: { start: 255, end: 275, restart: true }, die: { start: 475, end: 500, freeze: true }, dizzy: { start: 615, end: 645, loop: true } }, weapon: new o(this, { delay: 350 }), dizzyOffset: n.UNIT * .2, healthbarOffset: n.UNIT * .17 }));
            this.mesh.scale.multiplyScalar(.55) };
        r.inherit(s, {});
        e.exports = r }, { 10: 10, 162: 162, 98: 98 }],
    104: [function(t, e, i) { var n = t("10"); var s = t("99"); var o = t("80"); var r = t("65"); var a = t("138"); var h = function(t) { s.call(this, _.extend({ id: "explosivebat", model: "bat", moveDuration: 300 }, t));
            this.blinkColor = new THREE.Color(16724787);
            this.startedTicking = false;
            this.effects = { aoe: { ignoreMobs: true, effects: { damage: { amount: 30 } } }, fx: { type: o }, destroy: {} };
            this.initEffects(this.effects);
            this.on("die", function() { this.startTicking() }, this) };
        h.inherit(s, { startTicking: function() { if (this.startedTicking) return; var t = this.blink();
                a.delay(t, this.explode, this);
                this.startedTicking = true }, blink: function() { var t = 5; var e = 399;
                a.repeat(t, e, function() { this.mesh.material.overlayColor = this.blinkColor;
                    this.mesh.material.overlayBlend = .6;
                    a.delay(e / 2, function() { this.mesh.material.overlayBlend = 0 }, this) }, this); return t * e }, explode: function() { this.triggerEffects() } });
        h.mixin(r);
        e.exports = h }, { 10: 10, 138: 138, 65: 65, 80: 80, 99: 99 }],
    105: [function(t, e, i) { var n = t("10"); var s = t("98"); var o = t("167"); var r = function(t) { s.call(this, _.extend({ id: "ghost", maxHealth: 40, animations: { idle: { start: 5, end: 60, loop: true }, walk: { start: 61, end: 138, loop: true }, attack: { start: 238, end: 257, restart: true }, hurt: { start: 258, end: 277, restart: true }, die: { start: 258, end: 268, freeze: true }, dizzy: { start: 663, end: 752, loop: true } }, weapon: new o(this, { damage: 10 }) }, t));
            this.shadow.material = this.shadow.material.clone();
            this.shadow.material.prune = true;
            this.mesh.scale.multiplyScalar(.4);
            this.mesh.material.transparent = true;
            this.mesh.material.opacity = .1;
            this.shadow.material.opacity = .25;
            this.tweens.lift = new TWEEN.Tween;
            this.tweens.deform = new TWEEN.Tween;
            this.tweens.opacity = new TWEEN.Tween };
        r.inherit(s, { onDeath: function() { s.prototype.onDeath.call(this);
                this.animateDeath() }, animateDeath: function() { this.shadow.visible = false;
                this.tweens.lift.reset(this.position).to({ y: n.UNIT * 1.5 }, 1e3).easing(TWEEN.Easing.Quartic.In).start();
                this.tweens.deform.reset(this.scale).to({ y: 2 }, 800).easing(TWEEN.Easing.Back.In).start();
                this.mesh.material.opacity = 1;
                this.tweens.opacity.reset(this.mesh.material).to({ opacity: 0 }, 1e3).easing(TWEEN.Easing.Quadratic.InOut).onComplete(function() { this.remove(this.mesh);
                    this.mesh.material.opacity = 1 }.bind(this)).start() }, fadeOut: function() { this.tweens.opacity.reset(this.mesh.material).to({ opacity: .1 }, 1e3).onUpdate(function() { this.shadow.material.opacity = this.mesh.material.opacity }.bind(this)).start() }, hurt: function() { s.prototype.hurt.apply(this, arguments);
                this.mesh.material.opacity = 1; if (!this.frozen) { this.fadeOut() } }, onFreeze: function() { s.prototype.onFreeze.call(this);
                this.mesh.material.opacity = 1;
                this.tweens.opacity.stop() }, onUnfreeze: function() { if (!this.alive) return;
                this.fadeOut() } });
        e.exports = r }, { 10: 10, 167: 167, 98: 98 }],
    106: [function(t, e, i) { var n = t("10"); var s = t("98"); var o = t("166"); var r = function(t) { s.call(this, _.extend({ id: "icedragon", model: "dragon", immune: ["freeze"], strafe: true, animations: { idle: { start: 6, end: 58, loop: true }, right: { start: 101, end: 120, restart: true }, left: { start: 121, end: 140, restart: true }, walk: { start: 6, end: 60, loop: true }, attack: { start: 61, end: 80, restart: true }, hurt: { start: 81, end: 98, restart: true }, die: { start: 311, end: 346, freeze: true }, dizzy: { start: 560, end: 650, loop: true } }, weapon: new o(this) }, t));
            this.mesh.scale.multiplyScalar(.35);
            this.mesh.position.y += n.UNIT / 4;
            this.healthBar.position.set(0, .25, 0);
            this.dizzyEffect.position.set(0, .2, 0) };
        r.inherit(s, {});
        e.exports = r }, { 10: 10, 166: 166, 98: 98 }],
    107: [function(t, e, i) { var n = t("10"); var s = t("98"); var o = t("167"); var r = function(t) { s.call(this, _.extend({ id: "mummy", maxHealth: 60, wakeupCooldown: 400, animations: { idle: { start: 75, end: 135, loop: true }, walk: { start: 6, end: 65, loop: true }, attack: { start: 215, end: 245, restart: true }, hurt: { start: 255, end: 273, restart: true }, die: { start: 460, end: 490, freeze: true }, dizzy: { start: 613, end: 644, loop: true } }, weapon: new o(this, { cooldown: 1200, delay: 800, damage: 25 }) }, t));
            this.mesh.scale.multiplyScalar(.4);
            this.tweens.jump = new TWEEN.Tween;
            this.tweens.fall = new TWEEN.Tween };
        r.inherit(s, { dead: function() { var t = 700;
                s.prototype.dead.call(this);
                this.tweens.jump.reset(this.mesh.position).to({ y: -.2 * n.UNIT }, t * .2).easing(TWEEN.Easing.Quadratic.Out).chain(this.tweens.fall);
                this.tweens.fall.reset(this.mesh.position).to({ y: -.5 * n.UNIT }, t * .8).easing(TWEEN.Easing.Bounce.Out);
                this.tweens.jump.start() } });
        e.exports = r }, { 10: 10, 167: 167, 98: 98 }],
    108: [function(t, e, i) { var n = t("10"); var s = t("98"); var o = t("167"); var r = function(t) { s.call(this, _.extend({ id: "orc", wakeupCooldown: 700, animations: { idle: { start: 5, end: 120, loop: true }, walk: { start: 841, end: 860, loop: true }, attack: { start: 142, end: 160, restart: true }, hurt: { start: 162, end: 181, restart: true }, die: { start: 292, end: 325, freeze: true }, dizzy: { start: 475, end: 565, loop: true } }, weapon: new o(this, { cooldown: 1100, damage: 15 }), freezeOffset: n.UNIT * -.1 }, t));
            this.states["charge"] = this.charge.bind(this);
            this.defaultMoveDuration = this.moveDuration;
            this.charging = false;
            this.chargeDamage = 15;
            this.chargeRange = 4;
            this.initHierarchy() };
        r.inherit(s, { update: function(t) { s.prototype.update.call(this, t); if (this.charging) { this.bodyRotation.rotation.x += Math.PI / 15 } }, initHierarchy: function() { var t = this.bodyRotation = new THREE.Object3D; var e = new THREE.Object3D; var i = new THREE.Object3D;
                this.remove(this.mesh);
                this.mesh.position.y = -.22;
                this.mesh.rotation.y = 0;
                t.add(this.mesh);
                e.add(t);
                e.rotation.y = Math.PI / 2;
                i.add(e);
                i.position.y -= .5 * n.UNIT + this.mesh.position.y;
                this.add(i) }, initStateConditions: function() { s.prototype.initStateConditions.call(this);
                this.insertStateCondition(1, "charge", function() { return this.charging || !this.stunned && !this.frozen && this.isFacing(this.level.getPlayerCoords()) && this.level.hasFreeLineOfSight(this, this.level.getPlayerCoords()) && this.level.distanceToPlayer(this) <= this.chargeRange && this.level.distanceToPlayer(this) > 2 }) }, charge: function() { if (!this.aggroed) this.aggroed = true; if (!this.charging) { this.moveDuration = 200;
                    this.playAnimation("idle") } this.charging = true; var t = this.getFrontCoords(); if (!this.moving) { if (this.level.canMoveTo(t)) { this.moveForward() } else { if (t.equals(this.level.getPlayerCoords())) { this.collideWithEntity(this.level.getEntityAt(t)) } this.stopCharge() } } }, stopCharge: function() { if (!this.charging) return;
                this.charging = false;
                this.mesh.material.color.setRGB(1, 1, 1);
                this.moveDuration = this.defaultMoveDuration;
                this.bodyRotation.rotation.x = 0 }, collideWithEntity: function(t) { this.playAnimation("attack");
                this.weapon.resetCooldown();
                t.takeDamage(this.chargeDamage, this);
                t.knockback(this); if (t.type === "player") { t.bob() } }, onHit: function() { s.prototype.onHit.apply(this, arguments);
                this.stopCharge() }, onDeath: function() { this.stopCharge();
                s.prototype.onDeath.call(this) } });
        e.exports = r }, { 10: 10, 167: 167, 98: 98 }],
    109: [function(t, e, i) { var n = t("10"); var s = t("98"); var o = t("167"); var r = function(t) { s.call(this, _.extend({ id: "skeleton", maxHealth: 30, hurtCooldown: 500, animations: { idle: { start: 6, end: 65, loop: true }, walk: { start: 145, end: 205, loop: true }, attack: { start: 215, end: 245, restart: true }, hurt: { start: 255, end: 275, restart: true }, die: { start: 475, end: 500, freeze: true }, dizzy: { start: 615, end: 645, loop: true } }, weapon: new o(this, { delay: 500, damage: 10 }) }, t));
            this.mesh.scale.multiplyScalar(.4) };
        r.inherit(s);
        e.exports = r }, { 10: 10, 167: 167, 98: 98 }],
    110: [function(t, e, i) { var n = t("10"); var s = t("138"); var o = t("98"); var r = t("78"); var a = t("167"); var h = function(t) { o.call(this, _.extend({ id: "zombie", maxHealth: 40, wakeupCooldown: 400, animations: { idle: { start: 6, end: 65, loop: true }, walk: { start: 142, end: 205, loop: true }, attack: { start: 215, end: 245, restart: true }, hurt: { start: 255, end: 274, restart: true }, die: { start: 445, end: 490, freeze: true }, dizzy: { start: 613, end: 644, loop: true } }, weapon: new a(this, { delay: 700, damage: 15 }) }, t));
            this.mesh.scale.multiplyScalar(.4);
            this.tweens.jump = new TWEEN.Tween;
            this.tweens.fall = new TWEEN.Tween };
        h.inherit(o, { addCloud: function() { this.cloud = new r({ source: this }); return this.cloud }, dead: function() { var t = 600;
                o.prototype.dead.call(this);
                this.tweens.jump.reset(this.mesh.position).to({ y: -.2 * n.UNIT }, t * .33).easing(TWEEN.Easing.Quadratic.Out).chain(this.tweens.fall);
                this.tweens.fall.reset(this.mesh.position).to({ y: -.5 * n.UNIT }, t * .66).easing(TWEEN.Easing.Bounce.Out);
                this.tweens.jump.start() }, onAdd: function(t) { var e = this.addCloud();
                t.add(e);
                t.clouds[e.id] = e;
                this.level = t }, onRemove: function(t) { s.delay(2e3, function() { t.remove(this.cloud);
                    delete t.clouds[this.cloud.id] }, this) }, onMove: function(t) { t.sortClouds();
                t.addDiseaseCloud(this.coords) }, onDeath: function() { this.level.addDiseaseCloud(this.coords);
                o.prototype.onDeath.call(this) } });
        e.exports = h }, { 10: 10, 138: 138, 167: 167, 78: 78, 98: 98 }],
    111: [function(t, e, i) { var n = t("10"); var s = t("30"); var o = t("76"); var r = t("74"); var a = t("125"); var h = t("112"); var l = t("73"); var u = t("128"); var c = t("114"); var d = t("69"); var f = t("68"); var p = t("64"); var v = t("51"); var g = t("163"); var m = t("9"); var y = function(t) { o.call(this, t);
            this.type = "player";
            this.head = new THREE.Object3D;
            this.add(this.head);
            this.camera = new r({ near: .1, far: n.UNIT * 10, fov: 55 });
            this.head.add(this.camera);
            this.camera.position.set(-n.UNIT / 2, 0, 0);
            this.camera.lookAt(new THREE.Vector3(n.UNIT / 2, 0, 0));
            this.frustum = new THREE.Frustum;
            this.weapons = {};
            this.usingWeapon = false;
            this.coinCount = 0;
            this.ammo = { keys: 0, arrows: 5, bombs: 3, potions: 0 };
            this.maxArrows = n.MAX_ARROWS;
            this.maxBombs = n.MAX_BOMBS;
            this.initSword();
            this.initBow();
            this.initWand(); if (n.DEBUG) { this.initDebug() } this.initMovement({ moveDuration: 250, turnDuration: 200, turnEasing: TWEEN.Easing.Linear.None });
            this.initCombat({ maxHealth: 100 });
            this.knockbackDuration = 500;
            this.on("hit", this.onHit, this);
            this.on("die", this.onDeath, this);
            this.tweens.bumpForward = new TWEEN.Tween;
            this.tweens.bumpBackward = new TWEEN.Tween;
            this.tweens.hurtForward = new TWEEN.Tween;
            this.tweens.hurtBackward = new TWEEN.Tween;
            this.tweens.bobUpward = new TWEEN.Tween;
            this.tweens.bobDownward = new TWEEN.Tween;
            this.tweens.fall = new TWEEN.Tween };
        y.inherit(o, { initSword: function() { this.sword = new a;
                this.head.add(this.sword) }, initBow: function() { this.bow = new l;
                this.head.add(this.bow) }, initWand: function() { this.wand = new u;
                this.head.add(this.wand);
                this.wand.owner = this }, initDebug: function() { var t = new v({ color: 16711935, wireframe: true }); var e = new THREE.BoxGeometry(n.UNIT, n.UNIT, n.UNIT);
                this.debugCube = new THREE.Mesh(e, t);
                this.add(this.debugCube);
                this.cameraHelper = new THREE.CameraHelper(this.camera);
                this.camera.add(this.cameraHelper);
                this.cameraHelper.update() }, updateFrustum: function() { var t = new THREE.Matrix4; return function() { this.camera.matrixWorldInverse.getInverse(this.camera.matrixWorld);
                    this.frustum.setFromMatrix(t.multiplyMatrices(this.camera.projectionMatrix, this.camera.matrixWorldInverse)) } }(), isBusy: function() { return this.moving || this.turning || this.bumping }, hasKey: function() { return this.ammo.keys > 0 }, hasPotion: function() { return this.ammo.potions > 0 }, useKey: function() { if (this.ammo.keys > 0) { this.ammo.keys--;
                    this.trigger("ammoChange", this.ammo.keys, "keys") } }, lootKey: function() { this.ammo.keys++;
                this.trigger("ammoChange", this.ammo.keys, "keys");
                m.play("key") }, lootBag: function() { this.coinCount += 10;
                this.trigger("coinChange", this.coinCount);
                m.play("gold") }, lootChest: function() { this.coinCount += 50;
                this.trigger("coinChange", this.coinCount);
                m.play("gold") }, useArrow: function() { if (this.ammo.arrows > 0) { this.ammo.arrows--;
                    this.trigger("ammoChange", this.ammo.arrows, "arrows") } }, lootQuiver: function() { this.ammo.arrows += 5; if (this.ammo.arrows > this.maxArrows) { this.ammo.arrows = this.maxArrows } this.trigger("ammoChange", this.ammo.arrows, "arrows");
                m.play("grab") }, hasAmmo: function(t) { var e = this.ammo[t]; return e && e > 0 }, updateHUDAmmo: function() { _.each(this.ammo, function(t, e) { this.trigger("ammoChange", t, e) }, this) }, resetAmmo: function() { var t = { arrows: 5, bombs: 3, potions: 2, keys: 0 }; if (!this.potionUnlocked && t.potions && t.potions > 0) { delete t.potions } _.extend(this.ammo, t);
                this.updateHUDAmmo() }, useBomb: function(t) { if (this.ammo.bombs > 0) { this.ammo.bombs--;
                    this.trigger("ammoChange", this.ammo.bombs, "bombs") } }, lootBomb: function() { this.ammo.bombs++; if (this.ammo.bombs > this.maxBombs) { this.ammo.bombs = this.maxBombs } this.trigger("ammoChange", this.ammo.bombs, "bombs");
                m.play("grab") }, unlockPotionButton: function() { if (this.potionUnlocked) return;
                this.trigger("firstPotion");
                this.potionUnlocked = true }, lootPotion: function() { this.ammo.potions++;
                this.unlockPotionButton();
                this.trigger("ammoChange", this.ammo.potions, "potions");
                m.play("lootPotion") }, usePotion: function() { this.ammo.potions--;
                this.trigger("ammoChange", this.ammo.potions, "potions");
                this.health += 50; if (this.health > this.maxHealth) { this.health = this.maxHealth } this.trigger("health", this.health / this.maxHealth);
                m.play("drinkPotion") }, reset: function() { this.ammo.keys = 0;
                this.updateHUDAmmo();
                this.resetMovement();
                this.bumping = false;
                this.hurtBumping = false;
                this.health = this.maxHealth;
                this.alive = true;
                this.frozen = false;
                this.head.position.set(0, 0, 0);
                this.head.rotation.set(0, 0, 0) }, setWeapon: function(t, e, i) { var n = g.create(e, this, i);
                n.owner = this;
                n.on("use", this.onWeaponUse, this); if (!_.has(this.weapons, t)) { this.trigger("equip", t, n) } if (e === "freezingwand") { this.wand.setFlareColor(9555455) } if (e === "powersword") { this.remove(this.sword);
                    this.sword = new h;
                    this.add(this.sword) } this.weapons[t] = n }, hasWeapon: function(t, e) { var i = this.weapons[t]; if (i !== undefined && i.tier >= e) { return true } return false }, onWeaponUse: function(t) { switch (t.type) {
                    case "sword":
                        this.sword.animate(); break;
                    case "bow":
                        this.useArrow();
                        this.usingWeapon = true;
                        this.bow.animateDraw(function() { this.usingWeapon = false; if (this.moving) { this.once("moved", this.bow.animateRelease, this.bow) } else { this.bow.animateRelease() } }.bind(this)); break;
                    case "wand":
                        this.usingWeapon = true;
                        this.wand.lower(function() { if (this.moving) { this.once("moved", this.raiseWand, this) } else { this.raiseWand() } }.bind(this)); break;
                    case "bomb":
                        this.useBomb(t) } this.trigger("useWeapon", t) }, raiseWand: function() { this.wand.raise(function() { this.usingWeapon = false }.bind(this)) }, onHit: function() { var t = new THREE.Vector2; return function(e, i) { this.trigger("health", this.health / this.maxHealth);
                    this.trigger("hurt"); if (this.alive) { m.playHurt() } else { m.play("dying") } if (i) { if (i.orientation) { t.copy(i.orientation) } else if (!this.coords.equals(i.coords)) { t.subVectors(this.coords, i.coords) } else { t.copy(this.orientation).negate() } this.hurtBump(t) } } }(), onDeath: function() { this.tweens.fall.reset(this.head.position).to({ y: n.UNIT * -.35 }, 1e3).easing(TWEEN.Easing.Bounce.Out).start();
                s.tween(1e3, TWEEN.Easing.Bounce.Out).onUpdate(function(t) { this.head.rotation.x = t * .75;
                    this.head.rotation.z = t * .15 }.bind(this)) }, canBlock: function() { return false }, bump: function() { var t = new THREE.Vector2; var e = new THREE.Vector3; return function(i) { if (this.isBusy()) return; var n = s.getWorldPosition(t.copy(this.coords).lerp(i, .1));
                    e.copy(this.position);
                    this.tweens.bumpForward.reset(this.position).to({ x: n.x, y: n.y, z: n.z }, 100).easing(TWEEN.Easing.Cubic.Out).onComplete(function() { m.play("bump") }).chain(this.tweens.bumpBackward);
                    this.tweens.bumpBackward.reset(this.position).to({ x: e.x, y: e.y, z: e.z }, 150).easing(TWEEN.Easing.Quadratic.Out).onComplete(function() { this.bumping = false }.bind(this));
                    this.tweens.bumpForward.start();
                    this.bumping = true } }(), hurtBump: function() { var t = new THREE.Vector3; var e = new THREE.Vector3(0, 0, 0); var i = new THREE.Vector3(0, 1, 0); return function(n) { if (this.isBusy() || this.hurtBumping) return;
                    t.set(n.x, 0, n.y).multiplyScalar(.1);
                    t.applyAxisAngle(i, -this.rotation.y);
                    this.tweens.hurtForward.reset(this.head.position).to({ x: t.x, y: t.y, z: t.z }, 100).easing(TWEEN.Easing.Cubic.Out).chain(this.tweens.hurtBackward);
                    this.tweens.hurtBackward.reset(this.head.position).to({ x: e.x, y: e.y, z: e.z }, 150).easing(TWEEN.Easing.Quadratic.Out).onComplete(function() { this.hurtBumping = false }.bind(this));
                    this.tweens.hurtForward.start();
                    this.hurtBumping = true } }(), bob: function() { this.tweens.bobUpward.reset(this.position).to({ y: this.position.y + .015 }, 100).easing(TWEEN.Easing.Linear.None).chain(this.tweens.bobDownward);
                this.tweens.bobDownward.reset(this.position).to({ y: this.position.y }, 100).easing(TWEEN.Easing.Linear.None);
                this.tweens.bobUpward.start() }, setGoldCount: function(t) { this.coinCount = t;
                this.trigger("coinChange", this.coinCount) }, onFreeze: function() { this.trigger("freeze") }, onUnfreeze: function() { this.trigger("unfreeze") }, update: function(t) { _.each(this.weapons, function(e) { e.update(t) }, this) } });
        y.mixin(d);
        y.mixin(f);
        y.mixin(p);
        e.exports = y }, { 10: 10, 112: 112, 114: 114, 125: 125, 128: 128, 163: 163, 30: 30, 51: 51, 64: 64, 68: 68, 69: 69, 73: 73, 74: 74, 76: 76, 9: 9 }],
    112: [function(t, e, i) { var n = t("133"); var s = t("10"); var o = t("51"); var r = t("125"); var a = function() { r.call(this);
            this.mesh.material.map = n.getTexture("powersword.png");
            this.trail.material.map = n.getTexture("sword-trail-2.png");
            this.trail.position.x = 0;
            this.trail.position.z = -.1 };
        a.inherit(r);
        e.exports = a }, { 10: 10, 125: 125, 133: 133, 51: 51 }],
    113: [function(t, e, i) { var n = t("139"); var s = t("10"); var o = t("76"); var r = t("69"); var a = t("68"); var h = t("65"); var l = t("51"); var u = function(t) { o.call(this, t);
            this.name = "projectile";
            this.type = "projectile";
            this.initEffects(t.effects) };
        u.inherit(o, { update: function(t) { if (!this.moving) this.moveForward() }, getTarget: function(t) { var e = { target: null, immediate: false }; var i = [t.getEntityAt(this.getBackCoords()), t.getEntityAt(this.coords), t.getEntityAt(this.getFrontCoords())]; for (var n = 0; n < i.length; n++) { var s = i[n]; if (!s) continue; if (n === 0) { if (!s.moving || s.type !== "player") { continue } } if (s !== this.sender) { if (n === 1) { e.immediate = true } e.target = s; return e } } return e }, canHit: function(t) { return true }, resolveImpact: function(t, e) { e.removeEntity(this) } });
        u.mixin(r);
        u.mixin(a);
        u.mixin(h);
        e.exports = u }, { 10: 10, 139: 139, 51: 51, 65: 65, 68: 68, 69: 69, 76: 76 }],
    114: [function(t, e, i) { var n = t("10"); var s = t("67"); var o = t("133"); var r = t("113"); var a = t("51"); var h = new a({ transparent: true, side: THREE.DoubleSide }); var l = function(t) { r.call(this, t);
            this.name = "arrow"; var e = o.getMeshData("arrow"); var i = new THREE.Mesh(e.geometry, h);
            i.name = "arrow_projectile"; if (!h.map) { h.map = o.getTexture("bow.png") } this.initMesh({ mesh: i });
            this.initMovement({ moveDuration: 50 });
            this.mesh.scale.multiplyScalar(.75);
            this.mesh.position.y -= n.UNIT * .1;
            this.mesh.position.z = n.UNIT * .05;
            this.mesh.rotation.y = Math.PI / 2 };
        l.inherit(r);
        l.mixin(s);
        e.exports = l }, { 10: 10, 113: 113, 133: 133, 51: 51, 67: 67 }],
    115: [function(t, e, i) { var n = t("10"); var s = t("139"); var o = t("133"); var r = t("113"); var a = t("58"); var h = t("53")(); var l = function(t) { t = _.extend({}, { moveDuration: 500 }, t);
            r.call(this, t);
            this.name = "Bone";
            this.initMovement({ moveDuration: t.moveDuration });
            this.initCore();
            this.sprite.position.y -= n.UNIT * .1;
            this.sprite.position.x += n.UNIT * .35;
            this.sprite.frustumCulled = false };
        l.inherit(r, { initCore: function() { if (!h.map) { h.map = o.getTexture("bone.png") } this.sprite = new THREE.Sprite(h);
                this.sprite.material.uvScale = new THREE.Vector2(1, 1);
                this.sprite.scale.multiplyScalar(.4);
                this.add(this.sprite) } });
        e.exports = l }, { 10: 10, 113: 113, 133: 133, 139: 139, 53: 53, 58: 58 }],
    116: [function(t, e, i) { var n = t("10"); var s = t("139"); var o = t("133"); var r = t("113"); var a = t("58"); var h = new THREE.SpriteMaterial({ fog: false }); var l = new a({ transparent: true, depthWrite: false, color: 16776960 }); var u = function(t) { t = _.extend({}, { moveDuration: 450 }, t);
            r.call(this, t);
            this.name = "fireball";
            this.lightSource = true;
            this.lightColor = 16759296;
            this.initMovement({ moveDuration: t.moveDuration });
            this.initCore();
            this.initTrail();
            this.core.position.y -= n.UNIT * .1;
            this.trail.position.y -= n.UNIT * .1;
            this.core.position.x += n.UNIT * .35;
            this.trail.position.x += n.UNIT * .35;
            this.core.frustumCulled = false;
            this.trail.frustumCulled = false };
        u.inherit(r, { update: function(t) { r.prototype.update.call(this);
                h.rotation += .025;
                this.trail.geometry.vertices.forEach(function(e, i) { var n = e.age / e.duration; var s = e.maxSize; var o = 1; var r = n * (2 - n);
                    e.age += t.delta * 1e3; if (n < 1) { e.z = e.maxDistance * n } else { e.z = 0;
                        e.age = 0 } this.trail.material.attributes.size.value[i] = s - s * r }, this);
                this.trail.geometry.verticesNeedUpdate = true;
                this.trail.material.attributes.opacity.needsUpdate = true;
                this.trail.material.attributes.size.needsUpdate = true }, initCore: function() { if (!h.map) { h.map = o.getTexture("fireball-sprite.png") } this.core = new THREE.Sprite(h);
                this.core.material.uvScale = new THREE.Vector2(1, 1);
                this.core.scale.multiplyScalar(.25);
                this.add(this.core) }, initTrail: function() { var t = new THREE.Geometry; var e = 1500; var i = 15; var r = []; var a = []; for (var h = 0; h < i; h++) { var u = new THREE.Vector3;
                    u.duration = e;
                    u.age = h * (e / i);
                    u.maxSize = s.getRandomFloat(.3 * window.PIXEL_RATIO, .6 * window.PIXEL_RATIO);
                    u.maxDistance = -n.UNIT;
                    u.x += s.getRandomFloat(-.05, .05);
                    u.y += s.getRandomFloat(-.05, .05);
                    u.z = u.age / u.duration * u.maxDistance;
                    t.vertices.push(u);
                    r.push(.5 * window.PIXEL_RATIO);
                    a.push(1) } if (!l.map) { l.map = o.getTexture("fireball-trail.png") } l.attributes.size.value = r;
                l.attributes.opacity.value = a;
                this.trail = new THREE.PointCloud(t, l);
                this.trail.rotation.y = Math.PI / 2;
                this.add(this.trail) } });
        e.exports = u }, { 10: 10, 113: 113, 133: 133, 139: 139, 58: 58 }],
    117: [function(t, e, i) { var n = t("10"); var s = t("139"); var o = t("133"); var r = t("113"); var a = t("58"); var h = new THREE.SpriteMaterial({ fog: false, color: 9555455, opacity: .2 }); var l = new a({ transparent: true, depthWrite: false, color: 9555455 }); var u = function(t) { t = _.extend({}, { moveDuration: 500, zOffset: n.UNIT * .05 }, t);
            r.call(this, t);
            this.name = "icebolt";
            this.lightSource = true;
            this.lightColor = 9555455;
            this.initMovement({ moveDuration: t.moveDuration });
            this.initCore();
            this.initTrail();
            this.core.position.y -= n.UNIT * .1;
            this.trail.position.y -= n.UNIT * .1;
            this.core.position.z += t.zOffset;
            this.trail.position.z += t.zOffset;
            this.core.position.x += n.UNIT * .35;
            this.trail.position.x += n.UNIT * .35;
            this.core.frustumCulled = false;
            this.trail.frustumCulled = false };
        u.inherit(r, { update: function(t) { r.prototype.update.call(this);
                this.trail.rotation.z += .025;
                this.trail.geometry.vertices.forEach(function(e, i) { var n = e.age / e.duration; var s = e.maxSize; var o = 1; var r = n * (2 - n);
                    e.age += t.delta * 1e3; if (n < 1) { e.z = e.maxDistance * n } else { e.z = 0;
                        e.age = 0 } this.trail.material.attributes.size.value[i] = s - s * r }, this);
                this.trail.geometry.verticesNeedUpdate = true;
                this.trail.material.attributes.opacity.needsUpdate = true;
                this.trail.material.attributes.size.needsUpdate = true }, initCore: function() { if (!h.map) { h.map = o.getTexture("softglow.png") } this.core = new THREE.Sprite(h);
                this.core.material.uvScale = new THREE.Vector2(1, 1);
                this.core.scale.multiplyScalar(.5);
                this.add(this.core) }, initTrail: function() { var t = new THREE.Geometry; var e = 1500; var i = 30; var r = []; var a = []; for (var h = 0; h < i; h++) { var u = new THREE.Vector3; var c = s.getRandomFloat(0, .15); var d = s.getRandomFloat(0, Math.PI * 2);
                    u.duration = e;
                    u.age = h * (e / i);
                    u.maxSize = s.getRandomFloat(.1 * window.PIXEL_RATIO, .25 * window.PIXEL_RATIO);
                    u.maxDistance = -n.UNIT;
                    u.x = c * Math.cos(d);
                    u.y = c * Math.sin(d);
                    u.z = u.age / u.duration * u.maxDistance;
                    t.vertices.push(u);
                    r.push(.5 * window.PIXEL_RATIO);
                    a.push(1) } if (!l.map) { l.map = o.getTexture("flake.png") } l.attributes.size.value = r;
                l.attributes.opacity.value = a;
                this.trail = new THREE.PointCloud(t, l);
                this.trail.rotation.y = Math.PI / 2;
                this.add(this.trail) } });
        e.exports = u }, { 10: 10, 113: 113, 133: 133, 139: 139, 58: 58 }],
    118: [function(t, e, i) { var n = t("10"); var s = t("139"); var o = t("133"); var r = t("113"); var a = t("58"); var h = new THREE.SpriteMaterial({ fog: false, opacity: .2, color: 16766828 }); var l = new a({ transparent: true, depthWrite: false, color: 15648256 }); var u = function(t) { t = _.extend({}, { moveDuration: 500 }, t);
            r.call(this, t);
            this.name = "lightflare";
            this.lightSource = true;
            this.lightColor = 16759296;
            this.initMovement({ moveDuration: t.moveDuration });
            this.initCore();
            this.initTrail();
            this.core.position.y -= n.UNIT * .1;
            this.trail.position.y -= n.UNIT * .1;
            this.core.position.z += n.UNIT * .05;
            this.trail.position.z += n.UNIT * .05;
            this.core.frustumCulled = false;
            this.trail.frustumCulled = false;
            this.tweens.scale = new TWEEN.Tween };
        u.inherit(r, { update: function(t) { r.prototype.update.call(this);
                this.trail.rotation.z += .025;
                this.trail.geometry.vertices.forEach(function(e, i) { var n = e.age / e.duration; var s = e.maxSize; var o = 1; var r = n * (2 - n);
                    e.age += t.delta * 1e3; if (n < 1) { e.z = e.maxDistance * n } else { e.z = 0;
                        e.age = 0 } this.trail.material.attributes.size.value[i] = s - s * r }, this);
                this.trail.geometry.verticesNeedUpdate = true;
                this.trail.material.attributes.opacity.needsUpdate = true;
                this.trail.material.attributes.size.needsUpdate = true }, initCore: function() { if (!h.map) { h.map = o.getTexture("softglow.png") } this.core = new THREE.Sprite(h);
                this.core.material.uvScale = new THREE.Vector2(1, 1);
                this.add(this.core) }, initTrail: function() { var t = new THREE.Geometry; var e = 500; var i = 30; var r = []; var a = []; for (var h = 0; h < i; h++) { var u = new THREE.Vector3; var c = s.getRandomFloat(0, .1); var d = s.getRandomFloat(0, Math.PI * 2);
                    u.duration = e;
                    u.age = h * (e / i);
                    u.maxSize = s.getRandomFloat(.15 * window.PIXEL_RATIO, .35 * window.PIXEL_RATIO);
                    u.maxDistance = -n.UNIT;
                    u.x = c * Math.cos(d);
                    u.y = c * Math.sin(d);
                    u.z = u.age / u.duration * u.maxDistance;
                    t.vertices.push(u);
                    r.push(.5 * window.PIXEL_RATIO);
                    a.push(1) } if (!l.map) { l.map = o.getTexture("glitter.png") } l.attributes.size.value = r;
                l.attributes.opacity.value = a;
                this.trail = new THREE.PointCloud(t, l);
                this.trail.rotation.y = Math.PI / 2;
                this.add(this.trail) } });
        e.exports = u }, { 10: 10, 113: 113, 133: 133, 139: 139, 58: 58 }],
    119: [function(t, e, i) { var n = t("10"); var s = t("133"); var o = t("138"); var r = t("114"); var a = t("58"); var h = t("87"); var l = new THREE.SpriteMaterial({ fog: false, blending: THREE.AdditiveBlending }); var u = function(t) { r.call(this, t);
            this.name = "piercingArrow";
            this.impactedTargets = [];
            this.initCore();
            this.lightSource = true;
            this.lightColor = 5997311 };
        u.inherit(r, { canHit: function(t) { return t && !_.include(this.impactedTargets, t.id) }, resolveImpact: function(t, e) { if (t) { if (t.type === "prop" || t.type === "door" || t.blockEnabled && t.canBlock(this)) { e.removeEntity(this) } else { this.impactedTargets.push(t.id) } } }, initCore: function() { if (!l.map) { l.map = s.getTexture("arrowfxcore.png") } this.core = new THREE.Sprite(l);
                this.core.material.uvScale = new THREE.Vector2(1, 1);
                this.core.scale.multiplyScalar(.35);
                this.core.position.copy(this.mesh.position);
                this.core.position.x += n.UNIT * .5;
                this.add(this.core) }, addTrail: function() { this.trail = new h({ source: this }); return this.trail }, onAdd: function(t) { var e = this.addTrail();
                t.add(e);
                t.trails.push(e) }, onRemove: function(t) { this.trail.source = null;
                o.delay(1e3, function() { t.trails.splice(t.trails.indexOf(this.trail), 1);
                    t.remove(this.trail) }, this) } });
        e.exports = u }, { 10: 10, 114: 114, 133: 133, 138: 138, 58: 58, 87: 87 }],
    120: [function(t, e, i) { var n = t("133"); var s = t("76"); var o = t("10"); var r = t("67"); var a = t("56"); var h = new a({ emissive: 12303291 }); var l = function(t) { s.call(this);
            this.type = "prop";
            this.initMesh({ id: t.id });
            this.mesh.material = h;
            this.mesh.position.y = -o.UNIT / 2;
            this.isDestructible = t.destructible || false; if (!h.map) { h.map = n.getTexture("props.jpg") } if (t.coords) { this.setCoords(t.coords) } this.mesh.renderOrder = 2 };
        l.inherit(s, { update: function(t) {}, destroy: function() { this.trigger("destroyed");
                this.trigger("drop", this.hasKey) } });
        l.mixin(r);
        e.exports = l }, { 10: 10, 133: 133, 56: 56, 67: 67, 76: 76 }],
    121: [function(t, e, i) { var n = t("120"); var s = t("70"); var o = t("122"); var r = t("9"); var a = function(t) { n.call(this, t);
            this.initShadow();
            this.initGibs() };
        a.inherit(n, { initGibs: function() { this.gibs = new o;
                this.add(this.gibs);
                this.gibs.visible = false }, destroy: function() { n.prototype.destroy.call(this);
                this.mesh.visible = false;
                this.shadow.visible = false;
                this.gibs.visible = true;
                this.gibs.animate();
                this.gibs.on("remove", function() { this.trigger("remove") }, this);
                r.playJarBreak(this.level.distanceToPlayer(this)) } });
        a.mixin(s);
        e.exports = a }, { 120: 120, 122: 122, 70: 70, 9: 9 }],
    122: [function(t, e, i) { var n = t("10"); var s = t("139"); var o = t("133"); var r = t("138"); var a = t("51"); var h = t("66"); var l = new a({ transparent: true }); var u = function(t) { THREE.Object3D.call(this, t); if (!l.map) { l.map = o.getTexture("props.jpg") } this.material = l;
            this.initGibs();
            this.progress = 0;
            this.position.y = -n.UNIT * .15 };
        u.inherit(THREE.Object3D, { animate: function() { var t = 500;
                this.children.forEach(function(e) { var i = t * e.speed;
                    e.tweens.rise.reset(e.position).to({ y: e.targetHeight }, .5 * i).easing(TWEEN.Easing.Quadratic.Out).chain(e.tweens.fall);
                    e.tweens.fall.reset(e.position).to({ y: -n.UNIT * .35 }, .5 * i).easing(TWEEN.Easing.Quadratic.In);
                    e.tweens.spread.reset(e.position).to({ x: e.targetPosition.x, z: e.targetPosition.z }, i).easing(TWEEN.Easing.Quadratic.Out);
                    e.tweens.rotate.reset(e.rotation).to({ x: e.targetRotation.x, y: e.targetRotation.y, z: e.targetRotation.z }, i);
                    e.tweens.shrink.reset(e.scale).to({ x: .01, y: .01, z: .01 }, i).easing(TWEEN.Easing.Quartic.In);
                    e.tweens.rise.start();
                    e.tweens.spread.start();
                    e.tweens.rotate.start();
                    e.tweens.shrink.start() });
                r.delay(t * 1.2, function() { this.trigger("remove") }, this) }, initGibs: function() { var t = 10; var e = o.getMeshData("vasegib").geometry; for (var i = 0; i < t; i++) { var r = new THREE.Mesh(e, this.material);
                    r.name = "gib";
                    r.scale.multiplyScalar(s.getRandomFloat(.5, 1.25));
                    r.position.copy(this.getRandomPosition());
                    r.startingRotation = { x: Math.random() * Math.PI * 4, y: Math.random() * Math.PI * 4, z: Math.random() * Math.PI * 4 };
                    r.targetRotation = { x: Math.random() * Math.PI, y: Math.random() * Math.PI, z: Math.random() * Math.PI };
                    r.targetPosition = { x: r.position.x * 4, z: r.position.z * 4 };
                    r.targetHeight = s.getRandomFloat(0, n.UNIT / 4);
                    r.speed = s.getRandomFloat(.8, 1.2);
                    r.tweens = { rise: new TWEEN.Tween, fall: new TWEEN.Tween, spread: new TWEEN.Tween, shrink: new TWEEN.Tween, rotate: new TWEEN.Tween };
                    this.add(r) } }, getRandomPosition: function() { var t = new THREE.Vector3; return function() { t.set(0, 0, 0);
                    t.x = (-1 + Math.random() * 2) * (n.UNIT / 6);
                    t.z = (-1 + Math.random() * 2) * (n.UNIT / 6);
                    t.y = -(Math.random() * n.UNIT * .3); return t } }() });
        u.mixin(h);
        e.exports = u }, { 10: 10, 133: 133, 138: 138, 139: 139, 51: 51, 66: 66 }],
    123: [function(t, e, i) { var n = t("133"); var s = t("10"); var o = t("51"); var r = t("120"); var a = new o({ transparent: true }); var h = function(t) { r.call(this, { id: "table", coords: t.coords }); if (!a.map) { a.map = n.getTexture("props.png") } var e = .5; var i = 0; var s = .25; var o = .25; if (Math.random() < e) { this.addItem("tablecloth") } if (Math.random() < i) { this.addItem("tablecup") } if (Math.random() < s) { this.addItem("tablecandles") } if (Math.random() < o) { this.addItem("tableplates") } this.scale.multiplyScalar(.9);
            this.position.y -= .05 };
        h.inherit(r, { addItem: function(t) { var e = n.getMeshData(t).geometry; var i = t === "tablecloth" ? a : this.mesh.material; var o = new THREE.Mesh(e, i);
                o.name = "table_item";
                o.position.y = -s.UNIT / 2;
                this.add(o) } });
        e.exports = h }, { 10: 10, 120: 120, 133: 133, 51: 51 }],
    124: [function(t, e, i) { var n = t("139"); var s = t("61"); var o = function(t) { var e = n.getAspectRatio(); var i = r(); var o = a(i); var h = new s({ aspectRatio: n.getAspectRatio(), fogEnabled: t && t.fog !== undefined ? t.fog : false });
            h.prune = true;
            h.uvScale = new THREE.Vector2(1, 1);
            h.attributes.index.value = o.index;
            THREE.Mesh.call(this, i, h) };
        o.inherit(THREE.Mesh);

        function r() { var t = new THREE.Geometry; for (var e = 0; e < 4; e++) { t.vertices.push(new THREE.Vector3) } var i = 0; var n = 1; var s = 2; var o = 3; var r = new THREE.Face3(i, n, s);
            t.faceVertexUvs[0].push([new THREE.Vector2(0, 1), new THREE.Vector2(0, 0), new THREE.Vector2(1, 1)]);
            t.faces.push(r); var a = new THREE.Face3(n, o, s);
            t.faceVertexUvs[0].push([new THREE.Vector2(0, 0), new THREE.Vector2(1, 0), new THREE.Vector2(1, 1)]);
            t.faces.push(a); return t }

        function a(t) { var e = t.vertices; var i = { index: [] }; var n = 0;
            e.forEach(function(t) { i.index.push(n++); if (n > 3) { n = 0 } }); return i } e.exports = o }, { 139: 139, 61: 61 }],
    125: [function(t, e, i) {
        var n = t("133");
        var s = t("10");
        var o = t("51");
        var r = t("131");
        var a = function() {
            THREE.Object3D.call(this);
            var t = n.getMeshData("sword");
            var e = new o({ map: n.getTexture("sword.png") });
            this.mesh = new THREE.Mesh(t.geometry, e);
            this.mesh.name = "sword";
            this.mesh.scale.multiplyScalar(1.5);
            this.mesh.position.x = s.UNIT * .25;
            this.mesh.rotation.y = -2.5;
            this.mesh.rotation.x = -1;
            this.mesh.rotation.z = -.6;
            this.rotation.x = -.4;
            this.rotation.y = -.65;
            this.position.x -= s.UNIT * .55;
            this.position.y -= s.UNIT * .15;
            this.add(this.mesh);
            this.trail = new THREE.Mesh(new r(.1, .15, 1, 1), new o({
                transparent: true,
                depthWrite: false,
                map: n.getTexture("sword-trail.png")
            }));
            this.trail.name = "sword_trail";
            this.trail.rotation.x = -Math.PI / 2;
            this.trail.position.x = .05;
            this.trail.position.z = -.07;
            this.mesh.add(this.trail);
            this.visible = false;
            this.moving = false;
            this.tweens = { slash: new TWEEN.Tween }
        };
        a.inherit(THREE.Object3D, { animate: function() { this.rotation.y = -.65;
                this.visible = true;
                this.moving = true;
                this.tweens.slash.reset(this.rotation).to({ y: 1 }, 500).easing(TWEEN.Easing.Quartic.Out).onComplete(function() { this.moving = false;
                    this.rotation.y = -.65;
                    this.visible = false }.bind(this)).start() } });
        e.exports = a
    }, { 10: 10, 131: 131, 133: 133, 51: 51 }],
    126: [function(t, e, i) { var n = t("10"); var s = t("139"); var o = t("133"); var r = t("138"); var a = t("120"); var h = t("124"); var l = t("51"); var u = t("61"); var c = new l({ color: 16776841 }); var d = new u({ color: 16777215, aspectRatio: s.getAspectRatio(), transparent: true }); var f = 500; var p = .33; var v = function(t) { a.call(this, { id: "torch" });
            this.fireFrames = [o.getTexture("torch/1.png"), o.getTexture("torch/2.png"), o.getTexture("torch/3.png")];
            this.currentFrame = 0;
            this.mesh.material = c; if (!c.map) { c.map = o.getTexture("props.jpg") } var e = new h({ fog: true });
            e.material.map = this.fireFrames[this.currentFrame];
            e.material.transparent = true;
            e.material.color.setHex(16777215);
            e.material.scale = new THREE.Vector2(2.35, 2.35);
            e.material.depthWrite = false;
            e.position.set(0, -.23, .18);
            this.add(e);
            this.sprite = e;
            this.light = new THREE.PointLight(16759296, 2, 1.5 * n.UNIT);
            this.light.position.copy(this.sprite.position);
            this.add(this.light);
            this.glow = new h({ fog: true });
            this.glow.position.copy(e.position);
            this.glow.material.fog = true;
            this.glow.material.color.setHex(16766828);
            this.glow.material.depthWrite = false;
            this.glow.material.map = o.getTexture("torch/glow.png");
            this.glow.material.transparent = true;
            this.glow.material.scale = new THREE.Vector2(9.5, 9.5);
            this.add(this.glow) };
        v.inherit(a, { setCoords: function(t, e) { this.coords = t;
                this.position.set(t.x * n.UNIT, n.UNIT, t.y * n.UNIT); if (e === "south") { this.position.x += n.UNIT / 2 } if (e === "west") { this.position.x += n.UNIT;
                    this.position.z += n.UNIT / 2;
                    this.rotation.y = -Math.PI / 2 } if (e === "north") { this.position.x += n.UNIT / 2;
                    this.position.z += n.UNIT;
                    this.rotation.y = Math.PI } if (e === "east") { this.position.z += n.UNIT / 2;
                    this.rotation.y = Math.PI / 2 } }, hide: function() { this.glow.visible = false;
                this.mesh.visible = false }, show: function() { this.mesh.visible = true;
                r.delay(100, function() { this.glow.visible = true }, this) }, updateSprite: function() { this.currentFrame++; if (this.currentFrame > 2) { this.currentFrame = 0 } this.sprite.material.map = this.fireFrames[this.currentFrame] }, setFrustumCulling: function(t) { this.sprite.frustumCulled = t;
                this.glow.frustumCulled = t } });
        e.exports = v }, { 10: 10, 120: 120, 124: 124, 133: 133, 138: 138, 139: 139, 51: 51, 61: 61 }],
    127: [function(t, e, i) { var n = t("138"); var s = t("76"); var o = t("72"); var r = t("84"); var a = function(t) { o.call(this, t);
            this.name = "triggerbomb";
            this.duration = 6e3;
            this.mesh.remove(this.sparks);
            this.sparks = new r({ source: this });
            this.sparks.position.set(0, .47, 0);
            this.mesh.add(this.sparks);
            this.lightSource = true;
            this.lightColor = 5997311 };
        a.inherit(o, { onSpawn: function(t, e, i) { s.prototype.onSpawn.apply(this, arguments);
                this.owner = i;
                this.owner.activeBomb = this;
                this.owner.trigger("dropTriggerBomb");
                this.toss(i);
                this.burn();
                n.delay(this.duration - 1e3, this.blink, this);
                this.detonationTimer = n.delay(this.duration, this.detonate, this) }, onRemove: function() { o.prototype.onRemove.call(this);
                this.owner.activeBomb = null }, detonate: function() { o.prototype.detonate.call(this);
                this.owner.trigger("detonateTriggerBomb") }, update: function(t) { this.sparks.update(t) } });
        e.exports = a }, { 138: 138, 72: 72, 76: 76, 84: 84 }],
    128: [function(t, e, i) { var n = t("133"); var s = t("10"); var o = t("51"); var r = t("9"); var a = function() { THREE.Object3D.call(this); var t = new o({ map: n.getTexture("wand.png") }); var e = n.getMeshData("wand");
            this.mesh = new THREE.Mesh(e.geometry, t);
            this.mesh.name = "wand";
            this.add(this.mesh);
            this.mesh.rotation.z = -.5;
            this.mesh.rotation.y = .15;
            this.position.y = s.UNIT * 0;
            this.position.x = s.UNIT * -.4;
            this.position.z = s.UNIT * .2; var i = new THREE.SpriteMaterial({ map: n.getTexture("softglow.png"), transparent: true, depthWrite: false, opacity: 0, color: 16766828 });
            this.flare = new THREE.Sprite(i);
            this.flare.scale.set(.5, .5);
            this.flare.position.y = .35;
            this.mesh.add(this.flare);
            this.visible = false;
            this.moving = false;
            this.tweens = { rotate: new TWEEN.Tween, cast: new TWEEN.Tween, flare: new TWEEN.Tween } };
        a.inherit(THREE.Object3D, { lower: function(t) { if (this.moving) return;
                this.tweens.rotate.reset(this.mesh.rotation).to({ z: -1.5 }, 300).easing(TWEEN.Easing.Quartic.In).start();
                this.tweens.cast.reset(this.position).to({ y: s.UNIT * -.2, z: s.UNIT * .1, x: s.UNIT * -.15 }, 300).easing(TWEEN.Easing.Quartic.Out).start();
                this.tweens.flare.reset(this.flare.material).to({ opacity: .5 }, 300).easing(TWEEN.Easing.Linear.None).onComplete(t).start();
                this.visible = true;
                this.moving = true }, raise: function(t) { this.tweens.cast.reset(this.position).to({ y: s.UNIT * -.15, z: s.UNIT * .2, x: s.UNIT * -.4 }, 500).easing(TWEEN.Easing.Quadratic.Out).onComplete(function() { this.moving = false;
                    this.visible = false }.bind(this)).start();
                this.tweens.rotate.reset(this.mesh.rotation).to({ z: -.5 }, 500).easing(TWEEN.Easing.Quartic.Out).onComplete(t).start();
                this.flare.material.opacity = 0;
                r.play(this.owner.weapons.wand.sound) }, setFlareColor: function(t) { this.flare.material.color.setHex(t) } });
        e.exports = a }, { 10: 10, 133: 133, 51: 51, 9: 9 }],
    129: [function(t, e, i) { e.exports = { NORTH: new THREE.Vector2(0, -1), EAST: new THREE.Vector2(1, 0), SOUTH: new THREE.Vector2(0, 1), WEST: new THREE.Vector2(-1, 0) } }, {}],
    130: [function(t, e, i) { var n = t("43"); var s = function() {};
        s.inherit(Object, { findPath: function(t, e, i) { var s = e.toArray(); var o = i.toArray(); return n(t, s, o) } });
        e.exports = s }, { 43: 43 }],
    131: [function(t, e, i) { var n = function(t, e, i, n) { THREE.Geometry.call(this);
            this.type = "PlaneGeometry";
            this.parameters = { width: t, height: e, widthSegments: i, heightSegments: n }; var s, o; var r = t / 2; var a = e / 2; var h = i || 1; var l = n || 1; var u = h + 1; var c = l + 1; var d = t / h; var f = e / l; var p = new THREE.Vector3(0, 0, 1); for (o = 0; o < c; o++) { var v = o * f - a; for (s = 0; s < u; s++) { var g = s * d - r;
                    this.vertices.push(new THREE.Vector3(g, -v, 0)) } } for (o = 0; o < l; o++) { for (s = 0; s < h; s++) { var m = s + u * o; var y = s + u * (o + 1); var w = s + 1 + u * (o + 1); var E = s + 1 + u * o; var b = new THREE.Vector2(s / h, 1 - o / l); var T = new THREE.Vector2(s / h, 1 - (o + 1) / l); var _ = new THREE.Vector2((s + 1) / h, 1 - (o + 1) / l); var x = new THREE.Vector2((s + 1) / h, 1 - o / l); var C = new THREE.Face3(m, y, E);
                    C.normal.copy(p);
                    C.vertexNormals.push(p.clone(), p.clone(), p.clone());
                    this.faces.push(C);
                    this.faceVertexUvs[0].push([b, T, x]);
                    C = new THREE.Face3(y, w, E);
                    C.normal.copy(p);
                    C.vertexNormals.push(p.clone(), p.clone(), p.clone());
                    this.faces.push(C);
                    this.faceVertexUvs[0].push([T.clone(), _, x.clone()]) } } };
        n.inherit(THREE.Geometry);
        e.exports = n }, {}],
    132: [function(t, e, i) { e.exports = { shop: { common: "", desktop: "<p>Welcome to the shop!<br>Here you can purchase new equipment.</p><p>Start by getting that cool <strong>sword</strong>.</p>", touch: "<p>Welcome to the shop!<br>Here you can purchase new equipment. <br>Start by getting that cool <strong>sword</strong>.</p>", button: "Okay" }, potion: { common: "<p>This is a <strong>Health Potion</strong>.<br>Use them to replenish your health.</p>", desktop: "<p>Press <strong>R</strong> to drink it.</p>", touch: "<p>Tap the <strong>potion button</strong> to use.</p>", button: "Great!" }, bomb: { common: "<p>You can now use <strong>Bombs</strong>!</p>", desktop: "<p>Press <strong>X</strong> to throw them at your enemies.</p>", touch: "<p>Tap the <strong>bomb button</strong> to throw them at your enemies.</p>", button: "Neat!" }, bow: { common: "<p>You have equipped the <strong>Bow</strong>!</p>", desktop: "<p>Press <strong>F</strong> to shoot arrows at your enemies.</p>", touch: "<p>Tap the <strong>bow button</strong> to shoot arrows at your enemies.</p>", button: "Got it!" }, wand: { common: "<p>You have equipped the <strong>Magic Wand</strong>!</p>", desktop: "<p>Press <strong>C</strong> to stun enemies.</p>", touch: "<p>Press the <strong>wand button</strong> to stun the enemies facing you.</p>", button: "Okay!" }, sword: { common: "<p>You have equipped the <strong>Sword</strong>!</p>", desktop: "<p>Press <strong>SPACE</strong> to attack.</p>", touch: "<p>Tap the <strong>sword button</strong> to attack.</p>", button: "Sweet!" }, movement: { common: '<div class="movement-keys js-key-mapping"></div>', button: "Got it!" }, install: { common: "<p>For the best experience, we strongly recommend adding this site to your home screen.</p>", button: "Ignore" } } }, {}],
    133: [function(t, e, i) { var n = t("10"); var s = t("3"); var o = {}; var r = {}; var a = {}; var h = {}; var l = _.object(_.flatten(_.map(t("12"), function(t, e) { return _.map(t, function(t) { return [t, e + "/" + t + ".js"] }) }), true)); var u = _.object(_.flatten(_.map(t("13"), function(t, e) { return _.map(t, function(t) { return [t, e + "/" + t] }) }), true));
        o.getCaches = function() { return [r, a, h] };
        o.setCaches = function(t, e, i) { r = t;
            a = e;
            h = i };
        o.loadJSONMesh = function(t) { if (!_.has(l, t)) { throw "Unknown mesh id: " + t } if (_.has(r, t)) { return (new $.Deferred).resolve(r[t]).promise() } return $.ajax({ url: s(n.paths.models, l[t]), dataType: "text" }).pipe(function(e) { r[t] = e; return e }) };
        o.loadJSONMeshes = function(t) { return $.when.apply($, _.map(t, o.loadJSONMesh)) };
        o.parseMeshData = function(t) { t.forEach(function(t) { if (!_.has(r, t)) { throw "No JSON found for id: " + t } if (_.has(a, t)) return; var e = new THREE.JSONLoader; var i = JSON.parse(r[t]); var s = e.parse(i, n.paths.textures); var h; if (s.materials.length > 1) { h = new THREE.MeshFaceMaterial(s.materials) } else { h = s.materials[0] } var l = s.geometry; if (t !== "key") { l = (new THREE.BufferGeometry).fromGeometry(s.geometry) } if (s.geometry.animations && s.geometry.animations.length > 0) { l.animations = s.geometry.animations;
                    l.bones = s.geometry.bones; var u = s.geometry.skinIndices; var c = s.geometry.skinWeights; var d = s.geometry.faces;
                    o.normalizeSkinIndices(u, c); var f = o.fillFloat32Array(u, d);
                    l.addAttribute("skinIndex", new THREE.BufferAttribute(f, 4)); var p = o.fillFloat32Array(c, d);
                    l.addAttribute("skinWeight", new THREE.BufferAttribute(p, 4)) } a[t] = { geometry: l, material: h } }) };
        o.fillFloat32Array = function(t, e) { var i = new Float32Array(e.length * 3 * 4); for (var n = 0, s = 0, o = e.length; n < o; n++, s += 3 * 4) { var r = e[n]; var a = t[r.a]; var h = t[r.b]; var l = t[r.c];
                i[s] = a.x;
                i[s + 1] = a.y;
                i[s + 2] = a.z;
                i[s + 3] = a.w;
                i[s + 4] = h.x;
                i[s + 5] = h.y;
                i[s + 6] = h.z;
                i[s + 7] = h.w;
                i[s + 8] = l.x;
                i[s + 9] = l.y;
                i[s + 10] = l.z;
                i[s + 11] = l.w } return i };
        o.normalizeSkinIndices = function(t, e) { for (var i = 0; i < t.length; i++) { var n = e[i]; var s = 1 / n.lengthManhattan(); if (s !== Infinity) { n.multiplyScalar(s) } else { n.set(1) } } };
        o.getMeshData = function(t) { if (!_.has(a, t)) { o.parseMeshData([t]) } return a[t] };
        o.loadTexture = function(t) { var e = new $.Deferred; if (_.has(h, t)) { e.resolve(h[t]) } else { THREE.ImageUtils.loadTexture(s(n.paths.textures, u[t]), THREE.UVMapping, function(i) { h[t] = i;
                    e.resolve(i) }) } return e.promise() };
        o.loadTextures = function(t) { return $.when.apply($, _.map(t, o.loadTexture)) };
        o.getTexture = function(t) { if (!_.has(h, t)) { throw "Texture not found: " + t } return h[t] };
        o.loadImage = function(t) { var e = new $.Deferred; var i = new Image;
            i.onload = function() { e.resolve(i) };
            i.src = t; return e.promise() };
        o.loadImages = function(t) { return $.when.apply($, _.map(t, o.loadImage)) };
        e.exports = o }, { 10: 10, 12: 12, 13: 13, 3: 3 }],
    134: [function(t, e, i) { var n = t("66"); var s = t("10"); var o = function(t) { this.player = t;
            this.items = [];
            this.tiers = { sword: 0, bow: 0, bomb: 0, wand: 0 } };
        o.inherit(Object, { addItem: function(t) { t.id = _.uniqueId("item_");
                t.purchased = this.player.hasWeapon(t.type, t.tier) || t.tier <= s[t.type.toUpperCase()];
                this.items.push(t);
                this.tiers[t.type] = t.purchased ? t.tier : this.tiers[t.type]; if (t.tier === 2 && this.tiers[t.type] === 0) { t.locked = true } }, getState: function() { return { gold: this.player.coinCount, items: this.items } }, getItem: function(t) { var e = _.find(this.items, function(e) { return e.id === t }); return e }, buyItem: function(t) { var e = this.getItem(t); if (e && e.price <= this.player.coinCount && e.tier - this.tiers[e.type] === 1) { this.player.coinCount -= e.price;
                    e.purchased = true;
                    this.player.setWeapon(e.type, e.weapon);
                    this.tiers[e.type] = e.tier; if (e.tier === 1) { var i = _.find(this.items, function(t) { return t.type === e.type && t.tier === 2 });
                        i.locked = false } return true } return false }, canBuyItem: function() { for (var t = 0; t < this.items.length; t++) { var e = this.items[t]; if (!e.purchased && e.price <= this.player.coinCount) { return true } } return false }, hasAvailableItem: function() { var t = false; for (var e = 0; e < this.items.length; e++) { var i = this.items[e]; if (!i.purchased) { t = true; break } } return t } });
        o.mixin(n);
        e.exports = o }, { 10: 10, 66: 66 }],
    135: [function(t, e, i) { var n = "gs"; var s = function(t) { this.state = { level: null, gold: 0, weapons: [0, 0, 0, 0], ammo: [0, 0, 0] };
            this.restored = false; if (t.restore) { this.restore() } };
        s.prototype = { update: function(t) { var e = this.state; var i = t.player; var n = i.weapons; var s = [n.sword, n.bow, n.bomb, n.wand]; var o = i.ammo;
                e.level = t.currentLevel;
                e.gold = i.coinCount;
                e.weapons = _.map(s, function(t) { if (t) { return t.tier } else { return 0 } });
                e.ammo = [o.arrows, o.bombs, o.potions] }, save: function() { try { localStorage.setItem(n, btoa(JSON.stringify(this.state))) } catch (t) {} }, restore: function(t) { var e = localStorage.getItem(n); if (e) { try { this.state = JSON.parse(atob(e));
                        this.restored = true } catch (i) {} } }, clear: function() { try { localStorage.removeItem(n) } catch (t) {} }, getLevel: function() { return this.state.level }, updateGame: function(t) { if (!this.restored) return; var e = this.state; var i = t.player;
                _.each(["sword", "bow", "bomb", "wand"], function(n, s) { var r = e.weapons[s]; if (r > 0) { i.setWeapon(n, o(n, r));
                        t.trigger("activateItem", n) } });
                t.trigger("clearNewEquipment");
                i.coinCount = e.gold;
                t.trigger("count", "gold", e.gold);
                _.each(["arrows", "bombs", "potions"], function(n, s) { var o = e.ammo[s];
                    i.ammo[n] = o;
                    t.trigger("count", n, o) }); if (i.ammo.potions > 0) { i.potionUnlocked = true;
                    t.trigger("activateItem", "potion") } } };

        function o(t, e) { var i = { sword: ["basicsword", "powersword"], bow: ["basicbow", "piercingbow"], bomb: ["basicbombs", "triggerbombs"], wand: ["basicwand", "freezingwand"] }; return i[t][e - 1] } e.exports = s }, {}],
    136: [function(t, e, i) { var n = { log: function() { var t = ["send", "event"]; if (typeof ga === "undefined") { return } if (arguments.length > 1) { for (var e = 0; e < arguments.length; e++) { t.push(arguments[e]) } } else { t.push(arguments[0]);
                    t.push(arguments[0]) } ga.apply(null, t) }, logPageView: function(t) { if (typeof ga === "undefined") { return } ga("send", "pageview", t) } };
        e.exports = n }, {}],
    137: [function(t, e, i) { var n = function(t) { t = _.extend({}, { duration: 1e3, repeat: false, onStart: function() {}, onEnd: function() {} }, t);
            this.duration = t.duration;
            this.repeat = t.repeat;
            this.startCallback = t.onStart;
            this.endCallback = t.onEnd;
            this.reset() };
        n.inherit(Object, { reset: function() { this.started = false;
                this.paused = false;
                this.ended = false;
                this.elapsedTime = 0; return this }, start: function() { if (this.started || this.ended) return this;
                this.started = true;
                this.startCallback(); return this }, stop: function() { if (!this.started) return this; return this.reset() }, pause: function() { this.paused = true; return this }, resume: function() { this.paused = false; return this }, update: function(t) { if (!this.started || this.paused || this.ended) return this;
                this.elapsedTime += t.delta * 1e3; if (this.elapsedTime > this.duration) { this.endCallback();
                    this.ended = true } return this } });
        e.exports = n }, {}],
    138: [function(t, e, i) { var n = t("137"); var s = { _timers: {} };
        s.delay = function(t, e, i) { var o = _.uniqueId("timer_"); var r = new n({ duration: t, onEnd: function() { e.call(i);
                    delete s._timers[o] } }).start();
            s._timers[o] = r; return r };
        s.repeat = function(t, e, i, n) { s.delay(e, function() { i.call(n); if (t > 1) { s.repeat(t - 1, e, i, n) } }, n) };
        s.updateTimers = function(t) { _.each(s._timers, function(e) { e.update(t) }) };
        s.clearTimers = function() { _.each(s._timers, function(t) { t.onEnd = null });
            s._timers = {} };
        e.exports = s }, { 137: 137 }],
    139: [function(t, e, i) { var n = {};
        n.getRandomInt = function(t, e) { return Math.floor(Math.random() * (e - t)) + t };
        n.getRandomFloat = function(t, e) { return Math.random() * (e - t) + t };
        n.getRandomFromArray = function(t) { return t[Math.floor(Math.random() * t.length)] };
        n.pad = function(t, e, i) { i = i || "0";
            t = t + ""; return t.length >= e ? t : new Array(e - t.length + 1).join(i) + t };
        n.getAspectRatio = function() { var t = window.innerWidth; var e = window.innerHeight; return e / t };
        e.exports = n }, {}],
    140: [function(t, e, i) { var n = t("141"); var s = t("136"); var o = n.extend({ events: _.extend({}, n.prototype.events, { "tap a": "stopPropagation", "tap .js-ext-link": "onClickExternalLink" }), initialize: function() {}, stopPropagation: function(t) { t.stopPropagation() }, show: function() { n.prototype.show.call(this);
                s.logPageView("/about") }, onClickExternalLink: function(t) { var e = $(t.target).attr("href");
                s.log("ext-link", e, "about") } });
        e.exports = o }, { 136: 136, 141: 141 }],
    141: [function(t, e, i) { var n = t("157"); var s = t("9"); var o = n.extend({ events: { tap: "onTap", "tap .js-close": "close" }, initialize: function() {}, onTap: function(t) { if (!$(t.target).is(".inner") && $(t.target).parents(".inner").length === 0) { this.hide();
                    this.trigger("close") } }, show: function() { this.$el.addClass("visible") }, hide: function() { this.$el.removeClass("visible") }, close: function(t) { this.hide();
                this.trigger("close");
                t.stopPropagation();
                t.preventDefault() } });
        e.exports = o }, { 157: 157, 9: 9 }],
    142: [function(t, e, i) { var n = t("141"); var s = n.extend({ template: "controls.html", events: _.extend({}, n.prototype.events, { "tap .js-keyboard-type": "showKeyboardSelect", "tap .js-keyboard-select": "onTapKeyboardSelect", "tap .js-close": "close" }), initialize: function() { this.$keyboardType = $(".js-keyboard-type");
                this.$keyboardSelect = $(".js-keyboard-select");
                this.$keymapping = $(".js-key-mapping") }, showKeyboardSelect: function(t) { this.$keyboardSelect.show();
                t.stopPropagation() }, hideKeyboardSelect: function() { this.$keyboardSelect.hide() }, onTapKeyboardSelect: function(t) { var e = $(t.target).closest(".js-option"); var i = e.data("value");
                this.hideKeyboardSelect();
                this.trigger("keyboardChange", i);
                this.setKeyboardType(i);
                t.stopPropagation() }, setKeyboardType: function(t) { this.$keyboardType.html(t);
                this.$keymapping.removeClass("azerty qwerty qwertz qzerty").addClass(t);
                _.each(this.$keyboardSelect.find(".js-option"), function(e) { if ($(e).data("value") === t) { $(e).addClass("selected") } else { $(e).removeClass("selected") } }) }, close: function(t) { n.prototype.close.call(this, t);
                this.trigger("completeTutorial") } });
        e.exports = s }, { 141: 141 }],
    143: [function(t, e, i) { var n = t("157"); var s = n.extend({ template: "death.html", events: { "tap .js-respawn": "respawn" }, initialize: function() {}, show: function() { this.$el.addClass("visible") }, hide: function() { this.$el.removeClass("visible") }, respawn: function(t) { this.hide();
                this.trigger("respawn");
                t.stopPropagation() } });
        e.exports = s }, { 157: 157 }],
    144: [function(t, e, i) { var n = t("157"); var s = n.extend({ initialize: function(t) { this.$el = t.el;
                this.direction = t.direction; if (!this.direction) { throw "Missing direction option" } if (this.direction === "horizontal") { this.directions = ["left", "right"] } else if (this.direction === "vertical") { this.directions = ["up", "down"] } else { throw "direction option must be either 'horizontal' or 'vertical'" } }, _getPosition: function(t) { var e = t.originalEvent.touches ? t.originalEvent.touches[0] : t; return this.direction === "horizontal" ? e.pageX : e.pageY }, startDrag: function(t) { if (!this.canDrag()) return;
                this.dragStart = this._getPosition(t);
                this.onStartDrag();
                this.firstMove = true;
                this.lastPositionX = t.originalEvent.touches ? t.originalEvent.touches[0].pageX : t.pageX;
                this.lastPositionY = t.originalEvent.touches ? t.originalEvent.touches[0].pageY : t.pageY }, endDrag: function() { if (this.dragging) { this.onEndDrag(this.draggingDirection);
                    this.$el.removeClass("dragging");
                    this.dragging = false;
                    this.draggingDirection = null } }, drag: function(t) { var e = t.originalEvent.touches ? t.originalEvent.touches[0].pageX : t.pageX; var i = t.originalEvent.touches ? t.originalEvent.touches[0].pageY : t.pageY; var n = e - this.lastPositionX; var s = i - this.lastPositionY; var o, r, a;
                this.lastPositionX = e;
                this.lastPositionY = i; if (this.direction === "horizontal") { o = e;
                    r = n;
                    a = s } else { o = i;
                    r = s;
                    a = n } if (this.firstMove) { this.dragging = true;
                    this.$el.addClass("dragging") } if (this.firstMove && Math.abs(r) <= Math.abs(a)) { this.$el.removeClass("dragging");
                    this.dragging = false;
                    this.draggingDirection = null } if (this.dragging) { var h = o - this.dragStart;
                    t.preventDefault(); if (r < 0) { this.draggingDirection = this.directions[0] } else { this.draggingDirection = this.directions[1] } this.onDrag(h) } this.firstMove = false;
                t.stopPropagation() }, canDrag: function() { return true }, onStartDrag: function() {}, onDrag: function(t) {}, onEndDrag: function(t) {} });
        e.exports = s }, { 157: 157 }],
    145: [function(t, e, i) { var n = t("157"); var s = t("136"); var o = n.extend({ template: "end.html", events: { "tap .js-ext-link": "onClickExternalLink" }, initialize: function() {}, show: function() { this.$el.addClass("visible");
                setTimeout(function() { this.$el.addClass("idle") }.bind(this), 1e3) }, hide: function() { this.$el.removeClass("visible") }, onClickExternalLink: function(t) { var e = $(t.target).closest(".js-ext-link").attr("href");
                s.log("ext-link", e, "end") } });
        e.exports = o }, { 136: 136, 157: 157 }],
    146: [function(t, e, i) { var n = t("157"); var s = t("10"); var o = t("138"); var r = .25; var a = n.extend({ template: "hud.html", events: { "tap .js-menu-button": "showMenu", "tap .js-map-button": "toggleMap", "tap .js-melee-button": "onTapMeleeButton", "tap .js-range-button": "onTapBowButton", "tap .js-bomb-button": "onTapBombButton", "tap .js-wand-button": "onTapWandButton", "tap .js-potion-button": "onTapPotionButton", "tap .js-audio-button": "toggleAudio", "touchstart .js-arrow": "onPressArrow", "touchend .js-arrow": "onReleaseArrow" }, initialize: function() { this.$keys = this.$(".js-keys");
                this.$keyCounter = $(".js-key-counter");
                this.$arrowCounter = $(".js-arrow-counter");
                this.$bombCounter = $(".js-bomb-counter");
                this.$potionCounter = $(".js-potion-counter");
                this.$healthBar = $(".js-health");
                this.$swordButton = $(".js-melee-button");
                this.$bowButton = $(".js-range-button");
                this.$bombButton = $(".js-bomb-button");
                this.$wandButton = $(".js-wand-button");
                this.$goldCount = this.$(".js-gold-count");
                this.$audioButton = this.$(".js-audio-button");
                this.$levelCount = this.$(".js-level-count");
                this.$buttons = { potion: this.$(".js-potion-button"), sword: this.$(".js-melee-button"), bow: this.$(".js-range-button"), bomb: this.$(".js-bomb-button"), wand: this.$(".js-wand-button") };
                this.healthBarWidth = this.$healthBar.width(); if (!window.isMobile) { this.$el.addClass("no-keypad") } if (!s.AUDIO) { this.$audioButton.addClass("disabled") } this.lastMoveTime = 0 }, show: function() { this.$el.removeClass("hidden") }, hide: function() { this.$el.addClass("hidden") }, showMenu: function(t) { this.trigger("showMenu");
                t.stopPropagation() }, toggleMap: function(t) { this.trigger("toggleMap");
                t.stopPropagation() }, setKeyCount: function(t) { this.$keys.html(""); for (var e = 0; e < t; e++) { var i = $('<div class="key"></div>');
                    this.$keys.append(i) } }, setArrowCount: function(t) { this.$arrowCounter.html(t); if (t === 0) { this.$arrowCounter.addClass("empty") } else if (t === s.MAX_ARROWS) { this.$arrowCounter.addClass("full") } else { this.$arrowCounter.removeClass("empty full") } }, setBombCount: function(t) { this.$bombCounter.html(t); if (t === 0) { this.$bombCounter.addClass("empty") } else if (t === s.MAX_BOMBS) { this.$bombCounter.addClass("full") } else { this.$bombCounter.removeClass("empty full") } }, setPotionCount: function(t) { this.$potionCounter.html(t); if (t === 0) { this.$potionCounter.addClass("empty") } else if (t === s.MAX_POTIONS) { this.$potionCounter.addClass("full") } else { this.$potionCounter.removeClass("empty full") } }, setGoldCount: function(t) { this.$goldCount.html(t) }, setHealth: function(t) { if (t < .25) { this.$healthBar.addClass("blink") } else { this.$healthBar.removeClass("blink") } this.$healthBar.css("background-position", -(this.healthBarWidth * (1 - t)) + "px 0") }, startCooldown: function(t) { switch (t) {
                    case "sword":
                        this.$swordButton.addClass("disabled"); break;
                    case "bow":
                        this.$bowButton.addClass("disabled"); break;
                    case "bomb":
                        this.$bombButton.addClass("disabled"); break;
                    case "wand":
                        this.$wandButton.addClass("disabled"); break } }, endCooldown: function(t) { switch (t) {
                    case "sword":
                        this.$swordButton.removeClass("disabled"); break;
                    case "bow":
                        this.$bowButton.removeClass("disabled"); break;
                    case "bomb":
                        this.$bombButton.removeClass("disabled"); break;
                    case "wand":
                        this.$wandButton.removeClass("disabled"); break } }, onTapMeleeButton: function(t) { t.stopPropagation();
                this.trigger("weapon", "sword") }, onTapBowButton: function(t) { t.stopPropagation();
                this.trigger("weapon", "bow") }, onTapBombButton: function(t) { t.stopPropagation();
                this.trigger("weapon", "bomb") }, onTapWandButton: function(t) { t.stopPropagation();
                this.trigger("weapon", "wand") }, onTapPotionButton: function(t) { t.stopPropagation();
                this.trigger("potion") }, goForward: function() { this.trigger("move", "forward") }, goBackward: function() { this.trigger("move", "backward") }, turnLeft: function() { this.trigger("turn", "left") }, turnRight: function() { this.trigger("turn", "right") }, strafeLeft: function() { this.trigger("move", "left") }, strafeRight: function() { this.trigger("move", "right") }, activateItem: function(t) { if (!this.hasWeapon) { this.hasWeapon = true;
                    this.$el.removeClass("no-weapons") } this.$buttons[t].removeClass("empty") }, animateButton: function(t) { var e = this.$buttons[t];
                e.addClass("active");
                o.delay(250, function() { e.removeClass("active") }, this) }, toggleAudio: function(t) { t.stopPropagation();
                this.$audioButton.toggleClass("disabled");
                this.trigger("toggleAudio") }, setLevel: function(t) { this.$levelCount.html(t) }, showDetonateButton: function() { this.$bombButton.addClass("detonate") }, showBombButton: function() { this.$bombButton.removeClass("detonate") }, onPressArrow: function(t) { var e = $(t.target).closest(".js-arrow");
                this.currentMove = e.data("move");
                this.currentDirection = e.data("direction");
                this.lastMoveTime = 0;
                t.preventDefault() }, onReleaseArrow: function(t) { this.currentMove = null;
                this.currentDirection = null }, triggerMove: function() { this.trigger(this.currentMove, this.currentDirection) }, update: function(t) { if (this.currentMove && this.currentDirection && t.elapsed - this.lastMoveTime > r) { this.triggerMove();
                    this.lastMoveTime = t.elapsed } } });
        e.exports = a }, { 10: 10, 138: 138, 157: 157 }],
    147: [function(t, e, i) { var n = t("157"); var s = n.extend({ template: "intro.html", events: {}, initialize: function() {}, show: function() { this.$el.addClass("visible");
                setTimeout(function() { this.hide() }.bind(this), 4e3) }, hide: function() { this.$el.removeClass("visible");
                this.trigger("introEnd") } });
        e.exports = s }, { 157: 157 }],
    148: [function(t, e, i) { var n = t("157"); var s = n.extend({ template: "keyboardselect.html", events: { "tap .js-keyboard-type": "showKeyboardSelect", "tap .js-keyboard-select": "onTapKeyboardSelect", "tap .js-close": "close" }, initialize: function() { this.$keyboardType = $(".js-keyboard-type");
                this.$keyboardSelect = $(".js-keyboard-select") }, showKeyboardSelect: function(t) { this.$keyboardSelect.show();
                t.stopPropagation() }, hideKeyboardSelect: function() { this.$keyboardSelect.hide() }, onTapKeyboardSelect: function(t) { var e = $(t.target).closest(".js-option"); var i = e.data("value");
                this.hideKeyboardSelect();
                this.trigger("keyboardChange", i);
                this.setKeyboardType(i);
                t.stopPropagation() }, setKeyboardType: function(t) { this.$keyboardType.html(t);
                _.each(this.$keyboardSelect.find(".js-option"), function(e) { if ($(e).data("value") === t) { $(e).addClass("selected") } else { $(e).removeClass("selected") } }) }, show: function() { this.$el.addClass("visible") }, hide: function() { this.$el.removeClass("visible") }, close: function(t) { this.hide(t);
                this.trigger("keyboardChosen");
                t.stopPropagation() } });
        e.exports = s }, { 157: 157 }],
    149: [function(t, e, i) { var n = t("157"); var s = t("138"); var o = n.extend({ template: "level-title.html", events: {}, initialize: function() { this.$digits = this.$(".js-digits") }, show: function(t) { this.updateLevelCount(t);
                this.$el.removeClass("cleared");
                this.$el.addClass("visible");
                s.delay(2500, function() { this.$el.removeClass("visible") }, this) }, showCleared: function(t) { this.$el.addClass("visible cleared");
                setTimeout(function() { this.$el.removeClass("visible cleared");
                    this.$el.find(".js-digits").html("");
                    this.trigger("cleared") }.bind(this), 2e3) }, updateLevelCount: function(t) { var e = t.toString(); var i;
                this.$digits.html(""); for (var n = 0; n < e.length; n++) { var s = $('<div class="digit-' + e[n] + '"></div>');
                    this.$digits.append(s) } } });
        e.exports = o }, { 138: 138, 157: 157 }],
    150: [function(t, e, i) {
        var n = t("157");
        var s = t("9");
        var o = t("138");
        var r = t("146");
        var a = t("152");
        var h = t("142");
        var l = t("155");
        var u = t("140");
        var c = t("151");
        var d = t("149");
        var f = t("153");
        var p = t("154");
        var v = t("148");
        var g = t("145");
        var m = t("143");
        var y = t("147");
        var w = t("132");
        var E = n.extend({
            template: "main.html",
            events: { "mouseenter .js-hover-sound": "playHoverSound", "click .js-click-sound": "playClickSound", "tap .js-sharing": "openSharingWindow" },
            views: { menu: { ".js-menu-container": a }, controls: { ".js-controls-container": h }, keyboardSelect: { ".js-keyboard-select-container": v }, shop: { ".js-shop-container": l }, hud: { ".js-hud-container": r }, levelTitle: { ".js-level-title-container": d }, message: { ".js-message-container": f }, end: { ".js-end-container": g }, intro: { ".js-intro-container": y }, death: { ".js-death-container": m } },
            initialize: function(t) { this.$canvas = this.$("#container");
                this.addSubView("map", new c({ el: $(".js-map-container") }));
                this.setupEvents() },
            setupEvents: function() { this.views.hud.on("showMenu", this.toggleMainMenu, this);
                this.views.hud.on("toggleMap", this.toggleMap, this);
                this.views.menu.on("showControls", this.showControls, this);
                this.views.menu.on("showAbout", this.showAbout, this);
                this.views.menu.on("close", this.toggleMainMenu, this);
                this.views.controls.on("close", this.showMenu, this);
                this.views.map.on("close", this.hideMap, this);
                this.views.shop.on("nextlevel", this.onExitShop, this);
                this.views.shop.on("showIntro", function() { this.showPopup(w.shop, "shop-intro") }, this);
                this.views.shop.on("showPopup", this.showPopup, this) },
            handleKeyboardEvents: function() { $(window).on("keydown", function(t) { if (this.inShop && !this.popupActive) { this.views.shop.onKeyDown(t) } else if (this.popupActive) { if (t.keyCode === 27 || t.keyCode === 13) { this.popup.close() } } else { this.onKeyDown(t) } if (t.keyCode === 9) { t.preventDefault() } }.bind(this)) },
            onKeyDown: function(t) { if (t.keyCode === 27) { this.toggleMainMenu() } if (t.keyCode === 9) { this.toggleMap() } },
            showCanvas: function() { this.$canvas.addClass("visible") },
            fadeOutGame: function() { this.$canvas.addClass("fadeout");
                setTimeout(function() { this.$canvas.removeClass("fadeout") }.bind(this), 1e3) },
            onGameStart: function() { this.$el.addClass("started") },
            setCount: function(t, e) { switch (t) {
                    case "keys":
                        this.views.hud.setKeyCount(e); break;
                    case "arrows":
                        this.views.hud.setArrowCount(e); break;
                    case "bombs":
                        this.views.hud.setBombCount(e); break;
                    case "potions":
                        this.views.hud.setPotionCount(e); break;
                    case "gold":
                        this.setGoldCount(e); break } },
            setPlayerHealth: function(t) { this.views.hud.setHealth(t) },
            startCooldown: function(t) { this.views.hud.startCooldown(t) },
            endCooldown: function(t) { this.views.hud.endCooldown(t) },
            showMenu: function() { this.trigger("showMenu");
                this.views.menu.show();
                this.currentView = this.views.menu;
                this.views.hud.hide() },
            hideMenu: function() { this.trigger("hideMenu");
                this.currentView.hide();
                this.views.hud.show() },
            showControls: function() { var t = window.isMobile ? this.views.mobileControls : this.views.controls;
                t.show();
                this.currentView = t },
            showAbout: function() { this.trigger("showAbout");
                this.views.about.show();
                this.currentView = this.views.about },
            onCloseAbout: function() { this.trigger("closeAbout") },
            onPauseGame: function() { this.$el.addClass("paused");
                this.paused = true },
            onResumeGame: function() { this.$el.removeClass("paused");
                this.paused = false },
            toggleMainMenu: function() { this.trigger("toggleMainMenu") },
            toggleMap: function() { if (this.paused) { return } if (this.mapVisible) { this.hideMap() } else { this.showMap() } },
            showMap: function() { this.trigger("showMap");
                this.views.map.show();
                this.mapVisible = true;
                s.play("map") },
            hideMap: function() { this.trigger("hideMap");
                this.views.map.hide();
                this.mapVisible = false },
            setLevel: function(t) { this.views.hud.setLevel(t) },
            showLevelTitle: function(t) { this.views.levelTitle.show(t);
                this.views.hud.show() },
            onLevelCleared: function(t) { this.views.levelTitle.showCleared(t);
                this.views.hud.hide() },
            showShop: function(t) { this.$el.addClass("in-shop");
                this.views.shop.render(t);
                this.views.shop.show();
                this.inShop = true },
            onExitShop: function() { this.$el.removeClass("in-shop");
                this.inShop = false },
            setKeyboardType: function(t) { this.views.controls.setKeyboardType(t);
                this.views.keyboardSelect.setKeyboardType(t) },
            setGoldCount: function(t) { this.views.hud.setGoldCount(t);
                this.views.shop.setGoldCount(t) },
            showDeath: function() { this.views.hud.hide();
                this.views.death.show();
                s.play("death") },
            showMovementPopup: function(t) { this.showPopup(w.movement, "movement");
                this.popup.$el.find(".js-key-mapping").addClass(t) },
            showPopup: function(t, e) {
                this.popupActive = true;
                this.views.hud.hide();
                this.popup = new p({
                    container: this.$(".js-popup-container"),
                    content: this.getPopupText(t),
                    type: e,
                    button: t.button !== undefined ? t.button : "Close"
                });
                this.popup.show();
                this.popup.on("closed", function() { this.popupActive = false;
                    this.trigger("popupClosed"); if (!this.inShop) { this.views.hud.show() } }, this);
                s.play("popup")
            },
            activateItem: function(t) { this.views.hud.activateItem(t) },
            onRestart: function() { this.$el.removeClass("paused") },
            onWeaponUse: function(t) { this.views.hud.animateButton(t) },
            onPotionUse: function() { this.views.hud.animateButton("potion") },
            showKeyboardSelect: function() { s.play("popup");
                this.views.keyboardSelect.show() },
            showInstallPopup: function() { this.showPopup(w.install, "install") },
            showEnd: function() { this.views.end.show() },
            showIntro: function() { this.views.intro.show() },
            showDetonateButton: function() { this.views.hud.showDetonateButton() },
            showBombButton: function() { this.views.hud.showBombButton() },
            getPopupText: function(t) { if (_.isString(t)) { return t } else if (t.touch !== undefined && t.desktop !== undefined) { return window.isMobile ? t.common + t.touch : t.common + t.desktop } else { return t.common } },
            playHoverSound: function() { s.play("hover") },
            playClickSound: function() { s.play("buttonClick") },
            highlightNextButton: function() { this.views.shop.highlightNextButton() },
            openSharingWindow: function(t) { var e = $(t.target).closest(".js-sharing"); var i = e.data("href"); var n = e.data("width"); var s = e.data("height");
                b(i, n, s) },
            displayMessage: function(t) { this.views.message.setMessage(t) },
            onWindowResize: function(t, e) { if (this.inShop) { this.views.shop.onWindowResize(t, e) } },
            update: function(t) { this.views.hud.update(t) }
        });

        function b(t, e, i) { var n = ($(window).width() - e) / 2,
                s = ($(window).height() - i) / 2,
                o = "status=1" + ",width=" + e + ",height=" + i + ",top=" + s + ",left=" + n;
            window.open(t, "twitter", o); return false } e.exports = E
    }, { 132: 132, 138: 138, 140: 140, 142: 142, 143: 143, 145: 145, 146: 146, 147: 147, 148: 148, 149: 149, 151: 151, 152: 152, 153: 153, 154: 154, 155: 155, 157: 157, 9: 9 }],
    151: [function(t, e, i) { var n = t("141"); var s = n.extend({ events: _.extend({}, n.prototype.events, {}), initialize: function() {}, onTap: function(t) { this.trigger("close") } });
        e.exports = s }, { 141: 141 }],
    152: [function(t, e, i) { var n = t("141"); var s = n.extend({ template: "menu.html", events: _.extend({}, n.prototype.events, { "tap .js-controls-button": "showControls", "tap .js-about-button": "showAbout", "tap .js-restart-button": "restart", "tap .js-sharing-button": "share" }), initialize: function() {}, show: function() { n.prototype.show.call(this);
                setTimeout(function() { this.$el.addClass("animationend") }.bind(this), 500) }, hide: function() { n.prototype.hide.call(this);
                this.$el.removeClass("animationend") }, showControls: function(t) { this.hide();
                this.trigger("showControls");
                t.stopPropagation() }, showAbout: function(t) { this.hide();
                this.trigger("showAbout");
                t.stopPropagation() }, restart: function(t) { this.close(t);
                this.trigger("restart");
                t.stopPropagation() }, share: function(t) { t.stopPropagation(); var e = $(t.target).closest(".js-sharing"); var i = e.data("href"); var n = e.data("width"); var s = e.data("height");
                o(i, n, s) } });

        function o(t, e, i) { var n = ($(window).width() - e) / 2,
                s = ($(window).height() - i) / 2,
                o = "status=1" + ",width=" + e + ",height=" + i + ",top=" + s + ",left=" + n;
            window.open(t, "twitter", o); return false } e.exports = s }, { 141: 141 }],
    153: [function(t, e, i) { var n = t("157"); var s = t("138"); var o = n.extend({ template: "message.html", events: {}, initialize: function() { this.$message = this.$(".js-message") }, setMessage: function(t, e) { if (this.timeout) this.timeout.stop();
                this.$message.removeClass("hidden");
                this.$message.html(t);
                this.timeout = s.delay(e || 1e3, this.clear, this) }, clear: function() { this.$message.addClass("hidden") } });
        e.exports = o }, { 138: 138, 157: 157 }],
    154: [function(t, e, i) { var n = t("157"); var s = t("9"); var o = n.extend({ template: "popup.html", events: { "tap .js-close": "close" }, initialize: function(t) { this.$content = this.$(".js-content");
                this.$button = this.$(".js-button"); if (t.type !== undefined) { this.$el.addClass(t.type) } this.$content.html(t.content);
                this.$button.html(t.button !== undefined ? t.button : "Okay") }, show: function() { this.$el.addClass("visible") }, hide: function() { this.$el.removeClass("visible") }, close: function(t) { this.$el.addClass("fadeout");
                setTimeout(function() { this.$el.remove() }.bind(this), 150);
                this.trigger("closed"); if (t) { t.stopPropagation();
                    t.preventDefault() } s.play("buttonClick") } });
        e.exports = o }, { 157: 157, 9: 9 }],
    155: [function(t, e, i) { var n = t("157"); var s = t("156"); var o = t("9"); var r = n.extend({ template: "shop.html", events: { "tap .js-exit": "exit", "tap .js-next-item": "nextItem", "tap .js-previous-item": "previousItem", "tap .js-buy": "buyItem" }, initialize: function(t) { this.$content = this.$(".js-content");
                this.$items = this.$(".js-item");
                this.$name = this.$(".js-item-name");
                this.$price = this.$(".js-price");
                this.$description = this.$(".js-item-description");
                this.$leftArrow = this.$(".js-previous-item");
                this.$rightArrow = this.$(".js-next-item");
                this.$goldCount = this.$(".js-gold-count");
                this.$locks = this.$(".js-lock");
                this.$next = this.$(".js-exit");
                this.slider = new s({ el: this.$(".js-slider"), width: this.$items.eq(0).width(), direction: "horizontal" });
                this.slider.on("change", this.onItemChange, this); if (this.soldOut) { this.slider.goTo(this.$items.length) } else { this.selectFirstAvailableItem() } }, onKeyDown: function(t) { if (t.keyCode === 27) { this.exit() } if (t.keyCode === 13) { if (this.readyToLeave) { this.exit() } else { this.buyItem() } } if (t.keyCode === 65 || t.keyCode === 81 || t.keyCode === 37) { this.previousItem() } if (t.keyCode === 68 || t.keyCode === 39) { this.nextItem() } }, onItemChange: function(t) { this.$current = this.$items.eq(t);
                this.$items.not(this.$current).removeClass("current");
                this.$current.addClass("current");
                this.$name.html(this.$current.data("name"));
                this.$description.html(this.$current.data("description"));
                this.$price.html(this.$current.data("price"));
                this.update(t) }, nextItem: function() { this.slider.next();
                o.play("fastClick") }, previousItem: function() { this.slider.previous();
                o.play("fastClick") }, show: function() { this.active = true;
                this.$el.addClass("visible"); if (!this.rendered) { this.rendered = true; if (this.tutorialMode) { setTimeout(function() { this.trigger("showIntro") }.bind(this), 350) } } this.updateStamps() }, hide: function() { this.$el.removeClass("visible") }, exit: function(t) { if (!this.active) return; if (this.tutorialMode) { this.trigger("showPopup", { common: "<p>Hey! Don't forget to buy the <strong>Sword</strong>.<br>It's dangerous out there!</p>", button: "Oops" }); return } this.active = false;
                this.$el.addClass("fadeout");
                setTimeout(function() { this.$el.removeClass("visible fadeout");
                    this.trigger("nextlevel") }.bind(this), 350); if (t) { t.stopPropagation();
                    t.preventDefault() } this.readyToLeave = false;
                this.$next.removeClass("highlight");
                o.play("buttonClick") }, buyItem: function() { this.trigger("buyItem", this.$current.data("id"), this) }, setCurrentItemBought: function() { this.$content.addClass("purchased animated");
                this.tutorialMode = false }, setGoldCount: function(t) { this.$goldCount.html(t) }, setItems: function(t) { t.forEach(function(t, e) { var i = this.$items.eq(e);
                    i.data("purchased", t.purchased);
                    i.data("locked", t.locked) }, this);
                this.updateLocks();
                this.updateStamps() }, selectFirstAvailableItem: function() { $.each(this.$items, function(t, e) { if (!$(e).data("purchased")) { this.slider.goTo(t); return false } }.bind(this)) }, updateStamps: function() { $.each(this.$items, function(t, e) { if ($(e).data("purchased")) { $(e).addClass("acquired") } }.bind(this)) }, updateLocks: function() { $.each(this.$items, function(t, e) { if (this.$items.eq(t).data("locked") === false) { this.$locks.eq(t).removeClass("locked") } }.bind(this)) }, highlightNextButton: function() { this.readyToLeave = true;
                this.$next.addClass("highlight") }, onWindowResize: function(t, e) { this.slider.onWindowResize(t, e) }, update: function(t) { if (t === 0) { this.$leftArrow.addClass("disabled") } else { this.$leftArrow.removeClass("disabled") } if (t === this.$items.length - 1) { this.$rightArrow.addClass("disabled") } else { this.$rightArrow.removeClass("disabled") } if (parseInt(this.$current.data("price")) > parseInt(this.$goldCount.html()) || this.$items.eq(t).data("locked") === true) { this.$content.addClass("unavailable") } else { this.$content.removeClass("unavailable") } if (this.$current.data("purchased")) { this.$content.addClass("purchased") } else { this.$content.removeClass("purchased") } this.$content.removeClass("animated") }, dispose: function() { this.slider.dispose();
                this.slider.off();
                this.slider = null } });
        e.exports = r }, { 156: 156, 157: 157, 9: 9 }],
    156: [function(t, e, i) { var n = t("144"); var s = ["", "-webkit-", "-moz-", "-ms-", "-o-"]; var o = n.extend({ initialize: function(t) { this.$el.css("overflow", "hidden");
                this.centered = t.centered !== undefined ? t.centered : false;
                this.initItems();
                this.createContainer();
                n.prototype.initialize.call(this, t);
                this.initPositions(t);
                this.currentIndex = 0; if (t.dots) { this.initDots() } this.enabled = true;
                this.$el.on("touchstart mousedown", this.startDrag.bind(this));
                this.$el.on("touchend mouseup", this.endDrag.bind(this));
                this.$el.on("touchmove mousemove", this.drag.bind(this));
                this.$el.on("mouseleave", this.endDrag.bind(this)) }, initItems: function() { this.totalItemsWidth = 0;
                this.$items = this.$el.children();
                this.itemWidth = this.$items.eq(0).width();
                this.viewportWidth = this.$el.is(":visible") ? this.$el.width() : $(window).width();
                this.$items.each(function(t, e) { if (this.centered) $(e).outerWidth(this.viewportWidth);
                    this.totalItemsWidth += parseInt($(e).outerWidth(true)) }.bind(this)) }, createContainer: function() { this.$slider = $(document.createElement("div")).addClass("slider js-slider");
                this.$slider.appendTo(this.$el);
                this.$items.appendTo(this.$slider);
                this.$items.css("float", "left");
                this.$slider.css("width", this.totalItemsWidth + "px") }, initDots: function() { var t = $(document.createElement("div")).addClass("slider-dots").appendTo(this.$el); for (var e = 0; e < this.$items.length; e++) { var i = $(document.createElement("div")).addClass("dot js-dot").appendTo(t); var n = $(document.createElement("span")).appendTo(i) } this.$dots = this.$el.find(".js-dot");
                this.$dots.eq(this.currentIndex).addClass("active") }, initPositions: function(t) { this.positions = [];
                this.$items.each(function(t, e) { var i = this.itemWidth ? t * this.itemWidth : $(e).position().left; var n = this.itemWidth ? this.itemWidth : $(e).outerWidth(true); var s = -(i + n / 2 - this.viewportWidth / 2);
                    this.positions.push(s) }.bind(this)) }, goTo: function(t) { this.set(t);
                this.trigger("change", this.currentIndex) }, next: function() { this.goTo(this.currentIndex + 1) }, previous: function() { this.goTo(this.currentIndex - 1) }, set: function(t) { if (t > this.positions.length - 1) t = this.positions.length - 1; if (t < 0) t = 0;
                this.currentIndex = t;
                s.forEach(function(e) { this.$slider.css(e + "transform", "translate3d(" + this.positions[t] + "px, 0, 0)") }, this); if (this.$dots) { this.$dots.removeClass("active");
                    this.$dots.eq(this.currentIndex).addClass("active") } }, onStartDrag: function() { this.startingPosition = this.getCurrentTranslate() }, onDrag: function(t) { var e = this.startingPosition + t;
                s.forEach(function(t) { this.$slider.css("transform", "translate3d(" + e + "px, 0px, 0px)") }, this) }, getCurrentTranslate: function() { return parseInt(this.$slider.css("transform").split(",")[4]) }, getClosestItem: function() { var t = this.getCurrentTranslate(); var e = _.map(this.positions, function(e) { return Math.abs(e - t) }); return e.indexOf(_.min(e)) }, onEndDrag: function(t) { var e = this.getClosestItem(); if (Math.abs(e - this.currentIndex) > 1) { this.goTo(e) } else if (t === "left") { this.next() } else if (t === "right") { this.previous() } }, disable: function() { this.enabled = false }, enable: function() { this.enabled = true }, canDrag: function() { return this.enabled }, onWindowResize: function(t, e) { this.viewportWidth = this.$el.is(":visible") ? this.$el.width() : t;
                this.itemWidth = this.$items.eq(0).width();
                this.$items.each(function(t, e) { if (this.centered) $(e).outerWidth(this.viewportWidth);
                    this.totalItemsWidth += parseInt($(e).outerWidth(true)) }.bind(this));
                this.$slider.css("width", this.totalItemsWidth + "px");
                this.positions = [];
                this.$items.each(function(t, e) { var i = this.itemWidth ? t * this.itemWidth : $(e).position().left; var n = this.itemWidth ? this.itemWidth : $(e).outerWidth(true); var s = -(i + n / 2 - this.viewportWidth / 2);
                    this.positions.push(s) }.bind(this));
                this.set(this.currentIndex) }, dispose: function() { this.$el.off();
                this.$items = null } });
        e.exports = o }, { 144: 144 }],
    157: [function(t, e, i) { var n = t("7"); var s = Backbone.View.extend({ constructor: function(t) { t || (t = {});
                this.cid = _.uniqueId("view");
                _.extend(this, _.pick(t, o));
                this._ensureElement();
                this.delegateEvents();
                this._options = t;
                this._container = t.container;
                this._context = t.context;
                this._views = this.views;
                this.views = {}; if (this.template) { this._renderTemplate(t.context);
                    this._insert() } if (t.willInitialize && _.isFunction(t.willInitialize)) { this.setElement(t.willInitialize.call(this));
                    delete t.willInitialize } this._initSubViews(t);
                this.initialize.apply(this, arguments) }, _forEachSubView: function(t) { _.each(this._views, function(e, i) { var n = _.keys(e)[0]; var s = e[n]; var o = this.$(n); if (!i || !s) { throw "`views` is not declared correctly" } if (o.length == 0) { throw "Selector of sub-view container is invalid" } t.call(this, i, s, o) }, this) }, _initSubViews: function(t) { this._forEachSubView(function(e, i, n) { var s = _.clone(t);
                    s.container = n;
                    this.addSubView(e, new i(s)) }) }, addSubView: function(t, e) { this.views[t] = e;
                e.on("all", function() { this.trigger.apply(this, arguments) }, this); if (e._context === undefined) { e._context = this._context } return e }, _renderTemplate: function(t) { var e = $(n.render(this.template, t));
                this.setElement(e) }, _insert: function() { if (this._container) { this._container.append(this.$el) } }, _renderSubViews: function(t) { this._forEachSubView(function(e, i, n) { this.views[e]._container = n;
                    this.views[e].render(t) }, this) }, render: function(t) { t = t || this._context; if (this.$el) this.$el.remove();
                this.dispose();
                this._renderTemplate(t);
                this._insert();
                this._renderSubViews(t);
                this.initialize(this._options); return this }, dispose: function() {}, show: function() { this.$el.show();
                this._container.scrollTop(1); return this }, hide: function() { this.$el.hide(); return this }, isVisible: function() { return this.$el.is(":visible") } }); var o = ["model", "collection", "el", "id", "attributes", "className", "tagName", "events"];
        e.exports = s }, { 7: 7 }],
    158: [function(t, e, i) { var n = t("172"); var s = t("72"); var o = t("80"); var r = function(t, e) { n.call(this, t, { cooldown: 800, effects: { spawn: { type: s, effects: { aoe: { effects: { damage: { amount: 40 } } }, fx: { type: o }, destroy: {} } } } });
            this.tier = 1;
            this.type = "bomb";
            this.name = "basicbombs" };
        r.inherit(n, {});
        e.exports = r }, { 172: 172, 72: 72, 80: 80 }],
    159: [function(t, e, i) { var n = t("172"); var s = t("114"); var o = function(t, e) { n.call(this, t, { cooldown: 800, delay: 430, effects: { projection: { projectile: s, effects: { damage: { type: "range", amount: 10 } } } } });
            this.tier = 1;
            this.type = "bow";
            this.name = "basicbow" };
        o.inherit(n, { use: function() { if (this.owner.hasAmmo("arrows")) { n.prototype.use.apply(this, arguments) } } });
        e.exports = o }, { 114: 114, 172: 172 }],
    160: [function(t, e, i) { var n = t("172"); var s = function(t, e) { e = _.extend({}, { cooldown: 500, delay: 100, damage: 10 }, e);
            n.call(this, t, { owner: t, cooldown: e.cooldown, delay: e.delay, effects: { damage: { type: "melee", amount: e.damage } } });
            this.tier = 1;
            this.type = "sword";
            this.name = "basicsword" };
        s.inherit(n, {});
        e.exports = s }, { 172: 172 }],
    161: [function(t, e, i) { var n = t("172"); var s = t("118"); var o = function(t, e) { n.call(this, t, { cooldown: 2e3, delay: 300, effects: { projection: { projectile: s, options: { moveDuration: 150 }, effects: { stun: {} } } } });
            this.tier = 1;
            this.type = "wand";
            this.sound = "stunSpell";
            this.name = "basicwand" };
        o.inherit(n, {});
        e.exports = o }, { 118: 118, 172: 172 }],
    162: [function(t, e, i) { var n = t("138"); var s = t("172"); var o = t("115"); var r = t("9"); var a = function(t, e) { e = _.extend({}, { cooldown: 700, delay: 100, damage: 10 }, e);
            s.call(this, t, { cooldown: e.cooldown, delay: e.delay, effects: { projection: { projectile: o, options: { moveDuration: 150 }, effects: { damage: { amount: e.damage } } } } });
            this.type = "range";
            this.on("use", function() { this.audioTimer = n.delay(250, function() { r.play("popup", this.owner.level.distanceToPlayer(this.owner)) }, this) }) };
        a.inherit(s, { cancelUse: function() { s.prototype.cancelUse.call(this); if (this.audioTimer) { this.audioTimer.stop() } } });
        e.exports = a }, { 115: 115, 138: 138, 172: 172, 9: 9 }],
    163: [function(t, e, i) { var n = t("160"); var s = t("169"); var o = t("159"); var r = t("168"); var a = t("158"); var h = t("170"); var l = t("161"); var u = t("165"); var c = t("164");
        e.exports = { create: function(t, e, i) { if (!i) i = {}; switch (t) {
                    case "basicsword":
                        return new n(e, i);
                    case "powersword":
                        return new s(e, i);
                    case "basicbow":
                        return new o(e, i);
                    case "piercingbow":
                        return new r(e, i);
                    case "basicbombs":
                        return new a(e, i);
                    case "triggerbombs":
                        return new h(e, i);
                    case "basicwand":
                        return new l(e, i);
                    case "freezingwand":
                        return new u(e, i);
                    case "fireballs":
                        return new c(e, i);
                    case "mobattack":
                        return new MobAttack(e, i) } throw new Error("Unknown weapon name: " + type) } } }, { 158: 158, 159: 159, 160: 160, 161: 161, 164: 164, 165: 165, 168: 168, 169: 169, 170: 170 }],
    164: [function(t, e, i) { var n = t("172"); var s = t("116"); var o = t("9"); var r = function(t, e) { e = _.extend({}, { cooldown: 1700, delay: 100, damage: 20 }, e);
            n.call(this, t, { cooldown: e.cooldown, delay: e.delay, effects: { projection: { projectile: s, effects: { damage: { amount: e.damage } } } } });
            this.type = "range";
            this.on("use", function() { o.play("fireball", this.owner.level.distanceToPlayer(this.owner)) }) };
        r.inherit(n);
        e.exports = r }, { 116: 116, 172: 172, 9: 9 }],
    165: [function(t, e, i) { var n = t("172"); var s = t("117"); var o = function(t, e) { n.call(this, t, { cooldown: 2500, delay: 350, effects: { projection: { projectile: s, options: { moveDuration: 200 }, effects: { freeze: {} } } } });
            this.tier = 2;
            this.type = "wand";
            this.sound = "iceSpell";
            this.name = "freezingwand" };
        o.inherit(n, {});
        e.exports = o }, { 117: 117, 172: 172 }],
    166: [function(t, e, i) { var n = t("172"); var s = t("117"); var o = t("9"); var r = function(t, e) { e = _.extend({}, { cooldown: 3e3, delay: 100, damage: 10 }, e);
            n.call(this, t, { cooldown: e.cooldown, delay: e.delay, effects: { projection: { projectile: s, options: { moveDuration: 350, zOffset: 0 }, effects: { damage: { amount: e.damage }, freeze: { duration: 2e3 } } } } });
            this.type = "range";
            this.on("use", function() { o.play("iceSpell", this.owner.level.distanceToPlayer(this.owner)) }) };
        r.inherit(n);
        e.exports = r }, { 117: 117, 172: 172, 9: 9 }],
    167: [function(t, e, i) { var n = t("172"); var s = t("23"); var o = function(t, e) { e = _.extend({}, { cooldown: 1e3, delay: 50, damage: 5 }, e);
            n.call(this, t, { cooldown: e.cooldown, delay: e.delay, effects: { damage: { type: "melee", amount: e.damage } } }); if (e.knockback) { this.pushEffect(new s) } this.type = "mob" };
        o.inherit(n, {});
        e.exports = o }, { 172: 172, 23: 23 }],
    168: [function(t, e, i) { var n = t("172"); var s = t("119"); var o = function(t, e) { n.call(this, t, { cooldown: 800, delay: 430, effects: { projection: { projectile: s, effects: { damage: { type: "range", amount: 10 } } } } });
            this.tier = 2;
            this.type = "bow";
            this.name = "piercingbow" };
        o.inherit(n, { use: function() { if (this.owner.hasAmmo("arrows")) { n.prototype.use.apply(this, arguments) } } });
        e.exports = o }, { 119: 119, 172: 172 }],
    169: [function(t, e, i) { var n = t("172"); var s = function(t, e) { n.call(this, t, { cooldown: 500, delay: 100, effects: { damage: { type: "melee", amount: 15 }, knockback: {} } });
            this.tier = 2;
            this.type = "sword";
            this.name = "powersword" };
        s.inherit(n, {});
        e.exports = s }, { 172: 172 }],
    170: [function(t, e, i) { var n = t("172"); var s = t("127"); var o = t("80"); var r = function(t, e) { n.call(this, t, { cooldown: 800, effects: { spawn: { type: s, effects: { aoe: { effects: { damage: { amount: 50 } } }, fx: { type: o }, destroy: {} } } } });
            this.tier = 2;
            this.type = "bomb";
            this.name = "triggerbombs" };
        r.inherit(n, { use: function() { if (!this.isReady()) return; if (!this.owner.activeBomb) { this.trigger("use", this);
                    this.owner.trigger("effects", this.effects) } else { this.owner.activeBomb.detonate();
                    this.resetCooldown() } } });
        e.exports = r }, { 127: 127, 172: 172, 80: 80 }],
    171: [function(t, e, i) { var n = t("172"); var s = t("138"); var o = function(t, e) { e = _.extend({}, { cooldown: 1e3, delay: 50, damage: 5 }, e);
            n.call(this, t, { cooldown: 600, delay: e.delay, effects: { damage: { type: "melee", amount: e.damage } } });
            this.type = "mob";
            this.useCount = 0;
            this.defaultCooldownDuration = this.cooldown.duration;
            this.busyCooldownDuration = e.cooldown };
        o.inherit(n, { use: function() { this.cooldown.duration = this.defaultCooldownDuration;
                n.prototype.use.call(this);
                this.useCount++; if (this.useCount === 3) { this.cooldown.duration = this.busyCooldownDuration;
                    this.resetCooldown();
                    this.useCount = 0;
                    this.owner.attacking = false } } });
        e.exports = o }, { 138: 138, 172: 172 }],
    172: [function(t, e, i) { var n = t("138"); var s = t("66"); var o = t("65"); var r = function(t, e) { if (!t) throw new Error("Missing owner argument");
            e = _.extend({}, { cooldown: 0, delay: 0, effects: [] }, e);
            this.owner = t;
            this.delay = e.delay;
            this.cooldown = { duration: e.cooldown };
            this.initEffects(e.effects) };
        r.prototype = { isReady: function() { return !this.cooldown.waiting }, resetCooldown: function() { this.cooldown.reset = true }, use: function() { if (!this.isReady()) return;
                this.resetCooldown();
                this.trigger("use", this);
                this.effectsTimer = n.delay(this.delay, function() { this.owner.trigger("effects", this.effects) }, this) }, cancelUse: function() { if (this.effectsTimer) this.effectsTimer.stop() }, setCooldownDuration: function(t, e) { if (e) { var i = this.cooldown.duration;
                    this.once("ready", function() { this.cooldown.duration = i }, this) } this.cooldown.duration = t }, update: function(t) { var e = this.cooldown; if (e.reset) { e.lastTime = t.elapsed;
                    e.waiting = true;
                    e.reset = false;
                    this.trigger("cooldown", e) } else if (e.waiting && t.elapsed - e.lastTime > e.duration / 1e3) { e.lastTime = t.elapsed;
                    e.waiting = false;
                    this.trigger("ready", e) } } };
        r.mixin(s);
        r.mixin(o);
        e.exports = r }, { 138: 138, 65: 65, 66: 66 }],
    173: [function(t, e, i) { var n = t("172"); var s = t("138"); var o = function(t, e) { e = _.extend({}, { delay: 50, damage: 5, knockback: true }, e);
            n.call(this, t, { cooldown: e.cooldown, delay: e.delay, effects: { aoe: { ignoreCenter: true, ignoreMobs: true, effects: { damage: { type: "melee", amount: e.damage }, knockback: {} } } } });
            this.type = "mob" };
        o.inherit(n);
        e.exports = o }, { 138: 138, 172: 172 }],
    174: [function(t, e, i) { var n = t("74"); var s = function() { this.scene = new THREE.Scene;
            this.lights = [] };
        s.inherit(Object, { update: function(t) {}, setupDatGUI: function(t) {}, initHelpers: function() { this.helpers = []; var t = new THREE.AxisHelper(20);
                t.position.y += .05;
                this.scene.add(t);
                this.helpers.push(t) }, toggleHelpers: function() { _.each(this.helpers, function(t) { t.visible = !t.visible }) }, setAspectRatio: function(t) { this.camera.aspect = t;
                this.camera.updateProjectionMatrix() }, render: function(t) { t.render(this.scene, this.camera) } });
        e.exports = s }, { 74: 74 }]
}, {}, [47]);