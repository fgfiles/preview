var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            class Global {
                static initialize(canvas, pathBase = "") {
                    Global.app = new ApplicationExt(canvas, pathBase);
                }
            }
            Global.WORLD_SCALE = 2; //2
            Global.CLIPS_SCALE = .5; //.5
            Global.COLLISION_DEBUG = false;
            Global.OPENED_ALL_LEVELS = false;
            Global.APP_NAME = "ADBTW7";
            Global.URL_PATH_BASE = "./games/demo_minigame/";
            Global.cameraBuffer = 0;
            project.Global = Global;
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Global = com.bamtang.project.Global;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            class CustomMouseEvent {
                constructor() {
                }
            }
            CustomMouseEvent.MOUSE_OVER = "pointerover";
            CustomMouseEvent.MOUSE_OUT = "pointerout";
            CustomMouseEvent.MOUSE_DOWN = "pointerdown";
            CustomMouseEvent.MOUSE_UP = "pointerup";
            CustomMouseEvent.MOUSE_MOVE = "pointermove";
            CustomMouseEvent.CLICK = "pointertap";
            soul.CustomMouseEvent = CustomMouseEvent;
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var CustomMouseEvent = com.bamtang.soul.CustomMouseEvent;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            class CustomMovieClip extends PIXI.Sprite {
                constructor(mc = null) {
                    super();
                    this.scaled = false;
                    this.custom_x = 0;
                    this.custom_y = 0;
                }
                gotoAndPlay(frameLabel) {
                }
                gotoAndStop(frameLabel) {
                }
                nextFrame() {
                }
                play() {
                }
                stop() {
                }
                addEventListener(type, arg1, arg2 = null, arg3 = null) {
                    this.interactive = true;
                    if (arg3 != undefined)
                        arg2.on(type, arg1.bind(arg3));
                    else
                        arg2.on(type, arg1);
                }
                removeEventListener(type, arg1, arg2 = null, arg3 = null) {
                    this.interactive = true;
                    if (arg3 != undefined)
                        arg2.off(type, arg1.bind(arg3));
                    else
                        arg2.off(type, arg1);
                }
            }
            soul.CustomMovieClip = CustomMovieClip;
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var MovieClip = com.bamtang.soul.CustomMovieClip;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                class ScreenMain {
                    constructor(idGuiData = "", x = 0, y = 0, app = null) {
                        this.m_app = (app == null) ? core.Application.instance : app;
                        this.m_controls = new Object();
                        this.m_x = x;
                        this.m_y = y;
                        this.m_idGuiData = idGuiData;
                        this.m_lastFrame = -1;
                        this.m_isInStop = false;
                        this.m_stopFunctionCalled = false;
                        Common.execCommand(this.activePressBar, 800);
                        this.init();
                    }
                    free() {
                        this.dropPopup();
                        this.destroyToolTips();
                        this.screenParent = null;
                        this.m_nameTransitionIn = null;
                        this.m_nameTransitionOut = null;
                        this.m_lastControlClicked = null;
                        this.m_idGuiData = null;
                        this.m_app = null;
                        this.m_id = null;
                        this.m_transition = null;
                        for (var s in this.m_controls) {
                            this.m_controls[s].free();
                            this.m_controls[s] = null;
                            delete this.m_controls[s];
                        }
                        this.m_controls = null;
                        try {
                            this.m_clip.parent.removeChild(this.m_clip);
                        }
                        catch (e) {
                        }
                        try {
                            this.m_clip.destroy();
                        }
                        catch (e) { }
                        this.m_clip = null;
                    }
                    get x() {
                        return this.m_x;
                    }
                    get y() {
                        return this.m_y;
                    }
                    get clip() {
                        return this.m_clip;
                    }
                    set clip(value) {
                        this.m_clip = value;
                    }
                    set x(value) {
                        this.m_x = value;
                        if (this.m_clip != null) {
                            this.m_clip.x = (this.m_x);
                        }
                    }
                    set y(value) {
                        this.m_y = value;
                        if (this.m_clip != null) {
                            this.m_clip.y = (this.m_y);
                        }
                    }
                    popup() {
                        return this.m_popup;
                    }
                    idGuiData() {
                        return this.m_idGuiData;
                    }
                    init() {
                        this.loadXMLStructure(this.m_idGuiData);
                        this.m_clip.x = (this.m_x);
                        this.m_clip.y = (this.m_y);
                    }
                    onPressSpaceBar() {
                        this.m_spaceBarEnable = false;
                    }
                    loadXMLStructure(idDataGui) {
                        var data = ScreenMain.dataScreens[idDataGui];
                        if (data.clip == "") {
                            core.Application.warn("[" + data.id + "] no linked clip", this);
                        }
                        this.m_clipName = String(data.clip);
                        this.m_clip = this.m_app.getClip(data.clip);
                        if (data != null) {
                            this.m_nameTransitionIn = String(data.txIn);
                            this.m_nameTransitionOut = String(data.txOut);
                            for (var item in data.item) {
                                var tempItem = data.item[item];
                                var control;
                                if (tempItem == undefined)
                                    continue;
                                if (tempItem.id != undefined && this.m_clip[tempItem.id] == null) {
                                    core.Application.warn("Gui element [" + tempItem.id + "] no found", this);
                                }
                                else {
                                    try {
                                        this.m_clip[tempItem.id].children[0].visible = false;
                                    }
                                    catch (e) {
                                        core.Application.error(e + " - Check if the element is 'Movieclip'");
                                    }
                                    switch (String(tempItem.type).toUpperCase()) {
                                        case Control.TYPE_CLIP.toUpperCase():
                                            control = new GuiClip(this.m_clip[tempItem.id], tempItem.link);
                                            break;
                                        case Control.TYPE_CLIP_EXTERNAL.toUpperCase():
                                            control = new GuiClipExternal(this.m_clip[tempItem.id], tempItem.link);
                                            break;
                                        case Control.TYPE_CLIP_MOUSE.toUpperCase():
                                            control = new GuiClip(this.m_clip[tempItem.id]);
                                            control.changeClip(tempItem.link);
                                            control.onClick = this.onClickControl.bind(this);
                                            control.onMouseOut = this.onMouseOutControl.bind(this);
                                            control.onMouseOver = this.onMouseOverControl.bind(this);
                                            break;
                                        case Control.TYPE_BUTTON.toUpperCase():
                                            control = new GuiButton(this.m_clip[tempItem.id], tempItem.link);
                                            control.onClick = this.onClickControl.bind(this);
                                            control.onMouseOut = this.onMouseOutControl.bind(this);
                                            control.onMouseOver = this.onMouseOverControl.bind(this);
                                            control.activeListeners();
                                            break;
                                        case Control.TYPE_TEXT.toUpperCase():
                                            control = new GuiText(this.m_clip[tempItem.id], tempItem.link, tempItem.string);
                                            break;
                                        case Control.TYPE_4STATES.toUpperCase():
                                            control = new GuiThumbs4State(this.m_clip[tempItem.id], tempItem.link, tempItem.disableLink, tempItem.selectedLink, tempItem.soonLink);
                                            control.onClick = this.onClickControl.bind(this);
                                            control.onMouseOut = this.onMouseOutControl.bind(this);
                                            control.onMouseOver = this.onMouseOverControl.bind(this);
                                            control.gotoState(Control.ST_ENABLE);
                                            break;
                                        case Control.TYPE_TIMER.toUpperCase():
                                            control = new GuiTimer(this.m_clip[tempItem.id], tempItem.link);
                                            break;
                                        case Control.TYPE_ON_OFF.toUpperCase():
                                            control = new GuiOnOffSwitch(this.m_clip[tempItem.id], tempItem.onLink, tempItem.offLink);
                                            control.onClick = this.onClickControl.bind(this);
                                            control.onMouseOut = this.onMouseOutControl.bind(this);
                                            control.onMouseOver = this.onMouseOverControl.bind(this);
                                            control.gotoState(GuiOnOffSwitch.ST_ON);
                                            break;
                                        case Control.TYPE_PROGRESS.toUpperCase():
                                            control = new GuiProgress(this.m_clip[tempItem.id], tempItem.link);
                                            break;
                                        default:
                                            core.Application.warn("Control type [" + tempItem.type + "] undefined", "Screen.as");
                                    }
                                    control.type = tempItem.type;
                                    control.name = tempItem.id;
                                    control.mainLinkName = tempItem.link;
                                    control.ox = Number(this.parseChar(tempItem.ox));
                                    control.oy = Number(this.parseChar(tempItem.oy));
                                    control.scaleX = Number(this.parseChar(tempItem.sx));
                                    control.scaleY = Number(this.parseChar(tempItem.sy));
                                    control.rotation = Number(this.parseChar(tempItem.rot));
                                    control.alpha = Number(this.parseChar(tempItem.alpha));
                                    control.visible = Boolean(parseInt(this.parseChar(tempItem.vis)));
                                    if (this.m_controls[tempItem.id] != null) {
                                        core.Application.warn("Override control id [" + tempItem.id + "]", "Screen.as");
                                    }
                                    this.m_controls[tempItem.id] = control;
                                }
                            }
                        }
                        this.createInTransition();
                    }
                    getControlElement(control, element) {
                        if (this.m_controls[control].child != null) {
                            return this.m_controls[control].child[element];
                        }
                        return null;
                    }
                    getControl(id) {
                        return this.m_controls[id];
                    }
                    destroyToolTips() {
                        if (this.m_toolTips != null) {
                            this.m_toolTips.free();
                        }
                        this.m_toolTips = null;
                    }
                    createTransition(nameClip, x, y, params = null) {
                        if (this.m_transition != null) {
                            this.m_transition.free();
                        }
                        this.m_transition = new EffectExt(nameClip, x, y, this.m_clip);
                        this.m_transition.onEndAnimation = this.onEndTransition.bind(this);
                        this.m_transition.params = params;
                    }
                    onEndTransition(fx) {
                        fx.isAwaitingDelete = true;
                    }
                    update(dt) {
                        if (this.m_clip != null && this.m_lastFrame == this.m_clip.currentFrame) {
                            this.m_isInStop = true;
                            if (!this.m_stopFunctionCalled) {
                                this.onStopFrame();
                                this.m_stopFunctionCalled = true;
                            }
                        }
                        else {
                            this.m_isInStop = false;
                        }
                        if (this.m_popup != null) {
                            this.m_popup.update(dt);
                        }
                        if (this.m_transition != null) {
                            if (this.m_transition.isAwaitingDelete) {
                                this.m_transition.free();
                                this.m_transition = null;
                            }
                            else {
                                this.m_transition.update(dt);
                            }
                        }
                        if (!this.m_inLastFrame && this.m_clip && this.m_clip.currentFrame >= this.m_clip.totalFrames) {
                            this.m_inLastFrame = true;
                            this.m_clip.stop();
                            this.onLastFrame();
                        }
                        if (this.m_clip != null) {
                            this.m_lastFrame = this.m_clip.currentFrame;
                        }
                    }
                    onStopFrame() {
                    }
                    onLastFrame() {
                    }
                    onKeyDown(keyCode) {
                        if (this.m_popup != null) {
                            this.m_popup.onKeyDown(keyCode);
                        }
                        if (this.m_spaceBarEnable && keyCode == ScreenMain.skipKeyCode) {
                            this.onPressSpaceBar();
                        }
                    }
                    onKeyUp(keyCode) {
                        if (this.m_popup != null) {
                            this.m_popup.onKeyUp(keyCode);
                        }
                    }
                    onMouseDown(e) {
                        if (this.m_popup != null) {
                            this.m_popup.onMouseDown(e);
                        }
                    }
                    onMouseUp(e) {
                        if (this.m_popup != null) {
                            this.m_popup.onMouseUp(e);
                        }
                    }
                    onMouseMove(e) {
                        if (this.m_popup != null) {
                            this.m_popup.onMouseMove(e);
                        }
                    }
                    onActivate(activate) {
                        if (this.m_popup) {
                            this.m_popup.onActivate(activate);
                        }
                    }
                    addPopup(classInstanceOf, idGuiData, x = 0, y = 0, app = null) {
                        this.dropPopup();
                        this.m_popup = new classInstanceOf(idGuiData, x, y, app);
                        this.m_popup.screenParent = this;
                        this.m_clip.addChild(this.m_popup.clip);
                    }
                    dropPopup() {
                        if (this.m_popup != null) {
                            this.m_popup.free();
                        }
                        this.m_popup = null;
                    }
                    activePressBar() {
                        this.m_spaceBarEnable = true;
                    }
                    createInTransition() {
                        if (this.m_nameTransitionIn != "") {
                            this.createTransition(this.m_nameTransitionIn, 0, 0);
                        }
                    }
                    createOutTransition() {
                        if (this.m_nameTransitionOut != "") {
                            this.createTransition(this.m_nameTransitionOut, 0, 0);
                        }
                    }
                    onClickControl(control) {
                        this.m_lastControlClicked = control.name;
                    }
                    onMouseOverControl(control) {
                    }
                    onMouseOutControl(control) {
                    }
                    createTooltips(x, y, clipControl, idString, type = 1) {
                        this.m_toolTips = new ToolTips(this.m_clip, "mcGuiTooltip0" + type);
                        this.m_toolTips.setInformation(clipControl.x + x, clipControl.y + y, idString);
                    }
                    parseChar(s) {
                        return s.replace(",", ".");
                    }
                }
                ScreenMain.skipKeyCode = 32;
                ScreenMain.dataScreens = {};
                core.ScreenMain = ScreenMain;
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var ScreenMain = com.bamtang.soul.core.ScreenMain;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var core;
                (function (core) {
                    class ScreenExt extends ScreenMain {
                        constructor(idGuiData = "", x = 0, y = 0, app = null) {
                            super(idGuiData, x, y, app);
                        }
                    }
                    core.ScreenExt = ScreenExt;
                })(core = soulExtends.core || (soulExtends.core = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var ScreenExt = com.bamtang.project.soulExtends.core.ScreenExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var core;
                (function (core) {
                    class ScreenHud extends core.ScreenExt {
                        constructor(idGuiData, x = 0, y = 0, app = null) {
                            super(idGuiData, x, y, app);
                            this.m_effectManager = new core.EffectManagerExt(this.m_clip);
                            this.m_popusQueue = new GuiQueueHud(this.m_clip, this);
                        }
                        /*override*/ free() {
                            this.m_effectManager.free();
                            this.m_effectManager = null;
                            this.m_popusQueue.free();
                            this.m_popusQueue = null;
                            super.free();
                        }
                        setLifes(lifes) {
                        }
                        setScore(score) {
                        }
                        setHealth(health) {
                        }
                        setMagic(magic) {
                        }
                        addEffectGui(idGui, callbackEndAnimation = null) {
                            var fx = this.addEffect("", 0, 0, 1, callbackEndAnimation);
                            fx.setGui(idGui);
                            return fx;
                        }
                        addEffect(nameClip, x, y, loop = 1, callbackEndAnimation = null, kill = true) {
                            return this.m_effectManager.add(nameClip, x, y, this.m_clip, loop, callbackEndAnimation, kill);
                        }
                        addQueue(idGuiData, callback = null, params = null) {
                            this.m_popusQueue.addQueue(idGuiData, callback, params);
                        }
                        /*override*/ update(dt) {
                            super.update(dt);
                            this.m_popusQueue.update(dt);
                            this.m_effectManager.update(dt);
                        }
                    }
                    core.ScreenHud = ScreenHud;
                })(core = soulExtends.core || (soulExtends.core = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var ScreenHud = com.bamtang.project.soulExtends.core.ScreenHud;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                class Game {
                    constructor(canvas, canvasHud) {
                        this.m_canvas = canvas;
                        this.m_canvasHud = canvasHud;
                        this.init();
                    }
                    free() {
                        this.m_canvas = null;
                        this.m_canvasHud = null;
                        if (this.m_hud != null) {
                            this.m_hud.free();
                        }
                        this.m_hud = null;
                    }
                    init() {
                    }
                    score() {
                        return this.m_score;
                    }
                    hud() {
                        return this.m_hud;
                    }
                    setScore(score) {
                        this.m_score = score;
                        if (this.m_hud != null) {
                            this.m_hud.setScore(this.m_score);
                        }
                    }
                    addScore(score) {
                        this.m_score += score;
                        if (this.m_hud != null) {
                            this.m_hud.setScore(this.m_score);
                        }
                    }
                    onKeyDown(keyCode) {
                        if (this.m_hud != null) {
                            this.m_hud.onKeyDown(keyCode);
                        }
                    }
                    onKeyUp(keyCode) {
                        if (this.m_hud != null) {
                            this.m_hud.onKeyUp(keyCode);
                        }
                    }
                    onMouseDown(e) {
                        if (this.m_hud != null) {
                            this.m_hud.onMouseDown(e);
                        }
                    }
                    onMouseUp(e) {
                        if (this.m_hud != null) {
                            this.m_hud.onMouseUp(e);
                        }
                    }
                    onMouseMove(e) {
                        if (this.m_hud != null) {
                            this.m_hud.onMouseMove(e);
                        }
                    }
                    onActivate(activate) {
                        if (this.m_hud != null) {
                            this.m_hud.onActivate(activate);
                        }
                    }
                    update(dt) {
                        if (this.m_hud != null) {
                            this.m_hud.update(dt);
                        }
                    }
                }
                core.Game = Game;
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Game = com.bamtang.soul.core.Game;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var core;
                (function (core) {
                    class GameExt extends Game {
                        constructor(canvas, canvasHud) {
                            super(canvas, canvasHud);
                        }
                    }
                    core.GameExt = GameExt;
                })(core = soulExtends.core || (soulExtends.core = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GameExt = com.bamtang.project.soulExtends.core.GameExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                class EffectManager {
                    constructor(canvas, app = null) {
                        this.m_effects = new Array();
                        this.m_canvas = canvas;
                        this.m_app = app;
                    }
                    free() {
                        this.m_app = null;
                        for (var k = 0; k < this.m_effects.length; k++) {
                            this.m_effects[k].free();
                            this.m_effects[k] = null;
                        }
                        this.m_effects = null;
                    }
                    add(nameClip, x, y, canvas = null, loop = 1, onEndAnimation = null, kill = true) {
                        if (canvas == null) {
                            canvas = this.m_canvas;
                        }
                        var tempEffect = new EffectExt(nameClip, x, y, canvas, loop, this.m_app, kill);
                        tempEffect.onEndAnimation = onEndAnimation; //not bind
                        this.m_effects.push(tempEffect);
                        return tempEffect;
                    }
                    update(dt) {
                        this.m_len = this.m_effects.length;
                        for (this.m_k = 0; this.m_k < this.m_len; this.m_k++) {
                            this.m_effects[this.m_k].update(dt);
                            if (this.m_effects[this.m_k].isAwaitingDelete) {
                                this.m_effects[this.m_k].free();
                                this.m_effects[this.m_k] = null;
                                this.m_effects.splice(this.m_k, 1);
                                this.m_k--;
                                this.m_len--;
                            }
                        }
                    }
                }
                core.EffectManager = EffectManager;
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EffectManager = com.bamtang.soul.core.EffectManager;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var core;
                (function (core) {
                    class EffectManagerExt extends EffectManager {
                        constructor(canvas, app = null) {
                            super(canvas, app);
                        }
                    }
                    core.EffectManagerExt = EffectManagerExt;
                })(core = soulExtends.core || (soulExtends.core = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EffectManagerExt = com.bamtang.project.soulExtends.core.EffectManagerExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_EffectManagerExt extends EffectManagerExt {
                        constructor(world, app = null) {
                            super(new MovieClip(), app);
                            this.m_world = world;
                        }
                        addEffect(nameClip, x, y, canvas = null, loop = 1, onEndAnimation = null) {
                            if (canvas == null) {
                                canvas = this.m_canvas;
                            }
                            var tempEffect = new brawler.BRW_EffectExt(nameClip, this.m_world, x, y, canvas, loop, this.m_app);
                            tempEffect.onEndAnimation = onEndAnimation; //not bind
                            this.m_effects.push(tempEffect);
                            return tempEffect;
                        }
                    }
                    brawler.BRW_EffectManagerExt = BRW_EffectManagerExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_EffectManagerExt = com.bamtang.project.soulExtends.brawler.BRW_EffectManagerExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                class Effect {
                    constructor(nameClip, x, y, canvas, loop = 1, app = null, kill = true) {
                        this.m_actor = new ActorClip(nameClip, x, y, app);
                        this.m_canvas = canvas;
                        this.nameClip = nameClip;
                        this.m_canvas.addChild(this.m_actor.clip());
                        this.m_loop = loop;
                        this.m_repeat = 0;
                        this.killAfterLoop = kill;
                        this.m_functions = new Array();
                    }
                    free() {
                        this.onEndAnimation = null;
                        this.m_actor.free();
                        this.m_actor = null;
                        this.params = null;
                        var s;
                        for (s in this.m_functions) {
                            this.m_functions[s] = null;
                            delete this.m_functions[s];
                        }
                        this.m_functions = null;
                    }
                    actor() {
                        return this.m_actor;
                    }
                    addFrameFunction(f) {
                        this.m_functions.push(f);
                    }
                    setGui(idGui) {
                        this.gui = new core.ScreenMain(idGui);
                        this.m_actor.setClip(this.gui.clip);
                        this.m_canvas.addChild(this.m_actor.clip());
                    }
                    update(dt) {
                        if (this.pause == true) {
                            return;
                        }
                        this.m_actor.update(dt);
                        if (this.m_actor.clip().currentFrame >= this.m_actor.clip().totalFrames) {
                            this.m_repeat++;
                            if (this.m_repeat >= this.m_loop) {
                                this.m_actor.clip().stop();
                                if (this.onEndAnimation != null) {
                                    this.onEndAnimation(this);
                                }
                                if (this.killAfterLoop) {
                                    this.isAwaitingDelete = true;
                                }
                            }
                        }
                        for (var k = 0; k < this.m_functions.length; k++) {
                            if (this.m_functions[k][0] != null &&
                                this.m_functions[k][1] == this.m_actor.clip().currentFrame) {
                                this.m_functions[k][0]();
                            }
                        }
                    }
                }
                core.Effect = Effect;
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Effect = com.bamtang.soul.core.Effect;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var core;
                (function (core) {
                    class EffectExt extends Effect {
                        constructor(nameClip, x, y, canvas, loop = 1, app = null, kill = true) {
                            super(nameClip, x, y, canvas, loop, app, kill);
                        }
                    }
                    core.EffectExt = EffectExt;
                })(core = soulExtends.core || (soulExtends.core = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EffectExt = com.bamtang.project.soulExtends.core.EffectExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                class BRW_WorldBaseLayer {
                    constructor(world, layerXml) {
                        this.m_world = world;
                        this.m_name = String(layerXml.name);
                        this.m_width = parseInt(layerXml.width);
                        this.m_height = parseInt(layerXml.height);
                        this.m_useEmbeddedAssets = this.m_world.useEmbeddedAssets;
                        this.m_canvas = new MovieClip();
                        this.m_world.canvas().addChild(this.m_canvas);
                        this.m_type = 0;
                    }
                    free() {
                        this.m_world.canvas().removeChild(this.m_canvas);
                        try {
                            this.m_canvas.destroy();
                        }
                        catch (e) { }
                        this.m_canvas = null;
                        this.m_world = null;
                    }
                    x() {
                        return this.m_x;
                    }
                    y() {
                        return this.m_y;
                    }
                    canvas() {
                        return this.m_canvas;
                    }
                    width() {
                        return this.m_width;
                    }
                    height() {
                        return this.m_height;
                    }
                    visible() {
                        return this.m_canvas.visible;
                    }
                    name() {
                        return this.m_name;
                    }
                    setX(val) {
                        this.m_x = val;
                    }
                    setY(val) {
                        this.m_y = val;
                    }
                    setVisible(val) {
                        this.m_canvas.visible = val;
                    }
                    refresh() {
                    }
                    init() {
                        if (this.m_world.camera().parallaxX) {
                            this.m_parallaxXFactor = (this.m_width - this.m_world.camera().width) / (this.m_world.width() - this.m_world.camera().width);
                        }
                        if (this.m_world.camera().parallaxY) {
                            this.m_parallaxYFactor = (this.m_height - this.m_world.camera().height) / (this.m_world.height() - this.m_world.camera().height);
                        }
                    }
                    render() {
                        if (this.m_world.camera().parallaxX) {
                            this.m_canvas.x = -this.parallaxX();
                        }
                        if (this.m_world.camera().parallaxY) {
                            this.m_canvas.y = -this.parallaxY();
                        }
                    }
                    parallaxX() {
                        return this.m_world.camera().x() * this.m_parallaxXFactor;
                    }
                    parallaxY() {
                        return this.m_world.camera().y() * this.m_parallaxYFactor;
                    }
                }
                BRW_WorldBaseLayer.TYPE_COLLISIONS = 1;
                BRW_WorldBaseLayer.TYPE_TILES = 2;
                BRW_WorldBaseLayer.TYPE_SPRITES = 3;
                BRW_WorldBaseLayer.TYPE_OBJECTS = 4;
                BRW_WorldBaseLayer.TYPE_MARKERS = 5;
                BRW_WorldBaseLayer.TYPE_BOX2D = 6;
                BRW_WorldBaseLayer.ID_PLAYER = "player";
                BRW_WorldBaseLayer.ID_COLLISIONS = "collision";
                BRW_WorldBaseLayer.ID_TILES = "cell";
                BRW_WorldBaseLayer.ID_SPRITES = "sprites";
                BRW_WorldBaseLayer.ID_OBJECTS = "objects";
                BRW_WorldBaseLayer.ID_MARKERS = "markers";
                BRW_WorldBaseLayer.ID_BOX2D = "b2d";
                brawler.BRW_WorldBaseLayer = BRW_WorldBaseLayer;
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_WorldBaseLayer = com.bamtang.soul.brawler.BRW_WorldBaseLayer;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_WorldBaseLayerExt extends BRW_WorldBaseLayer {
                        constructor(world, layerXml) {
                            super(world, layerXml);
                        }
                    }
                    BRW_WorldBaseLayerExt.NAME_KIPU_OBJECTS = "kipulayer";
                    brawler.BRW_WorldBaseLayerExt = BRW_WorldBaseLayerExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_WorldBaseLayerExt = com.bamtang.project.soulExtends.brawler.BRW_WorldBaseLayerExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                class BRW_WorldTileLayer extends BRW_WorldBaseLayerExt {
                    constructor(world, layerXml) {
                        super(world, layerXml);
                        this.diff = 0;
                        this.m_type = BRW_WorldBaseLayerExt.TYPE_TILES;
                        var tempLayerXml = layerXml;
                        if (layerXml.tile != undefined) {
                            tempLayerXml.tile = layerXml.tile;
                            for (var xd in tempLayerXml.tile) {
                                for (var xd1 in tempLayerXml.tile[xd]) {
                                    tempLayerXml.tile[xd] = tempLayerXml.tile[xd][xd1];
                                }
                            }
                        }
                        if (layerXml.gpx != undefined) {
                            tempLayerXml.gpx = layerXml.gpx;
                            for (var xd in tempLayerXml.gpx) {
                                for (var xd1 in tempLayerXml.gpx[xd]) {
                                    tempLayerXml.gpx[xd] = tempLayerXml.gpx[xd][xd1];
                                }
                            }
                        }
                        layerXml = tempLayerXml;
                        this.m_columns = ~~(parseInt(layerXml.cols));
                        this.m_rows = ~~(parseInt(layerXml.rows));
                        this.m_tileWidth = ~~(parseInt(layerXml.tileW));
                        this.m_tileHeight = ~~(parseInt(layerXml.tileH));
                        this.m_map = String(layerXml.map);
                        this.m_tiles = new Array();
                        if (layerXml.tile != undefined) {
                            var numTiles = layerXml.tile.length;
                            for (var k = 0; k < numTiles; ++k) {
                                this.m_tiles.push(layerXml.tile[k].image);
                            }
                        }
                        if (this.m_map == "mc_map_brw_lvl01_background")
                            this.m_levelData = CollisionData.mc_map_brw_lvl01_background;
                        if (this.m_map == "mc_map_brw_lvl01_tilesets_lv1")
                            this.m_levelData = CollisionData.mc_map_brw_lvl01_tilesets_lv1;
                        if (this.m_map == "mc_map_brw_lvl01_collisions")
                            this.m_levelData = CollisionData.mc_map_brw_lvl01_collisions;
                        if (this.m_map == "mc_map_brw_lvl02_background")
                            this.m_levelData = CollisionData.mc_map_brw_lvl02_background;
                        if (this.m_map == "mc_map_brw_lvl02_tilesets_lv2")
                            this.m_levelData = CollisionData.mc_map_brw_lvl02_tilesets_lv2;
                        if (this.m_map == "mc_map_brw_lvl02_collisions")
                            this.m_levelData = CollisionData.mc_map_brw_lvl02_collisions;
                        if (this.m_map == "mc_map_brw_lvl03_background")
                            this.m_levelData = CollisionData.mc_map_brw_lvl03_background;
                        if (this.m_map == "mc_map_brw_lvl03_tilesets_lv3")
                            this.m_levelData = CollisionData.mc_map_brw_lvl03_tilesets_lv3;
                        if (this.m_map == "mc_map_brw_lvl03_collisions")
                            this.m_levelData = CollisionData.mc_map_brw_lvl03_collisions;
                    }
                    /*override*/ free() {
                        var clip;
                        for (var kx = 0; kx < this.m_bufferWidth; ++kx) {
                            for (var ky = 0; ky < this.m_bufferHeight; ++ky) {
                                clip = this.m_buffer[kx + (ky * this.m_bufferWidth)];
                                if (clip) {
                                    this.m_canvas.removeChild(clip);
                                    try {
                                        clip.destroy();
                                    }
                                    catch (e) { }
                                }
                            }
                        }
                        super.free();
                    }
                    tileWidth() {
                        return this.m_tileWidth;
                    }
                    tileHeight() {
                        return this.m_tileHeight;
                    }
                    getTileName(index) {
                        if (index >= 0 && index < this.m_tiles.length) {
                            return this.m_tiles[index];
                        }
                        return null;
                    }
                    getBufferCell(x, y) {
                        return this.m_buffer[(x + this.m_bufferX) % this.m_bufferWidth + ((y + this.m_bufferY) % this.m_bufferHeight) * this.m_bufferWidth];
                    }
                    setBufferCell(x, y, clip) {
                        this.m_buffer[(x + this.m_bufferX) % this.m_bufferWidth + ((y + this.m_bufferY) % this.m_bufferHeight) * this.m_bufferWidth] = clip;
                    }
                    initCell(kx, ky) {
                        var tileIndex = this.getCell(kx + this.m_minX, ky + this.m_minY);
                        if (tileIndex > 0) {
                            var tile;
                            tile = Global.app.getClip(this.getTileName(tileIndex - 1));
                            if (tile == undefined)
                                return;
                            tile.x = (kx + this.m_minX - 0) * this.m_tileWidth;
                            tile.y = (ky + this.m_minY - 0) * this.m_tileHeight;
                            this.setBufferCell(kx, ky, tile);
                            this.m_canvas.addChild(tile);
                        }
                    }
                    /*override*/ refresh() {
                        this.m_bufferX = 0;
                        this.m_bufferY = 0;
                        for (var kx = 0; kx < this.m_bufferWidth; ++kx) {
                            for (var ky = 0; ky < this.m_bufferHeight; ++ky) {
                                var clip = this.m_buffer[kx + (ky * this.m_bufferWidth)];
                                if (clip) {
                                    this.m_canvas.removeChild(clip);
                                    this.m_buffer[kx + (ky * this.m_bufferWidth)] = null;
                                    try {
                                        clip.destroy();
                                    }
                                    catch (e) { }
                                }
                                this.initCell(kx, ky);
                            }
                        }
                    }
                    /*override*/ init() {
                        super.init();
                        this.m_bufferWidth = ~~(this.m_world.camera().width / this.m_tileWidth + 1);
                        this.m_bufferHeight = ~~(this.m_world.camera().height / this.m_tileHeight + 1);
                        this.m_bufferWidth += 1;
                        this.m_bufferHeight += 1;
                        this.m_bufferX = 0;
                        this.m_bufferY = 0;
                        this.m_buffer = new Array();
                        for (var sss = 0; sss < this.m_bufferWidth * this.m_bufferHeight; sss++) {
                            this.m_buffer.push(0);
                        }
                        this.m_minX = ~~(this.m_world.camera().x() / this.m_tileWidth);
                        if (this.m_minX < 0) {
                            this.m_minX = 0;
                        }
                        this.m_maxX = this.m_minX + this.m_bufferWidth;
                        this.m_minY = ~~(this.m_world.camera().y() / this.m_tileHeight);
                        if (this.m_minY < 0) {
                            this.m_minY = 0;
                        }
                        this.m_maxY = this.m_minY + this.m_bufferHeight;
                        for (var kx = 0; kx < this.m_bufferWidth; ++kx) {
                            for (var ky = 0; ky < this.m_bufferHeight; ++ky) {
                                this.initCell(kx, ky);
                            }
                        }
                    }
                    getCellInPosition(x, y) {
                        var col = ~~(x / this.m_tileWidth);
                        var row = ~~(y / this.m_tileHeight) - this.diff;
                        if (col >= 0 && row >= 0 && col < this.m_columns && row < this.m_rows) {
                            var row = ~~(y / this.m_tileHeight);
                            return this.m_levelData[(row * this.m_columns) + col - this.diff];
                        }
                        return 0;
                    }
                    getCell(col, row) {
                        col = ~~(col);
                        row = ~~(row) - this.diff;
                        if (col >= 0 && row >= 0 && col < this.m_columns && row < this.m_rows) {
                            return this.m_levelData[(row * this.m_columns) + col - this.diff];
                        }
                        return 0;
                    }
                    setCell(col, row, val) {
                        col = ~~(col);
                        row = ~~(row) - this.diff;
                        val = ~~(val);
                        if (col >= 0 && row >= 0 && col < this.m_columns && row < this.m_rows) {
                            this.m_levelData[(row * this.m_columns) + col - this.diff] = val;
                        }
                    }
                    addTileCell(tileX, tileY, bufferX, bufferY) {
                        var tileIndex = this.getCell(tileX, tileY);
                        if (tileIndex > 0) {
                            var tile;
                            tile = Global.app.getClip(this.getTileName(tileIndex - 1));
                            tile.x = tileX * this.m_tileWidth;
                            tile.y = tileY * this.m_tileHeight;
                            this.setBufferCell(bufferX, bufferY, tile);
                            this.m_canvas.addChild(tile);
                        }
                    }
                    /*override*/ render() {
                        var redrawAll = false;
                        if (this.m_world.camera().parallaxX) {
                            var minTile = ~~(this.parallaxX() / this.m_tileWidth);
                            var inc = minTile - this.m_minX;
                            if (inc <= -this.m_bufferWidth || inc >= this.m_bufferWidth) {
                                redrawAll = true;
                            }
                            else {
                                if (minTile > this.m_minX) {
                                    for (var kx = 0; kx < inc; ++kx) {
                                        for (var ky = 0; ky < this.m_bufferHeight; ++ky) {
                                            var tile = this.getBufferCell(kx, ky);
                                            if (tile) {
                                                this.m_canvas.removeChild(tile);
                                                this.setBufferCell(kx, ky, null);
                                                try {
                                                    tile.destroy();
                                                }
                                                catch (e) { }
                                            }
                                            this.addTileCell(kx + this.m_maxX, ky + this.m_minY, kx, ky);
                                        }
                                    }
                                    this.m_bufferX = (this.m_bufferX + inc) % this.m_bufferWidth;
                                }
                                else if (minTile < this.m_minX) {
                                    for (kx = 1; kx <= -inc; ++kx) {
                                        for (ky = 0; ky < this.m_bufferHeight; ++ky) {
                                            tile = this.getBufferCell(this.m_bufferWidth - kx, ky);
                                            if (tile) {
                                                this.m_canvas.removeChild(tile);
                                                this.setBufferCell(this.m_bufferWidth - kx, ky, null);
                                                try {
                                                    tile.destroy();
                                                }
                                                catch (e) { }
                                            }
                                            this.addTileCell(this.m_minX - kx, ky + this.m_minY, this.m_bufferWidth - kx, ky);
                                        }
                                    }
                                    this.m_bufferX = (this.m_bufferWidth + this.m_bufferX + inc) % this.m_bufferWidth;
                                }
                            }
                            if (inc != 0) {
                                this.m_minX = minTile;
                                this.m_maxX = this.m_minX + this.m_bufferWidth;
                            }
                            this.m_canvas.x = -this.parallaxX();
                        }
                        if (this.m_world.camera().parallaxY) {
                            minTile = ~~(this.parallaxY() / this.m_tileHeight);
                            inc = minTile - this.m_minY;
                            if (inc <= -this.m_bufferHeight || inc >= this.m_bufferHeight) {
                                redrawAll = true;
                            }
                            else {
                                if (minTile > this.m_minY) {
                                    for (ky = 0; ky < inc; ++ky) {
                                        for (kx = 0; kx < this.m_bufferWidth; ++kx) {
                                            tile = this.getBufferCell(kx, ky);
                                            if (tile) {
                                                this.m_canvas.removeChild(tile);
                                                this.setBufferCell(kx, ky, null);
                                                try {
                                                    tile.destroy();
                                                }
                                                catch (e) { }
                                            }
                                            this.addTileCell(kx + this.m_minX, ky + this.m_maxY, kx, ky);
                                        }
                                    }
                                    this.m_bufferY = (this.m_bufferY + inc) % this.m_bufferHeight;
                                }
                                else if (minTile < this.m_minY) {
                                    for (ky = 1; ky <= -inc; ++ky) {
                                        for (kx = 0; kx < this.m_bufferWidth; ++kx) {
                                            tile = this.getBufferCell(kx, this.m_bufferHeight - ky);
                                            if (tile) {
                                                this.m_canvas.removeChild(tile);
                                                this.setBufferCell(kx, this.m_bufferHeight - ky, null);
                                                try {
                                                    tile.destroy();
                                                }
                                                catch (e) { }
                                            }
                                            this.addTileCell(kx + this.m_minX, this.m_minY - ky, kx, this.m_bufferHeight - ky);
                                        }
                                    }
                                    this.m_bufferY = (this.m_bufferHeight + this.m_bufferY + inc) % this.m_bufferHeight;
                                }
                            }
                            if (inc != 0) {
                                this.m_minY = minTile;
                                this.m_maxY = this.m_minY + this.m_bufferHeight;
                            }
                            this.m_canvas.y = -this.parallaxY();
                        }
                        if (redrawAll) {
                            this.refresh();
                        }
                    }
                }
                brawler.BRW_WorldTileLayer = BRW_WorldTileLayer;
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_WorldTileLayer = com.bamtang.soul.brawler.BRW_WorldTileLayer;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_WorldTileLayerExt extends BRW_WorldTileLayer {
                        constructor(world, layerXml) {
                            super(world, layerXml);
                        }
                    }
                    brawler.BRW_WorldTileLayerExt = BRW_WorldTileLayerExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_WorldTileLayerExt = com.bamtang.project.soulExtends.brawler.BRW_WorldTileLayerExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                class BRW_ActorControl {
                    constructor(actor) {
                        this.m_actor = actor;
                        //this.reset(); fixed
                    }
                    free() {
                        this.m_actor = null;
                    }
                    forceX() {
                        return this.m_forceX;
                    }
                    forceY() {
                        return this.m_forceY;
                    }
                    isRunning() {
                        return this.m_isRunning;
                    }
                    isJumping() {
                        return this.m_isJumping;
                    }
                    isJumpingUp() {
                        return this.m_isJumpingUp;
                    }
                    isJumpingDown() {
                        return this.m_isJumpingDown;
                    }
                    isInAction() {
                        return this.m_isInAction;
                    }
                    isInDashAttack() {
                        return this.m_isInDashAttack;
                    }
                    update(dt) {
                    }
                    onCollision(coll, dt) {
                    }
                    reset() {
                        this.m_forceX = 0;
                        this.m_forceY = 0;
                        this.m_isJumping = false;
                        this.m_isJumpingUp = false;
                        this.m_isJumpingDown = false;
                        this.m_isRunning = false;
                        this.m_isInAction = false;
                    }
                    loadData(data) {
                        this.setDefaultData_ac(data);
                    }
                    setDefaultData_ac(data) {
                        var showWarnings = false;
                        this.setData_ac(data, false);
                    }
                    setData_ac(data, warnings) {
                        this.gravity = brawler.BRW_World.getOptionalData("Number", data, "gravity", this.gravity, warnings);
                        this.elasticity = brawler.BRW_World.getOptionalData("Number", data, "elasticity", this.elasticity, warnings);
                        this.friction = brawler.BRW_World.getOptionalData("Number", data, "friction", this.friction, warnings);
                        this.slopeFriction = brawler.BRW_World.getOptionalData("Number", data, "slopeFriction", this.slopeFriction, warnings);
                        this.maxVerletUpDisplace = brawler.BRW_World.getOptionalData("Number", data, "maxVerletUpDisplace", this.maxVerletUpDisplace, warnings);
                        this.maxVerletDownDisplace = brawler.BRW_World.getOptionalData("Number", data, "maxVerletDownDisplace", this.maxVerletDownDisplace, warnings);
                        this.maxVerletHorizontalDisplace = brawler.BRW_World.getOptionalData("Number", data, "maxVerletHorizontalDisplace", this.maxVerletHorizontalDisplace, warnings);
                    }
                }
                brawler.BRW_ActorControl = BRW_ActorControl;
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_ActorControl = com.bamtang.soul.brawler.BRW_ActorControl;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_ActorControlExt extends BRW_ActorControl {
                        constructor(actor) {
                            super(actor);
                        }
                    }
                    brawler.BRW_ActorControlExt = BRW_ActorControlExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_ActorControlExt = com.bamtang.project.soulExtends.brawler.BRW_ActorControlExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                var kipu;
                (function (kipu) {
                    class Entity {
                        constructor(canvas, x, y) {
                            this.m_layer = canvas.layer;
                            this.m_canvas = this.m_layer.addEmptyChild();
                            this.m_isIdle = false;
                            this.m_clip = null;
                            this.m_character = null;
                            this.m_collisionVisible = Global.COLLISION_DEBUG;
                            this.m_limitBottom = false;
                            this.m_limitUp = false;
                            this.m_limitLeft = false;
                            this.m_limitRight = false;
                            this.m_flipX = false;
                            this.m_scale = 1;
                            this.m_scaleX = 1;
                            this.m_scaleY = 1;
                            this.m_isAwaitingDelete = false;
                            this.m_isRangeControlled = true;
                            this.m_isFallingOverWall = false;
                            this.m_depth = 0;
                            this.pathPosition = null;
                            this.m_id = Entity.ID_UNUSED;
                            this.setPosition(x, y);
                        }
                        get lifes() {
                            return this.m_lifes;
                        }
                        get health() {
                            return this.m_health;
                        }
                        get magic() {
                            return this.m_magic;
                        }
                        get speed() {
                            return this.m_speed;
                        }
                        get healthRegenSpeed() {
                            return this.m_healthRegenSpeed;
                        }
                        get magicRegenSpeed() {
                            return this.m_magicRegenSpeed;
                        }
                        get score() {
                            return this.m_score;
                        }
                        get money() {
                            return this.m_money;
                        }
                        set lifes(value) {
                            this.m_lifes = value;
                        }
                        set health(value) {
                            this.m_health = value;
                        }
                        set magic(value) {
                            this.m_magic = value;
                        }
                        set speed(value) {
                            this.m_speed = value;
                        }
                        set healthRegenSpeed(value) {
                            this.m_healthRegenSpeed = value;
                        }
                        set magicRegenSpeed(value) {
                            this.m_magicRegenSpeed = value;
                        }
                        set score(value) {
                            this.m_score = value;
                        }
                        set money(value) {
                            this.m_money = value;
                        }
                        getInventory() {
                            return this.m_inventory;
                        }
                        useEntityObject(data) {
                            this.applyModifiers(data, kipu.Modifier.CATEGORY_ENTITY);
                            this.applyModifiers(data, kipu.Modifier.CATEGORY_GAMEPLAY);
                            this.applyModifiers(data, kipu.Modifier.CATEGORY_DEFENSE);
                            this.applyModifiers(data, kipu.Modifier.CATEGORY_ATTACK);
                        }
                        applyModifiers(data, category) {
                            var log;
                            var propertiesTarget;
                            var modifiers;
                            switch (category) {
                                case kipu.Modifier.CATEGORY_ENTITY:
                                    log = "   ENTITY: ";
                                    propertiesTarget = this;
                                    modifiers = data.entityModifiers;
                                    break;
                                case kipu.Modifier.CATEGORY_GAMEPLAY:
                                    log = "   GAMEPLAY: ";
                                    propertiesTarget = this;
                                    modifiers = data.gameplayModifiers;
                                    break;
                                case kipu.Modifier.CATEGORY_ATTACK:
                                    log = "   ATTACK: ";
                                    propertiesTarget = this.attackSkills;
                                    modifiers = data.defenseModifiers;
                                    break;
                                case kipu.Modifier.CATEGORY_DEFENSE:
                                    log = "   DEFENSE: ";
                                    propertiesTarget = this.defenseSkills;
                                    modifiers = data.attackModifiers;
                                    break;
                            }
                            if (modifiers != null && modifiers.length > 0) {
                                for (var i = 0; i < modifiers.length; i++) {
                                    propertiesTarget[modifiers[i].property] += Number(modifiers[i].value);
                                    var sign = (Number(modifiers[i].value) >= 0) ? "+" : "";
                                    log += "" + modifiers[i].property + "=" + sign + "" + modifiers[i].value + " ";
                                }
                            }
                        }
                        free() {
                            if (this.m_character) {
                                this.m_character.free();
                                this.m_character = null;
                                this.m_clip = null;
                            }
                            if (this.m_clip) {
                                this.m_canvas.removeChild(this.m_clip);
                                try {
                                    this.m_clip.destroy();
                                }
                                catch (e) { }
                                this.m_clip = null;
                            }
                            this.m_speed2D = null;
                            this.m_canvas = null;
                            this.pathPosition = null;
                            this.m_cornersArray = null;
                            this.m_corners = null;
                            this.m_layer = null;
                        }
                        isAwaitingDelete() {
                            return this.m_isAwaitingDelete;
                        }
                        isRangeControlled() {
                            return this.m_isRangeControlled;
                        }
                        isFallingOverWall() {
                            return this.m_isFallingOverWall;
                        }
                        setAwaitingDelete(val) {
                            this.m_isAwaitingDelete = val;
                        }
                        setRangeControlled(val) {
                            this.m_isRangeControlled = val;
                        }
                        setFallingOverWall(val) {
                            this.m_isFallingOverWall = val;
                        }
                        clip() {
                            return this.m_clip;
                        }
                        bounds() {
                            return this.m_bounds;
                        }
                        speed2D() {
                            return this.m_speed2D;
                        }
                        limitBottom() {
                            return this.m_limitBottom;
                        }
                        limitUp() {
                            return this.m_limitUp;
                        }
                        limitLeft() {
                            return this.m_limitLeft;
                        }
                        limitRight() {
                            return this.m_limitRight;
                        }
                        isIdle() {
                            return this.m_isIdle;
                        }
                        depth() {
                            return this.m_depth;
                        }
                        scale() {
                            return this.m_scale;
                        }
                        x() {
                            return this.m_x;
                        }
                        y() {
                            return this.m_y;
                        }
                        flipX() {
                            return this.m_flipX;
                        }
                        id() {
                            return this.m_id;
                        }
                        canvas() {
                            return this.m_canvas;
                        }
                        layer() {
                            return this.m_layer;
                        }
                        setActorClip(clipName) {
                            if (clipName) {
                                this.m_clip = core.Application.instance.getClip(clipName);
                                this.m_canvas.addChild(this.m_clip);
                                if (clipName.indexOf("mcBreakable") > -1) {
                                    //this.m_clip.scale.x *= Global.CLIPS_SCALE;
                                    //this.m_clip.scale.y *= Global.CLIPS_SCALE;
                                    //this.objectScale = Global.CLIPS_SCALE;
                                }
                                this.createCorners();
                            }
                        }
                        setPositionPoint(p) {
                            this.m_oldX = this.m_x = p.x;
                            this.m_oldY = this.m_y = p.y;
                        }
                        setPosition(px, py) {
                            this.m_oldX = this.m_x = px;
                            this.m_oldY = this.m_y = py;
                        }
                        setX(px) {
                            this.m_oldX = this.m_x = px;
                        }
                        setY(py) {
                            this.m_oldY = this.m_y = py;
                        }
                        setFlipX(flip) {
                            this.m_flipX = flip;
                            if (this.m_clip) {
                                if ((this.m_flipX && this.m_clip.scale.x > 0) || (!this.m_flipX && this.m_clip.scale.x < 0)) {
                                    this.m_clip.scale.x = -this.m_clip.scale.x;
                                }
                            }
                        }
                        setScale(val) {
                            val *= Global.CLIPS_SCALE;
                            if (this.m_scale != val) {
                                if (this.m_clip) {
                                    this.m_clip.scale.x = this.m_flipX ? -val : val;
                                    this.m_clip.scale.y = val;
                                }
                                this.m_scale = val;
                                this.m_scaleX = val;
                                this.m_scaleY = val;
                                this.createCorners();
                            }
                        }
                        setScaleX(val) {
                            if (this.m_scaleX != val) {
                                if (this.m_clip) {
                                    this.m_clip.scale.x = this.m_flipX ? -val : val;
                                }
                                this.m_scaleX = val;
                                this.createCorners();
                            }
                        }
                        setScaleY(val) {
                            if (this.m_scaleY != val) {
                                if (this.m_clip) {
                                    this.m_clip.scale.y = val;
                                }
                                this.m_scaleY = val;
                                this.createCorners();
                            }
                        }
                        setScaleXY(valX, valY) {
                            this.setScaleX(valX);
                            this.setScaleY(valY);
                        }
                        resize(w, h) {
                            if (this.m_clip) {
                                this.setScaleXY(w / this.m_clip.width, h / this.m_clip.height);
                            }
                        }
                        isOverPlatform() {
                            return false;
                        }
                        corners() {
                            if (this.m_speed2D.y < 0) {
                                if (this.m_speed2D.x >= 0) {
                                    return this.m_cornersArray[2];
                                }
                                return this.m_cornersArray[3];
                            }
                            if (this.m_speed2D.x < 0) {
                                return this.m_cornersArray[1];
                            }
                            return this.m_cornersArray[0];
                        }
                        applyImpulse(fx, fy) {
                            this.m_oldX = this.m_x - fx;
                            this.m_oldY = this.m_y - fy;
                        }
                        showCollision(show) {
                            if (this.m_clip == null) {
                                return;
                            }
                            this.m_collisionVisible = show;
                            this.m_collisionVisible = Global.COLLISION_DEBUG;
                            if (this.m_clip.mcCollision) {
                                this.m_clip.mcCollision.visible = this.m_collisionVisible;
                            }
                            if (this.m_clip.mcBounds) {
                                this.m_clip.mcBounds.visible = this.m_collisionVisible;
                            }
                            if (this.m_clip.mcBoundsAttack) {
                                this.m_clip.mcBoundsAttack.visible = this.m_collisionVisible;
                            }
                        }
                        onIdle(idle) {
                            this.m_isIdle = idle;
                            if (this.m_clip) {
                                this.m_clip.visible = !idle;
                            }
                        }
                        createCorners() {
                        }
                        updateBounds() {
                            var boundsClip = null;
                            if (this.m_clip.mcBounds) {
                                boundsClip = this.m_clip.mcBounds;
                            }
                            else if (this.m_clip.mcCollision) {
                                boundsClip = this.m_clip.mcCollision;
                            }
                            if (boundsClip) {
                                var _scaleX = this.m_scaleX;
                                var _scaleY = this.m_scaleY;
                                if (this.m_scaleX == this.m_scaleY) {
                                    this.m_scale = this.m_scaleX;
                                }
                                this.m_bounds = new PIXI.Rectangle(_scaleX * (this.m_flipX ? -boundsClip.x - boundsClip.width : boundsClip.x), _scaleY * boundsClip.y, _scaleX * boundsClip.width, _scaleY * boundsClip.height);
                            }
                            else {
                                this.m_bounds = null;
                            }
                        }
                    }
                    Entity.ID_UNUSED = -1;
                    Entity.CORNERS_ARRAY = [[0, 1, 3, 2, 5, 7, 9],
                        [2, 1, 4, 0, 6, 8, 11],
                        [9, 10, 7, 11, 5, 3, 0],
                        [11, 10, 8, 9, 6, 4, 2]];
                    kipu.Entity = Entity;
                })(kipu = core.kipu || (core.kipu = {}));
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Entity = com.bamtang.soul.core.kipu.Entity;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                var kipu;
                (function (kipu) {
                    class BRW_Entity extends Entity {
                        constructor(canvas, x, y, world) {
                            super(canvas, x, y);
                            this.m_isVehicle = false;
                            this.m_world = world;
                            this.m_vehicle = null;
                            this.m_manager = null;
                            this.m_control = null;
                            this.m_clipShadow = new PIXI.Container();
                            this.m_canvas.addChild(this.m_clipShadow);
                            this.m_shapeDepth = new PIXI.Graphics();
                            this.m_canvas.addChild(this.m_shapeDepth);
                            this.m_boundsBase = new PIXI.Rectangle(-15, -5, 30, 10);
                            this.m_boundsBodyDepth = new PIXI.Rectangle(-25, -8, 50, 16);
                            this.m_boundsAttackDepth = new PIXI.Rectangle(-25, -8, 50, 16);
                        }
                        /*override*/ free() {
                            if (this.m_clipShadow) {
                                this.m_canvas.removeChild(this.m_clipShadow);
                                try {
                                    this.m_clipShadow.destroy();
                                }
                                catch (e) { }
                                this.m_clipShadow = null;
                            }
                            this.m_shapeDepth.clear();
                            this.m_shapeDepth = null;
                            this.m_boundsBase = null;
                            this.m_boundsAttack = null;
                            this.m_boundsBody = null;
                            this.m_boundsBodyDepth = null;
                            this.m_boundsAttackDepth = null;
                            this.m_world = null;
                            super.free();
                        }
                        vehicle() {
                            return this.m_vehicle;
                        }
                        isVehicle() {
                            return this.m_isVehicle;
                        }
                        setVehicle(val) {
                            this.m_vehicle = val;
                        }
                        setManager(val) {
                            this.m_manager = val;
                        }
                        boundsAttack() {
                            return this.m_boundsAttack;
                        }
                        boundsBody() {
                            return this.m_boundsBody;
                        }
                        boundsBase() {
                            return this.m_boundsBase;
                        }
                        boundsBodyDepth() {
                            return this.m_boundsBodyDepth;
                        }
                        boundsAttackDepth() {
                            return this.m_boundsAttackDepth;
                        }
                        world() {
                            return this.m_world;
                        }
                        control() {
                            return this.m_control;
                        }
                        /*override*/ isOverPlatform() {
                            if (this.m_vehicle) {
                                return true;
                            }
                            else if (this.m_clip.mcCollision) {
                                var px = this.m_x + this.m_clip.mcCollision.x;
                                var py = this.m_y + 3;
                                if (this.m_world.getCellInPosition(px + this.m_clip.mcCollision.width, py) == brawler.BRW_WorldCollisionLayer.CELL_PLATFORM ||
                                    this.m_world.getCellInPosition(this.m_x, py) == brawler.BRW_WorldCollisionLayer.CELL_PLATFORM ||
                                    this.m_world.getCellInPosition(px, py) == brawler.BRW_WorldCollisionLayer.CELL_PLATFORM) {
                                    return true;
                                }
                            }
                            return false;
                        }
                        /*override*/ gotoState(state) {
                            if (state != this.m_state) {
                                var posX = 0;
                                var posY = 0;
                                if (this.m_clip) {
                                    posX = this.m_clip.x;
                                    posY = this.m_clip.y;
                                }
                                this.m_character.gotoState(String(state));
                                this.m_clip = this.m_character.actor().clip();
                                if (this.m_clip.gaf == "gameplay_brawler" && !this.m_clip.scaled) {
                                    this.m_clip.scaled = true;
                                    this.m_scale = Global.CLIPS_SCALE;
                                }
                                if (this.m_scaleX == this.m_scaleY) {
                                    this.m_clip.scale.x = (this.m_flipX ? -this.m_scale : this.m_scale);
                                    this.m_clip.scale.y = this.m_scale;
                                }
                                else {
                                    this.m_clip.scale.x = (this.m_flipX ? -this.m_scaleX : this.m_scaleX);
                                    this.m_clip.scale.y = this.m_scaleY;
                                }
                                this.m_clip.x = this.m_clip.custom_x = posX;
                                this.m_clip.y = this.m_clip.custom_y = posY;
                                this.m_state = state;
                                if (this.m_manager) {
                                    this.m_collisionVisible = this.m_manager.collisionsOn();
                                }
                                if (this.m_clip.mcCollision) {
                                    this.m_clip.mcCollision.visible = this.m_collisionVisible;
                                    this.m_clip.mcCollision.visible = Global.COLLISION_DEBUG;
                                }
                                this.updateBoundsBody(null);
                            }
                        }
                        getShadowClip() {
                            return this.m_clipShadow;
                        }
                        setShadowClip(clipName) {
                            this.m_clipShadow.addChild(Application.instance.getClip(clipName));
                        }
                        setDepth() {
                            if (this.m_layer) {
                                //this.m_layer.setDepth( this.m_canvas, this.m_y * 1000 + Common.random( 10, 50 ) );
                            }
                        }
                        /*override*/ update(dt) {
                            this.m_clip.x = this.m_clip.custom_x = (this.m_x - this.m_world.camera().x());
                            this.m_clip.y = this.m_clip.custom_y = (this.m_y - this.m_world.camera().y());
                            this.m_clipShadow.x = this.m_clip.x;
                            this.m_clipShadow.y = this.m_clip.y;
                            //this.setDepth();
                            this.m_shapeDepth.clear();
                            if (this.m_collisionVisible && !this.m_isIdle) {
                                this.m_shapeDepth.lineStyle(2, 0x00FFF0, 0.8);
                                this.m_shapeDepth.beginFill(0x00FFF0, 0.5);
                                this.m_shapeDepth.drawRect(this.m_clip.x + this.m_boundsBodyDepth.x, this.m_clip.y + this.m_boundsBodyDepth.y, this.m_boundsBodyDepth.width, this.m_boundsBodyDepth.height);
                                this.m_shapeDepth.endFill();
                                this.m_shapeDepth.lineStyle(2, 0xFF00000, 0.8);
                                this.m_shapeDepth.drawRect(this.m_clip.x + this.m_boundsAttackDepth.x, this.m_clip.y + this.m_boundsAttackDepth.y, this.m_boundsAttackDepth.width, this.m_boundsAttackDepth.height);
                            }
                        }
                        isInCamera(camera) {
                            return ((this.m_x + (this.m_clip.width / 3) > camera.x()) &&
                                ((this.m_x - (this.m_clip.width / 3)) < (camera.x() + camera.width)) &&
                                (this.m_y > camera.y()) && (this.m_y - this.m_clip.height < camera.y() + camera.height));
                        }
                        showInCamera(camera) {
                            this.m_clip.x = this.m_clip.custom_x = (this.m_x - camera.x());
                            this.m_clip.y = this.m_clip.custom_y = (this.m_y - camera.y());
                            this.m_clipShadow.x = this.m_clip.x;
                            this.m_clipShadow.y = this.m_clip.y;
                            if (this.m_layer) {
                                this.m_layer.setDepth(this.m_canvas, this.m_y * 1000 + Common.random(10, 50));
                            }
                            this.m_shapeDepth.clear();
                            if (this.m_collisionVisible) {
                                this.m_shapeDepth.lineStyle(3, 0x00FFF0, 0.8);
                                this.m_shapeDepth.beginFill(0x00FFF0, 0.5);
                                this.m_shapeDepth.drawRect(this.m_clip.x + this.m_boundsBodyDepth.x, this.m_clip.y + this.m_boundsBodyDepth.y, this.m_boundsBodyDepth.width, this.m_boundsBodyDepth.height);
                                this.m_shapeDepth.endFill();
                                this.m_shapeDepth.lineStyle(3, 0xFF0000, 0.8);
                                this.m_shapeDepth.drawRect(this.m_clip.x + this.m_boundsAttackDepth.x, this.m_clip.y + this.m_boundsAttackDepth.y, this.m_boundsAttackDepth.width, this.m_boundsAttackDepth.height);
                            }
                        }
                        /*override*/ checkCollision() {
                            var res = this.m_world.checkCollision(this);
                            return res;
                        }
                        hitTest(actor) {
                            if (this.m_bounds && actor.bounds()) {
                                var ra = new PIXI.Rectangle(this.m_bounds.x, this.m_bounds.y, this.m_bounds.width, this.m_bounds.height);
                                ra.x += this.m_x;
                                ra.y += this.m_y;
                                var rb = new PIXI.Rectangle(actor.bounds().x, actor.bounds().y, actor.bounds().width, actor.bounds().height);
                                rb.x += actor.x();
                                rb.y += actor.y();
                                return bamtang.Main.intersectsRect(ra, rb);
                            }
                            return false;
                        }
                        hitTestReceivedAttack(actor, checkDepth = true) {
                            if (checkDepth && !actor.checkCollisionAttackDepth(this)) {
                                return false;
                            }
                            if (this.m_boundsBody && actor.boundsAttack()) {
                                var ra = new PIXI.Rectangle(this.m_boundsBody.x, this.m_boundsBody.y, this.m_boundsBody.width, this.m_boundsBody.height);
                                ra.x += this.m_x;
                                ra.y += this.m_y;
                                var rb = new PIXI.Rectangle(actor.boundsAttack().x, actor.boundsAttack().y, actor.boundsAttack().width, actor.boundsAttack().height);
                                rb.x += actor.x();
                                rb.y += actor.y();
                                return bamtang.Main.intersectsRect(ra, rb);
                            }
                            return false;
                        }
                        hitIntersection(actor) {
                            if (this.m_bounds && actor.bounds()) {
                                var ra = new PIXI.Rectangle(this.m_bounds.x, this.m_bounds.y, this.m_bounds.width, this.m_bounds.height);
                                ra.x += this.m_x;
                                ra.y += this.m_y;
                                var rb = new PIXI.Rectangle(actor.bounds().x, actor.bounds().y, actor.bounds().width, actor.bounds().height);
                                rb.x += actor.x();
                                rb.y += actor.y();
                                return bamtang.Main.intersectionRect(ra, rb);
                            }
                            return null;
                        }
                        checkCollisionDepth(actor) {
                            var minY = Math.min(this.m_boundsBodyDepth.y + this.m_y, actor.boundsBodyDepth().y + actor.y());
                            var maxY = Math.max(this.m_boundsBodyDepth.y + this.m_y + this.m_boundsBodyDepth.height, actor.boundsBodyDepth().y + actor.y() + actor.boundsBodyDepth().height);
                            return (maxY - minY < this.m_boundsBodyDepth.height + actor.boundsBodyDepth().height);
                        }
                        checkCollisionAttackDepth(actor) {
                            var minY = Math.min(this.m_boundsAttackDepth.y + this.m_y, actor.boundsBodyDepth().y + actor.y());
                            var maxY = Math.max(this.m_boundsAttackDepth.y + this.m_y + this.m_boundsAttackDepth.height, actor.boundsBodyDepth().y + actor.y() + actor.boundsBodyDepth().height);
                            return (maxY - minY < this.m_boundsAttackDepth.height + actor.boundsBodyDepth().height);
                        }
                        /*override*/ integrateVerlet(dt) {
                            var oldX = this.m_oldX;
                            var oldY = this.m_oldY;
                            this.m_oldX = this.m_x;
                            this.m_oldY = this.m_y;
                            var incX = this.m_x - oldX;
                            if (incX < -this.m_control.maxVerletHorizontalDisplace) {
                                incX = -this.m_control.maxVerletHorizontalDisplace;
                            }
                            else if (incX > this.m_control.maxVerletHorizontalDisplace) {
                                incX = this.m_control.maxVerletHorizontalDisplace;
                            }
                            this.m_x += incX;
                            var incY = this.m_y - oldY;
                            if (incY < -this.m_control.maxVerletUpDisplace) {
                                incY = -this.m_control.maxVerletUpDisplace;
                            }
                            else if (incY > this.m_control.maxVerletDownDisplace) {
                                incY = this.m_control.maxVerletDownDisplace;
                            }
                            this.m_y += incY;
                        }
                        /*override*/ onIdle(idle) {
                            super.onIdle(idle);
                            if (this.m_clipShadow) {
                                this.m_clipShadow.visible = !idle;
                            }
                            if (idle) {
                                this.m_shapeDepth.clear();
                            }
                        }
                        /*override*/ createCorners() {
                            if (this.m_clip.mcCollision != null) {
                                if (this.m_clip.mcCollision.transform != null) {
                                    this.m_clip.mcCollision._x = parseInt(this.m_clip.mcCollision.x);
                                    this.m_clip.mcCollision._y = parseInt(this.m_clip.mcCollision.y);
                                    var qwe = ["mcElixir", "mc1up", "mcHeart", "mcJewel"];
                                    var resqwe = false;
                                    for (var q in qwe)
                                        if (this.m_clip._gafTimeline._config._linkage.indexOf(qwe[q]) > -1) {
                                            this.m_clip.mcCollision.width = parseInt(this.m_clip.mcCollision.transform.localTransform.a);
                                            this.m_clip.mcCollision.height = parseInt(this.m_clip.mcCollision.transform.localTransform.d) * 2;
                                            this.m_clip.mcCollision.x = parseInt(this.m_clip.mcCollision._x) - 30;
                                            this.m_clip.mcCollision.y = parseInt(this.m_clip.mcCollision._y) - 50;
                                            resqwe = true;
                                        }
                                    if (this.m_clip._gafTimeline._config._linkage.indexOf("mc_player_one") > -1) {
                                        this.m_clip.mcCollision.width = 25;
                                        this.m_clip.mcCollision.height = 10;
                                        resqwe = true;
                                    }
                                    if (!resqwe) {
                                        this.m_clip.mcCollision.width = parseInt(this.m_clip.mcCollision.transform.localTransform.a);
                                        this.m_clip.mcCollision.height = parseInt(this.m_clip.mcCollision.transform.localTransform.d);
                                        this.m_clip.mcCollision.x = parseInt(this.m_clip.mcCollision._x);
                                        this.m_clip.mcCollision.y = parseInt(this.m_clip.mcCollision._y);
                                    }
                                }
                                this.m_corners = new Array();
                                var _scaleX = this.m_scaleX;
                                var _scaleY = this.m_scaleY;
                                if (this.m_scaleX == this.m_scaleY) {
                                    this.m_scale = this.m_scaleX;
                                }
                                this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x + this.m_clip.mcCollision.width), _scaleY * (this.m_clip.mcCollision._y + this.m_clip.mcCollision.height), 1, 1));
                                if (_scaleX * this.m_clip.mcCollision.width > this.m_world.tileWidth()) {
                                    this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x + 0.5 * this.m_clip.mcCollision.width), _scaleY * (this.m_clip.mcCollision._y + this.m_clip.mcCollision.height), 0, 1));
                                }
                                else {
                                    this.m_corners.push(null);
                                }
                                this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x), _scaleY * (this.m_clip.mcCollision._y + this.m_clip.mcCollision.height), -1, 1));
                                if (_scaleY * this.m_clip.mcCollision.height > 3 * this.m_world.tileHeight()) {
                                    this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x + this.m_clip.mcCollision.width), _scaleY * (this.m_clip.mcCollision._y + 0.75 * this.m_clip.mcCollision.height), 1, 0));
                                    this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x), _scaleY * (this.m_clip.mcCollision._y + 0.75 * this.m_clip.mcCollision.height), -1, 0));
                                    this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x + this.m_clip.mcCollision.width), _scaleY * (this.m_clip.mcCollision._y + 0.5 * this.m_clip.mcCollision.height), 1, 0));
                                    this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x), _scaleY * (this.m_clip.mcCollision._y + 0.5 * this.m_clip.mcCollision.height), -1, 0));
                                    this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x + this.m_clip.mcCollision.width), _scaleY * (this.m_clip.mcCollision._y + 0.25 * this.m_clip.mcCollision.height), 1, 0));
                                    this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x), _scaleY * (this.m_clip.mcCollision._y + 0.25 * this.m_clip.mcCollision.height), -1, 0));
                                }
                                else if (_scaleY * this.m_clip.mcCollision.height > 2 * this.m_world.tileHeight()) {
                                    this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x + this.m_clip.mcCollision.width), _scaleY * (this.m_clip.mcCollision._y + 0.67 * this.m_clip.mcCollision.height), this.m_flipX ? -1 : 1, 0));
                                    this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x), _scaleY * (this.m_clip.mcCollision._y + 0.67 * this.m_clip.mcCollision.height), -1, 0));
                                    this.m_corners.push(null, null);
                                    this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x + this.m_clip.mcCollision.width), _scaleY * (this.m_clip.mcCollision._y + 0.33 * this.m_clip.mcCollision.height), this.m_flipX ? -1 : 1, 0));
                                    this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x), _scaleY * (this.m_clip.mcCollision._y + 0.33 * this.m_clip.mcCollision.height), -1, 0));
                                }
                                else if (_scaleY * this.m_clip.mcCollision.height > this.m_world.tileHeight()) {
                                    this.m_corners.push(null, null);
                                    this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x + this.m_clip.mcCollision.width), _scaleY * (this.m_clip.mcCollision._y + 0.5 * this.m_clip.mcCollision.height), 1, 0));
                                    this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x), _scaleY * (this.m_clip.mcCollision._y + 0.5 * this.m_clip.mcCollision.height), -1, 0));
                                    this.m_corners.push(null, null);
                                }
                                else {
                                    this.m_corners.push(null, null, null, null, null, null);
                                }
                                this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x + this.m_clip.mcCollision.width), _scaleY * (this.m_clip.mcCollision._y), 1, -1));
                                if (_scaleX * this.m_clip.mcCollision.width > this.m_world.tileWidth()) {
                                    this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x + 0.5 * this.m_clip.mcCollision.width), _scaleY * (this.m_clip.mcCollision._y), 0, -1));
                                }
                                else {
                                    this.m_corners.push(null);
                                }
                                this.m_corners.push(new brawler.BRW_CollisionPoint(_scaleX * (this.m_clip.mcCollision.x), _scaleY * (this.m_clip.mcCollision._y), -1, -1));
                                this.m_cornersArray = new Array(new Array(), new Array(), new Array(), new Array());
                                for (var i = 0; i < this.m_cornersArray.length; ++i) {
                                    for (var j = 0; j < Entity.CORNERS_ARRAY[i].length; ++j) {
                                        if (this.m_corners[Entity.CORNERS_ARRAY[i][j]]) {
                                            this.m_cornersArray[i].push(this.m_corners[Entity.CORNERS_ARRAY[i][j]]);
                                        }
                                    }
                                }
                            }
                            else {
                                this.m_cornersArray = null;
                            }
                            this.updateBounds();
                        }
                        updateBoundsBody(clipTarget = null) {
                            var boundsClip = this.m_clip.mcBounds;
                            if (clipTarget != null) {
                                boundsClip = clipTarget;
                            }
                            if (boundsClip) {
                                /*boundsClip._width = boundsClip.width;
                                boundsClip._height = boundsClip.height;
                                
                                boundsClip._x = boundsClip.x;
                                boundsClip._y = boundsClip.y;*/
                                if (this.m_clip._gafTimeline._config._linkage.indexOf("cannon") > -1) {
                                    boundsClip._width = parseInt(boundsClip.transform.localTransform.a) * Global.CLIPS_SCALE;
                                    boundsClip._height = parseInt(boundsClip.transform.localTransform.d) * Global.CLIPS_SCALE;
                                }
                                else {
                                    boundsClip._width = parseInt(boundsClip.transform.localTransform.a);
                                    boundsClip._height = parseInt(boundsClip.transform.localTransform.d);
                                }
                                boundsClip._x = parseInt(boundsClip.transform.localTransform.tx);
                                boundsClip._y = parseInt(boundsClip.transform.localTransform.ty);
                                var _scaleX = this.m_scaleX;
                                var _scaleY = this.m_scaleY;
                                if (this.m_scaleX == this.m_scaleY) {
                                    this.m_scale = this.m_scaleX;
                                }
                                this.m_boundsBody = new PIXI.Rectangle(_scaleX * (this.m_flipX ? -boundsClip._x - boundsClip._width : boundsClip._x), _scaleY * boundsClip._y, _scaleX * boundsClip._width, _scaleY * boundsClip._height);
                            }
                            else {
                                this.m_boundsBody = null;
                            }
                        }
                        updateBoundsAttack(clipTarget = null, debug = false) {
                            var boundsClip = this.m_clip["mcBoundsAttack"];
                            if (clipTarget != null) {
                                boundsClip = clipTarget;
                            }
                            if (boundsClip) {
                                boundsClip.visible = false;
                                var _scaleX = this.m_scaleX;
                                var _scaleY = this.m_scaleY;
                                if (this.m_scaleX == this.m_scaleY) {
                                    this.m_scale = this.m_scaleX;
                                }
                                boundsClip._width = parseInt(boundsClip.transform.localTransform.a);
                                boundsClip._height = parseInt(boundsClip.transform.localTransform.d);
                                boundsClip._x = parseInt(boundsClip.transform.localTransform.tx);
                                boundsClip._y = parseInt(boundsClip.transform.localTransform.ty);
                                this.m_boundsAttack = new PIXI.Rectangle(_scaleX * (this.m_flipX ? -boundsClip._x - boundsClip._width : boundsClip._x), _scaleY * boundsClip._y, _scaleX * boundsClip._width, _scaleY * boundsClip._height);
                            }
                            else {
                                this.m_boundsAttack = null;
                            }
                        }
                        hitTestBaseCollision(actor) {
                            if (this.m_boundsBodyDepth && actor.boundsBodyDepth()) {
                                var ra = new PIXI.Rectangle(this.m_boundsBodyDepth.x, this.m_boundsBodyDepth.y, this.m_boundsBodyDepth.width, this.m_boundsBodyDepth.height);
                                ra.x += this.m_x;
                                ra.y += this.m_y;
                                var rb = new PIXI.Rectangle(actor.boundsBodyDepth().x, actor.boundsBodyDepth().y, actor.boundsBodyDepth().width, actor.boundsBodyDepth().height);
                                rb.x += actor.x();
                                rb.y += actor.y();
                                return bamtang.Main.intersectsRect(ra, rb);
                            }
                            return false;
                        }
                        hitTestBodies(actor) {
                            if (this.m_boundsBody && actor.boundsBody()) {
                                var ra = new PIXI.Rectangle(this.m_boundsBody.x, this.m_boundsBody.y, this.m_boundsBody.width, this.m_boundsBody.height);
                                ra.x += this.m_x;
                                ra.y += this.m_y;
                                var rb = new PIXI.Rectangle(actor.boundsBody().x, actor.boundsBody().y, actor.boundsBody().width, actor.boundsBody().height);
                                rb.x += actor.x();
                                rb.y += actor.y();
                                return bamtang.Main.intersectsRect(ra, rb);
                            }
                            return false;
                        }
                        hitTestCollisionDepth(actor) {
                            var minY = Math.min(this.m_boundsBase.y + this.m_y, actor.boundsBase().y + actor.y());
                            var maxY = Math.max(this.m_boundsBase.y + this.m_y + this.m_boundsBase.height, actor.boundsBase().y + actor.y() + actor.boundsBase().height);
                            return (maxY - minY < this.m_boundsBase.height + actor.boundsBase().height);
                        }
                    }
                    kipu.BRW_Entity = BRW_Entity;
                })(kipu = brawler.kipu || (brawler.kipu = {}));
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_Entity = com.bamtang.soul.brawler.kipu.BRW_Entity;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                var kipu;
                (function (kipu) {
                    class BRW_EntityGame extends kipu.BRW_Entity {
                        constructor(canvas, x, y, world, lifes = 0, health = 0, magic = 0, speed = 0, healthRegenSpeed = 0, magicRegenSpeed = 0, score = 0, money = 0, defenseSkills = null, attackSkills = null) {
                            super(canvas, x, y, world);
                            this.m_lifes = lifes;
                            this.m_health = health;
                            this.m_magic = magic;
                            this.m_speed = speed;
                            this.m_healthRegenSpeed = healthRegenSpeed;
                            this.m_magicRegenSpeed = magicRegenSpeed;
                            this.m_score = score;
                            this.m_money = money;
                            this.defenseSkills = (defenseSkills == null) ? new Skills(0, 0, 0, 0) : defenseSkills;
                            this.attackSkills = (attackSkills == null) ? new Skills(0, 0, 0, 0) : attackSkills;
                            this.m_inventory = new Inventory();
                        }
                    }
                    kipu.BRW_EntityGame = BRW_EntityGame;
                })(kipu = brawler.kipu || (brawler.kipu = {}));
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_EntityGame = com.bamtang.soul.brawler.kipu.BRW_EntityGame;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                class BRW_WorldActor extends BRW_EntityGame {
                    constructor(canvas, world, x, y, lifes = 0, health = 0, magic = 0, speed = 0, score = 0, money = 0, healthRegenSpeed = 0, magicRegenSpeed = 0, defenseSkills = null, attackSkills = null) {
                        super(canvas, x, y, world, lifes, health, magic, speed, healthRegenSpeed, magicRegenSpeed, score, money, defenseSkills, attackSkills);
                    }
                }
                brawler.BRW_WorldActor = BRW_WorldActor;
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_WorldActor = com.bamtang.soul.brawler.BRW_WorldActor;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_WorldActorExt extends BRW_WorldActor {
                        constructor(canvas, world, x, y, lifes = 0, health = 0, magic = 0, speed = 0, score = 0, money = 0, healthRegenSpeed = 0, magicRegenSpeed = 0, defenseSkills = null, attackSkills = null) {
                            super(canvas, world, x, y, lifes, health, magic, speed, score, money, healthRegenSpeed, magicRegenSpeed, defenseSkills, attackSkills);
                        }
                    }
                    brawler.BRW_WorldActorExt = BRW_WorldActorExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_WorldActorExt = com.bamtang.project.soulExtends.brawler.BRW_WorldActorExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class BaseObject extends BRW_WorldActorExt {
                        constructor(canvas, world, x, y, npc, type = -1) {
                            super(canvas, world, x, y);
                            if (npc != null) {
                                var objParams = Common.getParams(npc.collisionBlock);
                                this.mInitXCell = parseInt(objParams.cellXi);
                                this.mInitYCell = parseInt(objParams.cellYi);
                                this.mFinalXCell = parseInt(objParams.cellXf);
                                this.mFinalYCell = parseInt(objParams.cellYf);
                                this.mHealth = npc.health;
                            }
                            else {
                                this.mInitXCell = this.mInitYCell = 0;
                                this.mFinalXCell = this.mFinalYCell = 0;
                                this.mHealth = 0;
                            }
                            this.mClassName = "BaseObject";
                            this.mType = type;
                            this.mPlayerBrawler = this.m_world.player();
                        }
                        getHealth() { return this.mHealth; }
                        getClassName() { return this.mClassName; }
                        setNameClass(name) {
                            this.mClassName = name.toLowerCase();
                        }
                        setDynamicCollision(visible) {
                            this.m_world.setRangeCollisionCell(this.mInitXCell, this.mInitYCell, this.mFinalXCell, this.mFinalYCell, visible ? BRW_WorldCollisionLayer.CELL_FULL : BRW_WorldCollisionLayer.CELL_EMPTY);
                            this.m_world.refreshCollision();
                        }
                        /*override*/ free() {
                            this.mPlayerBrawler = null;
                            super.free();
                        }
                    }
                    BaseObject.ST_STAND = 1;
                    BaseObject.ST_KILL = 2;
                    objects.BaseObject = BaseObject;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BaseObject = com.bamtang.project.gameBrawler.objects.BaseObject;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class BaseEnemy extends BRW_WorldActorExt {
                        constructor(canvas, world, x, y, npc, type = BaseEnemy.ENEMY_GENERIC) {
                            super(canvas, world, x, y);
                            this.mTimeStandUp = 0;
                            this.mHealthBase = 0;
                            this.mTestStateDied = true;
                            this.m_enableSndAppear2 = true;
                            this.enemyCounter1 = 0;
                            this.mTypeEnemy = type;
                            this.mDefaultViewLeft = true;
                            this.mFlagDisappear = false;
                            this.mIsEnabled = false;
                            this.mIsPaused = false;
                            this.mStateBeforeHit = BaseEnemy.ST_STAND;
                            this.mCanGetHit = true;
                            this.mIsCollisionEnabled = true;
                            this.mToLeft = false;
                            this.mCountHitCatch = 0;
                            this.mTargetX = this.mTargetY = 0;
                            this.mTimer = 0;
                            this.mTimeJumping = 0;
                            this.mHealth = npc.health;
                            this.mDamage = npc.damage;
                            this.m_NpcDmg = npc.damage;
                            this.mBonusItem = npc.item;
                            this.mStopId = npc.stopId;
                            this.mStopGroup = npc.group;
                            this.mSkin = npc.skin;
                            this.mSpeedMove = npc.speed + (Math.random() * 0.01);
                            this.mAppearDelay = npc.timeInit;
                            this.mInitActionDelay = 0;
                            this.mIntervalRedTint = null;
                            this.mTintMagnitude = 1;
                            this.mData = null;
                            var params = Common.getParams(npc.params);
                            this.mName = params.name;
                            this.mEnableCatch = Boolean(parseInt(params.enableCatch));
                            this.mIsCatchMode = false;
                            this.mCoverProbability = params.hasOwnProperty("coverProb") ? Number(params.coverProb) : 0;
                            this.m_probAttacks = new Array(100, 0, 0, 0);
                            this.m_probAttacks[0] = params.hasOwnProperty("att1") ? parseInt(params.att1) : 100;
                            this.m_probAttacks[1] = params.hasOwnProperty("att2") ? parseInt(params.att2) : 0;
                            this.m_probAttacks[2] = params.hasOwnProperty("att3") ? parseInt(params.att3) : 0;
                            this.m_probAttacks[3] = params.hasOwnProperty("att4") ? parseInt(params.att4) : 0;
                            this.m_dmgAttacks = new Array(this.mDamage, 0, 0, 0);
                            this.m_dmgAttacks[0] = params.hasOwnProperty("dmg1") ? parseInt(params.dmg1) : this.mDamage;
                            this.m_dmgAttacks[1] = params.hasOwnProperty("dmg2") ? parseInt(params.dmg2) : 0;
                            this.m_dmgAttacks[2] = params.hasOwnProperty("dmg3") ? parseInt(params.dmg3) : 0;
                            this.m_dmgAttacks[3] = params.hasOwnProperty("dmg4") ? parseInt(params.dmg4) : 0;
                            this.mDeathWithAttackMode = 1;
                            this.mJumpControl = new JumpControl(-50, 11);
                            this.mPendingBounce = false;
                            this.mHealthBase = this.mHealth;
                            this.mBaseAction = null;
                            this.m_character = new Character(this.m_x, this.m_y, this.m_canvas);
                            this.initCharacterStates();
                            this.m_character.onEndAnimation = this.onEndAnimation.bind(this);
                            this.mBulletOffset_X = 30;
                            this.mBulletOffset_Y = 0;
                            if (this.mStopId > 0) {
                                this.m_state = BaseEnemy.ST_WAITING_STOP;
                            }
                            else {
                                this.gotoState(BaseEnemy.ST_APPEAR);
                            }
                        }
                        getHealth() { return this.mHealth; }
                        getDamage() { return this.mDamage; }
                        getTypeEnemy() { return this.mTypeEnemy; }
                        isLookingToLeft() { return this.mToLeft; }
                        getSkinName() { return this.mSkin; }
                        getName() { return this.mName; }
                        getHealthPercent() { return (100 * this.mHealth / this.mHealthBase); }
                        countHitCatch() { return this.mCountHitCatch; }
                        isInCatchMode() { return this.mIsCatchMode; }
                        isPaused() { return this.mIsPaused; }
                        isInAir() { return this.mJumpControl.isJump; }
                        getSpeed() { return this.mSpeedMove; }
                        getData() { return this.mData; }
                        isEnabled() { return this.mIsEnabled; }
                        getState() { return this.m_state; }
                        setPaused(pause) { this.mIsPaused = pause; }
                        playAppear2() {
                            switch (this.mSkin) {
                                case "mc_enemy_01":
                                case "mc_enemy_05":
                                case "mc_enemy_06":
                                    if (this.m_enableSndAppear2) {
                                        this.m_enableSndAppear2 = false;
                                        project.Global.app.playSound("snd_atb_enemy_appear2");
                                    }
                                    break;
                            }
                        }
                        initCharacterStates() {
                        }
                        setDefaultViewLeft(value) {
                            this.mDefaultViewLeft = value;
                        }
                        setState(state, toLeft = false) {
                            this.gotoState(state);
                            this.setLookAtLeft(toLeft);
                        }
                        setLookAtLeft(toLeft) {
                            this.mToLeft = toLeft;
                            this.setFlipX(this.mDefaultViewLeft != this.mToLeft);
                            this.updateBounds();
                        }
                        dropBonusItem() {
                            var lenght = this.m_world.kipuItemsData.length;
                            this.mBonusItem = "MPA";
                            if (this.mBonusItem == "none" || lenght < 1) {
                                return;
                            }
                            if (lenght >= 1) {
                                var index = -1;
                                if (this.mBonusItem == "random") {
                                    index = Common.random(0, lenght - 1);
                                }
                                else {
                                    for (var i = 0; i < lenght; i++) {
                                        if (this.m_world.kipuItemsData[i].name == this.mBonusItem) {
                                            index = i;
                                            break;
                                        }
                                    }
                                }
                                if (index != -1) {
                                    if (!project.StatsMain.enableSpecial1 &&
                                        !project.StatsMain.enableSpecial2 &&
                                        !project.StatsMain.enableSpecial3 &&
                                        (this.m_world.kipuItemsData[index].name == "MPA" || this.m_world.kipuItemsData[index].name == "MPB")) {
                                        return;
                                    }
                                    var entityObjectExt = new BRW_EntityObjectExt(this.m_world.objectsCanvas(), this.m_x, this.m_y, this.m_world, this.m_world.kipuItemsData[index]);
                                    this.m_world.actorManager().add(entityObjectExt);
                                }
                            }
                        }
                        markToDisappear() {
                            if (this.m_isIdle || !this.mIsEnabled) {
                                return;
                            }
                            this.mFlagDisappear = true;
                            if (this.mIsCatchMode) {
                                return;
                            }
                        }
                        checkThrowObjects() {
                        }
                        applyDamage(damage, abusive) {
                            if (!this.mCanGetHit || !this.mIsEnabled) {
                                return false;
                            }
                            this.mHealth -= damage;
                            if (this.mHealth <= 0) {
                                this.mHealth = 0;
                                this.mCanGetHit = false;
                            }
                            if (damage != 0) {
                                gameBrawler.HudBrawler.instance.setEnemyEnergy((100 * this.mHealth / this.mHealthBase), this.mSkin, this.mName);
                            }
                            this.m_world.game().onEnemyKicked(this, abusive);
                            project.Global.app.playSound("snd_atb_enemies_gethit");
                            return true;
                        }
                        setTintObject() {
                            if (this.mIntervalRedTint == null) {
                                this.mIntervalRedTint = new Interval(this.onRedTintCharacter.bind(this), 200, 4);
                                this.mIntervalRedTint.onFinish = this.onFinishRedTintCharacter;
                            }
                        }
                        /*override*/
                        gotoState(state) {
                            var body_x = 0;
                            var body_y = 0;
                            //check returned mcbody
                            if (this.m_clip && this.m_clip.mcBody) {
                                body_x = this.m_clip.mcBody.x;
                                body_y = this.m_clip.mcBody.y;
                            }
                            super.gotoState(state);
                            //check returned mcbody
                            if (this.m_clip && this.m_clip.mcBody) {
                                this.m_clip.mcBody.x = body_x;
                                this.m_clip.mcBody.y = body_y;
                            }
                            if (this.mHealth == 0 && (this.m_state != BaseEnemy.ST_DIE) && (this.m_state != BaseEnemy.ST_END_DIE)) {
                                if (this.mTestStateDied) {
                                    this.markToDisappear();
                                }
                            }
                            switch (this.m_state) {
                                case BaseEnemy.ST_STAND:
                                case BaseEnemy.ST_WALK:
                                case BaseEnemy.ST_ALERT:
                                case BaseEnemy.ST_ATTACK_1:
                                case BaseEnemy.ST_ATTACK_2:
                                    if (this.mFlagDisappear) {
                                        this.gotoState(BaseEnemy.ST_TELEPORT_OUT);
                                        if (this.mBaseAction) {
                                            this.mBaseAction.setPaused(true);
                                        }
                                    }
                                    break;
                                case BaseEnemy.ST_DIE:
                                    if (this.m_enableCover && this.m_isCoverDown) {
                                        this.m_isCoverDown = false;
                                        this.m_enableCover = false;
                                    }
                                    if (this.mBaseAction) {
                                        this.mBaseAction.setPaused(true);
                                    }
                                    break;
                                case BaseEnemy.ST_END_KNOCK:
                                case BaseEnemy.ST_END_DIE:
                                case BaseEnemy.ST_RUSH:
                                case BaseEnemy.ST_HIT:
                                case BaseEnemy.ST_KNOCK:
                                    this.m_character.loop = false;
                                    break;
                                case BaseEnemy.ST_APPEAR:
                                    this.setShadowClip("mcBaseShadow");
                                    if (this.mSkin == "mc_enemy_01" || this.mSkin == "mc_enemy_02" || this.mSkin == "mc_enemy_06") {
                                        this.getShadowClip().scale.x = 1.5;
                                        this.getShadowClip().scale.y = 1.5;
                                    }
                                    else if (this.mSkin == "mc_enemy_05") {
                                        this.getShadowClip().scale.x = 0.9;
                                        this.getShadowClip().scale.y = 0.9;
                                    }
                                    break;
                                case BaseEnemy.ST_TELEPORT_OUT:
                                    this.m_clipShadow.visible = false;
                                    break;
                                case BaseEnemy.ST_TELEPORT_IN:
                                    this.m_clipShadow.visible = true;
                                    break;
                            }
                            this.playSoundOfState();
                        }
                        playSoundOfState() {
                            switch (this.m_state) {
                                case BaseEnemy.ST_APPEAR:
                                    break;
                                case BaseEnemy.ST_WALK:
                                    break;
                                case BaseEnemy.ST_HIT:
                                case BaseEnemy.ST_HIT_AIR:
                                    break;
                                case BaseEnemy.ST_ATTACK_1:
                                case BaseEnemy.ST_ATTACK_2:
                                    break;
                                case BaseEnemy.ST_KNOCK:
                                case BaseEnemy.ST_DIE:
                                    break;
                                case BaseEnemy.ST_END_DIE:
                                    if (this.mSkin == "mc_enemy_01" || this.mSkin == "mc_enemy_02") {
                                        project.Global.app.playSound("snd_atb_enemies_penguinsplit");
                                    }
                                    break;
                            }
                        }
                        createHitEffect(x_offset = 0, y_offset = -50) {
                            var nameClip = "mc_fx_hit";
                            if (nameClip.length > 0) {
                                var fDir = (this.isLookingToLeft() ? -1 : 1);
                                var fx = this.m_world.addEffect(nameClip, this.m_x + x_offset * fDir, this.m_y + y_offset);
                                fx.actor().clip().scale.x *= fDir;
                            }
                        }
                        markDeathWithAttackMode(attackMode) {
                            this.mDeathWithAttackMode = attackMode;
                        }
                        remove(collectible = true) {
                            project.StatsMain.killedEnemies++;
                            if (this instanceof Lich) {
                                var actors = this.m_world.actorManager().actors;
                                for (var i = 0; i <= actors.length; i++) {
                                    if (actors[i] != null && actors[i] instanceof BigWorm) {
                                        actors[i].forceAppear();
                                        break;
                                    }
                                }
                            }
                            this.m_isAwaitingDelete = true;
                            switch (this.mDeathWithAttackMode) {
                                case gameBrawler.PlayerBrawler.MODE_ATTACK_NORMAL:
                                    break;
                                case gameBrawler.PlayerBrawler.MODE_ATTACK_SPECIAL_BIG_FEET_HALF:
                                    break;
                                case gameBrawler.PlayerBrawler.MODE_ATTACK_SPECIAL_BIG_FEET_FULL:
                                    break;
                            }
                            if (this.m_world) {
                                this.m_world.player().evaluateCurrentStop(this.mStopId, this.mStopGroup, Stop.OBJ_ENEMY);
                                if (collectible) {
                                }
                            }
                        }
                        onRedTintCharacter() {
                            if (this.mTintMagnitude == 1) {
                                Common.tint(this.m_clip, this.mTintMagnitude, 0, 0);
                            }
                            else {
                                Common.tint(this.m_clip);
                            }
                            this.mTintMagnitude = ((this.mTintMagnitude == 1) ? 0 : 1);
                        }
                        onFinishRedTintCharacter() {
                            Common.tint(this.m_clip);
                            this.mIntervalRedTint.free();
                            this.mIntervalRedTint = null;
                        }
                        onCompleteJump() {
                            if (this.mPendingBounce) {
                                this.m_world.addEffect("mc_fx_hit", this.m_x, this.m_y);
                                this.mPendingBounce = false;
                                this.mPendingKnock = false;
                                this.mJumpControl.init();
                                project.Global.app.playSound("snd_atb_enemies_gethit");
                                Common.shake(GuiGame.instance.canvasGame(), 5, 1);
                                this.mJumpControl.applyForceY(-50);
                                this.gotoState(BaseEnemy.ST_KNOCK);
                            }
                            else {
                                if (this.mHealth > 0) {
                                    if (this.mPendingKnock) {
                                        this.mPendingKnock = false;
                                        this.onKnock(this.mDamage, this);
                                    }
                                    else {
                                        this.m_character.addState(String(BaseEnemy.ST_KNOCK), this.mSkin + "_fall");
                                        this.m_state = -1;
                                        this.gotoState(BaseEnemy.ST_KNOCK);
                                    }
                                }
                                else {
                                    this.gotoState(BaseEnemy.ST_DIE);
                                }
                                this.mTimeJumping = 0;
                            }
                        }
                        onEndAnimation(state) {
                            switch (parseInt(state)) {
                                case BaseEnemy.ST_APPEAR:
                                    this.gotoState(BaseEnemy.ST_STAND);
                                    if (this.mBaseAction != null) {
                                        this.mBaseAction.startAction(this.mInitActionDelay);
                                    }
                                    this.mIsEnabled = true;
                                    break;
                                case BaseEnemy.ST_STAND_UP:
                                    this.gotoState(BaseEnemy.ST_STAND);
                                    if (this.mBaseAction != null) {
                                        this.mBaseAction.setPaused(false);
                                    }
                                    break;
                                case BaseEnemy.ST_COVER_BREAKING:
                                    this.gotoState(BaseEnemy.ST_STAND);
                                    this.m_isCoverDown = true;
                                    this.mTimer = 3000;
                                    break;
                                case BaseEnemy.ST_KNOCK:
                                    if (!this.mJumpControl.isJump) {
                                        this.gotoState(BaseEnemy.ST_END_KNOCK);
                                    }
                                    break;
                                case BaseEnemy.ST_END_KNOCK:
                                    this.mTimeStandUp = 800;
                                    break;
                                case BaseEnemy.ST_TELEPORT_OUT:
                                    if (this.mFlagDisappear) {
                                        this.remove();
                                    }
                                    else {
                                        this.gotoState(BaseEnemy.ST_TELEPORT_IN);
                                        this.setPosition(this.mTargetX, this.mTargetY);
                                    }
                                    break;
                                case BaseEnemy.ST_HIT_AIR:
                                    this.gotoState(BaseEnemy.ST_HIT_AIRDOWN);
                                    break;
                                case BaseEnemy.ST_DIE:
                                    this.gotoState(BaseEnemy.ST_END_DIE);
                                    this.m_clipShadow.visible = false;
                                    this.dropBonusItem();
                                    break;
                                case BaseEnemy.ST_END_DIE:
                                    this.remove();
                                    break;
                            }
                        }
                        onCatch(value, thrown = true) {
                            this.mIsCatchMode = value;
                            this.m_canvas.visible = !value;
                            this.mCountHitCatch = 0;
                            if (value) {
                                this.m_world.player().onCatchEnemy(this);
                                this.gotoState(BaseEnemy.ST_STAND);
                                if (this.mBaseAction) {
                                    this.mBaseAction.setPaused(true);
                                }
                            }
                            else {
                                this.m_world.player().onCatchEnemy(null);
                                var offsetX = this.m_world.player().flipX() ? -50 : 50;
                                this.setPosition(this.m_world.player().x() + offsetX, this.m_world.player().y());
                                this.setLookAtLeft(!this.m_world.player().flipX());
                                this.showInCamera(this.m_world.camera());
                                if (!thrown && this.mBaseAction) {
                                    this.mBaseAction.setPaused(false);
                                }
                            }
                        }
                        onActionAttack() {
                        }
                        onActionMove() {
                        }
                        onActionStand() {
                        }
                        onActionTeleport(px, py) {
                        }
                        onActionRush() {
                        }
                        onHit(damage, abusive) {
                            var cover;
                            if (abusive instanceof WeaponTrap) {
                                cover = false;
                            }
                            else if (abusive instanceof gameBrawler.PlayerBrawler &&
                                (abusive.getAttackMode() != gameBrawler.PlayerBrawler.MODE_ATTACK_NORMAL)) {
                                cover = false;
                            }
                            else {
                                if (this.mCoverProbability == 1) {
                                    cover = true;
                                }
                                else if (this.mCoverProbability == 0) {
                                    cover = false;
                                }
                                else {
                                    cover = Math.random() <= this.mCoverProbability;
                                }
                            }
                            this.m_enableCover = cover;
                            if (cover &&
                                abusive instanceof gameBrawler.PlayerBrawler &&
                                abusive.control().isInDashAttack() && this.m_state != BaseEnemy.ST_COVER_BREAKING) {
                                project.Global.app.playSound("snd_atb_enemies_gethit");
                                this.gotoState(BaseEnemy.ST_COVER_BREAKING);
                                if (this.mBaseAction) {
                                    this.mBaseAction.setPaused(true);
                                }
                                this.createHitEffect();
                                return false;
                            }
                            if (this.m_enableCover && this.m_isCoverDown) {
                                cover = false;
                            }
                            if (cover) {
                                project.Global.app.playSound("snd_atb_enemies_cover");
                                this.gotoState(BaseEnemy.ST_COVER);
                                if (this.mBaseAction) {
                                    this.mBaseAction.setPaused(true);
                                }
                                this.createHitEffect();
                                return false;
                            }
                            if (this.applyDamage(damage, abusive)) {
                                if (this.mHealth > 0) {
                                    this.gotoState(BaseEnemy.ST_HIT);
                                }
                                else {
                                    if (!(this instanceof Gunter) && !(this instanceof Lich)) {
                                        this.m_character.addState(String(BaseEnemy.ST_DIE), this.mSkin + "_fall");
                                    }
                                    this.setLookAtLeft(abusive.x() < this.m_x);
                                    this.gotoState(BaseEnemy.ST_DIE);
                                }
                                if (this.mBaseAction) {
                                    this.mBaseAction.setPaused(true);
                                }
                                if (abusive == this.m_world.player() || abusive instanceof WeaponTrap) {
                                    this.createHitEffect();
                                }
                                return true;
                            }
                            return false;
                        }
                        onKnock(damage, abusive = null, isPlayer = true, thrown = false, lastHit = false) {
                            if (this.applyDamage(damage, abusive)) {
                                if (this.mHealth == 0) {
                                    if (thrown) {
                                        this.m_character.addState(String(BaseEnemy.ST_DIE), this.mSkin + "_fall");
                                    }
                                    else {
                                        this.m_character.addState(String(BaseEnemy.ST_DIE), this.mSkin + "_fall");
                                    }
                                    this.gotoState(BaseEnemy.ST_DIE);
                                }
                                else {
                                    if (thrown) {
                                        this.m_character.addState(String(BaseEnemy.ST_KNOCK), this.mSkin + "_fall");
                                    }
                                    else {
                                        if (lastHit) {
                                            this.m_character.addState(String(BaseEnemy.ST_KNOCK), this.mSkin + "_knock_toup");
                                            this.mJumpControl.init();
                                            this.mTimeJumping = 0;
                                        }
                                        else {
                                            this.m_character.addState(String(BaseEnemy.ST_KNOCK), this.mSkin + "_fall");
                                        }
                                    }
                                    this.gotoState(BaseEnemy.ST_KNOCK);
                                }
                                if (this.mBaseAction) {
                                    this.mBaseAction.setPaused(true);
                                }
                                if (!thrown && (abusive == this.m_world.player())) {
                                    this.createHitEffect();
                                }
                                if (this.m_enableCover && this.m_isCoverDown) {
                                    this.m_enableCover = false;
                                    this.m_isCoverDown = false;
                                }
                                return true;
                            }
                            return false;
                        }
                        onKnockUpward(damage, abusive) {
                            if (this.applyDamage(damage, abusive)) {
                                if (this.mHealth == 0) {
                                    this.m_character.addState(String(BaseEnemy.ST_DIE), this.mSkin + "_fall");
                                    this.gotoState(BaseEnemy.ST_DIE);
                                }
                                else {
                                    this.m_character.addState(String(BaseEnemy.ST_KNOCK), this.mSkin + "_knock_toup");
                                    this.mJumpControl.init();
                                    this.mJumpControl.applyForceY(-50);
                                    this.mTimeJumping = 0;
                                    this.gotoState(BaseEnemy.ST_KNOCK);
                                }
                                this.setLookAtLeft(abusive.x() < this.m_x);
                                if (this.mBaseAction) {
                                    this.mBaseAction.setPaused(true);
                                }
                                if (abusive == this.m_world.player()) {
                                    this.createHitEffect(0, -50 - this.mJumpControl.currentHeight);
                                }
                                if (this.m_enableCover && this.m_isCoverDown) {
                                    this.m_enableCover = false;
                                    this.m_isCoverDown = false;
                                }
                                return true;
                            }
                            return false;
                        }
                        onHitInCatch(damage, abusive) {
                            if (this.applyDamage(damage, abusive)) {
                                this.mCountHitCatch++;
                                if (this.mHealth == 0) {
                                    this.onCatch(false);
                                    this.gotoState(BaseEnemy.ST_DIE);
                                }
                            }
                        }
                        onHitAir(damage, abusive, lastHit, pendingBounce = false) {
                            if (this.mPendingBounce == false && this.applyDamage(damage, abusive)) {
                                if (!this.mJumpControl.isJump) {
                                    Application.error("This enemy is not jumping", "BaseEnemy::onHitAir()");
                                    return;
                                }
                                if (this.mHealth == 0) {
                                    this.mCanGetHit = true;
                                }
                                this.mPendingBounce = pendingBounce;
                                this.mPendingKnock = false;
                                if (lastHit) {
                                    this.m_character.addState(String(BaseEnemy.ST_HIT_AIR), this.mSkin + "_fall_air");
                                    this.mJumpControl.applyForceY(30);
                                    this.mPendingKnock = true;
                                }
                                else {
                                    this.m_character.addState(String(BaseEnemy.ST_HIT_AIR), this.mSkin + "_hit_air");
                                    this.mJumpControl.applyForceY(-25.8);
                                }
                                this.gotoState(BaseEnemy.ST_HIT_AIR);
                                if (this.m_enableCover && this.m_isCoverDown) {
                                    this.m_enableCover = false;
                                    this.m_isCoverDown = false;
                                }
                                if (abusive == this.m_world.player()) {
                                    this.createHitEffect(-20, this.m_clip.mcBody.y - 30);
                                }
                            }
                        }
                        onProcessAttackToPlayer() {
                        }
                        onDelayComplete() {
                            this.gotoState(BaseEnemy.ST_APPEAR);
                            this.setScale(1.2);
                            this.update(0);
                        }
                        /*override*/ update(dt) {
                            if (this.mIsCatchMode || this.mIsPaused) {
                                return;
                            }
                            if (this.m_state == BaseEnemy.ST_WAITING_STOP) {
                                if (this.m_world.player().currentStop == this.mStopId &&
                                    this.m_world.player().currentStopGroup == this.mStopGroup) {
                                    this.mTimer = this.mAppearDelay;
                                    this.m_state = BaseEnemy.ST_INIT_DELAY;
                                }
                                return;
                            }
                            if (this.m_state == BaseEnemy.ST_INIT_DELAY) {
                                this.mTimer -= dt;
                                if (this.mTimer <= 0 && this.mTimer > -111111) {
                                    this.mTimer = -111111;
                                    project.Global.app.playSound("snd_atb_enemies_appear");
                                    this.onDelayComplete();
                                }
                                return;
                            }
                            if (this.m_state == BaseEnemy.ST_END_KNOCK) {
                                if (this.mTimeStandUp > 0) {
                                    this.mTimeStandUp -= dt;
                                    if (this.mTimeStandUp <= 0) {
                                        this.gotoState(BaseEnemy.ST_STAND_UP);
                                    }
                                }
                            }
                            if ((this.m_state == BaseEnemy.ST_KNOCK) || (this.m_state == BaseEnemy.ST_DIE) ||
                                (this.m_state == BaseEnemy.ST_HIT_AIR) || (this.m_state == BaseEnemy.ST_HIT_AIRDOWN)) {
                                var nextPosX = this.m_x * 1;
                                var nextPosY = this.m_y * 1;
                                var sign = 0;
                                if (this.mJumpControl.isJump) {
                                    this.mTimeJumping += dt;
                                    sign = (this.mDefaultViewLeft) ? 1 : -1;
                                    nextPosX += (sign * this.m_clip.scale.x * 0.1) * dt;
                                    this.mJumpControl.update(dt);
                                    if (this.m_clip.mcBody) {
                                        if (this.m_clip.mcBody.currentFrame < this.m_clip.mcBody.totalFrames) {
                                            this.m_clip.mcBody.gotoAndStop(this.m_clip.mcBody.currentFrame + 1);
                                        }
                                        this.m_clip.mcBody.y = this.mJumpControl.currentHeight - this.m_clip.y / 4;
                                    }
                                    if (!this.mJumpControl.isJump) {
                                        this.onCompleteJump();
                                    }
                                }
                                else {
                                    nextPosX += sign * this.m_clip.scale.x * BaseEnemy.HORIZONTAL_SPEED * dt;
                                }
                                if (this.m_world.getCellInPosition(nextPosX, this.m_y) == 0) {
                                    this.m_x = nextPosX;
                                    this.checkThrowObjects();
                                }
                            }
                            if (this.mBaseAction) {
                                this.mBaseAction.baseUpdate(dt);
                            }
                            if (this.m_clip.mcBody) {
                                if (this.m_clip.mcBody.mcBounds) {
                                    this.updateBoundsBody(this.m_clip.mcBody.mcBounds);
                                    this.m_boundsBody.x += this.m_clip.mcBody.x;
                                    this.m_boundsBody.y += this.m_clip.mcBody.y;
                                }
                                else {
                                    this.updateBoundsBody();
                                }
                                if (this.m_clip.mcBody.mcBoundsAttack) {
                                    this.m_clip.mcBody.mcBoundsAttack.visible = project.Global.COLLISION_DEBUG;
                                    this.updateBoundsAttack(this.m_clip.mcBody.mcBoundsAttack);
                                    this.m_boundsAttack.x += this.m_clip.mcBody.x;
                                    this.m_boundsAttack.y += this.m_clip.mcBody.y;
                                }
                                else {
                                    this.updateBoundsAttack();
                                }
                            }
                            else {
                                this.updateBoundsBody();
                                this.updateBoundsAttack();
                            }
                            if (this.m_world.player().canGrabEnemey() && this.mEnableCatch && !this.mJumpControl.isJump) {
                                if (this.m_world.player().hitTestProximity(this)) {
                                    this.onCatch(true);
                                }
                            }
                            this.m_world.player().processAttackToEnemy(this);
                            this.onProcessAttackToPlayer();
                            if (this.mIntervalRedTint != null) {
                                this.mIntervalRedTint.update(dt);
                            }
                            if (this.m_enableCover && this.m_isCoverDown) {
                                this.mTimer -= dt;
                                if (this.mTimer <= 0) {
                                    this.mTimer = 0;
                                    this.m_isCoverDown = false;
                                    this.m_enableCover = false;
                                    this.mBaseAction.setPaused(false);
                                }
                            }
                            // if (!Main.isNumeric(this.m_clip.x)) debugger;
                            this.m_character.setX(this.m_clip.x);
                            this.m_character.setY(this.m_clip.y);
                            this.m_character.update(dt);
                            super.update(dt);
                        }
                        /*override*/ free() {
                            this.mJumpControl.free();
                            this.mJumpControl = null;
                            if (this.mIntervalRedTint != null) {
                                this.mIntervalRedTint.free();
                                this.mIntervalRedTint = null;
                            }
                            super.free();
                        }
                    }
                    BaseEnemy.ENEMY_GENERIC = 0;
                    BaseEnemy.ST_STAND = 100;
                    BaseEnemy.ST_WALK = 101;
                    BaseEnemy.ST_ALERT = 102;
                    BaseEnemy.ST_SHOOT = 103;
                    BaseEnemy.ST_HIT = 104;
                    BaseEnemy.ST_DIE = 105;
                    BaseEnemy.ST_REST = 106;
                    BaseEnemy.ST_KNOCK = 107;
                    BaseEnemy.ST_STAND_UP = 108;
                    BaseEnemy.ST_APPEAR = 109;
                    BaseEnemy.ST_END_APPEAR = 110;
                    BaseEnemy.ST_END_KNOCK = 111;
                    BaseEnemy.ST_TELEPORT_OUT = 112;
                    BaseEnemy.ST_TELEPORT_IN = 113;
                    BaseEnemy.ST_DASH = 114;
                    BaseEnemy.ST_CATCH = 115;
                    BaseEnemy.ST_ATTACK_1 = 116;
                    BaseEnemy.ST_ATTACK_2 = 117;
                    BaseEnemy.ST_END_DIE = 118;
                    BaseEnemy.ST_HIT_AIR = 119;
                    BaseEnemy.ST_HIT_AIRDOWN = 120;
                    BaseEnemy.ST_ATTACK_1_MISTAKE = 121;
                    BaseEnemy.ST_RUSH = 122;
                    BaseEnemy.ST_DIZZI = 123;
                    BaseEnemy.ST_COVER = 124;
                    BaseEnemy.ST_COVER_BREAKING = 125;
                    BaseEnemy.ST_WAITING_STOP = 200;
                    BaseEnemy.ST_INIT_DELAY = 201;
                    BaseEnemy.COEFFICIENT_RESTITUTION = 0.6;
                    BaseEnemy.GRAVITY = 0.001;
                    BaseEnemy.HORIZONTAL_SPEED = 0.2;
                    BaseEnemy.LIMIT_SPEED = 0.1;
                    enemies.BaseEnemy = BaseEnemy;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BaseEnemy = com.bamtang.project.gameBrawler.enemies.BaseEnemy;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class BaseEnemyAction {
                        constructor(enemy) {
                            this.mStartupDelay = 0;
                            this.mStateAction = 0;
                            this.mStateBase = 0;
                            this.mEnemyRef = enemy;
                            this.mPlayerRef = this.mEnemyRef.world().player();
                            this.mStateAction = BaseEnemyAction.ST_ACTION_INIT;
                            this.mStateBase = BaseEnemyAction.ST_BASE_INIT;
                            this.mStartupDelay = 0;
                            this.mIsPaused = false;
                        }
                        isPaused() { return this.mIsPaused; }
                        startAction(delay) {
                            this.mStartupDelay = delay;
                            if (this.mStartupDelay > 0) {
                                this.mStateBase = BaseEnemyAction.ST_BASE_STARTING;
                            }
                            else {
                                this.mStateBase = BaseEnemyAction.ST_BASE_PROGRESS;
                                this.onActionStarted();
                            }
                        }
                        setPaused(paused) {
                            if (paused == false && this.mEnemyRef.isInCatchMode()) {
                                this.mEnemyRef.markToDisappear();
                            }
                            this.mIsPaused = paused;
                        }
                        onActionStarted() {
                        }
                        update(dt) {
                        }
                        baseUpdate(dt) {
                            if (this.mStateBase == BaseEnemyAction.ST_BASE_INIT) {
                                return;
                            }
                            switch (this.mStateBase) {
                                case BaseEnemyAction.ST_BASE_STARTING:
                                    this.mStartupDelay -= dt;
                                    if (this.mStartupDelay <= 0) {
                                        this.mStateBase = BaseEnemyAction.ST_BASE_PROGRESS;
                                        this.onActionStarted();
                                    }
                                    break;
                                case BaseEnemyAction.ST_BASE_PROGRESS:
                                    this.update(dt);
                                    break;
                            }
                        }
                        free() {
                            this.mEnemyRef = null;
                            this.mPlayerRef = null;
                        }
                    }
                    BaseEnemyAction.ST_ACTION_NONE = 0;
                    BaseEnemyAction.ST_ACTION_INIT = 1;
                    BaseEnemyAction.ST_ACTION_WAITING = 2;
                    BaseEnemyAction.ST_ACTION_ATTACK = 4;
                    BaseEnemyAction.ST_ACTION_MOVE_LINEAR = 5;
                    BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR = 6;
                    BaseEnemyAction.ST_ACTION_MOVE_BORDER = 7;
                    BaseEnemyAction.ST_ACTION_MOVE_PATROL = 8;
                    BaseEnemyAction.ST_ACTION_MOVE_ZIGZAG = 9;
                    BaseEnemyAction.ST_ACTION_MOVE_PATHFINDING = 10;
                    BaseEnemyAction.ST_BASE_INIT = 1;
                    BaseEnemyAction.ST_BASE_STARTING = 2;
                    BaseEnemyAction.ST_BASE_PROGRESS = 3;
                    enemies.BaseEnemyAction = BaseEnemyAction;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BaseEnemyAction = com.bamtang.project.gameBrawler.enemies.BaseEnemyAction;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var object;
                (function (object) {
                    class Fallen extends BaseObject {
                        constructor(canvas, world, x, y, npc, type = Fallen.FALL_TYPE_ROCK) {
                            super(canvas, world, x, y, npc, type);
                            this.mStopId = 0;
                            this.mStopGroup = 0;
                            this.mBonusItem = npc.item;
                            this.mRange = npc.range;
                            this.mSpeedFall = npc.speed * 0.01;
                            this.mDamage = npc.damage;
                            this.mInitDelay = npc.timeInit;
                            this.mDropHeight = npc.dropHeight * project.Global.WORLD_SCALE;
                            this.mStopId = npc.stopId;
                            this.mStopGroup = npc.group;
                            this.setRangeControlled(false);
                            this.mStateShake = Fallen.SHAKE_TO_LEFT;
                            this.mShakeTimer = 0;
                            this.mTotalShakeTime = 100;
                            this.m_character = new Character(x, y, this.m_canvas);
                            this.initStates();
                            this.m_character.onEndAnimation = this.onEndAnimation.bind(this);
                            this.mInitBodyY = 0;
                            if (this.m_clip.mcBody) {
                                this.mInitBodyY = this.m_clip.mcBody.y;
                                this.m_clip.mcBody.y = this.mInitBodyY - this.mDropHeight;
                            }
                            this.mInitX = this.x();
                            this.mInitY = this.y();
                            if (this.mStopId > 0) {
                                this.m_clip.alpha = 0;
                                this.m_clipShadow.alpha = 0;
                            }
                        }
                        getStopId() { return this.mStopId; }
                        getStopGroup() { return this.mStopGroup; }
                        initStates() {
                            if (this.mType == Fallen.FALL_TYPE_ROCK) {
                                this.m_character.addState(String(Fallen.ST_STAND_AIR), "mc_falling" + project.Global.level + "_stand");
                                this.m_character.addState(String(Fallen.ST_SHAKE), "mc_falling" + project.Global.level + "_stand");
                                this.m_character.addState(String(Fallen.ST_FALL), "mc_falling" + project.Global.level + "_stand");
                                this.m_character.addState(String(Fallen.ST_BREAK), "mc_falling" + project.Global.level + "_crash", [this.dropItem.bind(this), 10]);
                            }
                            this.gotoState(Fallen.ST_STAND_AIR);
                            this.setShadowClip("mcBaseShadowAlert");
                        }
                        /*override*/ gotoState(state) {
                            super.gotoState(state);
                            if (this.m_state == Fallen.ST_BREAK) {
                                project.Global.app.playSound("snd_atb_scenario_falling_destroy");
                                this.m_clipShadow.visible = false;
                            }
                            switch (this.m_state) {
                                case Fallen.ST_SHAKE:
                                    if (this.mType == Fallen.FALL_TYPE_ROCK) {
                                        project.Global.app.playSound("snd_atb_scenario_falling_alert");
                                    }
                                    break;
                                case Fallen.ST_FALL:
                                    if (this.mType == Fallen.FALL_TYPE_ROCK) {
                                        project.Global.app.playSound("snd_atb_scenario_falling_fireballs");
                                    }
                                    break;
                            }
                        }
                        distanceConditional() {
                            if (this.mRange == 0) {
                                return true;
                            }
                            var dist = new Vector2D(this.x() - this.m_world.player().x(), this.y() - this.m_world.player().y());
                            return dist.length() <= this.mRange;
                        }
                        forceDestroy() {
                            project.Global.app.playSound("snd_atb_scenario_falling_destroy");
                            this.setPosition(this.mInitX, this.mInitY);
                            this.gotoState(Fallen.ST_BREAK);
                        }
                        dropItem() {
                            var lenght = this.m_world.kipuItemsData.length;
                            if (this.mBonusItem == "none" || lenght < 1) {
                                return;
                            }
                            if (lenght >= 1) {
                                var index = -1;
                                if (this.mBonusItem == "random") {
                                    index = Common.random(0, lenght - 1);
                                }
                                else {
                                    for (var i = 0; i < lenght; i++) {
                                        if (this.m_world.kipuItemsData[i].name == this.mBonusItem) {
                                            index = i;
                                            break;
                                        }
                                    }
                                }
                                if (index != -1) {
                                    if (!project.StatsMain.enableSpecial1 &&
                                        !project.StatsMain.enableSpecial2 &&
                                        !project.StatsMain.enableSpecial3 &&
                                        (this.m_world.kipuItemsData[index].name == "MPA" || this.m_world.kipuItemsData[index].name == "MPB")) {
                                        return;
                                    }
                                    var entityObjectExt = new BRW_EntityObjectExt(this.m_world.objectsCanvas(), this.m_x, this.m_y, this.m_world, this.m_world.kipuItemsData[index]);
                                    this.m_world.actorManager().add(entityObjectExt);
                                }
                            }
                        }
                        onStopShaking() {
                            project.Global.app.stopSound("snd_ng_rockrumble");
                            this.gotoState(Fallen.ST_FALL);
                            this.m_clip.mcBody.y = this.mInitBodyY - this.mDropHeight;
                        }
                        onStopFalling() {
                            this.gotoState(Fallen.ST_BREAK);
                        }
                        onEndAnimation(state) {
                            if (state == String(Fallen.ST_BREAK)) {
                                this.setAwaitingDelete(true);
                            }
                        }
                        updateShake(dt) {
                            this.mShakeTimer += dt;
                            if (this.mShakeTimer >= this.mTotalShakeTime) {
                                this.mShakeTimer = 0;
                                this.setPosition(this.mInitX, this.mInitY);
                                this.onStopShaking();
                            }
                            else {
                                switch (this.mStateShake) {
                                    case Fallen.SHAKE_TO_CENTER:
                                        this.setPosition(this.mInitX, this.mInitY);
                                        this.mStateShake = Fallen.SHAKE_TO_LEFT;
                                        break;
                                    case Fallen.SHAKE_TO_DOWN:
                                        this.setPosition(this.mInitX + 2, this.mInitY);
                                        this.mStateShake = Fallen.SHAKE_TO_CENTER;
                                        break;
                                    case Fallen.SHAKE_TO_LEFT:
                                        this.setPosition(this.mInitX - 2, this.mInitY);
                                        this.mStateShake = Fallen.SHAKE_TO_UP;
                                        break;
                                    case Fallen.SHAKE_TO_RIGHT:
                                        this.setPosition(this.mInitX + 2, this.mInitY);
                                        this.mStateShake = Fallen.SHAKE_TO_DOWN;
                                        break;
                                    case Fallen.SHAKE_TO_UP:
                                        this.setPosition(this.mInitX, this.mInitY - 2);
                                        this.mStateShake = Fallen.SHAKE_TO_RIGHT;
                                        break;
                                }
                            }
                        }
                        /*override*/ update(dt) {
                            this.m_character.setX(this.m_clip.x);
                            this.m_character.setY(this.m_clip.y);
                            this.m_character.update(dt);
                            if (this.m_clip.mcBody && this.m_clip.mcBody.mcBoundsAttack) {
                                this.updateBoundsAttack(this.m_clip.mcBody.mcBoundsAttack);
                                this.m_boundsAttack.x += this.m_clip.mcBody.x;
                                this.m_boundsAttack.y += this.m_clip.mcBody.y;
                            }
                            switch (this.m_state) {
                                case Fallen.ST_STAND_AIR:
                                    var startShaking = false;
                                    if (this.mStopId > 0) {
                                        if ((this.m_world.player().currentStop == this.mStopId) &&
                                            this.m_world.player().currentStopGroup == this.mStopGroup) {
                                            startShaking = true;
                                        }
                                    }
                                    else if (this.distanceConditional()) {
                                        startShaking = true;
                                    }
                                    if (startShaking) {
                                        if (this.mInitDelay > 0) {
                                            this.mTotalShakeTime = this.mInitDelay;
                                        }
                                        this.gotoState(Fallen.ST_SHAKE);
                                        this.m_clip.mcBody.y = this.mInitBodyY - this.mDropHeight;
                                        this.m_clip.alpha = 1;
                                        this.getShadowClip().alpha = 1;
                                    }
                                    break;
                                case Fallen.ST_SHAKE:
                                    this.updateShake(dt);
                                    break;
                                case Fallen.ST_FALL:
                                    if (this.m_clip.mcBody) {
                                        this.m_clip.mcBody.y += this.mSpeedFall * dt;
                                        if (this.boundsAttack() != null) {
                                            var actors = this.m_world.actorManager().actors;
                                            for (var k = actors.length - 1; k >= 0; --k) {
                                                if (actors[k].isIdle()) {
                                                    continue;
                                                }
                                                if (actors[k].isAwaitingDelete()) {
                                                    continue;
                                                }
                                                if ((actors[k].y() > this.y() + 36) || (actors[k].y() < this.y() - 36)) {
                                                    continue;
                                                }
                                                if ((actors[k] instanceof BaseEnemy) &&
                                                    actors[k].hitTestReceivedAttack(this)) {
                                                    if (actors[k] instanceof Gunter) {
                                                        actors[k].onHit(this.mDamage, this);
                                                    }
                                                    else {
                                                        actors[k].onKnock(this.mDamage, this);
                                                    }
                                                }
                                                if (actors[k] instanceof Breakable && !(actors[k] instanceof BigWorm) &&
                                                    actors[k].hitTestReceivedAttack(this)) {
                                                    actors[k].forceDestroy();
                                                }
                                            }
                                            if (this.mPlayerBrawler.hitTestReceivedAttack(this)) {
                                                this.mPlayerBrawler.onEnemyCollision(this, this.mDamage);
                                                this.forceDestroy();
                                            }
                                        }
                                        if ((this.m_state == Fallen.ST_FALL) && (this.m_clip.mcBody.y >= this.mInitBodyY)) {
                                            this.onStopFalling();
                                        }
                                        break;
                                    }
                                    break;
                            }
                            super.update(dt);
                        }
                    }
                    Fallen.FALL_TYPE_ROCK = 700;
                    Fallen.ST_STAND_AIR = 100;
                    Fallen.ST_BREAK = 101;
                    Fallen.ST_SHAKE = 102;
                    Fallen.ST_FALL = 103;
                    Fallen.SHAKE_TO_LEFT = 200;
                    Fallen.SHAKE_TO_UP = 201;
                    Fallen.SHAKE_TO_RIGHT = 202;
                    Fallen.SHAKE_TO_DOWN = 203;
                    Fallen.SHAKE_TO_CENTER = 204;
                    object.Fallen = Fallen;
                })(object = gameBrawler.object || (gameBrawler.object = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Fallen = com.bamtang.project.gameBrawler.object.Fallen;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var object;
                (function (object) {
                    var obj;
                    (function (obj) {
                        class Breakable extends object.Fallen {
                            constructor(canvas, world, x, y, npc, type = 0) {
                                super(canvas, world, x, y, npc, type);
                                this.defineInitState();
                                this.mHitTint = new TintInterval(this.m_canvas, 1, 1);
                                this.mHitTint.setColors(new TintColor(), new TintColor(4, 4, 4, 1));
                            }
                            setCollisionBlock(visible) {
                                this.setDynamicCollision(visible);
                            }
                            defineInitState() {
                                if ((this.mStopId > 0) || (this.mRange > 0)) {
                                    this.setDynamicCollision(false);
                                    this.gotoState(object.Fallen.ST_STAND_AIR);
                                }
                                else {
                                    if (this.m_clip.mcBody) {
                                        this.m_clip.mcBody.y = this.mInitBodyY;
                                    }
                                    this.gotoState(Breakable.ST_ON_FLOOR);
                                }
                            }
                            /*override*/ forceDestroy() {
                                super.forceDestroy();
                                this.setDynamicCollision(false);
                                this.m_world.game().onObjectDestroyed(this);
                            }
                            /*override*/ gotoState(state) {
                                this.mPrevState = this.m_state;
                                super.gotoState(state);
                                this.updateBounds();
                                this.updateBoundsAttack();
                                this.updateBoundsBody();
                            }
                            /*override*/ onStopShaking() {
                                if (this.mPrevState == Breakable.ST_ON_FLOOR) {
                                    this.gotoState(Breakable.ST_ON_FLOOR);
                                }
                                else {
                                    super.onStopShaking();
                                }
                            }
                            /*override*/ onStopFalling() {
                                this.gotoState(Breakable.ST_ON_FLOOR);
                                this.setDynamicCollision(true);
                            }
                            onHit(damage) {
                                if (this.m_state != Breakable.ST_ON_FLOOR) {
                                    return false;
                                }
                                this.mHealth -= damage;
                                if (this.mHealth <= 0) {
                                    this.mHealth = 0;
                                    this.forceDestroy();
                                }
                                else {
                                    this.gotoState(object.Fallen.ST_SHAKE);
                                    this.mTotalShakeTime = 300;
                                }
                                this.mHitTint.start(200, 100);
                                return true;
                            }
                            /*override*/ update(dt) {
                                if (this.m_clip.mcBody && this.m_clip.mcBody.mcBounds) {
                                    this.updateBoundsBody(this.m_clip.mcBody.mcBounds);
                                    this.m_boundsBody.x += this.m_clip.mcBody.x;
                                    this.m_boundsBody.y += this.m_clip.mcBody.y;
                                }
                                switch (this.m_state) {
                                    case Breakable.ST_ON_FLOOR:
                                        if (this.isInCamera(this.m_world.camera()) && this.hitTestReceivedAttack(this.mPlayerBrawler)) {
                                            this.onHit(this.mPlayerBrawler.getCurrentDamage());
                                        }
                                        break;
                                }
                                this.mHitTint.update(dt);
                                super.update(dt);
                            }
                        }
                        Breakable.ST_ON_FLOOR = 999;
                        obj.Breakable = Breakable;
                    })(obj = object.obj || (object.obj = {}));
                })(object = gameBrawler.object || (gameBrawler.object = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Breakable = com.bamtang.project.gameBrawler.object.obj.Breakable;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                class BRW_Player extends BRW_WorldActorExt {
                    constructor(canvas, world, x, y) {
                        super(canvas, world, x, y);
                        this.m_factorWalk = 1;
                        this.m_dashForce = 0;
                        this.m_speed2D = new Vector2D(0, 0);
                        this.m_isInvulnerable = false;
                        this.m_factorSpeedX = 1.0;
                        this.m_factorSpeedY = 1.0;
                        this.m_freeMovement = false;
                        this.m_debugCollisionOn = false;
                        this.m_debugVerticalMovement = 0;
                        this.m_debugHorizontalMovement = 0;
                        this.m_debugAcceleratedMovement = false;
                        this.m_isDead = false;
                        this.m_state = 0;
                        this.m_collision = null;
                        this.m_boundsProximity = new BRW_CollisionActorExt(this, "mcBoundsProximity");
                    }
                    /*override*/ free() {
                        if (this.m_control) {
                            this.m_control.free();
                            this.m_control = null;
                        }
                        this.m_corners = null;
                        super.free();
                    }
                    canGrabEnemey() {
                        return this.m_canGrabEnemy;
                    }
                    collision() {
                        return this.m_collision;
                    }
                    isInvulnerable() {
                        return this.m_isInvulnerable;
                    }
                    isDead() {
                        return this.m_isDead;
                    }
                    setIsDead(val) {
                        this.m_isDead = val;
                    }
                    state() {
                        return this.m_state;
                    }
                    enemyCatchRef() {
                        return this.m_enemyCatchRef;
                    }
                    boundsProximity() {
                        return this.m_boundsProximity;
                    }
                    character() {
                        return this.m_character;
                    }
                    factorSpeedX() {
                        return this.m_factorSpeedX;
                    }
                    setFactorSpeedX(val) {
                        this.m_factorSpeedX = val;
                    }
                    factorSpeedY() {
                        return this.m_factorSpeedY;
                    }
                    setFactorSpeedY(val) {
                        this.m_factorSpeedY = val;
                    }
                    /*override*/ gotoState(state) {
                        if ((state != this.m_state) && !this.m_isDead) {
                            this.m_character.gotoState(String(state));
                            switch (state) {
                                case BRW_Player.ST_PLAYER_JUMP_DOWN:
                                    this.m_character.loop = false;
                                    break;
                                case BRW_Player.ST_PLAYER_ATTACK_DASH:
                                    this.m_character.loop = false;
                                    break;
                                case BRW_Player.ST_PLAYER_LOSE:
                                    this.m_isDead = true;
                                    break;
                            }
                            if (this.m_control.isInAction()) {
                                this.m_control.onAction(false);
                            }
                            this.m_clip = this.m_character.actor().clip();
                            if (this.m_scaleX == this.m_scaleY) {
                                this.m_clip.scale.x = this.m_flipX ? -this.m_scale : this.m_scale;
                                this.m_clip.scale.y = this.m_scale;
                            }
                            else {
                                this.m_clip.scale.x = this.m_flipX ? -this.m_scaleX : this.m_scaleX;
                                this.m_clip.scale.y = this.m_scaleY;
                            }
                            this.m_state = state;
                            if (this.m_clip.mcCollision) {
                                this.m_clip.mcCollision.visible = this.m_collisionVisible;
                                this.m_clip.mcCollision.visible = Global.COLLISION_DEBUG;
                            }
                            this.m_boundsProximity.update();
                            this.updateBoundsBody();
                            this.createCorners();
                        }
                    }
                    respawnPlayer() {
                    }
                    onEnemyCollision(enemy, damage, fall = false) {
                    }
                    onPlayerFellOutOfWorld() {
                    }
                    onTargetReached() {
                    }
                    onSpringCollision(initSpeed) {
                        this.m_control.onCustomJump(initSpeed);
                    }
                    onEndAnimation(state) {
                        if (state == String(BRW_Player.ST_PLAYER_JUMP_UP)) {
                            this.gotoState(BRW_Player.ST_PLAYER_JUMP_DOWN);
                        }
                        else if (state == String(BRW_Player.ST_PLAYER_LAND)) {
                            this.gotoState(BRW_Player.ST_PLAYER_STAND);
                        }
                        else if (state == String(BRW_Player.ST_PLAYER_STAND)) {
                            var rand = Math.random();
                            if (rand < 0.1) {
                                this.gotoState(BRW_Player.ST_PLAYER_STAND_2);
                            }
                        }
                        else if (state == String(BRW_Player.ST_PLAYER_STAND_2)) {
                            this.gotoState(BRW_Player.ST_PLAYER_STAND);
                        }
                    }
                    onDebugKeyDown(keyCode) {
                    }
                    onKeyDown(keyCode) {
                    }
                    onDebugKeyUp(keyCode) {
                    }
                    onKeyUp(keyCode) {
                    }
                    /*override*/ update(dt) {
                    }
                    /*override*/ applyImpulse(fx, fy) {
                        if (this.m_isDead) {
                            return;
                        }
                        super.applyImpulse(fx, fy);
                    }
                    /*override*/ integrateVerlet(dt) {
                        var oldX = this.m_oldX;
                        var oldY = this.m_oldY;
                        this.m_oldX = this.m_x;
                        this.m_oldY = this.m_y;
                        var incX = this.m_x - oldX;
                        if (incX < -this.m_control.maxVerletHorizontalDisplace) {
                            incX = -this.m_control.maxVerletHorizontalDisplace;
                        }
                        else if (incX > this.m_control.maxVerletHorizontalDisplace) {
                            incX = this.m_control.maxVerletHorizontalDisplace;
                        }
                        this.m_x += incX;
                        if (!this.m_control.isJumpingUp()) {
                            var incY = this.m_y - oldY + this.m_control.gravity * dt * dt;
                            if (incY < -this.m_control.maxVerletUpDisplace) {
                                incY = -this.m_control.maxVerletUpDisplace;
                            }
                            else if (incY > this.m_control.maxVerletDownDisplace) {
                                incY = this.m_control.maxVerletDownDisplace;
                            }
                            this.m_y += incY;
                        }
                    }
                    resetControl() {
                        if (this.m_control) {
                            this.m_control.reset();
                        }
                    }
                    onAttack(superHit = false) {
                        if (this.m_freeMovement)
                            return;
                        if (this.m_state == BRW_Player.ST_PLAYER_WIN || this.m_state == BRW_Player.ST_PLAYER_LOSE)
                            return;
                        if (this.m_control.isInAction())
                            return;
                        if (this.m_control.isInDashAttack())
                            return;
                        if (this.m_control.isJumping()) {
                            this.gotoState(BRW_Player.ST_PLAYER_ATTACK_JUMP);
                            this.m_control.onAction(true);
                        }
                        else if (!this.m_control.isJumping() && this.m_control.isRunning() && this.m_control.canAttackDash) {
                            this.gotoState(BRW_Player.ST_PLAYER_ATTACK_DASH);
                            this.m_dashForce = this.m_control.forceX() * this.m_control.initFactorSpeedAttackDash;
                            this.m_control.onDashMove(false);
                            this.m_control.onDashAttack(true);
                        }
                        else {
                            this.gotoState(BRW_Player.ST_PLAYER_ATTACK);
                            this.m_control.onAction(true);
                        }
                    }
                    hitTestProximity(actor) {
                        if (!this.checkCollisionDepth(actor)) {
                            return false;
                        }
                        if (this.m_boundsProximity && actor.boundsBody()) {
                            var ra = new PIXI.Rectangle(actor.boundsBody().x + actor.x(), actor.boundsBody().y + actor.y(), actor.boundsBody().width, actor.boundsBody().height);
                            return this.m_boundsProximity.hitTestRectangleActor(ra);
                        }
                        return false;
                    }
                    toString() {
                        return ("Player x:" + this.m_x + " y:" + this.m_y + " state:" + this.getStateString());
                    }
                    getStateString() {
                        if (this.m_state == BRW_Player.ST_PLAYER_STAND) {
                            return "ST_PLAYER_STAND";
                        }
                        if (this.m_state == BRW_Player.ST_PLAYER_STAND_2) {
                            return "ST_PLAYER_STAND_2";
                        }
                        if (this.m_state == BRW_Player.ST_PLAYER_WALK) {
                            return "ST_PLAYER_WALK";
                        }
                        if (this.m_state == BRW_Player.ST_PLAYER_RUN) {
                            return "ST_PLAYER_RUN";
                        }
                        if (this.m_state == BRW_Player.ST_PLAYER_JUMP_UP) {
                            return "ST_PLAYER_JUMP_UP";
                        }
                        if (this.m_state == BRW_Player.ST_PLAYER_JUMP_DOWN) {
                            return "ST_PLAYER_JUMP_DOWN";
                        }
                        if (this.m_state == BRW_Player.ST_PLAYER_HIT) {
                            return "ST_PLAYER_HIT";
                        }
                        if (this.m_state == BRW_Player.ST_PLAYER_LOSE) {
                            return "ST_PLAYER_LOSE";
                        }
                        if (this.m_state == BRW_Player.ST_PLAYER_WIN) {
                            return "ST_PLAYER_WIN";
                        }
                        if (this.m_state == BRW_Player.ST_PLAYER_LAND) {
                            return "ST_PLAYER_LAND";
                        }
                        if (this.m_state == BRW_Player.ST_PLAYER_BRAKE) {
                            return "ST_PLAYER_BRAKE";
                        }
                        if (this.m_state == BRW_Player.ST_PLAYER_ATTACK) {
                            return "ST_PLAYER_ATTACK";
                        }
                        if (this.m_state == BRW_Player.ST_PLAYER_ATTACK_JUMP) {
                            return "ST_PLAYER_ATTACK_JUMP";
                        }
                        if (this.m_state == BRW_Player.ST_PLAYER_ATTACK_DASH) {
                            return "ST_PLAYER_ATTACK_DASH";
                        }
                        if (this.m_state == BRW_Player.ST_PLAYER_THROW_ENEMY) {
                            return "ST_PLAYER_THROW_ENEMY";
                        }
                        return String(this.m_state);
                    }
                    onCatchEnemy(actor) {
                        this.m_enemyCatchRef = actor;
                        if (actor == null) {
                            this.setClipsDropEnemy();
                            this.m_factorWalk = BRW_Player.FACTOR_WALL_ALONE;
                        }
                        else {
                            this.setClipsCatchEnemy();
                            this.m_factorWalk = BRW_Player.FACTOR_WALL_WITH_ENEMY;
                            this.gotoState(BRW_Player.ST_PLAYER_STAND);
                        }
                    }
                    setClipsCatchEnemy() {
                    }
                    setClipsDropEnemy() {
                    }
                }
                BRW_Player.ST_PLAYER_STAND = 100;
                BRW_Player.ST_PLAYER_STAND_2 = 101;
                BRW_Player.ST_PLAYER_WALK = 103;
                BRW_Player.ST_PLAYER_RUN = 104;
                BRW_Player.ST_PLAYER_JUMP_UP = 105;
                BRW_Player.ST_PLAYER_JUMP_DOWN = 106;
                BRW_Player.ST_PLAYER_HIT = 107;
                BRW_Player.ST_PLAYER_LOSE = 108;
                BRW_Player.ST_PLAYER_WIN = 109;
                BRW_Player.ST_PLAYER_LAND = 110;
                BRW_Player.ST_PLAYER_BRAKE = 111;
                BRW_Player.ST_PLAYER_ATTACK = 112;
                BRW_Player.ST_PLAYER_ATTACK_JUMP = 113;
                BRW_Player.ST_PLAYER_ATTACK_DASH = 114;
                BRW_Player.ST_PLAYER_THROW_ENEMY = 115;
                BRW_Player.FACTOR_WALL_ALONE = 1;
                BRW_Player.FACTOR_WALL_WITH_ENEMY = 0.5;
                brawler.BRW_Player = BRW_Player;
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_Player = com.bamtang.soul.brawler.BRW_Player;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                class ScreenManager {
                    constructor(canvas) {
                        this.m_canvas = canvas;
                        var xml = core.Application.instance.getXMLData("screens");
                        xml = xml2js(xml, { compact: true, spaces: 4 });
                        xml = xml.xmlData;
                        for (var xd in xml.gui) {
                            for (var xd1 in xml.gui[xd]) {
                                if (xml.gui[xd][xd1].clip != undefined) {
                                    for (var xd2 in xml.gui[xd][xd1]) {
                                        xml.gui[xd][xd2] = xml.gui[xd][xd1][xd2];
                                    }
                                }
                                delete xml.gui[xd]["_attributes"];
                            }
                            if (xml.gui[xd].item != undefined && xml.gui[xd].item.length > 1) {
                                for (var xd3 in xml.gui[xd].item) {
                                    xml.gui[xd].item[xd3] = xml.gui[xd].item[xd3]._attributes;
                                }
                            }
                        }
                        var ids;
                        for (var screen in xml.gui) {
                            ids = xml.gui[screen].id;
                            if (core.ScreenMain.dataScreens[ids] == null) {
                                core.ScreenMain.dataScreens[ids] = xml.gui[screen];
                            }
                            else {
                                core.Application.error("Duplicate screen data [" + ids + "]");
                            }
                        }
                    }
                    free() {
                        if (this.m_currentScreen != null) {
                            this.m_currentScreen.free();
                        }
                        this.m_canvas = null;
                        this.m_currentScreen = null;
                    }
                    get currentScreen() {
                        return this.m_currentScreen;
                    }
                    get lastScreenId() {
                        return this.m_lastIdScreen;
                    }
                    gotoScreen(idScreen, params = null) {
                        if (this.m_currentScreen != null) {
                            this.m_currentScreen.free();
                        }
                        this.m_currentScreen = null;
                        core.Application.log("GO TO SCREEN :: " + idScreen);
                    }
                    update(dt) {
                        if (this.m_currentScreen != null) {
                            this.m_currentScreen.update(dt);
                        }
                    }
                    onKeyDown(keyCode) {
                        if (this.m_currentScreen != null) {
                            this.m_currentScreen.onKeyDown(keyCode);
                        }
                    }
                    onKeyUp(keyCode) {
                        if (this.m_currentScreen != null) {
                            this.m_currentScreen.onKeyUp(keyCode);
                        }
                    }
                    onActivate(activate) {
                        if (this.m_currentScreen != null) {
                            this.m_currentScreen.onActivate(activate);
                        }
                    }
                    onMouseDown(e) {
                        if (this.m_currentScreen != null) {
                            this.m_currentScreen.onMouseDown(e);
                        }
                    }
                    onMouseUp(e) {
                        if (this.m_currentScreen != null) {
                            this.m_currentScreen.onMouseUp(e);
                        }
                    }
                    onMouseMove(e) {
                        if (this.m_currentScreen != null) {
                            this.m_currentScreen.onMouseMove(e);
                        }
                    }
                }
                core.ScreenManager = ScreenManager;
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var ScreenManager = com.bamtang.soul.core.ScreenManager;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var core;
                (function (core) {
                    class ScreenGame extends core.ScreenExt {
                        constructor(idGuiData = "", x = 0, y = 0, app = null) {
                            super(idGuiData, x, y, app);
                            this.m_canvasGame = new PIXI.Container();
                            this.m_canvasEffects = new PIXI.Container();
                            this.m_canvasHud = new PIXI.Container();
                            this.m_clip.addChild(this.m_canvasGame);
                            this.m_clip.addChild(this.m_canvasEffects);
                            this.m_clip.addChild(this.m_canvasHud);
                        }
                        /*override*/ free() {
                            project.Global.game = null;
                            if (this.m_game != null) {
                                this.m_game.free();
                                this.m_game = null;
                            }
                            super.free();
                        }
                        canvasEffects() {
                            return this.m_canvasEffects;
                        }
                        canvasGame() {
                            return this.m_canvasGame;
                        }
                        canvasHud() {
                            return this.m_canvasGame;
                        }
                        game() {
                            return this.m_game;
                        }
                        /*override*/ init() {
                            this.m_clip = new MovieClip();
                        }
                        /*override*/ update(dt) {
                            if (this.m_game != null) {
                                if (this.m_popup == null) {
                                    this.m_game.update(dt);
                                }
                            }
                            if (this.m_popup != null) {
                                this.m_popup.update(dt);
                            }
                            if (this.m_transition != null) {
                                if (this.m_transition.isAwaitingDelete) {
                                    this.m_transition.free();
                                    this.m_transition = null;
                                }
                                else {
                                    this.m_transition.update(dt);
                                }
                            }
                        }
                        /*override*/ onKeyDown(keyCode) {
                            super.onKeyDown(keyCode);
                            if (this.m_game != null) {
                                if (this.m_popup == null) {
                                    this.m_game.onKeyDown(keyCode);
                                }
                            }
                        }
                        /*override*/ onKeyUp(keyCode) {
                            super.onKeyUp(keyCode);
                            if (this.m_game != null) {
                                if (this.m_popup == null) {
                                    this.m_game.onKeyUp(keyCode);
                                }
                            }
                        }
                        /*override*/ onMouseUp(e) {
                            super.onMouseUp(e);
                            if (this.m_game != null) {
                                if (this.m_popup == null) {
                                    this.m_game.onMouseUp(e);
                                }
                            }
                        }
                        /*override*/ onMouseDown(e) {
                            super.onMouseDown(e);
                            if (this.m_game != null) {
                                if (this.m_popup == null) {
                                    this.m_game.onMouseDown(e);
                                }
                            }
                        }
                        /*override*/ onMouseMove(e) {
                            super.onMouseMove(e);
                            if (this.m_game != null) {
                                if (this.m_popup == null) {
                                    this.m_game.onMouseMove(e);
                                }
                            }
                        }
                        /*override*/ onActivate(activate) {
                            if (this.m_game != null) {
                                this.m_game.onActivate(activate);
                            }
                        }
                    }
                    core.ScreenGame = ScreenGame;
                })(core = soulExtends.core || (soulExtends.core = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var ScreenGame = com.bamtang.project.soulExtends.core.ScreenGame;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                class PopupQueue {
                    constructor(canvas) {
                        this.m_canvas = canvas;
                        this.m_queue = new Array();
                    }
                    free() {
                        if (this.m_fx != null) {
                            this.m_fx.free();
                        }
                        this.m_fx = null;
                        this.m_canvas = null;
                        this.m_queue = null;
                    }
                    addQueue(idGuiData, callback = null, params = null, canvas = null) {
                        var data = new DataQueue();
                        data.idGuiData = idGuiData;
                        data.callback = callback;
                        data.canvas = canvas;
                        data.params = params;
                        this.m_queue.push(data);
                        if (this.m_queue.length == 1) {
                            this.nextQueue(this.m_queue[0]);
                        }
                    }
                    update(dt) {
                        if (this.m_fx != null) {
                            this.m_fx.update(dt);
                            if (this.m_fx.isAwaitingDelete) {
                                this.m_fx.free();
                                this.m_fx = null;
                                if (this.m_queue.length > 0) {
                                    this.nextQueue(this.m_queue[0]);
                                }
                            }
                        }
                    }
                    onCreatePopup(fx) {
                    }
                    onDestroyPopup(fx) {
                    }
                    onKeyDown(keyCode) {
                        if (keyCode == core.Application.KEY_SPACE && this.m_fx != null) {
                            this.m_fx.forward();
                        }
                    }
                    nextQueue(data) {
                        this.m_fx = new EffectGuiExt(data.idGuiData, (data.canvas == null) ? this.m_canvas : data.canvas);
                        this.m_fx.params = data.params;
                        this.m_fx.callback = data.callback.bind(this);
                        this.m_fx.onEndAnimation = this.onEndAnimation.bind(this);
                        data.effect = this.m_fx;
                        this.onCreatePopup(this.m_fx);
                    }
                    onEndAnimation(fx) {
                        var last = this.m_queue.shift();
                        if (last.callback != null) {
                            try {
                                last.callback(last.effect);
                            }
                            catch (e) {
                                last.callback();
                            }
                        }
                        this.onDestroyPopup(last.effect);
                    }
                }
                core.PopupQueue = PopupQueue;
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var PopupQueue = com.bamtang.soul.core.PopupQueue;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var core;
                (function (core) {
                    class PopupQueueExt extends PopupQueue {
                        constructor(canvas) {
                            super(canvas);
                        }
                    }
                    core.PopupQueueExt = PopupQueueExt;
                })(core = soulExtends.core || (soulExtends.core = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var PopupQueueExt = com.bamtang.project.soulExtends.core.PopupQueueExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var gui;
            (function (gui) {
                class Control {
                    constructor(canvas) {
                        this.m_canvas = canvas;
                        this.m_clip = new MovieClip();
                        this.m_enabled = true;
                        this.m_canvas.addChild(this.m_clip);
                    }
                    free() {
                        if (this.m_child != null) {
                            this.m_child.off(soul.CustomMouseEvent.CLICK, this._onClick.bind(this));
                            this.m_child.off(soul.CustomMouseEvent.MOUSE_DOWN, this._onMouseOut.bind(this));
                            this.m_child.off(soul.CustomMouseEvent.MOUSE_OUT, this._onMouseOut.bind(this));
                            this.m_child.off(soul.CustomMouseEvent.MOUSE_OVER, this._onMouseOver.bind(this));
                        }
                        if (this.m_clip != null && this.m_child != null) {
                            this.m_clip.removeChild(this.m_child);
                            try {
                                this.m_child.destroy();
                            }
                            catch (e) { }
                        }
                        if (this.m_canvas != null && this.m_clip != null) {
                            this.m_canvas.removeChild(this.m_clip);
                            try {
                                this.m_clip.destroy();
                            }
                            catch (e) { }
                        }
                        this.m_canvas = null;
                        this.m_clip = null;
                        this.m_child = null;
                    }
                    get clip() {
                        return this.m_clip;
                    }
                    get child() {
                        return this.m_child;
                    }
                    get canvas() {
                        return this.m_canvas;
                    }
                    get state() {
                        return this.m_state;
                    }
                    get enabled() {
                        return this.m_enabled;
                    }
                    set enabled(value) {
                        this.m_enabled = value;
                    }
                    get visible() {
                        return this.m_clip.visible;
                    }
                    get alpha() {
                        return this.m_clip.alpha;
                    }
                    get rotation() {
                        return this.m_clip.rotation;
                    }
                    get scaleX() {
                        return this.m_clip.scale.x;
                    }
                    get scaleY() {
                        return this.m_clip.scale.y;
                    }
                    get ox() {
                        return this.m_clip.x;
                    }
                    get oy() {
                        return this.m_clip.y;
                    }
                    set visible(val) {
                        this.m_clip.visible = val;
                    }
                    set alpha(value) {
                        this.m_clip.alpha = value;
                    }
                    set rotation(value) {
                        this.m_clip.rotation = value;
                    }
                    set scaleX(value) {
                        this.m_clip.scale.x = value;
                    }
                    set scaleY(value) {
                        this.m_clip.scale.y = value;
                    }
                    set ox(value) {
                        this.m_clip.x = (value);
                    }
                    set oy(value) {
                        this.m_clip.y = (value);
                    }
                    gotoState(state) {
                        this.m_state = state;
                    }
                    changeChild(idChild) {
                        if (this.m_child != null) {
                            this.m_clip.removeChild(this.m_child);
                            try {
                                this.m_child.destroy();
                            }
                            catch (e) { }
                        }
                        var fl = true;
                        if (this.type == Control.TYPE_BUTTON || this.type == Control.TYPE_ON_OFF || this.type == Control.TYPE_4STATES || idChild.indexOf("gui_buttons_level") > -1) {
                            fl = false;
                        }
                        this.m_child = Application.instance.getClip(idChild, fl);
                        this.m_child = this.child;
                        this.m_clip.addChild(this.m_child);
                    }
                    _onClick(e) {
                        if (this.onClick != null) {
                            this.onClick(this);
                        }
                    }
                    _onMouseOut(e) {
                        if (this.onMouseOut != null) {
                            this.onMouseOut(this);
                        }
                    }
                    _onMouseOver(e) {
                        if (this.onMouseOver != null) {
                            this.onMouseOver(this);
                        }
                    }
                    _onMouseDown(e) {
                        if (this.onMouseDown != null) {
                            this.onMouseDown(this);
                        }
                    }
                    _onMouseUp(e) {
                        if (this.onMouseUp != null) {
                            this.onMouseUp(this);
                        }
                    }
                    addEditingEvents() {
                        this.m_clip.on(soul.CustomMouseEvent.CLICK, this._onClick.bind(this));
                        this.m_clip.on(soul.CustomMouseEvent.MOUSE_DOWN, this._onMouseDown.bind(this));
                        this.m_clip.on(soul.CustomMouseEvent.MOUSE_UP, this._onMouseUp.bind(this));
                    }
                }
                Control.TYPE_CLIP = "clip";
                Control.TYPE_BUTTON = "button";
                Control.TYPE_TEXT = "text";
                Control.TYPE_4STATES = "4States";
                Control.TYPE_TIMER = "timer";
                Control.TYPE_ON_OFF = "on_off";
                Control.TYPE_CLIP_MOUSE = "clipMouse";
                Control.TYPE_CLIP_EXTERNAL = "clipExt";
                Control.TYPE_PROGRESS = "progress";
                Control.TYPE_PANEL = "panel";
                Control.TYPE_TILE_BUTTON = "tile_button";
                Control.ST_ENABLE = 1;
                Control.ST_DISABLE = 2;
                Control.ST_SELECTED = 3;
                Control.ST_COMMING_SOON = 4;
                gui.Control = Control;
            })(gui = soul.gui || (soul.gui = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Control = com.bamtang.soul.gui.Control;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var gui;
            (function (gui) {
                class GuiClip extends gui.Control {
                    constructor(canvas, link = "") {
                        super(canvas);
                        this.changeClip(link);
                    }
                    get clipName() {
                        return this.m_clipName;
                    }
                    /*override*/ get clip() {
                        return this.m_child;
                    }
                    /*override*/ set enabled(value) {
                        this.m_enabled = value;
                        if (!this.m_enabled) {
                            this.removeListeners(this.m_child);
                            //this.m_clip.mouseChildren = false;
                            //this.m_clip.mouseEnabled = false;
                            //(this.m_child as MovieClip).mouseChildren = false;
                        }
                    }
                    changeClip(clipName) {
                        this.m_clipName = clipName;
                        this.changeChild(this.m_clipName);
                        if (this.m_child == null)
                            return;
                        if (this.m_enabled) {
                            if (this.onClick != null) {
                                this.m_child.on(soul.CustomMouseEvent.CLICK, this._onClick.bind(this));
                            }
                        }
                        this.activeListeners(this.m_child);
                    }
                    activeListeners(object) {
                        if (this.m_enabled) {
                            if (this.onMouseOut != null) {
                                //object.on(CustomMouseEvent.MOUSE_OUT, this._onMouseOut.bind(this));
                            }
                            if (this.onMouseOver != null) {
                                //object.on(CustomMouseEvent.MOUSE_OVER, this._onMouseOver.bind(this));
                            }
                        }
                    }
                    removeListeners(object) {
                        if (object != null) {
                            object.off(soul.CustomMouseEvent.CLICK, this._onClick.bind(this));
                            object.off(soul.CustomMouseEvent.MOUSE_DOWN, this._onMouseOut.bind(this));
                            object.off(soul.CustomMouseEvent.MOUSE_OUT, this._onMouseOut.bind(this));
                            object.off(soul.CustomMouseEvent.MOUSE_OVER, this._onMouseOver.bind(this));
                        }
                    }
                }
                gui.GuiClip = GuiClip;
            })(gui = soul.gui || (soul.gui = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiClip = com.bamtang.soul.gui.GuiClip;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                var kipu;
                (function (kipu) {
                    class ActorClip {
                        constructor(nameClip, x = 0, y = 0, app = null) {
                            this.m_app = (app == null) ? core.Application.instance : app;
                            if (nameClip == "") {
                                this.m_clip = new MovieClip();
                            }
                            else {
                                var tmpclip = this.m_app.getClip(nameClip, true, true);
                                this.m_clip = tmpclip[1];
                                this.m_clip.name = nameClip;
                                this.m_clip.gaf = tmpclip[0];
                                var clps = ["mc_fx_hit", "mcGuiTransitionFadein", "mcGuiTransitionFadeout", "cannon"];
                                if (clps.indexOf(nameClip) > -1) {
                                    this.m_clip.scale.x *= Global.WORLD_SCALE;
                                    this.m_clip.scale.y *= Global.WORLD_SCALE;
                                }
                            }
                            this.m_x = this.m_clip.x = this.m_clip.custom_x = (x);
                            this.m_y = this.m_clip.y = this.m_clip.custom_y = (y);
                            this.m_currentFrame = 0;
                            this.m_totalFrames = this.m_clip.totalFrames;
                            this.m_frameTime = -1;
                            this.m_totalDeltaTime = 0;
                            this.loop = true;
                        }
                        free() {
                            this.m_app = null;
                            try {
                                this.m_clip.stop();
                            }
                            catch (e) { }
                            try {
                                this.m_clip.parent.removeChild(this.m_clip);
                            }
                            catch (e) { }
                            try {
                                this.m_clip.destroy();
                            }
                            catch (e) { }
                            this.m_clip = null;
                        }
                        x() {
                            return this.m_x;
                        }
                        setX(value) {
                            this.m_x = value;
                            if (this.m_clip != null) {
                                this.m_clip.x = this.m_clip.custom_x = (this.m_x);
                            }
                        }
                        y() {
                            return this.m_y;
                        }
                        setY(value) {
                            this.m_y = value;
                            if (this.m_clip != null) {
                                this.m_clip.y = this.m_clip.custom_y = (this.m_y);
                            }
                        }
                        clip() {
                            return this.m_clip;
                        }
                        setClip(value) {
                            this.m_clip = value;
                            this.m_currentFrame = 0;
                            this.m_totalFrames = this.m_clip.totalFrames;
                            this.m_clip.x = this.m_clip.custom_x = (this.m_x);
                            this.m_clip.y = this.m_clip.custom_y = (this.m_y);
                        }
                        set frameTime(val) {
                            this.m_frameTime = val;
                        }
                        set useHandCursor(value) {
                            //this.m_useHandCursor = value;
                            //this.m_clip.buttonMode = value;
                            //this.m_clip.useHandCursor = value;
                        }
                        get useHandCursor() {
                            return this.m_useHandCursor;
                        }
                        currentFrame() {
                            return this.m_currentFrame;
                        }
                        setFrame(frame) {
                            this.m_currentFrame = frame;
                            if (this.m_currentFrame > this.m_totalFrames) {
                                this.m_currentFrame = this.m_totalFrames;
                            }
                        }
                        update(dt) {
                            if (this.m_frameTime < 0) {
                                this.m_currentFrame++;
                            }
                            else {
                                this.m_totalDeltaTime += dt;
                                if (this.m_totalDeltaTime >= this.m_frameTime) {
                                    this.m_totalDeltaTime = 0;
                                    this.m_currentFrame++;
                                }
                            }
                            if (this.m_clip != null) {
                                this.m_clip.gotoAndStop(this.m_currentFrame);
                            }
                            if (this.m_currentFrame >= this.m_totalFrames && this.loop) {
                                this.m_currentFrame = 0;
                            }
                        }
                        onKeyDown(keyCode) {
                        }
                        onKeyUp(keyCode) {
                        }
                    }
                    kipu.ActorClip = ActorClip;
                })(kipu = core.kipu || (core.kipu = {}));
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var ActorClip = com.bamtang.soul.core.kipu.ActorClip;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                class Application {
                    constructor(canvas, path = "") {
                        this.m_muteFx = false;
                        this.m_muteBg = false;
                        Application.instance = this;
                        this.m_forcePathBase = path;
                        this.m_canvas = canvas;
                        this.init();
                    }
                    free() {
                        Application.instance = null;
                        Application.xmlConfig = null;
                        this.m_texts = null;
                        this.m_xmlNodeTexts = null;
                        this.m_soundManager.free();
                        this.m_soundManager = null;
                        this.m_guiManager.free();
                        this.m_guiManager = null;
                        this.m_storage = null;
                    }
                    set guiManager(val) {
                        this.m_guiManager = val;
                    }
                    get muteFx() {
                        return this.m_muteFx;
                    }
                    get muteBg() {
                        return this.m_muteBg;
                    }
                    get name() {
                        return this.m_appName;
                    }
                    get storage() {
                        return this.m_storage;
                    }
                    get guiManager() {
                        return this.m_guiManager;
                    }
                    get canvasApp() {
                        return this.m_canvasApp;
                    }
                    get canvasTop() {
                        return this.m_canvasTop;
                    }
                    set muteFx(value) {
                        if (value) {
                            this.stopSoundsFxs();
                        }
                        this.m_muteFx = value;
                    }
                    set muteBg(value) {
                        if (value) {
                            this.stopSoundsBgs();
                        }
                        this.m_muteBg = value;
                    }
                    setStringXML(textsXML) {
                        for (var txt in textsXML.text) {
                            this.m_texts[textsXML.text[txt].id] = String(Common.replaceIn(textsXML.text[txt].cdata, "\\n", "\n").concat());
                            this.m_xmlNodeTexts[textsXML.text[txt].id] = textsXML.text[txt].cdata;
                        }
                    }
                    update(dt) {
                        if (this.m_guiManager != null) {
                            this.m_guiManager.update(Math.floor(dt));
                        }
                    }
                    getXMLData(id) {
                        try {
                            if (id == "brw_dataGeneral_1_hard")
                                id = "gamesData/gameBrawler/level01_hard/general";
                            if (id == "brw_dataWorld_1_hard")
                                id = "gamesData/gameBrawler/level01_hard/brw_lvl01";
                            if (id == "brw_dataGeneral_2_hard")
                                id = "gamesData/gameBrawler/level02_hard/general";
                            if (id == "brw_dataWorld_2_hard")
                                id = "gamesData/gameBrawler/level02_hard/brw_lvl02";
                            if (id == "brw_dataGeneral_3_hard")
                                id = "gamesData/gameBrawler/level03_hard/general";
                            if (id == "brw_dataWorld_3_hard")
                                id = "gamesData/gameBrawler/level03_hard/brw_lvl03";
                            if (id == "brw_dataGeneral_1")
                                id = "gamesData/gameBrawler/level01/general";
                            if (id == "brw_dataWorld_1")
                                id = "gamesData/gameBrawler/level01/brw_lvl01";
                            if (id == "brw_dataGeneral_2")
                                id = "gamesData/gameBrawler/level02/general";
                            if (id == "brw_dataWorld_2")
                                id = "gamesData/gameBrawler/level02/brw_lvl02";
                            if (id == "brw_dataGeneral_3")
                                id = "gamesData/gameBrawler/level03/general";
                            if (id == "brw_dataWorld_3")
                                id = "gamesData/gameBrawler/level03/brw_lvl03";
                            if (id == "dtBoss")
                                id = "bossData/dtBoss";
                            if (id == "dtBoss2")
                                id = "bossData/dtBoss2";
                            return bamtang.Main.loader.resources[Global.URL_PATH_BASE + id + ".xml"].xhr.response;
                        }
                        catch (e) {
                            Application.error("getXMLData [" + id + "] no found", this);
                        }
                        return null;
                    }
                    getClip(id, play = true, retGaf = false) {
                        if (id == undefined)
                            return null;
                        if (retGaf)
                            return bamtang.Main.addGAFMovieClip(Application.CLIPS_PACKAGE + "." + id, play, true, true);
                        return bamtang.Main.addGAFMovieClip(Application.CLIPS_PACKAGE + "." + id, play, true);
                    }
                    getButton(id) {
                        var button = this.getClip(id, false);
                        if (button == null) {
                            Application.error("getButton [" + id + "] no found", this);
                        }
                        return button;
                    }
                    getText(id) {
                        return this.m_texts[id];
                    }
                    localizeTextField(textfield, textId, addText = "") {
                        return Localizer.localizeTextField(textfield, this.m_xmlNodeTexts[textId], addText, textId);
                    }
                    playSound(id, loops = 1) {
                        if (bamtang.Main.getSoundDataPos(id) == -1) {
                            Application.error("Sound ::  " + id + " :: no registered in 'sounds.xml'", this);
                            return;
                        }
                        if (bamtang.Main.allSounds[bamtang.Main.getSoundDataPos(id)].bg == 0) {
                            if (this.m_muteFx)
                                return;
                            this.m_soundManager.playSound(id, Number(bamtang.Main.allSounds[bamtang.Main.getSoundDataPos(id)].vol));
                        }
                        else {
                            if (this.m_muteBg)
                                return;
                            this.m_soundManager.playLoop(id, Number(bamtang.Main.allSounds[bamtang.Main.getSoundDataPos(id)].vol));
                        }
                    }
                    stopSound(id) {
                        this.m_soundManager.stopSound(id);
                    }
                    stopAllSound() {
                        this.stopSoundsFxs();
                        this.stopSoundsBgs();
                    }
                    stopSoundsFxs() {
                        for (var snd in bamtang.Main.allSounds) {
                            if (bamtang.Main.allSounds[snd].bg == 0) {
                                this.m_soundManager.stopSound(bamtang.Main.allSounds[snd].id);
                            }
                        }
                    }
                    stopSoundsBgs() {
                        for (var snd in bamtang.Main.allSounds) {
                            if (bamtang.Main.allSounds[snd].bg == 1) {
                                this.m_soundManager.stopSound(bamtang.Main.allSounds[snd].id);
                            }
                        }
                    }
                    setMasterVolume(vol) {
                        this.m_soundManager.setMasterVolume(vol);
                    }
                    changeSoundVolume(idSound, volume) {
                        bamtang.Main.allSounds[bamtang.Main.getSoundDataPos(idSound)].vol = volume;
                        //this.m_dataSounds[idSound].vol = volume;
                    }
                    static echo(message, caller = "") {
                        //console.log(caller + " >> " + message);
                    }
                    static log(message, caller = "") {
                        if (Application.useLog) {
                            //console.log("LOG::" + caller + ">> " + message);
                        }
                    }
                    static warn(message, caller = "") {
                        //console.log("WARN::" + caller + ">> " + message);
                    }
                    static error(message, caller = "") {
                        //console.log("ERROR::" + caller + ">> " + message);
                    }
                    init() {
                        bamtang.Main.renderer = PIXI.autoDetectRenderer(bamtang.Main.globalWidth, bamtang.Main.globalHeight, { antialias: false, transparent: false });
                        document.body.appendChild(bamtang.Main.renderer.view);
                        bamtang.Main.stage = new PIXI.Container();
                        bamtang.Main.onResize();
                        Application.APP_HEIGHT = bamtang.Main.globalWidth;
                        Application.APP_WIDTH = bamtang.Main.globalHeight;
                        this.m_canvasApp = this.m_canvas;
                        this.m_canvasTop = this.m_canvas;
                        this.m_texts = new Object();
                        this.m_xmlNodeTexts = new Object();
                        this.m_soundManager = new SoundManager();
                        for (var q in bamtang.Main.allSounds) {
                            this.m_soundManager.m_isPlaying[bamtang.Main.allSounds[q].id] = false;
                        }
                        document.addEventListener('keydown', this.onKeyDown);
                        document.addEventListener('keyup', this.onKeyUp);
                        bamtang.Main.stage.addChild(this.m_canvasApp);
                        bamtang.Main.stage.addChild(this.m_canvasTop);
                        this.m_storage = bamtang.Main.loadGameProcess();
                    }
                    loadComplete() {
                    }
                    initLoaderClip() {
                        if (Global.app.onInitLoad != null) {
                            Global.app.onInitLoad(this);
                        }
                    }
                    onKeyDown(e) {
                        if (Global.app.guiManager != null) {
                            Global.app.guiManager.onKeyDown(e.keyCode);
                        }
                    }
                    onKeyUp(e) {
                        if (Global.app.guiManager != null) {
                            Global.app.guiManager.onKeyUp(e.keyCode);
                        }
                    }
                    onActivate(e) {
                        if (Global.app.guiManager != null) {
                            Global.app.guiManager.onActivate(true);
                        }
                    }
                    onDeactivate(e) {
                        if (Global.app.guiManager != null) {
                            Global.app.guiManager.onActivate(false);
                        }
                    }
                    loadProcess(loader) {
                        if (this.onLoadProcess != null) {
                            Global.app.onLoadProcess(loader);
                        }
                    }
                }
                Application.KEY_1 = 49;
                Application.KEY_2 = 50;
                Application.KEY_3 = 51;
                Application.KEY_4 = 52;
                Application.KEY_5 = 53;
                Application.KEY_6 = 54;
                Application.KEY_7 = 55;
                Application.KEY_8 = 56;
                Application.KEY_9 = 57;
                Application.KEY_0 = 48;
                Application.KEY_A = 65;
                Application.KEY_B = 66;
                Application.KEY_C = 67;
                Application.KEY_D = 68;
                Application.KEY_E = 69;
                Application.KEY_F = 70;
                Application.KEY_G = 71;
                Application.KEY_H = 72;
                Application.KEY_I = 73;
                Application.KEY_J = 74;
                Application.KEY_K = 75;
                Application.KEY_L = 76;
                Application.KEY_M = 77;
                Application.KEY_N = 78;
                Application.KEY_O = 79;
                Application.KEY_P = 80;
                Application.KEY_Q = 81;
                Application.KEY_R = 82;
                Application.KEY_S = 83;
                Application.KEY_T = 84;
                Application.KEY_U = 85;
                Application.KEY_V = 86;
                Application.KEY_W = 87;
                Application.KEY_X = 88;
                Application.KEY_Z = 90;
                Application.KEY_ESC = 27;
                Application.KEY_SPACE = 32;
                Application.KEY_ENTER = 13;
                Application.KEY_LEFT = 37;
                Application.KEY_RIGHT = 39;
                Application.KEY_DOWN = 40;
                Application.KEY_UP = 38;
                Application.keyUp = Application.KEY_UP;
                Application.keyDown = Application.KEY_DOWN;
                Application.keyLeft = Application.KEY_LEFT;
                Application.keyRight = Application.KEY_RIGHT;
                Application.keySpace = Application.KEY_SPACE;
                Application.keyZ = Application.KEY_Z;
                Application.keyX = Application.KEY_X;
                Application.keyC = Application.KEY_C;
                Application.forTestingGUI = false;
                Application.forTestingDEMO = false;
                Application.useLog = true;
                Application.CLIPS_PACKAGE = "com.framework.minigames.demo.movieclips";
                core.Application = Application;
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Application = com.bamtang.soul.core.Application;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                class Character {
                    constructor(x, y, canvas, app = null) {
                        this.m_animationCallbackComplete = false;
                        this.m_app = app;
                        this.m_states = new Object();
                        this.m_functions = new Object();
                        this.m_x = x;
                        this.m_y = y;
                        this.m_canvas = canvas;
                        this.m_frameTime = 200;
                    }
                    free() {
                        if (this.m_currentActor != null) {
                            this.m_currentActor.free();
                            this.m_currentActor = null;
                        }
                        this.m_currentState = null;
                        this.m_canvas = null;
                        this.m_app = null;
                        var s;
                        for (s in this.m_states) {
                            this.m_states[s] = null;
                            delete this.m_states[s];
                        }
                        for (s in this.m_functions) {
                            this.m_functions[s] = null;
                            delete this.m_functions[s];
                        }
                        this.m_functions = null;
                        this.m_states = null;
                    }
                    state() {
                        return this.m_currentState;
                    }
                    actor() {
                        return this.m_currentActor;
                    }
                    currentFrame() {
                        return this.m_currentActor.currentFrame();
                    }
                    setFrame(frame) {
                        this.m_currentActor.setFrame(frame);
                    }
                    set loop(value) {
                        if (this.m_currentActor != null) {
                            this.m_currentActor.loop = value;
                        }
                    }
                    set frameTime(val) {
                        this.m_frameTime = val;
                        this.m_currentActor.frameTime = this.m_frameTime;
                    }
                    x() {
                        return this.m_x;
                    }
                    setX(value) {
                        this.m_x = value;
                        //if (!Main.isNumeric(this.m_x)) debugger;
                        if (this.m_currentActor != null) {
                            this.m_currentActor.setX(this.m_x);
                        }
                    }
                    y() {
                        return this.m_y;
                    }
                    setY(value) {
                        this.m_y = value;
                        if (this.m_currentActor != null) {
                            this.m_currentActor.setY(this.m_y);
                        }
                    }
                    addState(idState, idSymbol, ...functionsInFrame) {
                        this.m_states[idState] = idSymbol;
                        if (functionsInFrame.length > 0) {
                            this.m_functions[idState] = functionsInFrame;
                        }
                        else {
                            this.m_functions[idState] = null;
                        }
                    }
                    gotoState(idState) {
                        if (this.m_states[idState] == null) {
                            core.Application.error("State: [" + idState + "] is not registered", this);
                            return;
                        }
                        this.m_currentState = idState;
                        if (this.m_currentActor) {
                            this.m_currentActor.free();
                        }
                        this.m_currentActor = new ActorClipExt(this.m_states[idState], this.m_x, this.m_y, this.m_app);
                        this.m_canvas.addChild(this.m_currentActor.clip());
                        this.m_lastFrame = this.m_currentActor.clip().totalFrames;
                        this.m_currentActor.frameTime = this.m_frameTime;
                        this.m_animationCallbackComplete = false;
                    }
                    update(dt) {
                        if (this.m_functions[this.m_currentState] != null) {
                            var length = this.m_functions[this.m_currentState].length;
                            for (var k = 0; k < length; k++) {
                                if (this.m_functions[this.m_currentState][k][0] != null &&
                                    this.m_functions[this.m_currentState][k][1] == this.m_currentActor.clip().currentFrame) {
                                    this.m_functions[this.m_currentState][k][0]();
                                }
                            }
                        }
                        if (this.m_currentActor != null) {
                            this.m_currentActor.setX(this.m_x);
                            this.m_currentActor.setY(this.m_y);
                            this.m_currentActor.update(dt * 10);
                            if (this.m_lastFrame == this.m_currentActor.clip().currentFrame) {
                                if (!this.m_animationCallbackComplete) {
                                    this.m_animationCallbackComplete = !this.m_currentActor.loop;
                                    this.endAnimation();
                                }
                            }
                        }
                    }
                    onKeyDown(keyCode) {
                    }
                    onKeyUp(keyCode) {
                    }
                    endAnimation() {
                        if (this.onEndAnimation != null) {
                            this.onEndAnimation(this.m_currentState);
                        }
                    }
                }
                core.Character = Character;
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Character = com.bamtang.soul.core.Character;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                class EffectGui extends core.ScreenMain {
                    constructor(idGuiData, canvas) {
                        super(idGuiData, 0, 0, null);
                        this.m_canvas = canvas;
                        this.m_canvas.addChild(this.m_clip);
                    }
                    /*override*/ free() {
                        this.onEndAnimation = null;
                        if (this.m_canvas != null) {
                            this.m_canvas.removeChild(this.m_clip);
                            try {
                                this.m_clip.destroy();
                            }
                            catch (e) { }
                        }
                        this.m_canvas = null;
                        super.free();
                    }
                    forward() {
                        this.m_clip.gotoAndPlay(this.m_clip.totalFrames - 1);
                    }
                    /*override*/ update(dt) {
                        if (this.m_clip.currentFrame >= this.m_clip.totalFrames) {
                            if (this.onEndAnimation != null) {
                                this.onEndAnimation(this);
                            }
                            this.isAwaitingDelete = true;
                        }
                    }
                }
                core.EffectGui = EffectGui;
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EffectGui = com.bamtang.soul.core.EffectGui;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                class Layer {
                    constructor(container) {
                        this.m_container = container;
                    }
                    addChild(child) {
                        this.m_depth++;
                        return this.addChildAt(child, this.m_depth);
                    }
                    addEmptyChild() {
                        return this.addChild(new MovieClip());
                    }
                    addChildAt(child, depth) {
                        return this.m_container.addChildAt(child, 0);
                    }
                    setDepth(child, depth) {
                        function sortByDepth(a, b) {
                            var aY = 0;
                            var bY = 0;
                            if (a.children.length == 3 && a.children[2] && a.children[2].custom_y != undefined && a.children[2].custom_y != 0) {
                                aY = a.children[2].custom_y;
                            }
                            if (b.children.length == 3 && b.children[2] && b.children[2].custom_y != undefined && b.children[2].custom_y != 0) {
                                bY = b.children[2].custom_y;
                            }
                            if (aY > bY)
                                return 1;
                            if (aY == bY)
                                return 0;
                            else
                                return -1;
                        }
                        this.m_container.children.sort(sortByDepth);
                    }
                }
                core.Layer = Layer;
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Layer = com.bamtang.soul.core.Layer;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                var kipu;
                (function (kipu) {
                    class EntityObjectData {
                        constructor(properties, entity, gameplay, defense, attack) {
                            this.name = String(properties[0].value);
                            this.cost = parseInt(properties[1].value);
                            this.clipname = String(properties[2].value);
                            this.color = String(properties[3].value);
                            this.description = String(properties[4].value);
                            this.duration = parseInt(properties[5].value);
                            this.equipment = Boolean(parseInt(properties[6].value));
                            this.entityModifiers = entity;
                            this.gameplayModifiers = gameplay;
                            this.defenseModifiers = defense;
                            this.attackModifiers = attack;
                            this.string = "\n";
                            this.string += "INVENTARY KIPU ITEM >>> " + this.name.toUpperCase() + " modifiers:\n";
                            this.string += this.readModifiers(kipu.Modifier.CATEGORY_ENTITY) + "\n";
                            this.string += this.readModifiers(kipu.Modifier.CATEGORY_GAMEPLAY) + "\n";
                            this.string += this.readModifiers(kipu.Modifier.CATEGORY_DEFENSE) + "\n";
                            this.string += this.readModifiers(kipu.Modifier.CATEGORY_ATTACK) + "\n";
                        }
                        readModifiers(category) {
                            var log;
                            var modifiers;
                            switch (category) {
                                case kipu.Modifier.CATEGORY_ENTITY:
                                    log = "   ENTITY: ";
                                    modifiers = this.entityModifiers;
                                    break;
                                case kipu.Modifier.CATEGORY_GAMEPLAY:
                                    log = "   GAMEPLAY: ";
                                    modifiers = this.gameplayModifiers;
                                    break;
                                case kipu.Modifier.CATEGORY_ATTACK:
                                    log = "   ATTACK: ";
                                    modifiers = this.defenseModifiers;
                                    break;
                                case kipu.Modifier.CATEGORY_DEFENSE:
                                    log = "   DEFENSE: ";
                                    modifiers = this.attackModifiers;
                                    break;
                            }
                            if (modifiers != null && modifiers.length > 0) {
                                for (var i = 0; i < modifiers.length; i++) {
                                    var sign = (modifiers[i].value >= 0) ? "+" : "";
                                    log += "" + modifiers[i].property + "=" + sign + "" + modifiers[i].value + " ";
                                }
                            }
                            return log;
                        }
                    }
                    kipu.EntityObjectData = EntityObjectData;
                })(kipu = core.kipu || (core.kipu = {}));
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EntityObjectData = com.bamtang.soul.core.kipu.EntityObjectData;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                var kipu;
                (function (kipu) {
                    class Inventory {
                        constructor() {
                            this.m_items = new Array();
                        }
                        addItem(data, quantity) {
                            var item = this.getItem(data);
                            if (item == null) {
                                this.m_items.push(new kipu.InventoryItem(data, quantity));
                            }
                            else {
                                item.quantity += quantity;
                            }
                        }
                        getItems() {
                            return this.m_items;
                        }
                        getItem(data) {
                            for (var i = 0; i < this.m_items.length; i++) {
                                if (this.m_items[i].data.name == data.name) {
                                    return this.m_items[i];
                                }
                            }
                            return null;
                        }
                    }
                    kipu.Inventory = Inventory;
                })(kipu = core.kipu || (core.kipu = {}));
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Inventory = com.bamtang.soul.core.kipu.Inventory;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                var kipu;
                (function (kipu) {
                    class InventoryItem {
                        constructor(entityObjectData, quantity) {
                            this.data = entityObjectData;
                            this.quantity = quantity;
                            this.equipped = false;
                        }
                    }
                    kipu.InventoryItem = InventoryItem;
                })(kipu = core.kipu || (core.kipu = {}));
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var InventoryItem = com.bamtang.soul.core.kipu.InventoryItem;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                var kipu;
                (function (kipu) {
                    class Modifier {
                        constructor(property, value) {
                            this.property = property;
                            this.value = value;
                        }
                    }
                    Modifier.CATEGORY_ENTITY = 1;
                    Modifier.CATEGORY_GAMEPLAY = 2;
                    Modifier.CATEGORY_DEFENSE = 3;
                    Modifier.CATEGORY_ATTACK = 4;
                    kipu.Modifier = Modifier;
                })(kipu = core.kipu || (core.kipu = {}));
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Modifier = com.bamtang.soul.core.kipu.Modifier;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var core;
            (function (core) {
                var kipu;
                (function (kipu) {
                    class Skills {
                        constructor(physical, fire, cold, electricity) {
                            this.physical = physical;
                            this.fire = fire;
                            this.cold = cold;
                            this.electricity = electricity;
                        }
                    }
                    kipu.Skills = Skills;
                })(kipu = core.kipu || (core.kipu = {}));
            })(core = soul.core || (soul.core = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Skills = com.bamtang.soul.core.kipu.Skills;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var core;
                (function (core) {
                    var cor;
                    (function (cor) {
                        class ActorClipExt extends ActorClip {
                            constructor(nameClip, x = 0, y = 0, app = null) {
                                super(nameClip, x, y, app);
                            }
                            /*override*/ free() {
                                this.onClick = null;
                                super.free();
                            }
                            set onClick(f_Ref) {
                                if (this.m_clip == null) {
                                    return;
                                }
                                this.m_refOnClick = f_Ref;
                                if (f_Ref != null) {
                                    //this.m_clip.on(CustomMouseEvent.CLICK, this._onClick.bind(this));
                                }
                                else {
                                    //this.m_clip.on(CustomMouseEvent.CLICK, this._onClick.bind(this));
                                }
                            }
                            _onClick(e) {
                                if (this.m_refOnClick != null) {
                                    this.m_refOnClick(this);
                                }
                            }
                        }
                        cor.ActorClipExt = ActorClipExt;
                    })(cor = core.cor || (core.cor = {}));
                })(core = soulExtends.core || (soulExtends.core = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var ActorClipExt = com.bamtang.project.soulExtends.core.cor.ActorClipExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var modules;
            (function (modules) {
                class SoundManager {
                    constructor() {
                        this.volume = 1;
                        this.m_soundList = new Object();
                        this.m_isPlaying = [];
                        this.m_soundVolumen = new Object();
                    }
                    playSound(id, vol = 1, loops = false) {
                        if (this.m_soundList[id] == undefined) {
                            if (!this.createSound(id)) {
                                return;
                            }
                        }
                        if (loops)
                            this.m_soundList[id]._loop = true;
                        this.m_soundList[id]._volume = vol;
                        this.m_soundList[id].play();
                        this.m_isPlaying[id] = true;
                        this.m_soundVolumen[id] = vol;
                    }
                    playLoop(id, vol = 1) {
                        if (this.m_isPlaying[id] != null && this.m_isPlaying[id] == false) {
                            this.playSound(id, vol, true);
                        }
                    }
                    stopSound(id) {
                        if (this.m_soundList[id]) {
                            this.m_soundList[id].stop();
                            this.m_isPlaying[id] = false;
                        }
                    }
                    setMasterVolume(vol) {
                        /*for (var s in this.m_soundChannels)
                        {
                            var transform:any = this.m_soundChannels[s].soundTransform; //SoundTransform
                            transform.volume = this.m_soundVolumen[s] * vol;
                            this.m_soundChannels[s].soundTransform = transform;
                        }*/
                        this.volume = vol;
                    }
                    stopAllSound() {
                        for (var id in bamtang.Main.allSounds) {
                            this.stopSound(bamtang.Main.allSounds[id]);
                        }
                    }
                    free() {
                        this.stopAllSound();
                        var id;
                        for (id in this.m_isPlaying) {
                            this.m_isPlaying[id] = null;
                            delete this.m_isPlaying[id];
                        }
                        for (id in this.m_soundVolumen) {
                            this.m_soundVolumen[id] = null;
                            delete this.m_soundVolumen[id];
                        }
                        this.m_isPlaying = null;
                        this.m_soundVolumen = null;
                    }
                    createSound(id) {
                        try {
                            this.m_soundList[id] = bamtang.Main.allSounds[bamtang.Main.getSoundDataPos(id)].stream;
                            this.m_isPlaying[id] = false;
                            if (this.m_soundList[id] == null)
                                return false;
                            return true;
                        }
                        catch (e) {
                            Application.error("Sound class ::" + id + ":: no found", this);
                        }
                        return false;
                    }
                }
                modules.SoundManager = SoundManager;
            })(modules = soul.modules || (soul.modules = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var SoundManager = com.bamtang.soul.modules.SoundManager;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var utils;
            (function (utils) {
                var utl;
                (function (utl) {
                    class Movement {
                        constructor(x, y, speed, isLoop = true, isReversible = true) {
                            this.m_x = x;
                            this.m_y = y;
                            this.m_state = Movement.ST_INIT;
                            this.m_typeMovement = Movement.TYPE_DEFAULT;
                            this.m_isLoop = isLoop;
                            this.m_isReversible = isReversible;
                            this.m_oldState = 0;
                            this.m_targetX = 0;
                            this.m_targetY = 0;
                            this.setSpeed(speed);
                        }
                        free() {
                            this.m_endCallback = null;
                            this.m_cycleCallback = null;
                        }
                        x() {
                            return this.m_x;
                        }
                        y() {
                            return this.m_y;
                        }
                        speed() {
                            return this.m_speed;
                        }
                        type() {
                            return this.m_typeMovement;
                        }
                        targetX() {
                            return this.m_targetX;
                        }
                        targetY() {
                            return this.m_targetY;
                        }
                        isAwaitingDelete() {
                            return this.m_isAwaitingDelete;
                        }
                        isPaused() {
                            return this.m_state == Movement.ST_PAUSED;
                        }
                        set endCallback(func) {
                            this.m_endCallback = func.bind(this);
                        }
                        set cycleCallback(func) {
                            this.m_cycleCallback = func.bind(this);
                        }
                        setSpeed(speed) {
                            if (speed > Movement.MIN_SPEED) {
                                this.m_speed = speed;
                            }
                            else {
                                Application.error("setSpeed: " + speed);
                                this.m_speed = Movement.DEFAULT_SPEED;
                            }
                        }
                        setPause(pause) {
                            if (pause) {
                                if (this.m_state == Movement.ST_MOVEMENT) {
                                    this.m_oldState = this.m_state;
                                    this.m_state = Movement.ST_PAUSED;
                                }
                            }
                            else {
                                this.m_state = this.m_oldState;
                            }
                        }
                        setAwaitingToDelete(value) {
                            this.m_isAwaitingDelete = value;
                            if (this.m_isAwaitingDelete) {
                                this.m_state = Movement.ST_INDEF;
                            }
                        }
                        cancelMotion() {
                            this.m_state = Movement.ST_END;
                        }
                        resetPosition(x, y) {
                            if (this.m_state != Movement.ST_MOVEMENT && this.m_state != Movement.ST_PAUSED) {
                                this.m_x = x;
                                this.m_y = y;
                                return true;
                            }
                            return false;
                        }
                        update(dt) {
                        }
                        onEndMovement() {
                            this.m_state = Movement.ST_END;
                            if (this.m_endCallback != null) {
                                this.m_endCallback(this);
                            }
                        }
                        onCycleEnd() {
                            if (this.m_cycleCallback != null) {
                                this.m_cycleCallback(this);
                            }
                        }
                    }
                    Movement.TYPE_DEFAULT = 0;
                    Movement.TYPE_CIRCLE = 1;
                    Movement.TYPE_LINEAR = 2;
                    Movement.ST_INDEF = -1;
                    Movement.ST_INIT = 0;
                    Movement.ST_MOVEMENT = 1;
                    Movement.ST_PAUSED = 2;
                    Movement.ST_END = 3;
                    Movement.MIN_SPEED = 0.00001;
                    Movement.DEFAULT_SPEED = 0.1;
                    utl.Movement = Movement;
                })(utl = utils.utl || (utils.utl = {}));
            })(utils = soul.utils || (soul.utils = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Movement = com.bamtang.soul.utils.utl.Movement;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                class BRW_Camera {
                    constructor(world, widthCamera, heightCamera, positionScreenX = 0, positionScreenY = 0, initCamX = 0, initCamY = 0) {
                        this.width = 0;
                        this.height = 0;
                        this.screenX = 0;
                        this.screenY = 0;
                        this.leftLimit = 0;
                        this.rightLimit = 0;
                        this.upLimit = 0;
                        this.downLimit = 0;
                        this.parallaxX = false;
                        this.parallaxY = false;
                        this.m_worldLimitRight = 0;
                        this.m_worldLimitLeft = 0;
                        this.m_worldLimitUp = 0;
                        this.m_worldLimitDown = 0;
                        this.m_world = world;
                        this.m_x = initCamX;
                        this.m_y = initCamY;
                        this.m_collision = null;
                        this.width = widthCamera * 1;
                        this.height = heightCamera * 1;
                        this.m_fixedX = (this.m_world.cameraXMin == this.m_world.cameraXMax);
                        this.leftLimit = this.m_world.cameraXMin * this.width;
                        this.rightLimit = this.m_world.cameraXMax * this.width;
                        this.m_fixedY = (this.m_world.cameraYMax == this.m_world.cameraYMin);
                        this.upLimit = this.m_world.cameraYMin * this.height;
                        this.downLimit = this.m_world.cameraYMax * this.height;
                        this.m_lockedX = false;
                        this.m_lockedY = false;
                        this.parallaxX = (this.m_world.width() > this.width);
                        this.parallaxY = (this.m_world.height() > this.height);
                        this.screenX = positionScreenX;
                        this.screenY = positionScreenY;
                        this.setWorldLimit(0, this.m_world.width() - this.width, 0, this.m_world.height() - this.height);
                    }
                    x() {
                        return this.m_x;
                    }
                    y() {
                        return this.m_y;
                    }
                    setX(val) {
                        this.m_x = val;
                    }
                    setY(val) {
                        this.m_y = val;
                    }
                    scale() {
                        return this.m_world.canvas().scale.x;
                    }
                    setWorldLimitRight(right) {
                        this.m_worldLimitRight = right;
                    }
                    setWorldLimitLeft(left) {
                        this.m_worldLimitLeft = left;
                    }
                    setWorldLimitUp(up) {
                        this.m_worldLimitUp = up;
                    }
                    setWorldLimitDown(down) {
                        this.m_worldLimitDown = down;
                    }
                    getWorldLimitRight() {
                        return this.m_worldLimitRight;
                    }
                    getWorldLimitLeft() {
                        return this.m_worldLimitLeft;
                    }
                    getWorldLimitUp() {
                        return this.m_worldLimitUp;
                    }
                    getWorldLimitDown() {
                        return this.m_worldLimitDown;
                    }
                    setWorldLimit(left, right, up, down) {
                        this.m_worldLimitLeft = left;
                        this.m_worldLimitRight = right;
                        this.m_worldLimitUp = up;
                        this.m_worldLimitDown = down;
                    }
                    free() {
                        if (this.m_collision) {
                            this.m_world.canvas().removeChild(this.m_collision);
                            try {
                                this.m_collision.destroy();
                            }
                            catch (e) { }
                            this.m_collision = null;
                        }
                        this.m_world = null;
                    }
                    update(dt) {
                        if (!this.m_lockedX) {
                            if (this.m_fixedX) {
                                this.m_x = this.m_world.player().x() - this.leftLimit;
                            }
                            else {
                                if (this.m_x + this.leftLimit > this.m_world.player().x()) {
                                    this.m_x = this.m_world.player().x() - this.leftLimit;
                                }
                                if (this.m_x + this.rightLimit < this.m_world.player().x()) {
                                    this.m_x = this.m_world.player().x() - this.rightLimit;
                                }
                            }
                        }
                        if (!this.m_lockedY) {
                            if (this.m_fixedY) {
                                this.m_y = this.m_world.player().y() - this.upLimit;
                            }
                            else {
                                if (this.m_y + this.upLimit > this.m_world.player().y()) {
                                    this.m_y = this.m_world.player().y() - this.upLimit;
                                }
                                if (this.m_y + this.downLimit < this.m_world.player().y()) {
                                    this.m_y = this.m_world.player().y() - this.downLimit;
                                }
                            }
                        }
                        if (this.m_x < this.m_worldLimitLeft) {
                            this.m_x = this.m_worldLimitLeft;
                        }
                        else if (this.m_x > this.m_worldLimitRight) {
                            this.m_x = this.m_worldLimitRight;
                        }
                        if (this.m_y < this.m_worldLimitUp) {
                            this.m_y = this.m_worldLimitUp;
                        }
                        else if (this.m_y > this.m_worldLimitDown) {
                            this.m_y = this.m_worldLimitDown;
                        }
                    }
                    setScale(val) {
                        val *= Global.WORLD_SCALE;
                        ;
                        this.m_world.canvas().scale.x = val;
                        this.m_world.canvas().scale.y = val;
                    }
                    showCollision(show) {
                        if (!this.m_collision) {
                            this.m_collision = new PIXI.Graphics();
                            this.m_collision.lineStyle(0.5, 0xFF0000);
                            this.m_collision.moveTo(0, 0);
                            this.m_collision.lineTo(0, this.height);
                            this.m_collision.lineTo(this.width, this.height);
                            this.m_collision.lineTo(this.width, 0);
                            this.m_collision.lineTo(0, 0);
                            this.m_world.canvas().addChild(this.m_collision);
                        }
                        this.m_collision.visible = show;
                    }
                }
                brawler.BRW_Camera = BRW_Camera;
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_Camera = com.bamtang.soul.brawler.BRW_Camera;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                class BRW_CollisionActor {
                    constructor(actor, nameClipBounds) {
                        this.m_actor = actor;
                        this.m_nameClipBounds = nameClipBounds;
                    }
                    free() {
                        this.m_actor = null;
                        this.m_bounds = null;
                        this.m_boundsClip = null;
                    }
                    boundsClip() {
                        return this.m_boundsClip;
                    }
                    bounds() {
                        if (this.m_bounds != null) {
                            return new PIXI.Rectangle(this.m_actor.x() + this.m_bounds.x, this.m_actor.y() + this.m_bounds.y, this.m_bounds.width, this.m_bounds.height);
                        }
                        return null;
                    }
                    update(forceClip = null) {
                        this.m_boundsClip = null;
                        if (forceClip != null) {
                            this.m_boundsClip = forceClip;
                        }
                        else if (this.m_actor.clip() && this.m_actor.clip()[this.m_nameClipBounds]) {
                            this.m_boundsClip = this.m_actor.clip()[this.m_nameClipBounds];
                        }
                        if (this.m_boundsClip) {
                            this.m_scaleX = this.m_actor.clip().scale.x;
                            this.m_scaleY = this.m_actor.clip().scale.y;
                            var posx = this.m_boundsClip.x;
                            var posy = this.m_boundsClip.y;
                            var scx = this.m_scaleX;
                            var scy = this.m_scaleY;
                            if (this.m_scaleX < 0) {
                                posx = -(this.m_boundsClip.x + this.m_boundsClip.width);
                                scx = -this.m_scaleX;
                            }
                            if (this.m_scaleY < 0) {
                                posy = -(this.m_boundsClip.y + this.m_boundsClip.height);
                                scy = -this.m_scaleY;
                            }
                            this.m_bounds = new PIXI.Rectangle(scx * posx, scy * posy, scx * this.m_boundsClip.width, scy * this.m_boundsClip.height);
                        }
                        else {
                            this.m_bounds = null;
                        }
                    }
                    hitTestRectangleActor(collisionBounds) {
                        if (this.m_bounds && collisionBounds) {
                            return bamtang.Main.intersectsRect(this.bounds(), collisionBounds);
                        }
                        return false;
                    }
                }
                brawler.BRW_CollisionActor = BRW_CollisionActor;
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_CollisionActor = com.bamtang.soul.brawler.BRW_CollisionActor;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                class BRW_CollisionPoint {
                    constructor(positionX, positionY, normalX, normalY) {
                        this.position = new Vector2D(positionX, positionY);
                        this.normal = new Vector2D(normalX, normalY);
                    }
                    toString() {
                        return "\n[COLL] " + this.position + " " + this.normal;
                    }
                }
                brawler.BRW_CollisionPoint = BRW_CollisionPoint;
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_CollisionPoint = com.bamtang.soul.brawler.BRW_CollisionPoint;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                class BRW_Npc {
                    constructor(idObject, posX, posY, canvasNPC, paramsNPC = "") {
                        this.id = idObject;
                        this.x = posX;
                        this.y = posY;
                        this.canvas = canvasNPC;
                        this.params = paramsNPC;
                    }
                    free() {
                        this.canvas = null;
                    }
                }
                brawler.BRW_Npc = BRW_Npc;
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_Npc = com.bamtang.soul.brawler.BRW_Npc;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                class BRW_NpcManager {
                    constructor(world) {
                        this.m_world = world;
                        this.m_width = 0;
                        this.m_height = 0;
                        this.m_showCollisions = false;
                        this.m_buffer = new Array();
                        this.m_actors = new Array();
                    }
                    free() {
                        var k;
                        for (k = 0; k < this.m_buffer.length; ++k) {
                            this.m_buffer[k].free();
                        }
                        this.m_buffer = null;
                        for (k = 0; k < this.m_actors.length; ++k) {
                            this.m_actors[k].free();
                            this.m_actors[k] = null;
                        }
                        this.m_actors = null;
                        this.m_world = null;
                    }
                    collisionsOn() {
                        return this.m_showCollisions;
                    }
                    get actors() {
                        return this.m_actors;
                    }
                    init(player) {
                    }
                    showCollision(show) {
                        this.m_showCollisions = show;
                        for (var k = 0; k < this.m_actors.length; ++k) {
                            this.m_actors[k].showCollision(show);
                        }
                    }
                    addNpc(object) {
                        if (this.m_buffer.length > 0 && object.x < this.m_buffer[this.m_buffer.length - 1].x) {
                            Application.warn("add: objects are not sorted");
                        }
                        this.m_buffer.push(object);
                    }
                    add(actor) {
                        actor.setManager(this);
                        this.m_actors.push(actor);
                        actor.showCollision(this.m_showCollisions);
                    }
                    update(dt) {
                        var dx = 0;
                        for (var k = 0; k < this.m_actors.length; ++k) {
                            if (this.m_actors[k].isAwaitingDelete()) {
                                this.m_actors[k].free();
                                this.m_actors[k] = null;
                                this.m_actors.splice(k--, 1);
                            }
                            else {
                                dx = this.m_world.player().x() - this.m_actors[k].x();
                                if (this.m_actors[k].isRangeControlled() &&
                                    (dx > BRW_NpcManager.visibleWidth || dx < -BRW_NpcManager.visibleWidth)) {
                                    if (!this.m_actors[k].isIdle()) {
                                        this.m_actors[k].onIdle(true);
                                    }
                                }
                                else {
                                    if (this.m_actors[k].isIdle()) {
                                        this.m_actors[k].onIdle(false);
                                    }
                                    this.m_actors[k].update(dt);
                                }
                            }
                        }
                    }
                    reset() {
                        for (var k = 0; k < this.m_actors.length; ++k) {
                            this.m_actors[k].free();
                            this.m_actors[k] = null;
                        }
                        this.m_actors = null;
                        this.m_actors = new Array();
                    }
                }
                BRW_NpcManager.visibleWidth = 750;
                BRW_NpcManager.visibleHeight = 750;
                brawler.BRW_NpcManager = BRW_NpcManager;
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_NpcManager = com.bamtang.soul.brawler.BRW_NpcManager;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                class BRW_PlayerControl extends BRW_ActorControlExt {
                    constructor(player) {
                        super(player);
                        this.TIME_FALL = 75;
                        this.TIME_LAND = 400;
                        this.m_horizontalBuffer = new Array(0, 0);
                        this.m_verticalBuffer = new Array(0, 0);
                        this.m_doubleJumpEnabled = true;
                        this.m_canDoubleJump = this.m_doubleJumpEnabled;
                        this.m_jumpControl = new JumpControl();
                        this.m_jumpControl.onCompleteJump = this.onCompleteJump.bind(this);
                        this.m_dashControl = new TouchControlBrawler();
                        this.m_dashControl.onActiveAction = this.onActiveDash.bind(this);
                        this.m_jumpDownInterval = -1;
                        this.reset();
                    }
                    deltaHeight() {
                        return this.m_deltaHeight;
                    }
                    isCatchEnemy() {
                        return this.m_isCatchEnemy;
                    }
                    horizontalBuffer() {
                        return this.m_horizontalBuffer[0];
                    }
                    verticalBuffer() {
                        return this.m_verticalBuffer[0];
                    }
                    setCallbackToActiveDash(fnc) {
                        this.m_dashControl.onActiveAction = fnc.bind(this);
                    }
                    setCallbackToCompleteJump(fnc) {
                        this.m_jumpControl.onCompleteJump = fnc.bind(this);
                    }
                    setCallbackToMaxHeight(fnc) {
                        this.m_jumpControl.onMaxHeightReached = fnc.bind(this);
                    }
                    setFactorGravity(factor) {
                        this.m_jumpControl.factorGravity = factor;
                    }
                    applyImpulseWhileJumping(impulse) {
                        this.m_jumpControl.applyForceY(impulse);
                    }
                    pauseJump(pause) {
                        this.m_jumpControl.setPaused(pause);
                    }
                    /*override*/ forceX() {
                        if (this.m_isRunning) {
                            return this.runFactor * this.m_forceX;
                        }
                        return this.m_forceX;
                    }
                    onCompleteJump() {
                        this.m_isJumping = false;
                        this.m_actor.gotoState(brawler.BRW_Player.ST_PLAYER_STAND);
                    }
                    onActiveDash(toLeft) {
                        this.m_isRunning = true;
                    }
                    /*override*/ loadData(data) {
                        super.loadData(data);
                        this.setDefaultData_pc(data);
                        this.m_jumpControl.setInitVelocity(this.m_jumpSpeed);
                    }
                    setDefaultData_pc(data) {
                        super.setDefaultData_ac(data);
                        var showWarnings = false;
                        this.setData_pc(data, false);
                    }
                    setData_pc(data, warnings) {
                        this.debugSpeed = brawler.BRW_World.getOptionalData("Number", data, "debugSpeed", this.debugSpeed, warnings);
                        this.walkSpeed = brawler.BRW_World.getOptionalData("Number", data, "walkSpeed", this.walkSpeed, warnings);
                        this.airSpeed = brawler.BRW_World.getOptionalData("Number", data, "airSpeed", this.airSpeed, warnings);
                        this.runFactor = brawler.BRW_World.getOptionalData("Number", data, "runFactor", this.runFactor, warnings);
                        this.canRun = (brawler.BRW_World.getOptionalData("Number", data, "canRun", this.canRun, warnings) == 1);
                        this.canAttackDash = (brawler.BRW_World.getOptionalData("Number", data, "canAttackDash", this.canAttackDash, warnings) == 1);
                        this.initFactorSpeedAttackDash = brawler.BRW_World.getOptionalData("Number", data, "initFactorSpeedAttackDash", this.initFactorSpeedAttackDash, warnings);
                        this.maxSpeedFloor = brawler.BRW_World.getOptionalData("Number", data, "maxSpeedFloor", this.maxSpeedFloor, warnings);
                        this.maxSpeedAir = brawler.BRW_World.getOptionalData("Number", data, "maxSpeedAir", this.maxSpeedAir, warnings);
                        this.m_jumpSpeed = -brawler.BRW_World.getOptionalData("Number", data, "jumpInitSpeed", this.m_jumpSpeed, warnings);
                        this.m_jumpRunSpeed = -brawler.BRW_World.getOptionalData("Number", data, "jumpRunInitSpeed", this.m_jumpRunSpeed, warnings);
                        this.m_smallJumpTime = brawler.BRW_World.getOptionalData("Number", data, "smallJumpTime", this.m_smallJumpTime, warnings);
                        this.m_smallJumpSpeed = -brawler.BRW_World.getOptionalData("Number", data, "smallJumpSpeed", this.m_smallJumpSpeed, warnings);
                        this.m_doubleJumpStart = brawler.BRW_World.getOptionalData("Number", data, "doubleJumpStart", this.m_doubleJumpStart, warnings);
                        this.m_doubleJumpEnd = brawler.BRW_World.getOptionalData("Number", data, "doubleJumpEnd", this.m_doubleJumpEnd, warnings);
                        this.m_doubleJumpSpeed = -brawler.BRW_World.getOptionalData("Number", data, "doubleJumpSpeed", this.m_doubleJumpSpeed, warnings);
                        this.m_jumpDownInterval = brawler.BRW_World.getOptionalData("Number", data, "jumpDownTime", this.m_jumpDownInterval, false);
                        this.m_canJumpDown = (this.m_jumpDownInterval > 0);
                    }
                    getJumpHeight() {
                        if (this.m_jumpControl.isJump) {
                            return -this.m_jumpControl.currentHeight;
                        }
                        return 0;
                    }
                    /*override*/ reset() {
                        super.reset();
                        this.m_horizontalBuffer[0] = 0;
                        this.m_horizontalBuffer[1] = 0;
                        this.m_verticalBuffer[0] = 0;
                        this.m_verticalBuffer[1] = 0;
                        this.m_deltaHeight = 0;
                        this.m_timeJumping = 0;
                        this.m_smallJumpTimer = -1;
                        this.m_floatingTimer = this.TIME_FALL;
                        this.m_jumpAllowed = true;
                        this.m_jumpDownTimer = -1;
                        this.m_jumpDownAllowed = true;
                    }
                    /*override*/ update(dt) {
                        if (this.m_jumpDownTimer > 0) {
                            this.m_jumpDownTimer -= dt;
                            if (this.m_jumpDownTimer <= 0) {
                                this.m_isJumpingDown = false;
                            }
                        }
                        if (this.m_isJumping) {
                            this.m_timeJumping += dt;
                            this.m_deltaHeight = (this.m_jumpInitSpeed * dt) + this.gravity * (2 * this.m_timeJumping + dt) * dt;
                            if (this.m_deltaHeight > 0) {
                                this.m_isJumpingUp = false;
                            }
                            if (this.m_smallJumpTimer > 0) {
                                this.m_smallJumpTimer -= dt;
                            }
                        }
                        if (this.m_horizontalBuffer[0] != 0) {
                            this.m_forceX = this.m_horizontalBuffer[0];
                        }
                        else if (this.m_horizontalBuffer[1] != 0) {
                            this.m_forceX = this.m_horizontalBuffer[1];
                        }
                        else {
                            this.m_forceX = 0;
                        }
                        if (this.m_verticalBuffer[0] != 0) {
                            this.m_forceY = this.m_verticalBuffer[0];
                        }
                        else if (this.m_verticalBuffer[1] != 0) {
                            this.m_forceY = this.m_verticalBuffer[1];
                        }
                        else {
                            this.m_forceY = 0;
                        }
                    }
                    /*override*/ onCollision(coll, dt) {
                        if (coll) {
                            if (coll.y < 0 && this.m_isJumping) {
                                this.m_isInAction = false;
                                this.m_isJumping = false;
                                this.m_actor.gotoState(brawler.BRW_Player.ST_PLAYER_LAND);
                                this.m_floatingTimer = this.TIME_LAND;
                            }
                            if (this.m_floatingTimer < this.TIME_FALL) {
                                this.m_floatingTimer = this.TIME_FALL;
                            }
                            if (this.m_actor.vehicle() && this.m_floatingTimer < this.TIME_LAND) {
                                this.m_floatingTimer = this.TIME_LAND;
                            }
                            if (coll.y != 0) {
                                this.m_isJumpingUp = false;
                            }
                        }
                        else {
                            var id = this.m_actor.world().getTileBelow(this.m_actor.x(), this.m_actor.y());
                            if (this.m_floatingTimer > 0 && (id != brawler.BRW_WorldCollisionLayer.CELL_DIAG_UP_LEFT && id != brawler.BRW_WorldCollisionLayer.CELL_DIAG_UP_RIGHT)) {
                                this.m_floatingTimer -= dt;
                                if (this.m_floatingTimer <= 0 && !this.m_isJumping) {
                                    this.m_actor.gotoState(brawler.BRW_Player.ST_PLAYER_JUMP_DOWN);
                                    this.m_isJumping = true;
                                }
                            }
                        }
                    }
                    onLeft(pressed) {
                        if (pressed) {
                            if (this.m_horizontalBuffer[0] == 1) {
                                this.m_horizontalBuffer[1] = 1;
                            }
                            this.m_horizontalBuffer[0] = -1;
                        }
                        else {
                            if (this.m_horizontalBuffer[0] == -1) {
                                this.m_horizontalBuffer[0] = this.m_horizontalBuffer[1];
                            }
                            this.m_horizontalBuffer[1] = 0;
                        }
                    }
                    onRight(pressed) {
                        if (pressed) {
                            if (this.m_horizontalBuffer[0] == -1) {
                                this.m_horizontalBuffer[1] = -1;
                            }
                            this.m_horizontalBuffer[0] = 1;
                        }
                        else {
                            if (this.m_horizontalBuffer[0] == 1) {
                                this.m_horizontalBuffer[0] = this.m_horizontalBuffer[1];
                            }
                            this.m_horizontalBuffer[1] = 0;
                        }
                    }
                    onUp(pressed) {
                        if (pressed) {
                            if (this.m_verticalBuffer[0] == 1) {
                                this.m_verticalBuffer[1] = 1;
                            }
                            this.m_verticalBuffer[0] = -1;
                        }
                        else {
                            if (this.m_verticalBuffer[0] == -1) {
                                this.m_verticalBuffer[0] = this.m_verticalBuffer[1];
                            }
                            this.m_verticalBuffer[1] = 0;
                        }
                    }
                    onDown(pressed) {
                        if (pressed) {
                            if (this.m_verticalBuffer[0] == -1) {
                                this.m_verticalBuffer[1] = -1;
                            }
                            this.m_verticalBuffer[0] = 1;
                        }
                        else {
                            if (this.m_verticalBuffer[0] == 1) {
                                this.m_verticalBuffer[0] = this.m_verticalBuffer[1];
                            }
                            this.m_verticalBuffer[1] = 0;
                        }
                    }
                    onRun(pressed) {
                        if (this.canRun) {
                            this.m_isRunning = pressed;
                        }
                    }
                    onCustomJump(iniSpeed) {
                        this.m_actor.gotoState(brawler.BRW_Player.ST_PLAYER_JUMP_UP);
                        this.m_isJumping = true;
                        this.m_isJumpingUp = true;
                        this.m_timeJumping = 0;
                        this.m_smallJumpTimer = -1;
                        this.m_jumpInitSpeed = iniSpeed;
                        this.m_canDoubleJump = false;
                    }
                    onJumpDown(pressed) {
                        if (this.m_canJumpDown) {
                            if (pressed) {
                                if (this.m_jumpDownAllowed && !this.m_isJumping && this.m_actor.isOverPlatform()) {
                                    this.m_jumpDownAllowed = false;
                                    this.m_isJumpingDown = true;
                                    this.m_jumpDownTimer = this.m_jumpDownInterval;
                                    this.m_actor.gotoState(brawler.BRW_Player.ST_PLAYER_JUMP_DOWN);
                                }
                                this.m_jumpDownAllowed = false;
                            }
                            else {
                                this.m_jumpDownAllowed = true;
                            }
                        }
                    }
                    onJump(pressed = false) {
                        if (pressed) {
                            if (this.m_jumpAllowed) {
                                if (!this.m_isJumping) {
                                    this.m_actor.gotoState(brawler.BRW_Player.ST_PLAYER_JUMP_UP);
                                    this.m_smallJumpTimer = this.m_smallJumpTime;
                                    this.m_isJumping = true;
                                    this.m_isJumpingUp = true;
                                    this.m_jumpAllowed = false;
                                    this.m_timeJumping = 0;
                                    this.m_canDoubleJump = this.m_doubleJumpEnabled;
                                    if (this.m_isRunning) {
                                        this.m_jumpInitSpeed = this.m_actor.factorSpeedY() * this.m_jumpRunSpeed;
                                    }
                                    else {
                                        this.m_jumpInitSpeed = this.m_actor.factorSpeedY() * this.m_jumpSpeed;
                                    }
                                }
                                else if (this.m_canDoubleJump && this.m_timeJumping >= this.m_doubleJumpStart && this.m_timeJumping <= this.m_doubleJumpEnd) {
                                    this.m_actor.gotoState(brawler.BRW_Player.ST_PLAYER_JUMP_UP);
                                    this.m_smallJumpTimer = this.m_smallJumpTime;
                                    this.m_isJumpingUp = true;
                                    this.m_jumpAllowed = false;
                                    this.m_canDoubleJump = false;
                                    this.m_timeJumping = 0;
                                    this.m_jumpInitSpeed = this.m_doubleJumpSpeed;
                                }
                            }
                        }
                        else {
                            if (this.m_isJumpingUp && this.m_smallJumpTimer > 0) {
                                this.m_jumpInitSpeed = this.m_smallJumpSpeed;
                            }
                            this.m_jumpAllowed = true;
                        }
                    }
                    onAction(value) {
                        this.m_isInAction = value;
                    }
                    onCatchEnemy(value) {
                        this.m_isCatchEnemy = value;
                    }
                    onDashMove(pressed, toLeft = true) {
                        if (pressed) {
                            this.m_dashControl.sense(toLeft);
                        }
                        else {
                            this.m_dashControl.unlock();
                            this.m_isRunning = false;
                        }
                    }
                    onDashAttack(pressed) {
                        this.m_isInDashAttack = pressed;
                    }
                }
                brawler.BRW_PlayerControl = BRW_PlayerControl;
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_PlayerControl = com.bamtang.soul.brawler.BRW_PlayerControl;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                class BRW_World {
                    constructor(canvas, game, worldFile) {
                        this.m_rangeTilesBelow = 0;
                        this.m_canvas = canvas;
                        this.m_game = game;
                        this.m_layers = new Array();
                        this.m_playerCanvas = null;
                        this.m_objectsCanvas = new Array();
                        this.m_player = null;
                        this.m_worldXml = xml2js(Application.instance.getXMLData(worldFile), { compact: true, spaces: 4 }).world;
                        for (var xd in this.m_worldXml.properties) {
                            this.m_worldXml.properties[xd] = this.m_worldXml.properties[xd]._text;
                        }
                        for (var xd in this.m_worldXml.kipuHeader.kipu) {
                            this.m_worldXml.kipuHeader.kipu[xd] = this.m_worldXml.kipuHeader.kipu[xd]._attributes;
                        }
                        for (var xd in this.m_worldXml.layer) {
                            if (this.m_worldXml.layer[xd].kipuObject == undefined) {
                                var tmpitem_tile = this.m_worldXml.layer[xd].tile;
                                var tmpitem_gpx = this.m_worldXml.layer[xd].gpx;
                                var tmpitem_object = this.m_worldXml.layer[xd].object;
                                this.m_worldXml.layer[xd] = this.m_worldXml.layer[xd]._attributes;
                                if (tmpitem_tile != undefined) {
                                    this.m_worldXml.layer[xd].tile = tmpitem_tile;
                                }
                                if (tmpitem_gpx != undefined) {
                                    this.m_worldXml.layer[xd].gpx = tmpitem_gpx;
                                    for (var xd1 in this.m_worldXml.layer[xd].gpx) {
                                        this.m_worldXml.layer[xd].gpx[xd1] = this.m_worldXml.layer[xd].gpx[xd1]._attributes;
                                    }
                                }
                                if (tmpitem_object != undefined) {
                                    this.m_worldXml.layer[xd].object = tmpitem_object;
                                    for (var xd1 in this.m_worldXml.layer[xd].object) {
                                        this.m_worldXml.layer[xd].object[xd1] = this.m_worldXml.layer[xd].object[xd1]._attributes;
                                    }
                                }
                            }
                            else {
                                var tmpitem2 = this.m_worldXml.layer[xd].kipuObject;
                                this.m_worldXml.layer[xd] = this.m_worldXml.layer[xd]._attributes;
                                this.m_worldXml.layer[xd].kipuObject = tmpitem2;
                                for (var xd2 in this.m_worldXml.layer[xd].kipuObject) {
                                    this.m_worldXml.layer[xd].kipuObject[xd2] = this.m_worldXml.layer[xd].kipuObject[xd2]._attributes;
                                }
                            }
                        }
                        this.loadData(this.m_worldXml.properties);
                        this.createCamera();
                        this.createNpcManagers();
                        this.createLayers();
                        this.m_effectManager = new BRW_EffectManagerExt(this);
                    }
                    free() {
                        if (this.m_player) {
                            this.m_player.free();
                            this.m_player = null;
                        }
                        this.m_actorManager.free();
                        this.m_actorManager = null;
                        if (this.m_effectManager != null) {
                            this.m_effectManager.free();
                            this.m_effectManager = null;
                        }
                        if (this.m_playerCanvas != this.m_objectsCanvas[0]) {
                            this.m_canvas.removeChild(this.m_playerCanvas);
                            try {
                                this.m_playerCanvas.destroy();
                            }
                            catch (e) { }
                            this.m_playerCanvas = null;
                        }
                        var k;
                        for (k = 0; k < this.m_objectsCanvas.length; ++k) {
                            this.m_canvas.removeChild(this.m_objectsCanvas[k]);
                            try {
                                this.m_objectsCanvas[k].destroy();
                            }
                            catch (e) { }
                        }
                        this.m_objectsCanvas = null;
                        this.m_collisions = null;
                        if (this.m_markers) {
                            this.m_markers.free();
                            this.m_markers = null;
                        }
                        if (this.m_camera) {
                            this.m_camera.free();
                            this.m_camera = null;
                        }
                        for (k = 0; k < this.m_layers.length; ++k) {
                            this.m_layers[k].free();
                            this.m_layers[k] = null;
                        }
                        this.m_layers = null;
                    }
                    game() {
                        return this.m_game;
                    }
                    canvas() {
                        return this.m_canvas;
                    }
                    objectsCanvas() {
                        return this.m_objectsCanvas[0];
                    }
                    player() {
                        return this.m_player;
                    }
                    camera() {
                        return this.m_camera;
                    }
                    width() {
                        return this.m_width;
                    }
                    height() {
                        return this.m_height;
                    }
                    tileHeight() {
                        return this.m_collisions.tileHeight();
                    }
                    tileWidth() {
                        return this.m_collisions.tileWidth();
                    }
                    actorManager() {
                        return this.m_actorManager;
                    }
                    getLayer(name) {
                        return this.m_layerNames[name];
                    }
                    getPoint(name) {
                        return this.m_markers.getPoint(name);
                    }
                    getZone(name) {
                        return this.m_markers.getZone(name);
                    }
                    getCircle(name) {
                        return this.m_markers.getCircle(name);
                    }
                    getPath(name) {
                        return this.m_markers.getPath(name);
                    }
                    getSpawnPosition(k) {
                        return this.m_markers.getSpawnPosition(k);
                    }
                    spawnPoints() {
                        return this.m_markers.spawnPoints();
                    }
                    effectManager() {
                        return this.m_effectManager;
                    }
                    getTileBelow(x, y) {
                        if (this.m_collisions) {
                            return this.m_collisions.getTileBelow(x, y, this.m_rangeTilesBelow);
                        }
                        Application.error("getTileBelow: no collisions");
                        return brawler.BRW_WorldCollisionLayer.CELL_EMPTY;
                    }
                    getFloorCollision(x, y) {
                        if (this.m_collisions) {
                            return this.m_collisions.getFloorCollision(x, y);
                        }
                        Application.error("getFloorCollision: no collisions");
                        return new Vector2D(x, y);
                    }
                    getMaxFloorRange(x, y, max = BRW_World.MAX_SCAN_FLOOR) {
                        if (this.m_collisions) {
                            return this.m_collisions.getMaxFloorRange(x, y, max);
                        }
                        Application.error("getMaxFloorRange: no collisions");
                        return new PIXI.Rectangle(x, y);
                    }
                    getMaxFloorRangeElevations(x, y, max = BRW_World.MAX_SCAN_FLOOR) {
                        if (this.m_collisions) {
                            return this.m_collisions.getMaxFloorRangeElevations(x, y, max);
                        }
                        Application.error("getMaxFloorRangeElevations: no collisions");
                        return new PIXI.Rectangle(x, y);
                    }
                    getRayCollision(x, y, dir, range) {
                        if (this.m_collisions) {
                            return this.m_collisions.getRayCollision(x, y, dir, range);
                        }
                        return null;
                    }
                    showCollision(show) {
                        show = Global.COLLISION_DEBUG;
                        this.m_player.showCollision(show);
                        this.m_actorManager.showCollision(show);
                        this.m_collisions.setVisible(show);
                        this.m_camera.showCollision(show);
                    }
                    refreshCollision() {
                        this.m_collisions.refresh();
                    }
                    setCollisionCell(x, y, cell) {
                        this.m_collisions.setCell(x, y, cell);
                    }
                    setRangeCollisionCell(leftUpX, leftUpY, bottomRightX, bottomRightY, typeCell, refresh = false) {
                        for (var x = leftUpX; x <= bottomRightX; ++x) {
                            for (var y = leftUpY; y <= bottomRightY; ++y) {
                                this.setCollisionCell(x, y, typeCell);
                            }
                        }
                        if (refresh) {
                            this.refreshCollision();
                        }
                    }
                    getCellInPosition(x, y) {
                        return this.m_collisions.getCellInPosition(x, y);
                    }
                    checkWorldBoundaries(actor) {
                        var actorBounds = actor.bounds();
                        if (actorBounds) {
                            if (actor.limitLeft() && actor.x() + actorBounds.left < this.m_collisions.tileWidth()) {
                                actor.setX(this.m_collisions.tileWidth() - actorBounds.left);
                            }
                            if (actor.limitRight() && actor.x() + actorBounds.right > this.m_width - this.m_collisions.tileWidth()) {
                                actor.setX(this.m_width - this.m_collisions.tileWidth() - actorBounds.right);
                            }
                            if (actor.limitUp() && actor.y() + actorBounds.top <= 0) {
                                actor.setY(-actorBounds.top);
                            }
                            if (actor.limitBottom() && actor.y() + actorBounds.bottom >= this.m_height) {
                                actor.setY(this.m_height - actorBounds.bottom);
                            }
                        }
                    }
                    checkCollision(actor) {
                        var collision = new Vector2D(0, 0);
                        var corners = actor.corners();
                        if (corners) {
                            var overPlatform = false;
                            for (var k = 0; k < corners.length; ++k) {
                                if (corners[k]) {
                                    var collisionPoint = corners[k];
                                    this.m_pointX = ~~(actor.x() + collisionPoint.position.x);
                                    this.m_pointY = ~~(actor.y() + collisionPoint.position.y);
                                    var coll = this.m_collisions.checkCollision(this.m_pointX, this.m_pointY, collisionPoint.normal, actor);
                                    if (coll) {
                                        if (collision.x == 0 && coll.x != 0) {
                                            collision.x += coll.x;
                                        }
                                        if (collision.y == 0 && coll.y != 0) {
                                            collision.y += coll.y;
                                        }
                                    }
                                    if (!overPlatform) {
                                        coll = this.m_collisions.checkPlatforms(this.m_pointX, this.m_pointY, collisionPoint.normal, actor);
                                        if (coll) {
                                            overPlatform = true;
                                            if (collision.x == 0 && coll.x != 0) {
                                                collision.x += coll.x;
                                            }
                                            if (collision.y == 0 && coll.y != 0) {
                                                collision.y += coll.y;
                                            }
                                        }
                                    }
                                    if (collision.x != 0 && collision.y != 0) {
                                        break;
                                    }
                                }
                            }
                            if (collision.y != 0 || collision.x != 0) {
                                return collision;
                            }
                        }
                        return null;
                    }
                    update(dt) {
                        if (dt > BRW_World.MAX_DELTA_TIME) {
                            dt = BRW_World.MAX_DELTA_TIME;
                        }
                        this.m_actorManager.update(dt);
                        this.m_player.update(dt);
                        if (this.m_effectManager != null) {
                            this.m_effectManager.update(dt);
                        }
                        for (var k = 0; k < this.m_layers.length; ++k) {
                            if (this.m_layers[k].visible) {
                                this.m_layers[k].render();
                            }
                        }
                        this.m_camera.update(dt);
                        this.m_player.showInCamera(this.m_camera);
                    }
                    addMovilePlatform(platform) {
                        this.m_collisions.addMovilePlatform(platform);
                    }
                    static getData(dataType, data, dataName) {
                        var property = data[dataName];
                        if (property == undefined) {
                            Application.error("Property not found: " + dataName);
                        }
                        if (dataType == "int" || dataType == "Number")
                            return Number(property);
                        return String(property);
                    }
                    static getOptionalData(dataType, //class
                    data, dataName, defaultVal, showWarning = true) {
                        var property = data[dataName];
                        if (property == undefined) {
                            if (showWarning) {
                                Application.error("Optional property not found: " + dataName + " using: " + defaultVal);
                            }
                            return defaultVal;
                        }
                        if (dataType == "int" || dataType == "Number")
                            return Number(property);
                        return String(property);
                    }
                    loadData(data) {
                        this.m_width = BRW_World.getData("Number", data, "width");
                        this.m_height = BRW_World.getData("Number", data, "height");
                        this.showCollisions = Boolean(BRW_World.getData("Number", data, "showCollisions") == 1);
                        this.playerInitX = BRW_World.getData("Number", data, "playerX");
                        this.playerInitY = BRW_World.getData("Number", data, "playerY");
                        this.cameraWidth = BRW_World.getData("Number", data, "cameraWidth");
                        this.cameraHeight = BRW_World.getData("Number", data, "cameraHeight");
                        this.cameraScreenX = BRW_World.getData("Number", data, "cameraScreenX");
                        this.cameraScreenY = BRW_World.getData("Number", data, "cameraScreenY");
                        this.cameraInitX = BRW_World.getData("Number", data, "cameraInitX");
                        this.cameraInitY = BRW_World.getData("Number", data, "cameraInitY");
                        this.cameraYMax = BRW_World.getData("Number", data, "cameraYMax");
                        this.cameraYMin = BRW_World.getData("Number", data, "cameraYMin");
                        this.cameraXMax = BRW_World.getData("Number", data, "cameraXMax");
                        this.cameraXMin = BRW_World.getData("Number", data, "cameraXMin");
                        this.useEmbeddedAssets = (BRW_World.getData("Number", data, "useEmbeddedAssets") == 1);
                        this.showCollisions = Global.COLLISION_DEBUG;
                    }
                    createCamera() {
                        this.m_camera = new BRW_CameraExt(this, this.cameraWidth, this.cameraHeight, this.cameraScreenX, this.cameraScreenY, this.cameraInitX, this.cameraInitY);
                        this.m_camera.setScale(1);
                    }
                    createNpcManagers() {
                        this.m_actorManager = new BRW_NpcManagerExt(this);
                    }
                    addNpc(xmlNpc, objectCanvas) {
                        this.m_actorManager.addNpc(new brawler.BRW_Npc(parseInt(xmlNpc.id), Number(xmlNpc.x), Number(xmlNpc.y), objectCanvas, xmlNpc.params));
                    }
                    createLayers() {
                        this.m_layerNames = new Object();
                        var numLayers = this.m_worldXml.layer.length;
                        for (var k = 0; k < numLayers; ++k) {
                            this.addLayer(this.m_worldXml.layer[k].type, this.m_worldXml.layer[k]);
                        }
                        if (!this.m_playerCanvas) {
                            this.m_playerCanvas = this.m_objectsCanvas[0];
                        }
                        this.m_worldXml = null;
                    }
                    addLayer(type, layerXml) {
                        if (type == brawler.BRW_WorldBaseLayer.ID_OBJECTS) {
                            if (layerXml.object) {
                                var numObjects = layerXml.object.length;
                                if (numObjects > 0) {
                                    var objectsCanvas = new MovieClip();
                                    var temLayer = new Layer(objectsCanvas);
                                    objectsCanvas.layer = temLayer;
                                    if (this.m_postTileCanvas == null) {
                                        this.m_postTileCanvas = new MovieClip();
                                        this.m_canvas.addChild(this.m_postTileCanvas);
                                    }
                                    this.m_objectsCanvas.push(objectsCanvas);
                                    this.m_canvas.addChild(objectsCanvas);
                                    for (var i = 0; i < numObjects; ++i) {
                                        this.addNpc(layerXml.object[i], null);
                                    }
                                }
                            }
                        }
                        else if (type == brawler.BRW_WorldBaseLayer.ID_SPRITES) {
                            var spriteLayer = new BRW_WorldSpriteLayerExt(this, layerXml);
                            this.m_layerNames[spriteLayer.name()] = spriteLayer;
                            this.m_layers.push(spriteLayer);
                        }
                        else if (type == brawler.BRW_WorldBaseLayer.ID_MARKERS) {
                            if (!this.m_markers) {
                                this.m_markers = new BRW_WorldMarkerLayerExt(this, layerXml);
                            }
                            else {
                                this.m_markers.loadData(layerXml);
                            }
                        }
                        else if (type == brawler.BRW_WorldBaseLayer.ID_PLAYER) {
                            this.m_playerCanvas = new MovieClip();
                            this.m_canvas.addChild(this.m_playerCanvas);
                        }
                        else if (type == brawler.BRW_WorldBaseLayer.ID_COLLISIONS) {
                            this.m_collisions = new BRW_WorldCollisionLayerExt(this, layerXml);
                            this.m_layerNames[this.m_collisions.name()] = this.m_collisions;
                            this.m_layers.push(this.m_collisions);
                            this.m_rangeTilesBelow = 2 * this.m_collisions.tileHeight();
                        }
                        else {
                            var tileLayer = new BRW_WorldTileLayerExt(this, layerXml);
                            this.m_layerNames[tileLayer.name()] = tileLayer;
                            this.m_layers.push(tileLayer);
                        }
                    }
                    //override
                    addEffect(nameClip, x, y, loop = 1, onEndAnimation = null) {
                        return null;
                    }
                    get kipuItemsData() {
                        return null;
                    }
                    loadKipuItemsData(data) {
                    }
                    init() {
                        this.m_canvas.x = this.m_camera.screenX;
                        this.m_canvas.y = this.m_camera.screenY;
                        for (var k = 0; k < this.m_layers.length; ++k) {
                            this.m_layers[k].init();
                        }
                    }
                    postTileCanvas() {
                        return this.m_postTileCanvas;
                    }
                }
                BRW_World.MAX_DELTA_TIME = 50;
                BRW_World.MAX_SCAN_FLOOR = 750;
                brawler.BRW_World = BRW_World;
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_World = com.bamtang.soul.brawler.BRW_World;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                class BRW_WorldCollisionLayer extends BRW_WorldTileLayerExt {
                    constructor(world, layerXML) {
                        super(world, layerXML);
                        this.m_type = BRW_WorldTileLayerExt.TYPE_COLLISIONS;
                        this.m_canvas.visible = Global.COLLISION_DEBUG;
                        this.m_frames = new Array();
                        for (var k = BRW_WorldCollisionLayer.CELL_EMPTY; k <= BRW_WorldCollisionLayer.CELL_HALF_HORIZONTAL; ++k) {
                            this.m_frames.push(BRW_WorldCollisionLayer.COLLISION_SET + k);
                        }
                        this.m_platforms = new Array();
                    }
                    /*override*/ initCell(kx, ky) {
                        if (this.m_world.showCollisions) {
                            var cell = this.getCell(kx + this.m_minX, ky + this.m_minY);
                            if (cell > BRW_WorldCollisionLayer.CELL_EMPTY) {
                                var tile = Global.app.getClip(this.m_frames[cell]);
                                tile.width = this.m_tileWidth - 2;
                                tile.height = this.m_tileWidth - 2;
                                tile.cacheAsBitmap = true;
                                tile.x = (kx + this.m_minX) * this.m_tileWidth;
                                tile.y = (ky + this.m_minY) * this.m_tileHeight;
                                this.setBufferCell(kx, ky, tile);
                                this.m_canvas.addChild(tile);
                            }
                        }
                    }
                    /*override*/ refresh() {
                        if (this.m_world.showCollisions) {
                            super.refresh();
                        }
                    }
                    addMovilePlatform(platform) {
                        this.m_platforms.push(platform);
                    }
                    checkPlatforms(px, py, normal, actor) {
                        actor.setVehicle(null);
                        if (normal.y > 0 && actor.speed2D().y > 0 && !actor.control().isJumpingDown()) {
                            for (var k = 0; k < this.m_platforms.length; ++k) {
                                if (!this.m_platforms[k].isVehicle()) {
                                    continue;
                                }
                                var ax = this.m_platforms[k].x();
                                var bx = this.m_platforms[k].bounds().x;
                                var ay = this.m_platforms[k].y();
                                var by = this.m_platforms[k].bounds().y;
                                if (px <= ax + bx + this.m_platforms[k].bounds().width &&
                                    px >= ax + bx &&
                                    py >= ay + by &&
                                    py <= ay + by + this.m_platforms[k].bounds().height) {
                                    actor.setVehicle(this.m_platforms[k]);
                                    return new Vector2D(0, ay + by - py);
                                }
                            }
                        }
                        return null;
                    }
                    checkCollision(px, py, normal, actor) {
                        this.m_tileX = ~~(px / this.m_tileWidth);
                        this.m_tileY = ~~(py / this.m_tileHeight);
                        var dx;
                        var dy;
                        switch (this.getCell(this.m_tileX, this.m_tileY)) {
                            case BRW_WorldCollisionLayer.CELL_PLATFORM:
                                if (normal.y > 0 && !actor.control().isJumpingUp() && !actor.control().isJumpingDown()) {
                                    if (normal.x > 0 && this.getCell(this.m_tileX, this.m_tileY - 1) == BRW_WorldCollisionLayer.CELL_DIAG_UP_LEFT) {
                                        dy = ~~(px - this.m_tileX * this.m_tileWidth);
                                        return new Vector2D(0, ~~(this.m_tileY * this.m_tileHeight - py - dy));
                                    }
                                    if (normal.x < 0 && this.getCell(this.m_tileX, this.m_tileY - 1) == BRW_WorldCollisionLayer.CELL_DIAG_UP_RIGHT) {
                                        dy = ~~((this.m_tileX + 1) * this.m_tileWidth - px);
                                        return new Vector2D(0, ~~(this.m_tileY * this.m_tileHeight - py - dy));
                                    }
                                    if (actor.speed2D().y > 0 && this.getCell(this.m_tileX, this.m_tileY - 1) == BRW_WorldCollisionLayer.CELL_EMPTY) {
                                        if (actor.speed2D().y >= BRW_WorldCollisionLayer.MAX_VY_SPEED_PLATFORM || (py - this.m_tileY * this.m_tileHeight <= 0.5 * this.m_tileHeight)) {
                                            return new Vector2D(0, ~~(this.m_tileY * this.m_tileHeight - py));
                                        }
                                    }
                                }
                                break;
                            case BRW_WorldCollisionLayer.CELL_DIAG_UP_RIGHT:
                                if (normal.y > 0 && !actor.control().isJumpingUp()) {
                                    dx = ~~(px - this.m_tileX * this.m_tileWidth);
                                    dy = ~~(py - this.m_tileY * this.m_tileWidth);
                                    if (dx < dy) {
                                        if (normal.x <= 0) {
                                            if (actor.control().forceX() == 0) {
                                                return new Vector2D(0, dx - dy);
                                            }
                                            dx = (dy - dx) / 2;
                                            this.m_number = actor.control().slopeFriction * dx;
                                            return new Vector2D(dx + this.m_number, -dx + this.m_number);
                                        }
                                    }
                                }
                                break;
                            case BRW_WorldCollisionLayer.CELL_DIAG_UP_LEFT:
                                if (normal.y > 0 && !actor.control().isJumpingUp()) {
                                    dx = (this.m_tileX + 1) * this.m_tileWidth - px;
                                    dy = py - this.m_tileY * this.m_tileWidth;
                                    if (dx < dy) {
                                        if (normal.x >= 0) {
                                            if (actor.control().forceX() == 0) {
                                                return new Vector2D(0, dx - dy);
                                            }
                                            dx = (dy - dx) / 2;
                                            this.m_number = actor.control().slopeFriction * dx;
                                            return new Vector2D(-dx - this.m_number, -dx + this.m_number);
                                        }
                                    }
                                }
                                break;
                            case BRW_WorldCollisionLayer.CELL_MD_UP_RIGHT:
                                break;
                            case BRW_WorldCollisionLayer.CELL_MD_UP_LEFT:
                                break;
                            case BRW_WorldCollisionLayer.CELL_HMD_UP_RIGHT:
                                break;
                            case BRW_WorldCollisionLayer.CELL_HMD_UP_LEFT:
                                break;
                            case BRW_WorldCollisionLayer.CELL_HALF_HORIZONTAL:
                                if (normal.y > 0 && !actor.control().isJumpingUp()) {
                                    if (actor.speed2D().y > 0 && this.getCell(this.m_tileX, this.m_tileY - 1) == BRW_WorldCollisionLayer.CELL_EMPTY && (py - this.m_tileY * this.m_tileHeight > 0.5 * this.m_tileHeight)) {
                                        return new Vector2D(0, (0.5 + this.m_tileY) * this.m_tileHeight - py);
                                    }
                                }
                                break;
                            case BRW_WorldCollisionLayer.CELL_FULL:
                                if (normal.x == 0) {
                                    if (normal.y > 0) {
                                        return new Vector2D(0, this.m_tileY * this.m_tileHeight - py);
                                    }
                                    else {
                                        return new Vector2D(0, (this.m_tileY + 1) * this.m_tileHeight - py);
                                    }
                                }
                                else if (normal.y == 0) {
                                    if (actor.speed2D().y >= BRW_WorldCollisionLayer.MIN_VY_FRICTION) {
                                        actor.setFallingOverWall(true);
                                    }
                                    if (normal.x > 0) {
                                        if (this.getCell(this.m_tileX - 1, this.m_tileY) == BRW_WorldCollisionLayer.CELL_EMPTY) {
                                            return new Vector2D(this.m_tileX * this.m_tileWidth - px, 0);
                                        }
                                    }
                                    else {
                                        if (this.getCell(this.m_tileX + 1, this.m_tileY) == BRW_WorldCollisionLayer.CELL_EMPTY) {
                                            return new Vector2D((this.m_tileX + 1) * this.m_tileWidth - px, 0);
                                        }
                                    }
                                }
                                else if (normal.y > 0) {
                                    if (normal.x > 0) {
                                        if (this.getCell(this.m_tileX, this.m_tileY - 1) == BRW_WorldCollisionLayer.CELL_DIAG_UP_LEFT) {
                                            if (this.getCell(this.m_tileX - 1, this.m_tileY) == BRW_WorldCollisionLayer.CELL_DIAG_UP_LEFT) {
                                                dx = px - this.m_tileX * this.m_tileWidth;
                                                dx += py - this.m_tileY * this.m_tileHeight;
                                                if (actor.control().forceX() == 0) {
                                                    return new Vector2D(0, -dx);
                                                }
                                                dx /= 2;
                                                this.m_number = actor.control().slopeFriction * dx;
                                                return new Vector2D(-dx - this.m_number, -dx + this.m_number);
                                            }
                                            dy = px - this.m_tileX * this.m_tileWidth;
                                            return new Vector2D(0, this.m_tileY * this.m_tileHeight - py - dy);
                                        }
                                        else if (this.getCell(this.m_tileX - 1, this.m_tileY) == BRW_WorldCollisionLayer.CELL_DIAG_UP_LEFT) {
                                            if (this.getCell(this.m_tileX, this.m_tileY - 1) == BRW_WorldCollisionLayer.CELL_FULL) {
                                                dx = px - this.m_tileX * this.m_tileWidth;
                                                dx = (dx + py - this.m_tileY * this.m_tileHeight) / 2;
                                                this.m_number = -dx - actor.control().slopeFriction * dx;
                                                if (px + this.m_number > this.m_tileX * this.m_tileWidth) {
                                                    return new Vector2D(-px + this.m_tileX * this.m_tileWidth, -py + this.m_tileY * this.m_tileHeight);
                                                }
                                                return new Vector2D(this.m_number, -dx + actor.control().slopeFriction * dx);
                                            }
                                            else if (this.getCell(this.m_tileX, this.m_tileY - 1) == BRW_WorldCollisionLayer.CELL_EMPTY) {
                                                dx = px - this.m_tileX * this.m_tileWidth;
                                                dx = (dx + py - this.m_tileY * this.m_tileHeight) / 2;
                                                this.m_number = -dx - actor.control().slopeFriction * dx;
                                                if (px + this.m_number > this.m_tileX * this.m_tileWidth || actor.control().forceX() == 0) {
                                                    return new Vector2D(0, -py + this.m_tileY * this.m_tileHeight);
                                                }
                                                return new Vector2D(this.m_number, -dx + actor.control().slopeFriction * dx);
                                            }
                                        }
                                        else if (this.getCell(this.m_tileX, this.m_tileY - 1) == BRW_WorldCollisionLayer.CELL_FULL) {
                                            if (this.getCell(this.m_tileX - 1, this.m_tileY) == BRW_WorldCollisionLayer.CELL_FULL) {
                                                return new Vector2D(this.m_tileX * this.m_tileWidth - px, this.m_tileY * this.m_tileHeight - py);
                                            }
                                            else {
                                                if (actor.speed2D().y >= BRW_WorldCollisionLayer.MIN_VY_FRICTION) {
                                                    actor.setFallingOverWall(true);
                                                }
                                                return new Vector2D(this.m_tileX * this.m_tileWidth - px, 0);
                                            }
                                        }
                                        else if (this.getCell(this.m_tileX - 1, this.m_tileY) == BRW_WorldCollisionLayer.CELL_FULL) {
                                            return new Vector2D(0, this.m_tileY * this.m_tileHeight - py);
                                        }
                                        else {
                                            if (py - this.m_tileY * this.m_tileHeight > px - this.m_tileX * this.m_tileWidth) {
                                                if (actor.speed2D().y >= BRW_WorldCollisionLayer.MIN_VY_FRICTION) {
                                                    actor.setFallingOverWall(true);
                                                }
                                                return new Vector2D(this.m_tileX * this.m_tileWidth - px, 0);
                                            }
                                            else {
                                                return new Vector2D(0, this.m_tileY * this.m_tileHeight - py);
                                            }
                                        }
                                    }
                                    else {
                                        if (this.getCell(this.m_tileX, this.m_tileY - 1) == BRW_WorldCollisionLayer.CELL_DIAG_UP_RIGHT) {
                                            if (this.getCell(this.m_tileX + 1, this.m_tileY) == BRW_WorldCollisionLayer.CELL_DIAG_UP_RIGHT) {
                                                dx = (this.m_tileX + 1) * this.m_tileWidth - px;
                                                dx += py - this.m_tileY * this.m_tileHeight;
                                                if (actor.control().forceX() == 0) {
                                                    return new Vector2D(0, -dx);
                                                }
                                                dx /= 2;
                                                this.m_number = actor.control().slopeFriction * dx;
                                                return new Vector2D(dx + this.m_number, -dx + this.m_number);
                                            }
                                            dy = (this.m_tileX + 1) * this.m_tileWidth - px;
                                            return new Vector2D(0, this.m_tileY * this.m_tileHeight - py - dy);
                                        }
                                        else if (this.getCell(this.m_tileX + 1, this.m_tileY) == BRW_WorldCollisionLayer.CELL_DIAG_UP_RIGHT) {
                                            if (this.getCell(this.m_tileX, this.m_tileY - 1) == BRW_WorldCollisionLayer.CELL_FULL) {
                                                dx = (this.m_tileX + 1) * this.m_tileWidth - px;
                                                dx = (dx + py - this.m_tileY * this.m_tileHeight) / 2;
                                                this.m_number = dx + actor.control().slopeFriction * dx;
                                                if (px + this.m_number < (this.m_tileX + 1) * this.m_tileWidth) {
                                                    return new Vector2D((this.m_tileX + 1) * this.m_tileWidth - px, -py + this.m_tileY * this.m_tileHeight);
                                                }
                                                return new Vector2D(this.m_number, -dx + actor.control().slopeFriction * dx);
                                            }
                                            else if (this.getCell(this.m_tileX, this.m_tileY - 1) == BRW_WorldCollisionLayer.CELL_EMPTY) {
                                                dx = (this.m_tileX + 1) * this.m_tileWidth - px;
                                                dx = (dx + py - this.m_tileY * this.m_tileHeight) / 2;
                                                this.m_number = dx + actor.control().slopeFriction * dx;
                                                if (px + this.m_number < (this.m_tileX + 1) * this.m_tileWidth || actor.control().forceX() == 0) {
                                                    return new Vector2D(0, -py + this.m_tileY * this.m_tileHeight);
                                                }
                                                return new Vector2D(this.m_number, -dx + actor.control().slopeFriction * dx);
                                            }
                                        }
                                        else if (this.getCell(this.m_tileX, this.m_tileY - 1) == BRW_WorldCollisionLayer.CELL_FULL) {
                                            if (this.getCell(this.m_tileX + 1, this.m_tileY) == BRW_WorldCollisionLayer.CELL_FULL) {
                                                return new Vector2D((this.m_tileX + 1) * this.m_tileWidth - px, this.m_tileY * this.m_tileHeight - py);
                                            }
                                            else {
                                                if (actor.speed2D().y >= BRW_WorldCollisionLayer.MIN_VY_FRICTION) {
                                                    actor.setFallingOverWall(true);
                                                }
                                                return new Vector2D((this.m_tileX + 1) * this.m_tileWidth - px, 0);
                                            }
                                        }
                                        else if (this.getCell(this.m_tileX + 1, this.m_tileY) == BRW_WorldCollisionLayer.CELL_FULL) {
                                            return new Vector2D(0, this.m_tileY * this.m_tileHeight - py);
                                        }
                                        else {
                                            if (py - this.m_tileY * this.m_tileHeight > (this.m_tileX + 1) * this.m_tileWidth - px) {
                                                if (actor.speed2D().y >= BRW_WorldCollisionLayer.MIN_VY_FRICTION) {
                                                    actor.setFallingOverWall(true);
                                                }
                                                return new Vector2D((this.m_tileX + 1) * this.m_tileWidth - px, 0);
                                            }
                                            else {
                                                return new Vector2D(0, this.m_tileY * this.m_tileHeight - py);
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (normal.x > 0) {
                                        if (this.getCell(this.m_tileX, this.m_tileY + 1) == BRW_WorldCollisionLayer.CELL_FULL) {
                                            if (this.getCell(this.m_tileX - 1, this.m_tileY) == BRW_WorldCollisionLayer.CELL_FULL) {
                                                return new Vector2D(this.m_tileX * this.m_tileWidth - px, (this.m_tileY + 1) * this.m_tileHeight - py);
                                            }
                                            else {
                                                if (actor.speed2D().y >= BRW_WorldCollisionLayer.MIN_VY_FRICTION) {
                                                    actor.setFallingOverWall(true);
                                                }
                                                return new Vector2D(this.m_tileX * this.m_tileWidth - px, 0);
                                            }
                                        }
                                        else if (this.getCell(this.m_tileX - 1, this.m_tileY) == BRW_WorldCollisionLayer.CELL_FULL) {
                                            return new Vector2D(0, (this.m_tileY + 1) * this.m_tileHeight - py);
                                        }
                                        else {
                                            if ((this.m_tileY + 1) * this.m_tileHeight - py > px - this.m_tileX * this.m_tileWidth) {
                                                actor.setFallingOverWall(true);
                                                return new Vector2D(this.m_tileX * this.m_tileWidth - px, 0);
                                            }
                                            else {
                                                return new Vector2D(0, (this.m_tileY + 1) * this.m_tileHeight - py);
                                            }
                                        }
                                    }
                                    else {
                                        if (this.getCell(this.m_tileX, this.m_tileY + 1) == BRW_WorldCollisionLayer.CELL_FULL) {
                                            if (this.getCell(this.m_tileX + 1, this.m_tileY) == BRW_WorldCollisionLayer.CELL_FULL) {
                                                return new Vector2D((this.m_tileX + 1) * this.m_tileWidth - px, (this.m_tileY + 1) * this.m_tileHeight - py);
                                            }
                                            else {
                                                if (actor.speed2D().y >= BRW_WorldCollisionLayer.MIN_VY_FRICTION) {
                                                    actor.setFallingOverWall(true);
                                                }
                                                return new Vector2D((this.m_tileX + 1) * this.m_tileWidth - px, 0);
                                            }
                                        }
                                        else if (this.getCell(this.m_tileX + 1, this.m_tileY) == BRW_WorldCollisionLayer.CELL_FULL) {
                                            return new Vector2D(0, (this.m_tileY + 1) * this.m_tileHeight - py);
                                        }
                                        else {
                                            if ((this.m_tileY + 1) * this.m_tileHeight - py > (this.m_tileX + 1) * this.m_tileWidth - px) {
                                                if (actor.speed2D().y >= BRW_WorldCollisionLayer.MIN_VY_FRICTION) {
                                                    actor.setFallingOverWall(true);
                                                }
                                                return new Vector2D((this.m_tileX + 1) * this.m_tileWidth - px, 0);
                                            }
                                            else {
                                                return new Vector2D(0, (this.m_tileY + 1) * this.m_tileHeight - py);
                                            }
                                        }
                                    }
                                }
                                break;
                        }
                        return null;
                    }
                    getMaxFloorRange(x, y, max) {
                        var ty = ~~(y / this.m_tileHeight);
                        var tx = ~~(x / this.m_tileWidth);
                        while (ty < this.m_height) {
                            if (this.getCell(tx, ty) != BRW_WorldCollisionLayer.CELL_EMPTY) {
                                var px = tx - 1;
                                while (this.getCell(px, ty) != BRW_WorldCollisionLayer.CELL_EMPTY && this.getCell(px, ty - 1) == BRW_WorldCollisionLayer.CELL_EMPTY) {
                                    if (x - --px * this.m_tileWidth >= max) {
                                        break;
                                    }
                                }
                                var left = (px + 1) * this.m_tileWidth;
                                px = tx + 1;
                                while (this.getCell(px, ty) != BRW_WorldCollisionLayer.CELL_EMPTY && this.getCell(px, ty - 1) == BRW_WorldCollisionLayer.CELL_EMPTY) {
                                    if (++px * this.m_tileWidth - x >= max) {
                                        break;
                                    }
                                }
                                return new PIXI.Rectangle(left, ty * this.m_tileHeight, px * this.m_tileWidth - left);
                            }
                            ++ty;
                        }
                        Application.warn("getMaxFloorRange: no floor found at x:" + x + " y:" + y);
                        return new PIXI.Rectangle(x, y, 0);
                    }
                    getMaxFloorRangeElevations(x, y, range) {
                        var ty = ~~(y / this.m_tileHeight);
                        var tx = ~~(x / this.m_tileWidth);
                        while (ty < this.m_height) {
                            var cell = this.getCell(tx, ty);
                            if (cell != BRW_WorldCollisionLayer.CELL_EMPTY) {
                                var limit = ~~((x - range) / this.m_tileWidth);
                                var loop = true;
                                var px = tx;
                                var py = ty;
                                do {
                                    switch (cell) {
                                        case BRW_WorldCollisionLayer.CELL_FULL:
                                        case BRW_WorldCollisionLayer.CELL_PLATFORM:
                                            switch (this.getCell(px - 1, py)) {
                                                case BRW_WorldCollisionLayer.CELL_EMPTY:
                                                    loop = false;
                                                    break;
                                                default:
                                                    switch (this.getCell(px - 1, py - 1)) {
                                                        case BRW_WorldCollisionLayer.CELL_FULL:
                                                            loop = false;
                                                            break;
                                                        case BRW_WorldCollisionLayer.CELL_DIAG_UP_RIGHT:
                                                            --py;
                                                            break;
                                                    }
                                            }
                                            break;
                                        case BRW_WorldCollisionLayer.CELL_DIAG_UP_LEFT:
                                            switch (this.getCell(px - 1, py + 1)) {
                                                case BRW_WorldCollisionLayer.CELL_EMPTY:
                                                    loop = false;
                                                    break;
                                                default:
                                                    ++py;
                                            }
                                            break;
                                        case BRW_WorldCollisionLayer.CELL_DIAG_UP_RIGHT:
                                            switch (this.getCell(px - 1, py - 1)) {
                                                case BRW_WorldCollisionLayer.CELL_EMPTY:
                                                    if (this.getCell(px - 1, py) == BRW_WorldCollisionLayer.CELL_EMPTY) {
                                                        loop = false;
                                                    }
                                                    break;
                                                case BRW_WorldCollisionLayer.CELL_FULL:
                                                    loop = false;
                                                    break;
                                                case BRW_WorldCollisionLayer.CELL_DIAG_UP_RIGHT:
                                                    --py;
                                                    break;
                                            }
                                            break;
                                        case BRW_WorldCollisionLayer.CELL_EMPTY:
                                            loop = false;
                                            break;
                                    }
                                    cell = this.getCell(--px, py);
                                } while (loop && px >= limit);
                                var left = (px + 1) * this.m_tileWidth;
                                var floorY = ~~(py * this.m_tileHeight);
                                loop = true;
                                limit = ~~((x + range) / this.m_tileWidth);
                                ++limit;
                                px = tx;
                                py = ty;
                                cell = this.getCell(tx, ty);
                                do {
                                    switch (cell) {
                                        case BRW_WorldCollisionLayer.CELL_FULL:
                                        case BRW_WorldCollisionLayer.CELL_PLATFORM:
                                            switch (this.getCell(px + 1, py)) {
                                                case BRW_WorldCollisionLayer.CELL_EMPTY:
                                                    loop = false;
                                                    break;
                                                default:
                                                    switch (this.getCell(px + 1, py - 1)) {
                                                        case BRW_WorldCollisionLayer.CELL_FULL:
                                                            loop = false;
                                                            break;
                                                        case BRW_WorldCollisionLayer.CELL_DIAG_UP_LEFT:
                                                            --py;
                                                            break;
                                                    }
                                            }
                                            break;
                                        case BRW_WorldCollisionLayer.CELL_DIAG_UP_LEFT:
                                            switch (this.getCell(px + 1, py - 1)) {
                                                case BRW_WorldCollisionLayer.CELL_EMPTY:
                                                    if (this.getCell(px + 1, py) == BRW_WorldCollisionLayer.CELL_EMPTY) {
                                                        loop = false;
                                                    }
                                                    break;
                                                case BRW_WorldCollisionLayer.CELL_FULL:
                                                    loop = false;
                                                    break;
                                                case BRW_WorldCollisionLayer.CELL_DIAG_UP_LEFT:
                                                    --py;
                                                    break;
                                            }
                                            break;
                                        case BRW_WorldCollisionLayer.CELL_DIAG_UP_RIGHT:
                                            switch (this.getCell(px + 1, py + 1)) {
                                                case BRW_WorldCollisionLayer.CELL_EMPTY:
                                                    loop = false;
                                                    break;
                                                default:
                                                    ++py;
                                            }
                                            break;
                                        case BRW_WorldCollisionLayer.CELL_EMPTY:
                                            loop = false;
                                            break;
                                    }
                                    cell = this.getCell(++px, py);
                                } while (loop && px <= limit);
                                return new PIXI.Rectangle(left, floorY, px * this.m_tileWidth - left, py * this.m_tileHeight - floorY);
                            }
                            ++ty;
                        }
                        Application.warn("getMaxFloorRange: no floor found at x:" + x + " y:" + y);
                        return new PIXI.Rectangle(x, y, 0);
                    }
                    getFloorCollision(x, y) {
                        var ty = ~~(y / this.m_tileHeight);
                        var tx = ~~(x / this.m_tileWidth);
                        while (ty < this.m_height) {
                            var cell = ~~(this.getCell(tx, ty));
                            if (cell != BRW_WorldCollisionLayer.CELL_EMPTY) {
                                switch (cell) {
                                    case BRW_WorldCollisionLayer.CELL_DIAG_UP_LEFT:
                                        return new Vector2D(x, ty * this.m_tileHeight + (tx + 1) * this.m_tileWidth - x);
                                    case BRW_WorldCollisionLayer.CELL_DIAG_UP_RIGHT:
                                        return new Vector2D(x, ty * this.m_tileHeight + x - tx * this.m_tileWidth);
                                }
                                return new Vector2D(x, ty * this.m_tileHeight);
                            }
                            ++ty;
                        }
                        Application.warn("getFloorCollision: no floor found");
                        return new Vector2D(x, y);
                    }
                    getTileBelow(x, y, range) {
                        var distance = 0;
                        var tx = ~~(x / this.m_tileWidth);
                        while (distance <= range) {
                            var cell = ~~(this.getCell(tx, ~~(y / this.m_tileHeight)));
                            if (cell != BRW_WorldCollisionLayer.CELL_EMPTY) {
                                return cell;
                            }
                            y += this.m_tileHeight;
                            distance += this.m_tileHeight;
                        }
                        return BRW_WorldCollisionLayer.CELL_EMPTY;
                    }
                    getRayCollision(x, y, dir, range) {
                        if ((dir.x != 0) && (dir.y != 0)) {
                            return null;
                        }
                        var ty = ~~(y / this.m_tileHeight);
                        var tx = ~~(x / this.m_tileWidth);
                        var inc = 0;
                        var maxDis = 0;
                        var countTiles = 0;
                        if (dir.x != 0) {
                            maxDis = ~~((x + range) / this.m_tileWidth) - tx;
                            inc = ~~((dir.x > 0) ? 1 : -1);
                            while (countTiles <= maxDis) {
                                if (this.getCell(tx, ty) != BRW_WorldCollisionLayer.CELL_EMPTY) {
                                    return new Vector2D((tx - inc) * this.m_tileWidth, y);
                                }
                                ++countTiles;
                                tx += inc;
                            }
                        }
                        else {
                            maxDis = ~~((y + range) / this.m_tileHeight) - ty;
                            inc = ~~((dir.y > 0) ? 1 : -1);
                            while (countTiles <= maxDis) {
                                if (this.getCell(tx, ty) != BRW_WorldCollisionLayer.CELL_EMPTY) {
                                    return new Vector2D(x, ty * this.m_tileHeight);
                                }
                                ++countTiles;
                                ty += inc;
                            }
                        }
                        return null;
                    }
                    /*override*/ addTileCell(tileX, tileY, bufferX, bufferY) {
                        var cell = ~~(this.getCell(tileX, tileY));
                        if (cell > BRW_WorldCollisionLayer.CELL_EMPTY) {
                            var tile = Global.app.getClip(this.m_frames[cell]);
                            tile.width = this.m_tileWidth - 2;
                            tile.height = this.m_tileHeight - 2;
                            tile.cacheAsBitmap = true;
                            tile.x = tileX * this.m_tileWidth;
                            tile.y = tileY * this.m_tileHeight;
                            this.setBufferCell(bufferX, bufferY, tile);
                            this.m_canvas.addChild(tile);
                        }
                    }
                    /*override*/ parallaxX() {
                        return this.m_world.camera().x();
                    }
                    /*override*/ parallaxY() {
                        return this.m_world.camera().y();
                    }
                    /*override*/ render() {
                        if (this.m_world.showCollisions) {
                            super.render();
                        }
                    }
                }
                BRW_WorldCollisionLayer.CELL_EMPTY = 0;
                BRW_WorldCollisionLayer.CELL_FULL = 1;
                BRW_WorldCollisionLayer.CELL_DIAG_UP_LEFT = 2;
                BRW_WorldCollisionLayer.CELL_DIAG_UP_RIGHT = 3;
                BRW_WorldCollisionLayer.CELL_DIAG_DOWN_RIGHT = 4;
                BRW_WorldCollisionLayer.CELL_DIAG_DOWN_LEFT = 5;
                BRW_WorldCollisionLayer.CELL_PLATFORM = 6;
                BRW_WorldCollisionLayer.CELL_FULL_ICE = 7;
                BRW_WorldCollisionLayer.CELL_FULL_WATER = 8;
                BRW_WorldCollisionLayer.CELL_FULL_SAND = 9;
                BRW_WorldCollisionLayer.CELL_MD_UP_LEFT = 10;
                BRW_WorldCollisionLayer.CELL_MD_UP_RIGHT = 11;
                BRW_WorldCollisionLayer.CELL_HMD_UP_LEFT = 12;
                BRW_WorldCollisionLayer.CELL_HMD_UP_RIGHT = 13;
                BRW_WorldCollisionLayer.CELL_HALF_HORIZONTAL = 14;
                BRW_WorldCollisionLayer.COLLISION_SET = "mc_set_collision_";
                BRW_WorldCollisionLayer.MIN_VY_FRICTION = -2;
                BRW_WorldCollisionLayer.MAX_VY_SPEED_PLATFORM = 2;
                brawler.BRW_WorldCollisionLayer = BRW_WorldCollisionLayer;
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_WorldCollisionLayer = com.bamtang.soul.brawler.BRW_WorldCollisionLayer;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                class BRW_WorldMarkerLayer extends BRW_WorldBaseLayerExt {
                    constructor(world, layerXml) {
                        super(world, layerXml);
                        this.m_points = new Object();
                        this.m_circles = new Object();
                        this.m_zones = new Object();
                        this.m_paths = new Object();
                        this.m_spawnPositions = new Array();
                        this.m_type = BRW_WorldBaseLayerExt.TYPE_MARKERS;
                        this.loadData(layerXml);
                    }
                    /*override*/ free() {
                        this.m_points = null;
                        this.m_circles = null;
                        this.m_zones = null;
                        this.m_paths = null;
                        this.m_spawnPositions = null;
                        super.free();
                    }
                    getPoint(name) {
                        return this.m_points[name];
                    }
                    getZone(name) {
                        return this.m_zones[name];
                    }
                    getCircle(name) {
                        return this.m_circles[name];
                    }
                    getPath(name) {
                        return this.m_paths[name];
                    }
                    getSpawnPosition(k) {
                        return this.m_spawnPositions[k];
                    }
                    spawnPoints() {
                        return this.m_spawnPositions.length;
                    }
                    loadData(layerXml_) {
                        var layerXml = layerXml_;
                        var numObjects = layerXml.point.length;
                        var name;
                        for (var k = 0; k < numObjects; ++k) {
                            var point = new Vector2D(Number(layerXml.point[k].x), Number(layerXml.point[k].y));
                            name = layerXml.point[k].name;
                            this.m_points[name] = point;
                            if (name.substr(0, 6) == "spawn_") {
                                var index = parseInt(name.substr(6));
                                if (index >= 0) {
                                    if (index >= this.m_spawnPositions.length) {
                                        this.m_spawnPositions.length = index + 1;
                                    }
                                    this.m_spawnPositions[index] = point;
                                }
                            }
                        }
                        numObjects = layerXml.circle.length;
                        for (k = 0; k < numObjects; ++k) {
                            var circle = new Circle(Number(layerXml.circle[k].x), Number(layerXml.circle[k].y), Number(layerXml.circle[k].r));
                            name = layerXml.circle[k].name;
                            this.m_circles[name] = circle;
                        }
                        numObjects = layerXml.rectangle.length;
                        for (k = 0; k < numObjects; ++k) {
                            var rectangle = new PIXI.Rectangle(Number(layerXml.rectangle[k].x), Number(layerXml.rectangle[k].y), Number(layerXml.rectangle[k].w), Number(layerXml.rectangle[k].h));
                            name = layerXml.rectangle[k].name;
                            this.m_zones[name] = rectangle;
                        }
                        numObjects = layerXml.path.length;
                        for (k = 0; k < numObjects; ++k) {
                            var path = new Path(layerXml.path[k]);
                            name = layerXml.path[k].name;
                            this.m_paths[name] = path;
                        }
                    }
                }
                brawler.BRW_WorldMarkerLayer = BRW_WorldMarkerLayer;
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_WorldMarkerLayer = com.bamtang.soul.brawler.BRW_WorldMarkerLayer;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                class BRW_WorldSpriteLayer extends BRW_WorldBaseLayerExt {
                    constructor(world, layerXml) {
                        super(world, layerXml);
                        this.m_type = BRW_WorldBaseLayerExt.TYPE_SPRITES;
                        var numObjects = layerXml.gpx.length;
                        for (var k = 0; k < numObjects; ++k) {
                            var spriteContainer = new MovieClip();
                            var sprite;
                            var name = String(layerXml.gpx[k].image);
                            if (this.m_world.useEmbeddedAssets) {
                                sprite = Global.app.getClip(name);
                            }
                            sprite.x -= sprite.width / 2;
                            sprite.y -= sprite.height / 2;
                            spriteContainer.addChild(sprite);
                            if (layerXml.gpx[k].sx != undefined) {
                                spriteContainer.scale.x = Number(layerXml.gpx[k].sx);
                            }
                            if (layerXml.gpx[k].sy != undefined) {
                                spriteContainer.scale.y = Number(layerXml.gpx[k].sy);
                            }
                            spriteContainer.x = Number(layerXml.gpx[k].x);
                            spriteContainer.y = Number(layerXml.gpx[k].y);
                            if (layerXml.gpx[k].rot != undefined) {
                                spriteContainer.rotation = (180 * Number(layerXml.gpx[k].rot)) / Math.PI;
                            }
                            this.m_canvas.addChild(spriteContainer);
                        }
                        this.m_world.canvas().addChild(this.m_canvas);
                    }
                }
                brawler.BRW_WorldSpriteLayer = BRW_WorldSpriteLayer;
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_WorldSpriteLayer = com.bamtang.soul.brawler.BRW_WorldSpriteLayer;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var brawler;
            (function (brawler) {
                var kipu;
                (function (kipu) {
                    class BRW_EntityObject extends kipu.BRW_Entity {
                        constructor(canvas, x, y, world, data) {
                            super(canvas, x, y, world);
                            this.data = data;
                            this.setActorClip(data.clipname);
                        }
                        /*override*/ setActorClip(clipName) {
                            if (clipName) {
                                this.m_clip = Application.instance.getClip(clipName);
                                if (this.m_clip == null) {
                                    this.m_clip = Application.instance.getClip("mc_k_tempItem");
                                    this.m_clip["mcInfoTemp"]["txt"].text = this.data.name;
                                }
                                this.m_canvas.addChild(this.m_clip);
                                this.createCorners();
                            }
                        }
                    }
                    kipu.BRW_EntityObject = BRW_EntityObject;
                })(kipu = brawler.kipu || (brawler.kipu = {}));
            })(brawler = soul.brawler || (soul.brawler = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_EntityObject = com.bamtang.soul.brawler.kipu.BRW_EntityObject;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_CameraExt extends BRW_Camera {
                        constructor(world, widthCamera, heightCamera, positionScreenX = 0, positionScreenY = 0, initCamX = 0, initCamY = 0) {
                            super(world, widthCamera, heightCamera, positionScreenX, positionScreenY, initCamX, initCamY);
                            this.m_vx = 0;
                            this.m_vy = 0;
                            this.m_mode = BRW_CameraExt.MODE_DEFAULT;
                            this.m_halfWidth = this.width * 0.5;
                            this.m_halfHeight = this.height * 0.5;
                            this.m_movement = null;
                            this.m_actorPursued = null;
                        }
                        setScreenLimits(limits) {
                            this.m_fixedX = (limits.width == 0);
                            this.leftLimit = limits.x;
                            this.rightLimit = limits.x + limits.width;
                            this.m_fixedY = (limits.height == 0);
                            this.upLimit = limits.y;
                            this.downLimit = limits.y + limits.height;
                        }
                        getMode() {
                            return this.m_mode;
                        }
                        deleteMovement() {
                            if (this.m_movement) {
                                this.m_movement.free();
                                this.m_movement = null;
                            }
                        }
                        setMode(mode, param = null) {
                            switch (mode) {
                                case BRW_CameraExt.MODE_TARGET:
                                    this.setMode(BRW_CameraExt.MODE_DEFAULT);
                                    var x = Number(param[0]) - this.m_halfWidth;
                                    var y = Number(param[1]) + this.m_halfHeight;
                                    var speed = Number(param[2]);
                                    var motion = new LinearMovement(this.m_x, this.m_y, speed);
                                    motion.gotoPosition(x, y);
                                    motion.endCallback = this.onTarget.bind(this);
                                    this.m_movement = motion;
                                    break;
                                case BRW_CameraExt.MODE_VERTICAL:
                                    var oldVy = this.m_vy;
                                    this.setMode(BRW_CameraExt.MODE_DEFAULT);
                                    this.m_vy = oldVy;
                                    this.m_lockedX = true;
                                    break;
                                case BRW_CameraExt.MODE_PURSUIT_X:
                                    this.setMode(BRW_CameraExt.MODE_DEFAULT);
                                    if (param[0] instanceof brawler.BRW_WorldActorExt) {
                                        this.m_actorPursued = param[0];
                                        if (this.m_x + this.m_halfWidth >= this.m_actorPursued.x()) {
                                            this.onTarget(null);
                                        }
                                        else {
                                            this.m_vx = BRW_CameraExt.SPEED;
                                        }
                                    }
                                    break;
                                case BRW_CameraExt.MODE_DEFAULT:
                                    if (this.m_movement != null) {
                                        this.m_movement.free();
                                        this.m_movement = null;
                                    }
                                    this.m_vx = this.m_vy = 0;
                                    this.m_actorPursued = null;
                                    this.m_lockedX = false;
                                    break;
                                default:
                                    return;
                            }
                            this.m_mode = mode;
                        }
                        onTarget(motion) {
                            if (motion != null && motion == this.m_movement) {
                                this.m_movement.setAwaitingToDelete(true);
                            }
                            this.setMode(BRW_CameraExt.MODE_DEFAULT);
                        }
                        checkGlobalLimitX(dt) {
                            if (!this.m_lockedX) {
                                var newx = 0;
                                if (this.m_x + this.leftLimit > this.m_world.player().x()) {
                                    newx = this.m_x - BRW_CameraExt.SPEED * dt;
                                    if (newx + this.leftLimit <= this.m_world.player().x()) {
                                        this.m_x = this.m_world.player().x() - this.leftLimit;
                                    }
                                    else {
                                        this.m_x = newx;
                                    }
                                }
                                if (this.m_x + this.rightLimit < this.m_world.player().x()) {
                                    newx = this.m_x + BRW_CameraExt.SPEED * dt;
                                    if (newx + this.rightLimit >= this.m_world.player().x()) {
                                        this.m_x = this.m_world.player().x() - this.rightLimit;
                                    }
                                    else {
                                        this.m_x = newx;
                                    }
                                }
                            }
                        }
                        checkGlobalLimitY(dt) {
                            if (!this.m_lockedY) {
                                var newy = 0;
                                var y_player = this.m_world.player().y() - this.m_world.player().control().getJumpHeight();
                                if (this.m_y + this.upLimit > y_player) {
                                    newy = this.m_y - BRW_CameraExt.SPEED * dt;
                                    if (newy + this.upLimit < y_player) {
                                        this.m_y = y_player - this.upLimit;
                                    }
                                    else {
                                        this.m_y = newy;
                                    }
                                }
                                if (this.m_y + this.downLimit < y_player) {
                                    newy = this.m_y + BRW_CameraExt.SPEED * dt;
                                    if (newy + this.downLimit > y_player) {
                                        this.m_y = y_player - this.downLimit;
                                    }
                                    else {
                                        this.m_y = newy;
                                    }
                                }
                            }
                        }
                        /*override*/ update(dt) {
                            if (this.m_mode == BRW_CameraExt.MODE_FIXED) {
                                return;
                            }
                            switch (this.m_mode) {
                                case BRW_CameraExt.MODE_DEFAULT:
                                case BRW_CameraExt.MODE_VERTICAL:
                                    if (this.m_mode == BRW_CameraExt.MODE_DEFAULT) {
                                        this.checkGlobalLimitX(dt);
                                    }
                                    this.checkGlobalLimitY(dt);
                                    break;
                                case BRW_CameraExt.MODE_TARGET:
                                    if (this.m_movement) {
                                        this.m_movement.update(dt);
                                        this.m_x = this.m_movement.x();
                                        this.m_y = this.m_movement.y();
                                        if (this.m_movement.isAwaitingDelete()) {
                                            this.deleteMovement();
                                        }
                                    }
                                    break;
                                case BRW_CameraExt.MODE_PURSUIT_X:
                                    if ((this.m_vx != 0) || (this.m_vy != 0)) {
                                        this.m_x += this.m_vx * dt;
                                        this.m_y += this.m_vy * dt;
                                        if ((this.m_x + this.m_halfWidth) >= this.m_actorPursued.x()) {
                                            this.onTarget(null);
                                        }
                                    }
                                    else {
                                        this.onTarget(null);
                                    }
                                    break;
                            }
                            if (this.m_x < this.m_worldLimitLeft) {
                                this.m_x = this.m_worldLimitLeft;
                            }
                            else if (this.m_x > this.m_worldLimitRight) {
                                this.m_x = this.m_worldLimitRight;
                            }
                            if (this.m_y < this.m_worldLimitUp) {
                                this.m_y = this.m_worldLimitUp;
                            }
                            else if (this.m_y > this.m_worldLimitDown) {
                                this.m_y = this.m_worldLimitDown;
                            }
                        }
                    }
                    BRW_CameraExt.MODE_DEFAULT = 0;
                    BRW_CameraExt.MODE_FIXED = 1;
                    BRW_CameraExt.MODE_TARGET = 2;
                    BRW_CameraExt.MODE_VERTICAL = 3;
                    BRW_CameraExt.MODE_PURSUIT_X = 4;
                    BRW_CameraExt.SPEED = 0.35;
                    brawler.BRW_CameraExt = BRW_CameraExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_CameraExt = com.bamtang.project.soulExtends.brawler.BRW_CameraExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_CollisionActorExt extends BRW_CollisionActor {
                        constructor(actor, nameClipBounds) {
                            super(actor, nameClipBounds);
                        }
                    }
                    brawler.BRW_CollisionActorExt = BRW_CollisionActorExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_CollisionActorExt = com.bamtang.project.soulExtends.brawler.BRW_CollisionActorExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_EffectExt extends EffectExt {
                        constructor(nameClip, world, x, y, canvas, loop = 1, app = null) {
                            super(nameClip, x, y, canvas, loop, app);
                            this.m_x = x;
                            this.m_y = y;
                            this.m_world = world;
                        }
                        /*override*/ update(dt) {
                            super.update(dt);
                            this.m_actor.clip().x = (this.m_x - this.m_world.camera().x()) * project.Global.WORLD_SCALE;
                            this.m_actor.clip().y = (this.m_y - this.m_world.camera().y()) * project.Global.WORLD_SCALE;
                        }
                    }
                    brawler.BRW_EffectExt = BRW_EffectExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_EffectExt = com.bamtang.project.soulExtends.brawler.BRW_EffectExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_NpcExt extends BRW_Npc {
                        constructor(idObject, posX, posY, movement, alwaysAwake, paramsNPC, canvasNPC) {
                            super(idObject, posX, posY, canvasNPC, paramsNPC);
                            this.typeAction = "";
                            this.stopId = 0;
                            this.type = 0;
                            this.groupInit = 0;
                            this.group = 1;
                            this.points = 0;
                            this.appear = 0;
                            this.speed = 0;
                            this.health = 0;
                            this.damage = 0;
                            this.item = "";
                            this.timeInit = 0;
                            this.timeWalk = 0;
                            this.timeWaitMin = 0;
                            this.timeWaitMax = 0;
                            this.timeOn = 0;
                            this.timeOff = 0;
                            this.shootEnable = 0;
                            this.bulletSpeed = 0;
                            this.bulletDamage = 0;
                            this.forcePattern = "";
                            this.teleport = 0;
                            this.toRight = false;
                            this.toUp = false;
                            this.toPlayer = false;
                            this.initAction = "";
                            this.collisionBlock = "";
                            this.scaleX = 1;
                            this.scaleY = 1;
                            this.range = 680;
                            this.groups = "";
                            this.gui_messages = "";
                            this.gui_messages2 = "";
                            this.respawnTime = -1;
                            this.m_movement = "";
                            this.m_alwaysAwake = true;
                            this.m_movement = movement;
                            this.m_alwaysAwake = alwaysAwake;
                            this.kipuIndex = -1;
                        }
                        get movement() {
                            return this.m_movement;
                        }
                        get alwaysAwake() {
                            return this.m_alwaysAwake;
                        }
                    }
                    brawler.BRW_NpcExt = BRW_NpcExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_NpcExt = com.bamtang.project.soulExtends.brawler.BRW_NpcExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_NpcManagerExt extends BRW_NpcManager {
                        constructor(world) {
                            super(world);
                        }
                    }
                    brawler.BRW_NpcManagerExt = BRW_NpcManagerExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_NpcManagerExt = com.bamtang.project.soulExtends.brawler.BRW_NpcManagerExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_PlayerControlExt extends BRW_PlayerControl {
                        constructor(player) {
                            super(player);
                            this.m_horizontalBufferTemp = new Array(0, 0);
                            this.m_horizontalBufferBackup = new Array(0, 0);
                        }
                        /*override*/ reset() {
                            var isJumping = this.m_isJumping;
                            super.reset();
                            this.m_isJumping = isJumping;
                        }
                        /*override*/ update(dt) {
                            if (this.m_horizontalBuffer[0] != 0) {
                                this.m_forceX = this.m_horizontalBuffer[0];
                            }
                            else if (this.m_horizontalBuffer[1] != 0) {
                                this.m_forceX = this.m_horizontalBuffer[1];
                            }
                            else {
                                this.m_forceX = 0;
                            }
                            if (this.m_verticalBuffer[0] != 0) {
                                this.m_forceY = this.m_verticalBuffer[0];
                            }
                            else if (this.m_verticalBuffer[1] != 0) {
                                this.m_forceY = this.m_verticalBuffer[1];
                            }
                            else {
                                this.m_forceY = 0;
                            }
                            if (this.m_isJumping) {
                                this.m_jumpControl.update(dt);
                                if (this.m_actor.clip() && this.m_actor.clip().mcBody) {
                                    if (this.m_actor.clip().mcBody.currentFrame < this.m_actor.clip().mcBody.totalFrames) {
                                        this.m_actor.clip().gotoAndStop(this.m_actor.clip().currentFrame + 1);
                                    }
                                    this.m_actor.clip().mcBody.y = this.m_jumpControl.currentHeight;
                                }
                            }
                            this.m_dashControl.update(dt);
                        }
                        /*override*/ onCollision(coll, dt) {
                        }
                        /*override*/ onJump(pressed = false) {
                            if (!this.m_isJumping) {
                                this.m_jumpControl.init();
                                this.m_actor.gotoState(BRW_Player.ST_PLAYER_JUMP_UP);
                                this.m_isJumping = true;
                            }
                        }
                        onLeftTemp(pressed) {
                            if (pressed) {
                                if (this.m_horizontalBufferTemp[0] == 1) {
                                    this.m_horizontalBufferTemp[1] = 1;
                                }
                                this.m_horizontalBufferTemp[0] = -1;
                            }
                            else {
                                if (this.m_horizontalBufferTemp[0] == -1) {
                                    this.m_horizontalBufferTemp[0] = this.m_horizontalBufferTemp[1];
                                }
                                this.m_horizontalBufferTemp[1] = 0;
                            }
                        }
                        onRightTemp(pressed) {
                            if (pressed) {
                                if (this.m_horizontalBufferTemp[0] == -1) {
                                    this.m_horizontalBufferTemp[1] = -1;
                                }
                                this.m_horizontalBufferTemp[0] = 1;
                            }
                            else {
                                if (this.m_horizontalBufferTemp[0] == 1) {
                                    this.m_horizontalBufferTemp[0] = this.m_horizontalBufferTemp[1];
                                }
                                this.m_horizontalBufferTemp[1] = 0;
                            }
                        }
                        backupHorizontalBuffer() {
                            this.m_horizontalBufferBackup[0] = this.m_horizontalBuffer[0];
                            this.m_horizontalBufferBackup[1] = this.m_horizontalBuffer[1];
                        }
                        restoreHorizontalBuffer() {
                            this.m_horizontalBuffer[0] = this.m_horizontalBufferBackup[0];
                            this.m_horizontalBuffer[1] = this.m_horizontalBufferBackup[1];
                        }
                        setLastHorizontalBuffer() {
                            this.m_horizontalBuffer[0] = this.m_horizontalBufferTemp[0];
                            this.m_horizontalBuffer[1] = this.m_horizontalBufferTemp[1];
                        }
                    }
                    brawler.BRW_PlayerControlExt = BRW_PlayerControlExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_PlayerControlExt = com.bamtang.project.soulExtends.brawler.BRW_PlayerControlExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_PlayerExt extends BRW_Player {
                        constructor(canvas, world, x, y) {
                            super(canvas, world, x, y);
                            this.currentStop = -1;
                            this.currentStopGroup = -1;
                            this.lastStop = 0;
                            this.enemiesInCurrentStop = -1;
                            this.killingsInThisStop = 0;
                            this.killingsInThisGroup = 0;
                            this.m_currentStop = null;
                            this.m_countLocksForStopGroup = 0;
                            this.m_countLocksForSolvingStop = 0;
                        }
                        getCurrentStop() {
                            return this.m_currentStop;
                        }
                        /*override*/ onKeyDown(keyCode) {
                            if (this.m_isDead || this.m_state == BRW_Player.ST_PLAYER_HIT || this.m_state == BRW_Player.ST_PLAYER_WIN) {
                                if (this.m_state == BRW_Player.ST_PLAYER_HIT) {
                                    switch (keyCode) {
                                        case Application.keyLeft:
                                            this.m_pressingLeft = true;
                                            break;
                                        case Application.keyRight:
                                            this.m_pressingRight = true;
                                            break;
                                    }
                                }
                                return;
                            }
                            switch (keyCode) {
                                case Application.keyLeft:
                                    this.m_control.onLeft(true);
                                    if (this.m_enemyCatchRef == null) {
                                        this.m_control.onDashMove(true, true);
                                    }
                                    break;
                                case Application.keyRight:
                                    this.m_control.onRight(true);
                                    if (this.m_enemyCatchRef == null) {
                                        this.m_control.onDashMove(true, false);
                                    }
                                    break;
                                case Application.keyUp:
                                    this.m_control.onUp(true);
                                    break;
                                case Application.keyDown:
                                    this.m_control.onDown(true);
                                    break;
                                case Application.KEY_A:
                                    //this.onAttack(true);
                                    break;
                                case Application.keyZ:
                                    this.onAttack();
                                    break;
                                case Application.keyX:
                                    if (!this.m_control.isInDashAttack()) {
                                        this.m_control.onJump();
                                    }
                                    break;
                            }
                        }
                        /*override*/ onKeyUp(keyCode) {
                            //this.onDebugKeyUp(keyCode);
                            switch (keyCode) {
                                case Application.keyLeft:
                                    this.m_control.onLeft(false);
                                    this.m_control.onDashMove(false);
                                    break;
                                case Application.keyRight:
                                    this.m_control.onRight(false);
                                    this.m_control.onDashMove(false);
                                    break;
                                case Application.keyUp:
                                    this.m_control.onUp(false);
                                    break;
                                case Application.keyDown:
                                    this.m_control.onDown(false);
                                    break;
                            }
                        }
                        setCurrentStop(stop) {
                            if ((this.m_currentStop != null) && (stop != null)) {
                                Application.error("Attempt to assign an new Stop (id: '" +
                                    this.m_currentStop.getId() + "') when already exist one (id: " +
                                    stop.getId() + ").", "PlayerBTU::setCurrentStop()");
                                return false;
                            }
                            this.m_currentStop = stop;
                            if (this.m_currentStop == null) {
                                this.currentStop = -1;
                                this.currentStopGroup = -1;
                                this.enemiesInCurrentStop = 0;
                                this.isBlockedCurrentStop = false;
                                this.groupList = null;
                            }
                            else {
                                this.currentStop = stop.getId();
                                this.currentStopGroup = 1;
                                this.enemiesInCurrentStop = stop.getTotalObjectsControlled();
                                this.isBlockedCurrentStop = true;
                                this.groupList = stop.getGroups();
                            }
                            this.killingsInThisStop = 0;
                            this.killingsInThisGroup = 0;
                            return true;
                        }
                        countKills(amount = 1) {
                            if (this.m_currentStop == null || this.groupList == null) {
                                return;
                            }
                            this.killingsInThisStop += amount;
                            this.killingsInThisGroup += amount;
                            if (this.m_countLocksForStopGroup > 0) {
                                return;
                            }
                            if (this.killingsInThisStop >= this.enemiesInCurrentStop) {
                                if (this.m_countLocksForSolvingStop > 0) {
                                    return;
                                }
                                if (!this.m_currentStop.isPaused()) {
                                    this.setCurrentStop(null);
                                }
                            }
                            else if (this.killingsInThisGroup >= this.groupList[this.currentStopGroup - 1]) {
                                this.currentStopGroup++;
                                this.killingsInThisGroup = 0;
                            }
                        }
                        addLockForStopGroup() {
                            if (this.m_currentStop != null) {
                                this.m_countLocksForStopGroup++;
                            }
                        }
                        removeLockForStopGroup() {
                            if (this.m_currentStop != null && this.groupList != null) {
                                this.m_countLocksForStopGroup--;
                                if (this.m_countLocksForStopGroup <= 0) {
                                    this.m_countLocksForStopGroup = 0;
                                    if (this.killingsInThisGroup >= this.groupList[this.currentStopGroup - 1]) {
                                        this.countKills(0);
                                    }
                                }
                            }
                        }
                        addLockForSolvingStop() {
                            if (this.m_currentStop != null) {
                                this.m_countLocksForSolvingStop++;
                            }
                        }
                        removeLockForSolvingStop() {
                            if (this.m_currentStop != null) {
                                this.m_countLocksForSolvingStop--;
                                if (this.m_countLocksForSolvingStop <= 0) {
                                    this.m_countLocksForSolvingStop = 0;
                                    this.countKills(0);
                                }
                            }
                        }
                        solveCurrentStop() {
                            this.isBlockedCurrentStop = false;
                            this.m_currentStop.update(0);
                            this.groupList = null;
                            this.m_currentStop = null;
                            this.currentStop = 0;
                        }
                        /*override*/ update(dt) {
                            this.m_character.setX(this.m_clip.x);
                            this.m_character.setY(this.m_clip.y);
                            this.m_character.update(dt);
                            this.m_control.update(dt);
                            var iniY = this.m_y;
                            this.integrateVerlet(dt);
                            if (this.m_vehicle) {
                                if (this.m_vehicle.speed2D().y > 0) {
                                    this.m_y += 1.5 * dt * this.m_vehicle.speed2D().y;
                                }
                                this.m_x += dt * this.m_vehicle.speed2D().x;
                                this.m_oldX = this.m_x;
                            }
                            var forceX = this.m_control.forceX();
                            var forceY = this.m_control.forceY();
                            var camera = this.m_world.camera();
                            if (this.m_control.isInDashAttack()) {
                                this.m_dashForce *= 0.88;
                                forceY = 0;
                                if (this.m_dashForce >= -0.3 && this.m_dashForce <= 0.3) {
                                    this.m_control.onDashAttack(false);
                                    this.gotoState(BRW_Player.ST_PLAYER_STAND);
                                    this.m_dashForce = 0;
                                    this.m_control.backupHorizontalBuffer();
                                    this.resetControl();
                                    this.m_control.restoreHorizontalBuffer();
                                }
                                forceX = this.m_dashForce;
                            }
                            if (forceX != 0) {
                                var incX;
                                if (this.m_control.isInAction() && !this.m_control.isJumping()) {
                                    incX = 0;
                                }
                                else if (!this.m_control.isJumping() && this.m_collision) {
                                    incX = this.m_control.walkSpeed * forceX * dt * dt;
                                }
                                else {
                                    incX = this.m_control.airSpeed * forceX * dt * dt;
                                }
                                if (incX > 0) {
                                    if (this.m_x + incX + this.clip().width / 8 >= camera.x() + camera.width - this.clip().width * 0.25) {
                                        incX = 0;
                                    }
                                }
                                else {
                                    if (this.m_x + incX - this.clip().width / 8 <= camera.x() + this.clip().width * 0.25) {
                                        incX = 0;
                                    }
                                }
                                this.m_x += incX * this.m_factorWalk * 2;
                            }
                            if (forceY != 0) {
                                var incY;
                                if (this.m_control.isInAction() && !this.m_control.isJumping()) {
                                    incY = 0;
                                }
                                else if (!this.m_control.isJumping() && this.m_collision) {
                                    incY = this.m_control.walkSpeed * forceY * dt * dt;
                                }
                                else {
                                    incY = this.m_control.walkSpeed * forceY * dt * dt;
                                }
                                this.m_y += incY * this.m_factorWalk;
                            }
                            if (forceX != 0 || forceY != 0) {
                                if (this.m_state != BRW_Player.ST_PLAYER_WIN &&
                                    this.m_state != BRW_Player.ST_PLAYER_LOSE &&
                                    !this.m_control.isJumping() &&
                                    !this.m_control.isInAction() &&
                                    !this.m_control.isInDashAttack()) {
                                    if (this.m_control.isRunning()) {
                                        if (this.m_state != BRW_Player.ST_PLAYER_RUN) {
                                            this.gotoState(BRW_Player.ST_PLAYER_RUN);
                                        }
                                    }
                                    else {
                                        if (this.m_state != BRW_Player.ST_PLAYER_WALK) {
                                            this.gotoState(BRW_Player.ST_PLAYER_WALK);
                                        }
                                    }
                                }
                                if (forceX * (this.m_flipX ? -1 : 1) < 0) {
                                    this.setFlipX(!this.m_flipX);
                                }
                            }
                            else {
                                if (this.m_speed2D.x > -0.5 &&
                                    this.m_speed2D.x < 0.5 &&
                                    this.m_speed2D.y > -0.5 &&
                                    this.m_speed2D.y < 0.5 &&
                                    (this.m_state == BRW_Player.ST_PLAYER_WALK || this.m_state == BRW_Player.ST_PLAYER_RUN) &&
                                    !this.m_control.isJumping()) {
                                    this.gotoState(BRW_Player.ST_PLAYER_STAND);
                                }
                            }
                            var limit;
                            this.m_speed2D.x = this.m_x - this.m_oldX;
                            this.m_speed2D.y = this.m_y - this.m_oldY;
                            if (!this.m_control.isJumping() && this.m_collision) {
                                limit = this.m_factorSpeedX * this.m_control.maxSpeedFloor;
                                if (this.m_control.isRunning()) {
                                    limit *= this.m_control.runFactor;
                                }
                            }
                            else {
                                limit = this.m_factorSpeedX * this.m_control.maxSpeedAir;
                                if (this.m_control.isRunning()) {
                                    limit *= this.m_control.runFactor;
                                }
                            }
                            if (this.m_speed2D.x < -limit) {
                                this.m_x = this.m_oldX - limit;
                            }
                            if (this.m_speed2D.x > limit) {
                                this.m_x = this.m_oldX + limit;
                            }
                            if (this.m_speed2D.y < -limit) {
                                this.m_y = this.m_oldY - limit;
                            }
                            if (this.m_speed2D.y > limit) {
                                this.m_y = this.m_oldY + limit;
                            }
                            this.m_collision = this.checkCollision();
                            if (!this.m_collision) {
                                this.m_collision = new Vector2D(0, 0);
                            }
                            this.m_control.onCollision(this.m_collision, dt);
                            if (this.m_collision) {
                                var d = new Vector2D(this.m_x - this.m_oldX, this.m_y - this.m_oldY);
                                var normal = d.projectionOn(this.m_collision);
                                var tangent = d.minus(normal);
                                normal.scale(1 + this.m_control.elasticity);
                                if (!this.m_isFallingOverWall) {
                                    tangent.scale(dt * this.m_control.friction);
                                    normal.add(tangent);
                                }
                                else {
                                    this.m_isFallingOverWall = false;
                                }
                                this.m_oldX += normal.x + this.m_collision.x;
                                this.m_oldY += normal.y + this.m_collision.y;
                                this.m_x += this.m_collision.x;
                                if (this.m_collision.y != 0) {
                                    var vy = this.m_y + this.m_collision.y - iniY;
                                    if (vy > -1 && vy < 1) {
                                        this.m_y = iniY;
                                    }
                                    else {
                                        this.m_y += this.m_collision.y;
                                    }
                                }
                            }
                            this.m_world.checkWorldBoundaries(this);
                            if ((this.m_y - this.m_clip.height) > this.m_world.height()) {
                                this.onPlayerFellOutOfWorld();
                            }
                        }
                        /*override*/ integrateVerlet(dt) {
                            var oldX = this.m_oldX;
                            var oldY = this.m_oldY;
                            this.m_oldX = this.m_x;
                            this.m_oldY = this.m_y;
                            var incX = this.m_x - oldX;
                            if (incX < -this.m_control.maxVerletHorizontalDisplace) {
                                incX = -this.m_control.maxVerletHorizontalDisplace;
                            }
                            else if (incX > this.m_control.maxVerletHorizontalDisplace) {
                                incX = this.m_control.maxVerletHorizontalDisplace;
                            }
                            this.m_x += incX;
                            var incY = this.m_y - oldY;
                            if (incY < -this.m_control.maxVerletUpDisplace) {
                                incY = -this.m_control.maxVerletUpDisplace;
                            }
                            else if (incY > this.m_control.maxVerletDownDisplace) {
                                incY = this.m_control.maxVerletDownDisplace;
                            }
                            this.m_y += incY;
                        }
                    }
                    brawler.BRW_PlayerExt = BRW_PlayerExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_PlayerExt = com.bamtang.project.soulExtends.brawler.BRW_PlayerExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_TouchControl {
                        constructor() {
                            this.m_currentTime = 0;
                            this.m_timeReset = 400;
                            this.m_counterTouch = 0;
                            this.m_maxTouch = 2;
                        }
                        sense(toLeft) {
                            if (this.m_lock)
                                return;
                            this.m_lock = true;
                            this.m_counterTouch++;
                            if (this.m_counterTouch == 1) {
                                this.m_equal = toLeft;
                            }
                            if (this.m_counterTouch != 1 && this.m_equal != toLeft) {
                                this.m_counterTouch = 0;
                                return;
                            }
                            this.m_currentTime = 0;
                            if (this.m_counterTouch >= this.m_maxTouch) {
                                if (this.onActiveAction != null) {
                                    this.onActiveAction(this.m_equal);
                                }
                                this.m_counterTouch = 0;
                            }
                        }
                        unlock() {
                            this.m_lock = false;
                        }
                        update(dt) {
                            this.m_currentTime += dt;
                            if (this.m_currentTime > this.m_timeReset) {
                                this.m_currentTime = 0;
                                this.m_counterTouch = 0;
                            }
                        }
                    }
                    brawler.BRW_TouchControl = BRW_TouchControl;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_TouchControl = com.bamtang.project.soulExtends.brawler.BRW_TouchControl;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_WorldCollisionLayerExt extends BRW_WorldCollisionLayer {
                        constructor(world, layerXML) {
                            super(world, layerXML);
                        }
                    }
                    brawler.BRW_WorldCollisionLayerExt = BRW_WorldCollisionLayerExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_WorldCollisionLayerExt = com.bamtang.project.soulExtends.brawler.BRW_WorldCollisionLayerExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_WorldExt extends BRW_World {
                        constructor(canvas, game, worldFile) {
                            super(canvas, game, worldFile);
                            var tmpxml = xml2js(Application.instance.getXMLData(worldFile), { compact: true, spaces: 4 });
                            this.loadKipuItemsData(tmpxml.world.kipuHeader);
                        }
                        get kipuItemsData() {
                            return this.m_kipuItemsData;
                        }
                        /*override*/ addNpc(xmlNpc, objectCanvas) {
                            var temp = new brawler.BRW_NpcExt(parseInt(xmlNpc.id), Number(xmlNpc.x), Number(xmlNpc.y), String(xmlNpc.movement), Boolean(parseInt(xmlNpc.alwaysAwake)), xmlNpc.params, objectCanvas);
                            if (String(xmlNpc._typeAction))
                                temp.typeAction = String(xmlNpc._typeAction);
                            if (parseInt(xmlNpc._stopId))
                                temp.stopId = parseInt(xmlNpc._stopId);
                            if (parseInt(xmlNpc._typeInit))
                                temp.type = parseInt(xmlNpc._typeInit);
                            if (parseInt(xmlNpc._groupInit))
                                temp.groupInit = parseInt(xmlNpc._groupInit);
                            if (Number(xmlNpc._range))
                                temp.range = Number(xmlNpc._range);
                            temp.groups = xmlNpc._groups;
                            if (parseInt(xmlNpc._group))
                                temp.group = parseInt(xmlNpc._group);
                            if (parseInt(xmlNpc._points))
                                temp.points = parseInt(xmlNpc._points);
                            if (parseInt(xmlNpc._appear))
                                temp.appear = parseInt(xmlNpc._appear);
                            if (Number(xmlNpc._speed))
                                temp.speed = Number(xmlNpc._speed);
                            if (parseInt(xmlNpc._health))
                                temp.health = parseInt(xmlNpc._health);
                            if (parseInt(xmlNpc._damage))
                                temp.damage = parseInt(xmlNpc._damage);
                            temp.item = xmlNpc._item;
                            if (parseInt(xmlNpc._timeInit))
                                temp.timeInit = parseInt(xmlNpc._timeInit);
                            if (parseInt(xmlNpc._timeWalk))
                                temp.timeWalk = parseInt(xmlNpc._timeWalk);
                            if (parseInt(xmlNpc._timeOn))
                                temp.timeOn = parseInt(xmlNpc._timeOn);
                            if (parseInt(xmlNpc._timeOff))
                                temp.timeOff = parseInt(xmlNpc._timeOff);
                            if (parseInt(xmlNpc._shootEnable))
                                temp.shootEnable = parseInt(xmlNpc._shootEnable);
                            if (Number(xmlNpc._bulletSpeed))
                                temp.bulletSpeed = Number(xmlNpc._bulletSpeed);
                            if (Number(xmlNpc._bulletDamage))
                                temp.bulletDamage = Number(xmlNpc._bulletDamage);
                            temp.forcePattern = xmlNpc._forcePattern;
                            if (parseInt(xmlNpc._teleport))
                                temp.teleport = parseInt(xmlNpc._teleport);
                            temp.skin = xmlNpc._skin;
                            temp.gui_messages = xmlNpc._gui_messages;
                            temp.gui_messages2 = xmlNpc._gui_messages2;
                            if (parseInt(xmlNpc._targetX))
                                temp.targetX = parseInt(xmlNpc._targetX);
                            if (parseInt(xmlNpc._targetY))
                                temp.targetY = parseInt(xmlNpc._targetY);
                            if (parseInt(xmlNpc._dropHeight))
                                temp.dropHeight = parseInt(xmlNpc._dropHeight);
                            if (String(xmlNpc._collisionBlock))
                                temp.collisionBlock = String(xmlNpc._collisionBlock);
                            temp.messageInit = xmlNpc._msgInit;
                            temp.messageEnd = xmlNpc._msgEnd;
                            if (String(xmlNpc._initAction))
                                temp.initAction = String(xmlNpc._initAction);
                            var tmpArray = String(xmlNpc._timeWait).split(';');
                            if (tmpArray.length >= 1) {
                                temp.timeWaitMin = parseInt(tmpArray[0]);
                                if (tmpArray.length >= 2) {
                                    temp.timeWaitMax = parseInt(tmpArray[1]);
                                }
                                else {
                                    temp.timeWaitMax = temp.timeWaitMin;
                                }
                            }
                            temp.toRight = (parseInt(xmlNpc._toRight) == 1);
                            temp.toUp = (parseInt(xmlNpc._toUp) == 1);
                            temp.toPlayer = (parseInt(xmlNpc._toPlayer) == 1);
                            temp.scaleX = Number(xmlNpc.sx);
                            if (temp.scaleX <= 0) {
                                temp.scaleX = 1;
                            }
                            if (!bamtang.Main.isNumeric(temp.scaleX))
                                temp.scaleX = 1;
                            temp.scaleY = Number(xmlNpc.sy);
                            if (temp.scaleY <= 0) {
                                temp.scaleY = 1;
                            }
                            if (!bamtang.Main.isNumeric(temp.scaleY))
                                temp.scaleY = 1;
                            temp.frequency = Number(xmlNpc._frequency);
                            temp.totalShots = parseInt(xmlNpc._totalShots);
                            temp.respawnTime = parseInt(xmlNpc._respawnTime);
                            this.m_actorManager.addNpc(temp);
                        }
                        /*override*/ addLayer(type, layerXml) {
                            if (layerXml.name == brawler.BRW_WorldBaseLayerExt.NAME_KIPU_OBJECTS) {
                                var list = layerXml.kipuObject;
                                for (var i = 0; i < list.length; i++) {
                                    var temp = new brawler.BRW_NpcExt(-1, Number(list[i].x), Number(list[i].y), "", false, "", null);
                                    temp.kipuIndex = parseInt(list[i].id);
                                    this.m_actorManager.addNpc(temp);
                                }
                                return;
                            }
                            super.addLayer(type, layerXml);
                        }
                        /*override*/ createCamera() {
                            this.m_camera = new brawler.BRW_CameraExt(this, this.cameraWidth, this.cameraHeight, this.cameraScreenX, this.cameraScreenY, this.cameraInitX, this.cameraInitY);
                            this.m_camera.setScale(1);
                        }
                        addEffect(nameClip, x, y, loop = 1, onEndAnimation = null) {
                            return this.m_effectManager.addEffect(nameClip, x, y, GuiGame.instance.canvasEffects(), loop, onEndAnimation);
                        }
                        loadKipuItemsData(data) {
                            this.m_kipuItemsData = Array(data.kipu.length).fill(0);
                            for (var i = 0; i < data.kipu.length; i++) {
                                var _id = parseInt(data.kipu[i]._attributes.id);
                                var paramsStr = String(data.kipu[i]._attributes.params);
                                var paramsStrArr = paramsStr.split("|");
                                var paramsObjArr = new Array();
                                for (var h = 0; h < paramsStrArr.length; h++) {
                                    if (paramsStrArr[h] == "")
                                        paramsObjArr[h] = null;
                                    else
                                        paramsObjArr[h] = Common.getParamsArrayOfModifiers(paramsStrArr[h]);
                                }
                                var itemData = new EntityObjectData(paramsObjArr[0], paramsObjArr[1], paramsObjArr[2], paramsObjArr[3], paramsObjArr[4]);
                                this.m_kipuItemsData[_id] = itemData;
                            }
                            for (var xd in this.m_kipuItemsData.kipu) {
                                this.m_kipuItemsData.kipu[xd] = this.m_kipuItemsData.kipu[xd]._attributes;
                            }
                        }
                    }
                    brawler.BRW_WorldExt = BRW_WorldExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_WorldExt = com.bamtang.project.soulExtends.brawler.BRW_WorldExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_WorldMarkerLayerExt extends BRW_WorldMarkerLayer {
                        constructor(world, layerXml) {
                            super(world, layerXml);
                        }
                    }
                    brawler.BRW_WorldMarkerLayerExt = BRW_WorldMarkerLayerExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_WorldMarkerLayerExt = com.bamtang.project.soulExtends.brawler.BRW_WorldMarkerLayerExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    class BRW_WorldSpriteLayerExt extends BRW_WorldSpriteLayer {
                        constructor(world, layerXml) {
                            super(world, layerXml);
                        }
                    }
                    brawler.BRW_WorldSpriteLayerExt = BRW_WorldSpriteLayerExt;
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_WorldSpriteLayerExt = com.bamtang.project.soulExtends.brawler.BRW_WorldSpriteLayerExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var brawler;
                (function (brawler) {
                    var kipu;
                    (function (kipu) {
                        class BRW_EntityObjectExt extends BRW_EntityObject {
                            constructor(canvas, x, y, world, data) {
                                super(canvas, x, y, world, data);
                                this.m_state = BRW_EntityObjectExt.ST_OBJECT_MOVE;
                                this.startMove();
                            }
                            /*override*/ update(dt) {
                                super.update(dt);
                                if (this.m_state == BRW_EntityObjectExt.ST_OBJECT_STAND) {
                                    if (this.hitTest(this.m_world.player())) {
                                        switch (this.data.name) {
                                            case "1up":
                                                project.Global.app.stopSound("snd_atb_collectibles_1up");
                                                project.Global.app.stopSound("snd_atb_collectibles_hp");
                                                project.Global.app.stopSound("snd_atb_collectibles_mp");
                                                project.Global.app.stopSound("snd_atb_collectibles_jewel");
                                                project.Global.app.playSound("snd_atb_collectibles_1up");
                                                break;
                                            case "heartA":
                                            case "heartB":
                                                project.Global.app.stopSound("snd_atb_collectibles_1up");
                                                project.Global.app.stopSound("snd_atb_collectibles_hp");
                                                project.Global.app.stopSound("snd_atb_collectibles_mp");
                                                project.Global.app.stopSound("snd_atb_collectibles_jewel");
                                                project.Global.app.playSound("snd_atb_collectibles_hp");
                                                break;
                                            case "MPA":
                                            case "MPB":
                                                project.Global.app.stopSound("snd_atb_collectibles_1up");
                                                project.Global.app.stopSound("snd_atb_collectibles_hp");
                                                project.Global.app.stopSound("snd_atb_collectibles_mp");
                                                project.Global.app.stopSound("snd_atb_collectibles_jewel");
                                                project.Global.app.playSound("snd_atb_collectibles_mp");
                                                break;
                                            case "jewel":
                                                project.Global.app.stopSound("snd_atb_collectibles_1up");
                                                project.Global.app.stopSound("snd_atb_collectibles_hp");
                                                project.Global.app.stopSound("snd_atb_collectibles_mp");
                                                project.Global.app.stopSound("snd_atb_collectibles_jewel");
                                                project.Global.app.playSound("snd_atb_collectibles_jewel");
                                                project.StatsMain.jewels++;
                                                break;
                                        }
                                        this.m_state = BRW_EntityObjectExt.ST_OBJECT_FADING;
                                        this.m_world.player().useEntityObject(this.data);
                                    }
                                }
                                else {
                                    if (this.m_state == BRW_EntityObjectExt.ST_OBJECT_MOVE) {
                                        this.updateMove(dt);
                                        return;
                                    }
                                    if (this.m_clip.alpha > 0) {
                                        this.m_clip.alpha -= 0.0015 * dt;
                                        this.m_y -= 0.25 * dt;
                                    }
                                    if (this.m_clip.alpha < 0.05) {
                                        if (this.data.name == "jewel") {
                                            this.m_clip.alpha = 0;
                                        }
                                        else {
                                            this.setAwaitingDelete(true);
                                        }
                                    }
                                }
                            }
                            startMove() {
                                var finalX;
                                var finalY;
                                var offSetX = 80;
                                var offSetY = 10;
                                if (this.m_world.player().x() >= this.m_x) {
                                    if (this.m_world.camera().x() + 120 < this.m_x) {
                                        offSetX *= -1;
                                    }
                                }
                                else {
                                    if (this.m_world.camera().x() + this.m_world.camera().width - 120 <= this.m_x) {
                                        offSetX *= -1;
                                    }
                                }
                                finalX = this.m_x + offSetX;
                                finalY = this.m_y + offSetY;
                                this.m_move = new ParametricParabolicMovement(this.m_x, this.m_y, finalX, finalY, 0.05, 0.05);
                                this.m_move.endCallback = this.onEndMove.bind(this);
                            }
                            updateMove(dt) {
                                if (this.m_move != null) {
                                    this.m_move.update(dt);
                                    this.m_x = this.m_move.x();
                                    this.m_y = this.m_move.y();
                                }
                            }
                            onEndMove(m) {
                                this.m_state = BRW_EntityObjectExt.ST_OBJECT_STAND;
                            }
                        }
                        BRW_EntityObjectExt.ST_OBJECT_STAND = 100;
                        BRW_EntityObjectExt.ST_OBJECT_FADING = 101;
                        BRW_EntityObjectExt.ST_OBJECT_MOVE = 102;
                        kipu.BRW_EntityObjectExt = BRW_EntityObjectExt;
                    })(kipu = brawler.kipu || (brawler.kipu = {}));
                })(brawler = soulExtends.brawler || (soulExtends.brawler = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BRW_EntityObjectExt = com.bamtang.project.soulExtends.brawler.kipu.BRW_EntityObjectExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        class Main extends MovieClip {
            constructor() {
                super(null);
                this.numToLoadCount = 0;
                this.progressLoadCount = 0;
                this.stageCreated = false;
                this.mClipLoader = null;
                if (Main.inited)
                    return;
                Main.inited = true;
                WebFont.load({
                    custom: {
                        families: ["Fred Fredburger W04 Regular"],
                        urls: ["fonts.css"]
                    }
                });
                Main.loader = PIXI.loader;
                Main.loader.add("fglogo.jpg").add("preloader_bar.png").add("preloader_progress.png")
                    .add(Global.URL_PATH_BASE + "strings.xml")
                    .add(Global.URL_PATH_BASE + "screens.xml")
                    .add(Global.URL_PATH_BASE + "settings.xml")
                    .add(Global.URL_PATH_BASE + "sounds.xml")
                    .add(Global.URL_PATH_BASE + "bossData/dtBoss.xml")
                    .add(Global.URL_PATH_BASE + "bossData/dtBoss2.xml")
                    .add(Global.URL_PATH_BASE + "gamesData/gameBrawler/level01/general.xml")
                    .add(Global.URL_PATH_BASE + "gamesData/gameBrawler/level01/brw_lvl01.xml")
                    .add(Global.URL_PATH_BASE + "gamesData/gameBrawler/level02/general.xml")
                    .add(Global.URL_PATH_BASE + "gamesData/gameBrawler/level02/brw_lvl02.xml")
                    .add(Global.URL_PATH_BASE + "gamesData/gameBrawler/level03/general.xml")
                    .add(Global.URL_PATH_BASE + "gamesData/gameBrawler/level03/brw_lvl03.xml")
                    .add(Global.URL_PATH_BASE + "gamesData/gameBrawler/level01_hard/general.xml")
                    .add(Global.URL_PATH_BASE + "gamesData/gameBrawler/level01_hard/brw_lvl01.xml")
                    .add(Global.URL_PATH_BASE + "gamesData/gameBrawler/level02_hard/general.xml")
                    .add(Global.URL_PATH_BASE + "gamesData/gameBrawler/level02_hard/brw_lvl02.xml")
                    .add(Global.URL_PATH_BASE + "gamesData/gameBrawler/level03_hard/general.xml")
                    .add(Global.URL_PATH_BASE + "gamesData/gameBrawler/level03_hard/brw_lvl03.xml");
                Main.loader.once('complete', function () {
                    console.log("Main.loader", Main.loader);
                    this.onCompleteLoader();
                }.bind(this));
                Main.loader.load();
            }
            onCompleteLoader() {
                this.mXmlStrings = xml2js(Main.loader.resources[Global.URL_PATH_BASE + "strings.xml"].xhr.response, { compact: true, spaces: 4 }).data;
                for (var xd in this.mXmlStrings.text) {
                    var tmpcdata = String(this.mXmlStrings.text[xd]._cdata);
                    this.mXmlStrings.text[xd].id = this.mXmlStrings.text[xd]._attributes.id;
                    this.mXmlStrings.text[xd].cdata = tmpcdata;
                    delete this.mXmlStrings.text[xd]._cdata;
                    delete this.mXmlStrings.text[xd]._attributes;
                }
                var xmlSounds = xml2js(Main.loader.resources[Global.URL_PATH_BASE + "sounds.xml"].xhr.response, { compact: true, spaces: 4 }).data;
                for (var xd in xmlSounds.sound) {
                    xmlSounds.sound[xd] = xmlSounds.sound[xd]["_attributes"];
                    Main.allSounds.push({ id: xmlSounds.sound[xd].linked, bg: xmlSounds.sound[xd].bg, vol: xmlSounds.sound[xd].vol });
                }
                delete xmlSounds._comment;
                Global.initialize(this, Global.URL_PATH_BASE);
                Global.app.setStringXML(this.mXmlStrings);
                console.log("preloader loaded");
                this.onPreloaderLoaded();
            }
            onPreloaderLoaded() {
                Main.stats = new Stats();
                Main.updateRender();
                Main.stats.showPanel(0);
                //document.body.appendChild(Main.stats.dom);
                Main.preload_imageBitmap = PIXI.Sprite.fromImage(PIXI.loader.resources["fglogo.jpg"].url);
                Main.preload_barBitmap = PIXI.Sprite.fromImage(PIXI.loader.resources["preloader_bar.png"].url);
                Main.preload_progressBitmap = PIXI.Sprite.fromImage(PIXI.loader.resources["preloader_progress.png"].url);
                Main.preload_progressBitmap2 = PIXI.Sprite.fromImage(PIXI.loader.resources["preloader_progress.png"].url);
                Main.preload_progressBarContainer = new PIXI.Container;
                Main.preload_graphicsBitmap = new PIXI.Graphics();
                Main.preload_graphicsBitmap.beginFill(0);
                Main.preload_graphicsBitmap.drawRect(0, 0, 600 * 2, 400 * 2);
                Main.preload_maskBitmap = new PIXI.Graphics();
                Main.preload_maskBitmap.beginFill(0);
                Main.preload_maskBitmap.drawRect(0, 0, 330, 100);
                Main.preload_maskBitmap2 = new PIXI.Graphics();
                Main.preload_maskBitmap2.beginFill(0);
                Main.preload_maskBitmap2.drawRect(0, 50, 360, 50);
                Main.preload_progressBitmap.mask = Main.preload_maskBitmap;
                Main.preload_progressBitmap2.mask = Main.preload_maskBitmap;
                Main.preload_progressBitmap.x = -360;
                Main.stage.addChild(Main.preload_graphicsBitmap);
                Main.preload_progressBarContainer.addChild(Main.preload_maskBitmap);
                Main.preload_progressBarContainer.addChild(Main.preload_progressBitmap);
                Main.preload_progressBarContainer.addChild(Main.preload_progressBitmap2);
                Main.preload_progressBarContainer.addChild(Main.preload_maskBitmap2);
                Main.preload_progressBarContainer.addChild(Main.preload_barBitmap);
                Main.stage.addChild(Main.preload_progressBarContainer);
                Main.preload_progressBarContainer.scale.x = 2;
                Main.preload_progressBarContainer.scale.y = 2;
                Main.preload_progressBarContainer.x = 270;
                Main.preload_progressBarContainer.y = 600;
                Main.preload_imageBitmap.x = 290;
                Main.preload_imageBitmap.y = 150;
                Main.preload_imageBitmap.scale.x = 2;
                Main.preload_imageBitmap.scale.y = 2;
                Main.stage.addChild(Main.preload_imageBitmap);
                var currAudioFormat = "ogg";
                if (Howler.codecs("mp3")) {
                    currAudioFormat = "mp3";
                }
                var soundPreloadData = [];
                for (var s = 0; s < Main.allSounds.length; s++) {
                    soundPreloadData.push({ name: Main.allSounds[s].id.toLowerCase(), url: "sounds/" + Main.allSounds[s].id.toLowerCase() + "." + currAudioFormat });
                }
                var soundPreloadNum = soundPreloadData.length;
                for (var s = 0; s < soundPreloadData.length; s++) {
                    var _loop = false;
                    for (var q in Main.allSounds) {
                        if (Main.allSounds[q].id.toLowerCase() == soundPreloadData[s].name) {
                            Main.allSounds[q].stream = new Howl({
                                urls: [soundPreloadData[s].url],
                                loop: _loop,
                                onload: function () {
                                    soundPreloadNum--;
                                    if (soundPreloadNum == 0)
                                        Main.gaf_init();
                                }
                            });
                        }
                    }
                }
            }
            static getSoundDataPos(id) {
                for (var q in Main.allSounds) {
                    if (Main.allSounds[q].id.toLowerCase() == id.toLowerCase()) {
                        return parseInt(q);
                    }
                }
                return -1;
            }
            static gaf_init() {
                var gaf_content = new GAF.ZipToGAFAssetConverter();
                gaf_content.convert(Global.URL_PATH_BASE + "demo_minigame_" + Main.all_gaf_str_x2[Main.all_gaf_index] + "/demo_minigame_" + Main.all_gaf_str_x2[Main.all_gaf_index] + ".gaf");
                gaf_content.on(GAF.GAFEvent.PROGRESS, gaf_loading_progress);
                function gaf_loading_progress(pEvent) {
                    //var percentValue = Math.floor(pEvent.progress);
                    //Main.preload_maskBitmap2.width = (330 - 330/5) - 330 *(percentValue/100);
                    //Main.preload_maskBitmap2.x = 330 - Main.preload_maskBitmap2.width;
                    //console.log("main load", percentValue);
                }
                gaf_content.on(GAF.GAFEvent.COMPLETE, gaf_loading_complete);
                function gaf_loading_complete(pEvent) {
                    //console.log("gaf assets", pEvent);
                    Main.gafData[Main.all_gaf_str_x2[Main.all_gaf_index]] = pEvent;
                    if (Main.all_gaf_index < Main.all_gaf_str_x2.length - 1) {
                        Main.all_gaf_index++;
                        Main.gaf_init();
                    }
                    else {
                        Main.initialization();
                    }
                }
            }
            static initialization() {
                Main.loadGameProcess();
                Main.stage.removeChild(Main.preload_graphicsBitmap);
                Main.stage.removeChild(Main.preload_progressBarContainer);
                Main.stage.removeChild(Main.preload_imageBitmap);
                Main.preload_progressBarContainer.removeChild(Main.preload_maskBitmap);
                Main.preload_progressBarContainer.removeChild(Main.preload_progressBitmap);
                Main.preload_progressBarContainer.removeChild(Main.preload_progressBitmap2);
                Main.preload_progressBarContainer.removeChild(Main.preload_maskBitmap2);
                Main.preload_progressBarContainer.removeChild(Main.preload_barBitmap);
                Main.preload_graphicsBitmap = null;
                Main.preload_progressBarContainer = null;
                Main.preload_imageBitmap = null;
                Main.preload_maskBitmap = null;
                Main.preload_progressBitmap = null;
                Main.preload_progressBitmap2 = null;
                Main.preload_maskBitmap2 = null;
                Main.preload_barBitmap = null;
                Global.app.guiManager = new GuiManager(Global.app.canvasApp);
                Global.app.guiManager.gotoScreen(GuiManager.SC_MAIN_MENU);
                Main.gameLoaded = true;
            }
            static updateRender() {
                Main.stats.begin();
                if (Main.gameLoaded) {
                    this.mNewTime = new Date().getTime();
                    this.mDeltaTime = this.mNewTime - this.mOldTime;
                    this.mOldTime = this.mNewTime;
                    if (Global.app) {
                        Global.app.update(this.mDeltaTime);
                    }
                }
                else {
                    if (Main.preload_progressBitmap != null) {
                        Main.preload_progressBitmap.x += 2;
                        Main.preload_progressBitmap2.x += 2;
                        if (Main.preload_progressBitmap.x > 0) {
                            Main.preload_progressBitmap2.x = 0;
                            Main.preload_progressBitmap.x = -360;
                        }
                    }
                }
                if (Main.renderer != undefined)
                    Main.renderer.render(Main.stage);
                Main.stats.end();
                requestAnimationFrame(this.updateRender.bind(this));
            }
            static addGAFMovieClip(name, playClip = true, localis = false, retWgaf = false) {
                //console.log(">>>>>>>>>>>>>> addGAFMovieClip", name);
                var currGaf = "content";
                function getMcClip(name) {
                    var bundle = Main.gafData[currGaf].target.gafBundle.getGAFTimeline("demo_minigame_content", name);
                    if (bundle == undefined) {
                        for (var ss in Main.all_gaf_str_x2) {
                            bundle = Main.gafData[Main.all_gaf_str_x2[ss]].target.gafBundle.getGAFTimeline("demo_minigame_" + Main.all_gaf_str_x2[ss], name);
                            currGaf = Main.all_gaf_str_x2[ss];
                            if (bundle != undefined)
                                return bundle;
                        }
                    }
                    else
                        return bundle;
                }
                var clp = new GAF.GAFMovieClip(getMcClip(name));
                if (clp.mcBoundsAttack != undefined)
                    clp.mcBoundsAttack.visible = Global.COLLISION_DEBUG;
                if (clp.mcBounds != undefined)
                    clp.mcBounds.visible = Global.COLLISION_DEBUG;
                if (clp.mcCollision != undefined)
                    clp.mcCollision.visible = Global.COLLISION_DEBUG;
                if (clp.mcBoundsProximity != undefined)
                    clp.mcBoundsProximity.visible = Global.COLLISION_DEBUG;
                if (clp.mcBody != undefined) {
                    if (clp.mcBody.mcBoundsAttack != undefined)
                        clp.mcBody.mcBoundsAttack.visible = Global.COLLISION_DEBUG;
                    if (clp.mcBody.mcBounds != undefined)
                        clp.mcBody.mcBounds.visible = Global.COLLISION_DEBUG;
                    if (clp.mcBody.mcCollision != undefined)
                        clp.mcBody.mcCollision.visible = Global.COLLISION_DEBUG;
                    if (clp.mcBody.mcBoundsProximity != undefined)
                        clp.mcBody.mcBoundsProximity.visible = Global.COLLISION_DEBUG;
                }
                var mcignored2 = ["mcGuiTutorial"];
                if (Main.all_gaf_str_x1.indexOf(currGaf) == -1) {
                    clp.scale.x *= 0.5;
                    clp.scale.y *= 0.5;
                    if (currGaf == "gui" || currGaf == "content") {
                        clp.scale.x *= 2;
                        clp.scale.y *= 2;
                        for (var p in mcignored2)
                            if (name.indexOf(mcignored2[p]) > -1) {
                                clp.scale.x *= 0.5;
                                clp.scale.y *= 0.5;
                            }
                    }
                }
                if (playClip) {
                    clp.play();
                    for (var a in clp) {
                        if (clp[a] != undefined && clp[a].children != undefined)
                            for (var b in clp.children) {
                                if (clp.children[b] != undefined
                                    && clp.children[b]._totalFrames != undefined
                                    && clp.children[b]._totalFrames > 1) {
                                    clp.children[b].play();
                                }
                            }
                    }
                }
                if (retWgaf)
                    return [currGaf, clp];
                return clp;
            }
            /*
            Visibility.change(function (e, state)
            {
                if (state == "hidden")
                {
                    visibilityState = false;
        
                    if (soundMusic != undefined && soundMusic != null)
                    {
                        soundMusicState = false;
                        soundMusic.mute();
                    }
                }
                else
                {
                    visibilityState = true;
        
                    if (soundMusic != undefined && soundMusic != null)
                    if (soundState)
                    {
                        if (!soundMusicState)
                        {
                            soundMusicState = true;
                            soundMusic.unmute();
                        }
                    }
                }
            });
            */
            static onResize() {
                if (!Main.renderer)
                    return;
                var gdpi = window.devicePixelRatio;
                gdpi = 1;
                Main.realW = window.innerWidth * gdpi;
                Main.realH = window.innerHeight * gdpi;
                Main.globalScale = Math.min(Main.realW / Main.globalWidth, Main.realH / Main.globalHeight);
                Main.renderer.resize(Main.globalWidth / 1, Main.globalHeight / 1);
                Main.renderer.view.style.width = Main.globalWidth / gdpi * Main.globalScale + 'px';
                Main.renderer.view.style.height = Main.globalHeight / gdpi * Main.globalScale + 'px';
                Main.renderer.view.style.position = 'absolute';
                Main.renderer.view.style.left = (Main.realW / 2 - Main.globalWidth * Main.globalScale / 2) + 'px';
                Main.renderer.view.style.top = (Main.realH / 2 - Main.globalHeight * Main.globalScale / 2) + 'px';
            }
            static isLocalStorageAvailable() {
                var checkKey = "test", storage = window.sessionStorage;
                try {
                    storage.setItem(checkKey, "test");
                    storage.removeItem(checkKey);
                    return true;
                }
                catch (error) {
                    return false;
                }
            }
            static loadGameProcess() {
                if (this.isLocalStorageAvailable()) {
                    if (window.localStorage.getItem(Global.APP_NAME) != undefined) {
                        return new StorageMain(JSON.parse(window.localStorage.getItem(Global.APP_NAME))).instance;
                    }
                    else
                        return new StorageMain({}).instance;
                }
            }
            static saveGameProcess() {
                if (this.isLocalStorageAvailable()) {
                    console.log("save storage", Global.app.storage.m_sharedObject);
                    window.localStorage.setItem(Global.APP_NAME, JSON.stringify(Global.app.storage.m_sharedObject));
                }
            }
            static convertToPixiGlowFilter(color, alpha, blurX, blurY, strength, quality, inner, knockout) {
                //distance, outerStrength, innerStrength, color, quality
                return new PIXI.filters.GlowFilter(blurX * strength, strength, inner ? strength : 0, color, quality);
            }
            static intersectsRect(a, b) {
                return ((a.x + a.width > b.x && a.x + a.width <= b.x + b.width) || (b.x + b.width > a.x && b.x + b.width <= a.x + a.width)) && ((a.y + a.height > b.y && a.y + a.height <= b.y + b.height) || (b.y + b.height > a.y && b.y + b.height <= a.y + a.height));
            }
            static intersectionRect(r1, r2) {
                var x = Math.max(r1.x, r2.x);
                var y = Math.max(r1.y, r2.y);
                var xx = Math.min(r1.x + r1.width, r2.x + r2.width);
                var yy = Math.min(r1.y + r1.height, r2.y + r2.height);
                return new PIXI.Rectangle(x, y, xx - x, yy - y);
            }
            static isNumeric(n) {
                return !isNaN(parseFloat(n)) && isFinite(n);
            }
        }
        Main.gamePaused = false;
        Main.inited = false;
        Main.gafData = {};
        Main.all_gaf_str_x2 = ["content", "gui", "gameplay_brawler", "player", "enemies", "world_brawler", "world_brawler_2", "world_brawler_3"];
        Main.all_gaf_str_x1 = ["world_brawler", "world_brawler_2", "world_brawler_3"];
        Main.all_gaf_index = 0;
        Main.visibilityState = true;
        Main.soundMusicState = false;
        Main.globalWidth = 600 * Global.WORLD_SCALE; //750
        Main.globalHeight = 400 * Global.WORLD_SCALE; //500
        Main.globalScale = 1;
        Main.realW = window.innerWidth;
        Main.realH = window.innerHeight;
        Main.allSounds = [];
        Main.gameLoopEnabled = false;
        Main.gameLoaded = false;
        Main.mNewTime = 0;
        Main.mOldTime = 0;
        Main.mDeltaTime = 0;
        bamtang.Main = Main;
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
window.onresize = function () {
    Main.onResize();
};
var Main = com.bamtang.Main;
new Main();
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            class Cheats {
                static registerCheats() {
                    /* fixit
                    this.SWTools.cheat(Cheats.onKeyDown, Application.KEY_ESC, "[ESC]", "Remove game");
                    this.SWTools.cheat(Cheats.onKeyDown, Application.KEY_1, "[1]", "Show Collision");
                    this.SWTools.cheat(Cheats.onKeyDown, Application.KEY_2, "[2]", "PLAT: Zoom out | BRAW: Zone Camera");
                    this.SWTools.cheat(Cheats.onKeyDown, Application.KEY_3, "[3]", "PLAT:Zoom in");
                    this.SWTools.cheat(Cheats.onKeyDown, Application.KEY_4, "[4]", "Restore canvas");
                    this.SWTools.cheat(Cheats.onKeyDown, Application.KEY_5, "[5]", "BRAW: increase power");
                    this.SWTools.cheat(Cheats.onKeyDown, Application.KEY_7, "[7]", "BRAW: kill enmies");
                    this.SWTools.cheat(Cheats.onKeyDown, Application.KEY_0, "[0]", "PLAT: Free move");
                    */
                }
                static onKeyDown1(keycode) {
                    if (!Cheats.enabled) {
                        return;
                    }
                    switch (keycode) {
                        case Application.KEY_ESC:
                            if (GuiGame.instance) {
                                GuiGame.instance.removeGame();
                            }
                            break;
                        case Application.KEY_1:
                            if (GameBrawler.instance) {
                            }
                            break;
                        case Application.KEY_2:
                            if (GameBrawler.instance) {
                                GameBrawler.instance.debugToogleCameraZone();
                            }
                            break;
                        case Application.KEY_3:
                            break;
                        case Application.KEY_4:
                            if (GameBrawler.instance) {
                                GameBrawler.instance.debugKillEnemies();
                            }
                            break;
                        case Application.KEY_5:
                            if (GameBrawler.instance) {
                                if (project.StatsMain.enableSpecial1 || project.StatsMain.enableSpecial2 || project.StatsMain.enableSpecial3) {
                                    GameBrawler.instance.debugIncreasePower();
                                }
                            }
                            break;
                        case Application.KEY_7:
                            if (GameBrawler.instance) {
                                GameBrawler.instance.debugKillEnemies();
                            }
                            break;
                        case Application.KEY_J:
                            break;
                        case Application.KEY_L:
                            break;
                        case Application.KEY_I:
                            break;
                        case Application.KEY_K:
                            if (GameBrawler.instance) {
                                GameBrawler.instance.debugIncreaseHealth(-10);
                            }
                            break;
                        case Application.KEY_0:
                            if (GameBrawler.instance) {
                                GameBrawler.instance.debugIncreaseLifes(-1);
                            }
                            break;
                        case Application.KEY_9:
                            if (GameBrawler.instance) {
                                GameBrawler.instance.debugIncreaseLifes(1);
                            }
                            break;
                        case Application.KEY_W:
                            if (GameBrawler.instance) {
                                if (project.Global.level == 1) {
                                    project.StatsMain.enableSpecial1 = true;
                                }
                                else if (project.Global.level == 2) {
                                    project.StatsMain.enableSpecial2 = true;
                                }
                                else if (project.Global.level == 3) {
                                    project.StatsMain.enableSpecial3 = true;
                                }
                                GameBrawler.instance.showScoreCard();
                            }
                            break;
                        case Application.KEY_L:
                            break;
                        case Application.KEY_B:
                            break;
                    }
                }
            }
            project.Cheats = Cheats;
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Cheats = com.bamtang.project.Cheats;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            class CollisionData {
            }
            CollisionData.mc_map_brw_lvl01_background = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 6, 7, 8, 6, 7, 8, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10];
            CollisionData.mc_map_brw_lvl01_tilesets_lv1 = [1, 2, 3, 4, 5, 0, 6, 7, 6, 8, 9, 8, 9, 7, 0, 0, 5, 10, 2, 3, 4, 5, 0, 6, 8, 11, 0, 12, 9, 7, 6, 7, 0, 0, 0, 13, 14, 0, 0, 15, 16, 17, 18, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 27, 29, 30, 29, 30, 28, 31, 32, 33, 34, 22, 23, 24, 25, 26, 27, 29, 35, 0, 36, 30, 28, 27, 28, 31, 26, 31, 32, 37, 0, 0, 38, 39, 40, 41, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 52, 53, 45, 46, 47, 48, 49, 50, 51, 54, 0, 55, 50, 51, 50, 51, 50, 49, 50, 51, 56, 0, 0, 57, 58, 59, 58, 60, 61, 62];
            CollisionData.mc_map_brw_lvl01_collisions
            CollisionData.mc_map_brw_lvl02_background = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 6, 7, 8, 1, 2, 9, 10, 11, 12, 13, 9, 10, 11, 12, 13, 9, 14, 14, 14, 9, 10];
            CollisionData.mc_map_brw_lvl02_tilesets_lv2 = [1, 2, 3, 4, 5, 6, 7, 8, 5, 6, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 5, 6, 5, 6, 9, 10, 9, 1, 11, 3, 4, 3, 4, 12, 13, 1, 11, 5, 6, 12, 13, 1, 11, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 16, 17, 18, 19, 20, 21, 18, 19, 22, 23, 24, 25, 22, 23, 22, 23, 22, 23, 18, 19, 18, 19, 24, 25, 0, 26, 27, 16, 17, 16, 17, 28, 29, 26, 27, 18, 19, 28, 30, 26, 27, 31, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 33, 34, 33, 34, 33, 34, 33, 34, 33, 34, 33, 35, 36, 34, 33, 34, 33, 34, 33, 34, 33, 34, 33, 35, 36, 0, 37, 33, 34, 33, 34, 33, 34, 38, 37, 33, 34, 33, 34, 38, 37, 33, 34, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            CollisionData.mc_map_brw_lvl02_collisions = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 5, 1, 1, 4, 0, 0, 0, 1, 1, 1, 1, 1, 1, 4, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 4, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 5, 4, 0, 0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            CollisionData.mc_map_brw_lvl03_background = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 6, 7, 8, 9, 10, 6, 7, 8, 9, 10, 6, 7, 8, 9, 10, 6, 11, 12, 13, 14, 15, 11, 12, 13, 14, 15, 11, 12, 13, 14, 15, 11];
            CollisionData.mc_map_brw_lvl03_tilesets_lv3 = [1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 1, 2, 0, 0, 0, 0, 3, 4, 0, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 13, 14, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 15, 16, 0, 9, 10, 11, 11, 11, 12, 15, 16, 0, 17, 18, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 22, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 24, 25, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 22, 26, 0, 21, 22, 22, 22, 22, 23, 22, 26, 0, 27, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            CollisionData.mc_map_brw_lvl03_collisions
            project.CollisionData = CollisionData;
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var CollisionData = com.bamtang.project.CollisionData;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            class Settings {
                constructor(xmlData) {
                    this.xml = xmlData;
                }
            }
            project.Settings = Settings;
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Settings = com.bamtang.project.Settings;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            class StatsMain {
                constructor() {
                }
                static init() {
                    console.log("init storage", project.Global.app.storage);
                    StatsMain.levelsDone = project.Global.app.storage.instance.loadArrayFunc(StatsMain.ID_LEVELS_DONE, StatsMain.levelsDone);
                    StatsMain.lastLevelDone = project.Global.app.storage.instance.loadIntFunc(StatsMain.ID_LAST_LEVEL_DONE, StatsMain.lastLevelDone);
                    StatsMain.enableSpecial1 = project.Global.app.storage.instance.loadBooleanFunc(StatsMain.ID_SPECIAL_1_DONE, StatsMain.enableSpecial1);
                    StatsMain.enableSpecial2 = project.Global.app.storage.instance.loadBooleanFunc(StatsMain.ID_SPECIAL_2_DONE, StatsMain.enableSpecial2);
                    StatsMain.enableSpecial3 = project.Global.app.storage.instance.loadBooleanFunc(StatsMain.ID_SPECIAL_3_DONE, StatsMain.enableSpecial3);
                    StatsMain.isUnlockedHardMode = project.Global.app.storage.instance.loadBooleanFunc(StatsMain.ID_UNLOCKED_HARD, StatsMain.isUnlockedHardMode);
                    StatsMain.playerLifes = project.Global.app.storage.instance.loadIntFunc(StatsMain.ID_PLAYER_LIFES, parseInt(project.Global.settings.xml.player.lifes.value));
                    StatsMain.playerMagic = project.Global.app.storage.instance.loadIntFunc(StatsMain.ID_PLAYER_MAGIC, 0);
                    StatsMain.levelsDone = project.Global.app.storage.instance.loadArrayFunc(StatsMain.ID_LEVELS_DONE, StatsMain.levelsDone);
                    StatsMain.lastLevelDone = project.Global.app.storage.instance.loadIntFunc(StatsMain.ID_LAST_LEVEL_DONE, StatsMain.lastLevelDone);
                    StatsMain.enableSpecial1 = project.Global.app.storage.instance.loadBooleanFunc(StatsMain.ID_SPECIAL_1_DONE, StatsMain.enableSpecial1);
                    StatsMain.enableSpecial2 = project.Global.app.storage.instance.loadBooleanFunc(StatsMain.ID_SPECIAL_2_DONE, StatsMain.enableSpecial2);
                    StatsMain.enableSpecial3 = project.Global.app.storage.instance.loadBooleanFunc(StatsMain.ID_SPECIAL_3_DONE, StatsMain.enableSpecial3);
                    StatsMain.isUnlockedHardMode = project.Global.app.storage.instance.loadBooleanFunc(StatsMain.ID_UNLOCKED_HARD, StatsMain.isUnlockedHardMode);
                }
                static resetSavedData() {
                    StatsMain.levelsDone = [0, 0, 0];
                    project.Global.app.storage.saveArrayFunc(StatsMain.ID_LEVELS_DONE, StatsMain.levelsDone);
                    StatsMain.lastLevelDone = 0;
                    project.Global.app.storage.saveIntFunc(StatsMain.ID_LAST_LEVEL_DONE, StatsMain.lastLevelDone);
                    StatsMain.playerLifes = parseInt(project.Global.settings.xml.player.lifes.value);
                    project.Global.app.storage.saveIntFunc(StatsMain.ID_PLAYER_LIFES, StatsMain.playerLifes);
                    StatsMain.playerMagic = 0;
                    project.Global.app.storage.saveIntFunc(StatsMain.ID_PLAYER_MAGIC, StatsMain.playerMagic);
                    StatsMain.enableSpecial1 = false;
                    StatsMain.enableSpecial2 = false;
                    StatsMain.enableSpecial3 = false;
                    project.Global.app.storage.saveBooleanFunc(StatsMain.ID_SPECIAL_1_DONE, StatsMain.enableSpecial1);
                    project.Global.app.storage.saveBooleanFunc(StatsMain.ID_SPECIAL_2_DONE, StatsMain.enableSpecial2);
                    project.Global.app.storage.saveBooleanFunc(StatsMain.ID_SPECIAL_3_DONE, StatsMain.enableSpecial3);
                    StatsMain.isUnlockedHardMode = false;
                    project.Global.app.storage.saveBooleanFunc(StatsMain.ID_UNLOCKED_HARD, StatsMain.isUnlockedHardMode);
                    StatsMain.comboRange = 0;
                    StatsMain.time = 0;
                    StatsMain.killedEnemies = 0;
                    StatsMain.jewels = 0;
                }
                static resetLevelStats() {
                    StatsMain.comboRange = 0;
                    StatsMain.time = 0;
                    StatsMain.killedEnemies = 0;
                    StatsMain.jewels = 0;
                    StatsMain.enableSpecial1 = project.Global.app.storage.loadBooleanFunc(StatsMain.ID_SPECIAL_1_DONE, StatsMain.enableSpecial1);
                    StatsMain.enableSpecial2 = project.Global.app.storage.loadBooleanFunc(StatsMain.ID_SPECIAL_2_DONE, StatsMain.enableSpecial2);
                    StatsMain.enableSpecial3 = project.Global.app.storage.loadBooleanFunc(StatsMain.ID_SPECIAL_3_DONE, StatsMain.enableSpecial3);
                }
                static setComboRange(comboRangeCurrent) {
                    if (comboRangeCurrent > StatsMain.comboRange) {
                        StatsMain.comboRange = comboRangeCurrent;
                    }
                }
            }
            StatsMain.ID_PLAYER_LIFES = "player_lifes";
            StatsMain.ID_PLAYER_MAGIC = "player_magic";
            StatsMain.ID_LEVELS_DONE = "levels_done";
            StatsMain.ID_LAST_LEVEL_DONE = "last_level_done";
            StatsMain.ID_JEWELS_DONE = "jewels_done";
            StatsMain.ID_SPECIAL_1_DONE = "special_1_done";
            StatsMain.ID_SPECIAL_2_DONE = "special_2_done";
            StatsMain.ID_SPECIAL_3_DONE = "special_3_done";
            StatsMain.ID_UNLOCKED_HARD = "unlocked_hard";
            StatsMain.enableSpecial1 = false;
            StatsMain.enableSpecial2 = false;
            StatsMain.enableSpecial3 = false;
            StatsMain.lastLevelDone = 0;
            StatsMain.levelsDone = [0, 0, 0];
            StatsMain.isUnlockedHardMode = false;
            StatsMain.comboRange = 0;
            StatsMain.time = 0;
            StatsMain.killedEnemies = 0;
            StatsMain.jewels = 0;
            project.StatsMain = StatsMain;
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var StatsMain = com.bamtang.project.StatsMain;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                class AIClass {
                    constructor() {
                        this.m_enemiesArray = new Array();
                        this.m_groupMeleeRight = new Array();
                        this.m_groupRangeRight = new Array();
                        this.m_groupMeleeLeft = new Array();
                        this.m_groupRangeLeft = new Array();
                        var tmpxmldata = xml2js(project.Global.app.getXMLData("brw_dataGeneral_" + project.Global.level), { compact: true, spaces: 4 }).xmlData;
                        if (tmpxmldata.ai != undefined) {
                            this.m_meleeLeaderDistance = tmpxmldata.ai.meleeLeaderDistance;
                            this.m_meleeDistance = tmpxmldata.ai.meleeDistance;
                            this.m_rangeDistance = tmpxmldata.ai.rangeDistance;
                        }
                    }
                    setPlayerRef(player) {
                        this.m_playerRef = player;
                    }
                    updateAfterAdd() {
                        if (this.m_temporalEnemy.group != -1) {
                            if (this.m_temporalEnemy.type == AIClass.TYPE_MELEE) {
                                switch (this.m_temporalEnemy.group) {
                                    case AIClass.GROUP_ML:
                                        if (this.m_groupMeleeLeft.length == 0) {
                                            this.m_temporalEnemy.leaderM = true;
                                        }
                                        break;
                                    case AIClass.GROUP_MR:
                                        if (this.m_groupMeleeRight.length == 0) {
                                            this.m_temporalEnemy.leaderM = true;
                                        }
                                        break;
                                }
                                this.addToGroup(this.m_temporalEnemy, this.m_temporalEnemy.group);
                                this.m_temporalEnemy = null;
                            }
                            else if (this.m_temporalEnemy.type == AIClass.TYPE_RANGE) {
                                switch (this.m_temporalEnemy.group) {
                                    case AIClass.GROUP_RL:
                                        if (this.m_groupRangeLeft.length == 0) {
                                            this.m_temporalEnemy.leaderR = true;
                                        }
                                        break;
                                    case AIClass.GROUP_RR:
                                        if (this.m_groupRangeRight.length == 0) {
                                            this.m_temporalEnemy.leaderM = true;
                                        }
                                        break;
                                }
                                this.addToGroup(this.m_temporalEnemy, this.m_temporalEnemy.group);
                                this.m_temporalEnemy = null;
                            }
                        }
                        else {
                            if (this.m_temporalEnemy.type == AIClass.TYPE_MELEE) {
                                if ((this.m_groupMeleeRight.length == 0) && (this.m_groupMeleeLeft.length == 0)) {
                                    this.m_temporalEnemy.leaderM = true;
                                    Boolean(Common.random(0, 1)) ? this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_MR) : this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_ML);
                                    this.m_temporalEnemy = null;
                                }
                                else if (this.m_groupMeleeRight.length == 0) {
                                    this.m_temporalEnemy.leaderM = true;
                                    this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_MR);
                                    this.m_temporalEnemy = null;
                                }
                                else if (this.m_groupMeleeLeft.length == 0) {
                                    this.m_temporalEnemy.leaderM = true;
                                    this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_ML);
                                    this.m_temporalEnemy = null;
                                }
                                else {
                                    if (this.m_groupMeleeLeft.length == this.m_groupMeleeRight.length) {
                                        Boolean(Common.random(0, 1)) ? this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_MR) : this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_ML);
                                    }
                                    else if (this.m_groupMeleeLeft.length < this.m_groupMeleeRight.length) {
                                        this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_ML);
                                    }
                                    else {
                                        this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_MR);
                                    }
                                }
                            }
                            else if (this.m_temporalEnemy.type == AIClass.TYPE_RANGE) {
                                if ((this.m_groupRangeRight.length == 0) && (this.m_groupRangeLeft.length == 0)) {
                                    this.m_temporalEnemy.leaderR = true;
                                    Boolean(Common.random(0, 1)) ? this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_RR) : this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_RL);
                                    this.m_temporalEnemy = null;
                                }
                                else if (this.m_groupRangeRight.length == 0) {
                                    this.m_temporalEnemy.leaderR = true;
                                    this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_RR);
                                    this.m_temporalEnemy = null;
                                }
                                else if (this.m_groupRangeLeft.length == 0) {
                                    this.m_temporalEnemy.leaderR = true;
                                    this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_RL);
                                    this.m_temporalEnemy = null;
                                }
                                else {
                                    if (this.m_groupRangeLeft.length == this.m_groupRangeRight.length) {
                                        Boolean(Common.random(0, 1)) ? this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_RR) : this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_RL);
                                    }
                                    else if (this.m_groupRangeLeft.length < this.m_groupRangeRight.length) {
                                        this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_RL);
                                    }
                                    else {
                                        this.addToGroup(this.m_temporalEnemy, AIClass.GROUP_RR);
                                    }
                                }
                            }
                        }
                    }
                    updateAfterRemove(actor) {
                        var temp = null;
                        if (actor.leaderM) {
                            if (actor.group == AIClass.GROUP_ML) {
                                if (this.m_groupMeleeLeft.length >= 1) {
                                    temp = this.m_groupMeleeLeft.pop();
                                    temp.leaderM = true;
                                    this.addToGroup(temp, AIClass.GROUP_ML);
                                    this.m_groupMeleeLeft.reverse();
                                }
                                else if (this.m_groupRangeLeft.length >= 1) {
                                    temp = this.m_groupRangeLeft.pop();
                                    temp.leaderM = true;
                                    this.addToGroup(temp, AIClass.GROUP_ML);
                                    this.m_groupMeleeLeft.reverse();
                                }
                            }
                            else if (actor.group == AIClass.GROUP_MR) {
                                if (this.m_groupMeleeRight.length >= 1) {
                                    temp = this.m_groupMeleeRight.pop();
                                    temp.leaderM = true;
                                    this.addToGroup(temp, AIClass.GROUP_MR);
                                    this.m_groupMeleeRight.reverse();
                                }
                                else if (this.m_groupRangeRight.length >= 1) {
                                    temp = this.m_groupRangeRight.pop();
                                    temp.leaderM = true;
                                    this.addToGroup(temp, AIClass.GROUP_MR);
                                    this.m_groupMeleeRight.reverse();
                                }
                            }
                        }
                    }
                    setRef(actor, x, y) {
                        actor.setRefX(x);
                        actor.setRefY(y);
                    }
                    addToGroup(actor, group) {
                        actor.group = group;
                        switch (group) {
                            case AIClass.GROUP_ML:
                                actor.type = EnemyIntelligent.TYPE_MELEE;
                                this.m_groupMeleeLeft.push(actor);
                                actor.leaderM ? this.setRef(actor, -this.m_meleeLeaderDistance, 0) : this.setRef(actor, -this.m_meleeDistance, Common.random(-70, 70));
                                break;
                            case AIClass.GROUP_MR:
                                actor.type = EnemyIntelligent.TYPE_MELEE;
                                this.m_groupMeleeRight.push(actor);
                                actor.leaderM ? this.setRef(actor, this.m_meleeLeaderDistance, 0) : this.setRef(actor, this.m_meleeDistance, Common.random(-70, 70));
                                break;
                            case AIClass.GROUP_RL:
                                actor.type = EnemyIntelligent.TYPE_RANGE;
                                this.m_groupRangeLeft.push(actor);
                                actor.leaderR ? this.setRef(actor, -this.m_rangeDistance, 0) : this.setRef(actor, -this.m_rangeDistance, Common.random(-70, 70));
                                break;
                            case AIClass.GROUP_RR:
                                actor.type = EnemyIntelligent.TYPE_RANGE;
                                this.m_groupRangeRight.push(actor);
                                actor.leaderR ? this.setRef(actor, this.m_rangeDistance, 0) : this.setRef(actor, this.m_rangeDistance, Common.random(-70, 70));
                                break;
                        }
                    }
                    addEnemy(enemyIntelligent) {
                        this.m_enemiesArray.push(enemyIntelligent);
                        this.m_temporalEnemy = enemyIntelligent;
                        this.updateAfterAdd();
                    }
                    removeEnemy(enemyIntelligent) {
                        if (this.m_enemiesArray != null) {
                            switch (enemyIntelligent.group) {
                                case AIClass.GROUP_ML:
                                    this.m_groupMeleeLeft.splice(this.m_groupMeleeLeft.indexOf(enemyIntelligent), 1);
                                    break;
                                case AIClass.GROUP_MR:
                                    this.m_groupMeleeRight.splice(this.m_groupMeleeRight.indexOf(enemyIntelligent), 1);
                                    break;
                                case AIClass.GROUP_RL:
                                    this.m_groupRangeLeft.splice(this.m_groupRangeLeft.indexOf(enemyIntelligent), 1);
                                    break;
                                case AIClass.GROUP_RR:
                                    this.m_groupRangeRight.splice(this.m_groupRangeRight.indexOf(enemyIntelligent), 1);
                                    break;
                            }
                            this.m_enemiesArray.splice(this.m_enemiesArray.indexOf(enemyIntelligent), 1);
                            this.updateAfterRemove(enemyIntelligent);
                        }
                    }
                    free() {
                        this.m_enemiesArray = null;
                        this.m_playerRef = null;
                        this.m_groupMeleeRight = null;
                        this.m_groupRangeRight = null;
                        this.m_groupMeleeLeft = null;
                        this.m_groupRangeLeft = null;
                        this.m_temporalEnemy = null;
                    }
                }
                AIClass.TYPE_MELEE = 1;
                AIClass.TYPE_RANGE = 2;
                AIClass.GROUP_MR = 1;
                AIClass.GROUP_RR = 2;
                AIClass.GROUP_ML = 3;
                AIClass.GROUP_RL = 4;
                gameBrawler.AIClass = AIClass;
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var AIClass = com.bamtang.project.gameBrawler.AIClass;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                class ActorManagerBrawler extends BRW_NpcManagerExt {
                    constructor(world) {
                        super(world);
                    }
                    /*override*/ init(player) {
                        this.m_player = player;
                        var canvas = this.m_world.objectsCanvas();
                        var px;
                        var py;
                        for (var k = 0; k < this.m_buffer.length; ++k) {
                            px = this.m_buffer[k].x;
                            py = this.m_buffer[k].y;
                            switch (this.m_buffer[k].id) {
                                case ActorManagerBrawler.ITEM_ENEMY_INTELLIGENT:
                                    this.add(new EnemyIntelligent(canvas, this.m_world, px, py, this.m_buffer[k]));
                                    break;
                                case ActorManagerBrawler.ITEM_ENEMY:
                                    this.m_auxNpcExt = this.m_buffer[k];
                                    this.add(new EnemyFighter(canvas, this.m_world, px, py, this.m_buffer[k]));
                                    break;
                                case ActorManagerBrawler.ITEM_ENEMY_RANGER:
                                    this.add(new EnemyRanger(canvas, this.m_world, px, py, this.m_buffer[k], EnemyRanger.ACTION_RANGER));
                                    break;
                                case ActorManagerBrawler.ITEM_ENEMY_COWARD:
                                    this.add(new EnemyRanger(canvas, this.m_world, px, py, this.m_buffer[k], EnemyRanger.ACTION_COWARD));
                                    break;
                                case ActorManagerBrawler.ITEM_ENEMY_RANGFIGHTER:
                                    this.add(new EnemyRangeFighter(canvas, this.m_world, px, py, this.m_buffer[k]));
                                    break;
                                case ActorManagerBrawler.ITEM_STOP:
                                    this.add(new Stop(canvas, this.m_world, px, py, this.m_buffer[k].params, this.m_buffer[k]));
                                    break;
                                case ActorManagerBrawler.ITEM_EXPLOSIVE_BOX:
                                    this.add(new Xplosive(canvas, this.m_world, px, py, this.m_buffer[k]));
                                    break;
                                case ActorManagerBrawler.ITEM_STALACTILE:
                                    this.add(new Fallen(canvas, this.m_world, px, py, this.m_buffer[k], Fallen.FALL_TYPE_ROCK));
                                    break;
                                case ActorManagerBrawler.ITEM_BREAKABLE_1:
                                    this.add(new FallenBlocker(canvas, this.m_world, px, py, this.m_buffer[k], FallenBlocker.BREAKABLE_TYPE_1));
                                    break;
                                case ActorManagerBrawler.ITEM_BREAKABLE_2:
                                    this.add(new FallenBlocker(canvas, this.m_world, px, py, this.m_buffer[k], FallenBlocker.BREAKABLE_TYPE_2));
                                    break;
                                case ActorManagerBrawler.ITEM_BREAKABLE_3:
                                    this.add(new FallenBlocker(canvas, this.m_world, px, py, this.m_buffer[k], FallenBlocker.BREAKABLE_TYPE_3));
                                    break;
                                case ActorManagerBrawler.ITEM_BREAKABLE_4:
                                    this.add(new BigWorm(canvas, this.m_world, px, py, this.m_buffer[k], FallenBlocker.BREAKABLE_TYPE_4));
                                    break;
                                case ActorManagerBrawler.ITEM_BIG_BOX:
                                    if ((project.Global.level == 1 && !project.StatsMain.enableSpecial1) ||
                                        (project.Global.level == 2 && !project.StatsMain.enableSpecial2) ||
                                        (project.Global.level == 3 && !project.StatsMain.enableSpecial3)) {
                                        this.add(new BigBox(canvas, this.m_world, px, py, this.m_buffer[k], FallenBlocker.BREAKABLE_TYPE_4));
                                    }
                                    else {
                                        this.m_auxNpcExt.stopId = this.m_buffer[k].stopId;
                                        this.m_auxNpcExt.group = this.m_buffer[k].group;
                                        this.add(new EnemyFighter(canvas, this.m_world, px, py, this.m_auxNpcExt));
                                    }
                                    break;
                                case ActorManagerBrawler.ITEM_LASER:
                                    this.add(new Laser(canvas, this.m_world, px, py, this.m_buffer[k].params));
                                    break;
                                case ActorManagerBrawler.ITEM_TELEPORT:
                                    this.add(new Teleporter(canvas, this.m_world, px, py, this.m_buffer[k]));
                                    break;
                                case ActorManagerBrawler.ITEM_PORTAL_FIRE:
                                case ActorManagerBrawler.ITEM_PORTAL_ICE:
                                case ActorManagerBrawler.ITEM_PORTAL_STONE:
                                case ActorManagerBrawler.ITEM_PORTAL_THUNDER:
                                    this.add(new Teleporter(canvas, this.m_world, px, py, this.m_buffer[k]));
                                    break;
                                case ActorManagerBrawler.ITEM_TRAP_A:
                                    this.add(new TimerTrap(canvas, this.m_world, px, py, this.m_buffer[k], TimerTrap.TYPE_A));
                                    break;
                                case ActorManagerBrawler.ITEM_TRAP_B:
                                    this.add(new TimerTrap(canvas, this.m_world, px, py, this.m_buffer[k], TimerTrap.TYPE_B));
                                    break;
                                case ActorManagerBrawler.ITEM_TRAP_C:
                                    this.add(new TimerTrap(canvas, this.m_world, px, py, this.m_buffer[k], TimerTrap.TYPE_C));
                                    break;
                                case ActorManagerBrawler.ITEM_GAME_END:
                                    this.add(new GameEnd(canvas, this.m_world, px, py, this.m_buffer[k].scaleX, this.m_buffer[k].scaleY));
                                    break;
                                case ActorManagerBrawler.ITEM_GUNFIRE_1:
                                    this.add(new ObjectGunfire(canvas, this.m_world, px, py, this.m_buffer[k], ObjectGunfire.GUNFIRE_TYPE_1));
                                    break;
                                case ActorManagerBrawler.ITEM_GUNFIRE_2:
                                    this.add(new ObjectGunfire(canvas, this.m_world, px, py, this.m_buffer[k], ObjectGunfire.GUNFIRE_TYPE_2));
                                    break;
                                case ActorManagerBrawler.ITEM_GUNFIRE_3:
                                    this.add(new ObjectGunfire(canvas, this.m_world, px, py, this.m_buffer[k], ObjectGunfire.GUNFIRE_TYPE_3));
                                    break;
                                case ActorManagerBrawler.ITEM_MESSAGE:
                                    this.add(new ItemMessage(canvas, this.m_world, px, py, this.m_buffer[k]));
                                    break;
                                case ActorManagerBrawler.ITEM_NPC_MSG:
                                    this.add(new NpcItemMessage(canvas, this.m_world, px, py, this.m_buffer[k]));
                                    break;
                                case ActorManagerBrawler.ITEM_NPC_CHAR:
                                    this.add(new NpcChar(canvas, this.m_world, px, py));
                                    break;
                                case ActorManagerBrawler.ITEM_SWITCHER:
                                    this.add(new Switcher(canvas, this.m_world, px, py, this.m_buffer[k].params, this.m_buffer[k]));
                                    break;
                                case ActorManagerBrawler.ITEM_BRIDGE:
                                    this.add(new Bridge(canvas, this.m_world, px, py, this.m_buffer[k].params, this.m_buffer[k]));
                                    break;
                                case ActorManagerBrawler.ITEM_CAMERA_ZONE:
                                    this.add(new CameraZone(canvas, this.m_world, px, py, this.m_buffer[k].scaleX, this.m_buffer[k].scaleY, Common.getParams(this.m_buffer[k].params)));
                                    break;
                                case ActorManagerBrawler.ITEM_TUTO:
                                    this.add(new Tutorial(this.m_world.objectsCanvas(), this.m_world, px, py, this.m_buffer[k].params));
                                    break;
                                case ActorManagerBrawler.ITEM_BOSS:
                                    this.add(new Gunter(canvas, this.m_world, px, py, this.m_buffer[k]));
                                    break;
                                case ActorManagerBrawler.ITEM_BOSS_2:
                                    this.add(new Lich(canvas, this.m_world, px, py, this.m_buffer[k]));
                                    break;
                                default:
                                    if (this.m_buffer[k].kipuIndex != -1) {
                                        var entityObjectExt = new BRW_EntityObjectExt(this.m_world.objectsCanvas(), this.m_buffer[k].x, this.m_buffer[k].y, this.m_world, this.m_world.kipuItemsData[this.m_buffer[k].kipuIndex]);
                                        this.add(entityObjectExt);
                                    }
                            }
                        }
                    }
                }
                ActorManagerBrawler.ITEM_ENEMY = 1;
                ActorManagerBrawler.ITEM_ADD_LIFE = 2;
                ActorManagerBrawler.ITEM_ADD_HEALTH = 3;
                ActorManagerBrawler.ITEM_ADD_POWER = 4;
                ActorManagerBrawler.ITEM_SHURIKEN = 5;
                ActorManagerBrawler.ITEM_COIN_BRONZE = 6;
                ActorManagerBrawler.ITEM_COIN_SILVER = 7;
                ActorManagerBrawler.ITEM_COIN_GOLD = 8;
                ActorManagerBrawler.ITEM_HELP = 9;
                ActorManagerBrawler.ITEM_SOLDIER = 11;
                ActorManagerBrawler.ITEM_STOP = 12;
                ActorManagerBrawler.ITEM_WALL = 14;
                ActorManagerBrawler.ITEM_STALACTILE = 15;
                ActorManagerBrawler.ITEM_EXPLOSIVE_BOX = 16;
                ActorManagerBrawler.ITEM_CAMERA_ZONE = 18;
                ActorManagerBrawler.ITEM_LASER = 27;
                ActorManagerBrawler.ITEM_TELEPORT = 28;
                ActorManagerBrawler.ITEM_SWITCHER = 29;
                ActorManagerBrawler.ITEM_ENEMY_RANGER = 34;
                ActorManagerBrawler.ITEM_ENEMY_RANGFIGHTER = 35;
                ActorManagerBrawler.ITEM_ENEMY_COWARD = 36;
                ActorManagerBrawler.ITEM_MESSAGE = 50;
                ActorManagerBrawler.ITEM_BREAKABLE_1 = 51;
                ActorManagerBrawler.ITEM_BREAKABLE_2 = 52;
                ActorManagerBrawler.ITEM_BREAKABLE_3 = 53;
                ActorManagerBrawler.ITEM_BREAKABLE_4 = 54;
                ActorManagerBrawler.ITEM_PORTAL_FIRE = 60;
                ActorManagerBrawler.ITEM_PORTAL_ICE = 61;
                ActorManagerBrawler.ITEM_PORTAL_STONE = 62;
                ActorManagerBrawler.ITEM_PORTAL_THUNDER = 63;
                ActorManagerBrawler.ITEM_TRAP_A = 65;
                ActorManagerBrawler.ITEM_TRAP_B = 66;
                ActorManagerBrawler.ITEM_TRAP_C = 67;
                ActorManagerBrawler.ITEM_GUNFIRE_1 = 75;
                ActorManagerBrawler.ITEM_GUNFIRE_2 = 76;
                ActorManagerBrawler.ITEM_GUNFIRE_3 = 77;
                ActorManagerBrawler.ITEM_BOSS = 1000;
                ActorManagerBrawler.ITEM_BOSS_2 = 1001;
                ActorManagerBrawler.ITEM_GAME_END = 2001;
                ActorManagerBrawler.ITEM_NPC_CHAR = 2002;
                ActorManagerBrawler.ITEM_NPC_MSG = 2003;
                ActorManagerBrawler.ITEM_TUTO = 2004;
                ActorManagerBrawler.ITEM_BRIDGE = 2005;
                ActorManagerBrawler.ITEM_BIG_BOX = 2006;
                ActorManagerBrawler.ITEM_ENEMY_INTELLIGENT = 666;
                gameBrawler.ActorManagerBrawler = ActorManagerBrawler;
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var ActorManagerBrawler = com.bamtang.project.gameBrawler.ActorManagerBrawler;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                class BulletBrawler extends BRW_WorldActorExt {
                    constructor(clipName, world, owner, x, y, speed, damage, dir = 1, horizontal = true, distance = 600, weak = true) {
                        super(world.objectsCanvas(), world, x, y);
                        this.setActorClip(clipName);
                        this.nameMovieClip = clipName;
                        this.mDamage = damage;
                        this.mRange = distance;
                        this.mDirection = dir;
                        this.mReceivePlayerAttack = true;
                        this.mWeakMode = weak;
                        this.mMove = new LinearMovement(x, y, speed);
                        this.mMove.endCallback = this.onEndMove.bind(this);
                        if (horizontal) {
                            this.mMove.gotoPosition(x + this.mRange * this.mDirection, y);
                        }
                        else {
                            this.mMove.gotoPosition(x, y + this.mRange * this.mDirection);
                        }
                        this.setRangeControlled(false);
                        this.updateBoundsAttack();
                        this.updateBoundsBody();
                        this.m_clip.play();
                        this.mTarget = 0;
                        this.setShadowClip("mcBaseShadow");
                    }
                    getTarget() { return this.mTarget; }
                    setReceivePlayerAttack(value) { this.mReceivePlayerAttack = value; }
                    setTarget(target, changeDirection = false) {
                        this.mTarget = target;
                        if (changeDirection) {
                            this.mDirection *= -1;
                            this.mMove.resetPosition(this.m_x, this.m_y);
                            this.mMove.gotoPosition(this.m_x + this.mRange * this.mDirection, this.m_y);
                        }
                    }
                    onEndMove(linearMovemente) {
                        this.m_isAwaitingDelete = true;
                    }
                    /*override*/ update(dt) {
                        this.mMove.update(dt);
                        this.m_x = this.mMove.x();
                        this.m_y = this.mMove.y();
                        var actorsGroup = this.m_world.actorManager().actors;
                        var actor = null;
                        var k = 0;
                        if (this.mTarget & BulletBrawler.TARGET_PLAYER) {
                            if (this.m_world.player().hitTestReceivedAttack(this)) {
                                this.m_world.player().onEnemyCollision(this, this.mDamage, !this.mWeakMode);
                                if (this.mWeakMode) {
                                    this.createHitEffect();
                                    this.m_isAwaitingDelete = true;
                                    this.mTarget = 0;
                                }
                            }
                            else if (this.mReceivePlayerAttack) {
                                this.m_world.player().processAttackToBullet(this);
                            }
                        }
                        if (this.mTarget & BulletBrawler.TARGET_BREAKABLES) {
                            for (k = actorsGroup.length - 1; (k >= 0) && !this.m_isAwaitingDelete; --k) {
                                actor = actorsGroup[k];
                                if (actor.isIdle()) {
                                    continue;
                                }
                                if (actor instanceof Breakable && actor.isInCamera(this.m_world.camera())) {
                                    if (actor.hitTestReceivedAttack(this)) {
                                        actor.onHit(this.mDamage);
                                        if (this.mWeakMode) {
                                            this.createHitEffect();
                                            this.m_isAwaitingDelete = true;
                                            this.mTarget = 0;
                                        }
                                    }
                                }
                            }
                        }
                        if (this.mTarget & BulletBrawler.TARGET_ENEMY) {
                            for (k = actorsGroup.length - 1; (k >= 0) && !this.m_isAwaitingDelete; --k) {
                                actor = actorsGroup[k];
                                if (actor.isIdle()) {
                                    continue;
                                }
                                if (actor instanceof BaseEnemy && actor.isEnabled()) {
                                    if (actor.hitTestReceivedAttack(this)) {
                                        actor.onHit(this.mDamage, this);
                                        if (this.mWeakMode) {
                                            this.createHitEffect();
                                            this.m_isAwaitingDelete = true;
                                            this.mTarget = 0;
                                        }
                                    }
                                }
                            }
                        }
                        super.update(dt);
                    }
                    createHitEffect(x_offset = 0, y_offset = -50) {
                        var nameClip = "mc_fx_hit";
                        switch (this.nameMovieClip) {
                            case "mc_bullet_1":
                                nameClip = "mc_cannon1_bullet_hit";
                                break;
                            case "mc_bullet_2":
                                nameClip = "mc_cannon2_bullet_hit";
                                break;
                            case "mc_bullet_3":
                                nameClip = "mc_cannon3_bullet_hit";
                                break;
                            default:
                                nameClip = "mc_fx_hit";
                        }
                        if (nameClip.length > 0) {
                            var fDir = 1;
                            var fx = this.m_world.addEffect(nameClip, this.m_x + x_offset * fDir, this.m_y + y_offset);
                            fx.actor().clip().scale.x *= fDir;
                        }
                    }
                    /*override*/ createCorners() { }
                    /*override*/ free() {
                        super.free();
                        this.mMove = null;
                    }
                }
                BulletBrawler.TARGET_PLAYER = 1;
                BulletBrawler.TARGET_ENEMY = 2;
                BulletBrawler.TARGET_BREAKABLES = 4;
                gameBrawler.BulletBrawler = BulletBrawler;
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BulletBrawler = com.bamtang.project.gameBrawler.BulletBrawler;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                class GameBrawler extends GameExt {
                    constructor(canvas, canvasHud, dataWorld, dataGeneral) {
                        super(canvas, canvasHud);
                        this.mCollisionVisible = false;
                        this.mIsVisibleCameraZones = false;
                        this.mFinish = false;
                        GameBrawler.instance = this;
                        this.isPaused = false;
                        this.m_dataWorld = dataWorld;
                        this.m_dataGeneral = dataGeneral;
                        this.mCurrentCameraZone = null;
                        this.mCombosAttackCounter = 0;
                        this.mCombosAttackResetInterval = new Interval(this.resetCombosAttack.bind(this), parseInt(project.Global.settings.xml.brawler_game.timeResetComboAttack.value));
                        this.ai = new gameBrawler.AIClass();
                        this.m_world = new gameBrawler.WorldBrawler(this.m_canvas.addChild(new PIXI.Container()), this, this.m_dataWorld, this.m_dataGeneral);
                        this.setScore(0);
                        project.StatsMain.resetLevelStats();
                        this.ai.setPlayerRef(this.m_world.player());
                    }
                    getGeneralFileName() { return this.m_dataGeneral; }
                    world() {
                        return this.m_world;
                    }
                    resetGame() {
                        this.mReset = true;
                    }
                    reset() {
                        this.m_world.player().waitRespawnPlayer();
                        this.mReset = false;
                    }
                    startGameplay() {
                        this.m_world.player().setCanPlayerInput(true);
                    }
                    introPlayer() {
                        this.m_world.player().introWalking();
                    }
                    appearPlayer() {
                        this.m_world.player().gotoState(gameBrawler.PlayerBrawler.ST_APPEARS);
                    }
                    resetCombosAttack() {
                        this.m_world.player().resetCombo();
                        project.StatsMain.setComboRange(this.mCombosAttackCounter);
                        this.mCombosAttackCounter = 0;
                        gameBrawler.HudBrawler.instance.resetCombo();
                    }
                    /*override*/ init() {
                        this.m_hud = new gameBrawler.HudBrawler("gui_hud_brawler");
                        this.m_canvasHud.addChild(this.m_hud.clip);
                    }
                    /*override*/ onActivate(activate) {
                        if (!activate) {
                            this.m_world.player().resetControl();
                        }
                    }
                    onZoneCamera(zone) {
                        if ((zone != null) && (zone != this.mCurrentCameraZone)) {
                            if (this.mCurrentCameraZone != null) {
                                this.mCurrentCameraZone.onActivated(false);
                            }
                            this.mCurrentCameraZone = zone;
                            this.m_world.camera().setScreenLimits(zone.getZone());
                            this.mCurrentCameraZone.onActivated(true);
                        }
                    }
                    onStopResolved(objStop) {
                        this.mStopResolved = true;
                        this.mPositionForAppearArrow = objStop.x();
                        this.mTimes = 4001;
                    }
                    onObjectDestroyed(object) {
                        if (object) {
                            this.m_world.player().evaluateCurrentStop(object.getStopId(), object.getStopGroup(), object.getClassName());
                        }
                    }
                    onEnemyKicked(enemy, abusive) {
                        if (!(abusive instanceof gameBrawler.PlayerBrawler))
                            return;
                        this.mCombosAttackCounter++;
                        if (this.mCombosAttackCounter >= 2) {
                            this.m_hud.showCountCombos(this.mCombosAttackCounter);
                        }
                        this.mCombosAttackResetInterval.reset();
                        this.m_world.player().onEnemyKicked(enemy, abusive);
                    }
                    onPlayerKicked(player) {
                        this.resetCombosAttack();
                    }
                    onGameEnd(win) {
                        if (win) {
                            this.m_world.player().onGameWin();
                        }
                        else {
                            project.Global.app.stopAllSound();
                            GuiGame.instance.removeGame(GuiManager.SC_TRY_AGAIN);
                        }
                    }
                    showScoreCard() {
                        project.Global.app.stopAllSound();
                        var levelMessage = "";
                        if (project.Global.isInHardMode) {
                            levelMessage = "Level " + String(project.Global.level) + " Nightmare";
                        }
                        else {
                            levelMessage = "Level " + String(project.Global.level) + " Normal";
                        }
                        switch (project.Global.level) {
                            case 1:
                                GuiCutscene.counter = 3;
                                GuiCutscene.numScene = 1;
                                break;
                            case 2:
                                GuiCutscene.counter = 5;
                                GuiCutscene.numScene = 1;
                                break;
                            case 3:
                                GuiCutscene.counter = 7;
                                GuiCutscene.numScene = 2;
                                break;
                        }
                        GuiGame.instance.removeGame(GuiManager.SC_CUTSCENE);
                    }
                    /*override*/ onKeyDown(keyCode) {
                        super.onKeyDown(keyCode);
                        this.m_world.player().onKeyDown(keyCode);
                    }
                    /*override*/ onKeyUp(keyCode) {
                        super.onKeyUp(keyCode);
                        this.m_world.player().onKeyUp(keyCode);
                    }
                    /*override*/ update(dt) {
                        if (this.mReset) {
                            this.reset();
                        }
                        else {
                            if (dt > GameBrawler.MAX_DELTA) {
                                dt = GameBrawler.MAX_DELTA;
                            }
                            super.update(dt);
                            if (!this.isPaused) {
                                this.m_oldPlayerX = this.m_world.player().x();
                                project.StatsMain.time += dt;
                                this.m_world.update(dt);
                                this.mCombosAttackResetInterval.update(dt);
                                if (this.mStopResolved) {
                                    if (!this.m_world.player().isWatchinBigWormDecoy &&
                                        !gameBrawler.HudBrawler.instance.isShowingSpecialPanel) {
                                        if (this.mTimes > 4000) {
                                            this.m_hud.showMessageGo();
                                            this.mTimes = 0;
                                        }
                                        this.mTimes += dt;
                                    }
                                    if (this.m_world.player().x() >= this.mPositionForAppearArrow) {
                                        this.mStopResolved = false;
                                    }
                                }
                                else if (this.m_world.player().getCurrentStop() == null &&
                                    !this.m_world.player().isWatchinBigWormDecoy &&
                                    this.m_world.player().getCanPlayerInput()) {
                                    if (this.m_oldPlayerX == this.m_world.player().x()) {
                                        this.m_timePlayerQuiet += dt;
                                        if (this.m_timePlayerQuiet > 8000) {
                                            this.m_timePlayerQuiet = 0;
                                            this.m_hud.showMessageGo();
                                        }
                                    }
                                    else {
                                        this.m_timePlayerQuiet = 0;
                                    }
                                }
                            }
                        }
                    }
                    /*override*/ free() {
                        this.m_world.free();
                        this.m_world = null;
                        this.mCurrentCameraZone = null;
                        this.mCombosAttackResetInterval.free();
                        this.mCombosAttackResetInterval = null;
                        super.free();
                        GameBrawler.instance = null;
                    }
                    debugToogleCameraZone() {
                        this.mIsVisibleCameraZones = !this.mIsVisibleCameraZones;
                        this.m_world.showCameraZones(this.mIsVisibleCameraZones);
                    }
                    debugKillEnemies() {
                        var actors = this.m_world.actorManager().actors;
                        for (var k = 0; k < actors.length; k++) {
                            if (actors[k] instanceof BaseEnemy) {
                                actors[k].markToDisappear();
                            }
                        }
                    }
                    debugIncreasePower() {
                        this.m_world.player().magic += 10;
                    }
                    debugIncreaseLifes(val) {
                        this.m_world.player().lifes += val;
                    }
                    debugIncreaseHealth(val) {
                        this.m_world.player().health += val;
                    }
                }
                GameBrawler.MAX_DELTA = 50;
                gameBrawler.GameBrawler = GameBrawler;
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GameBrawler = com.bamtang.project.gameBrawler.GameBrawler;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                class HudBrawler extends ScreenHud {
                    constructor(nameClip, x = 0, y = 0, app = null) {
                        super(nameClip, x, y, app);
                        this.m_showingHud = true;
                        this.m_currentComboGrade = -1;
                        this.TIME_HIDE_BAR = 2000;
                        this.addEffectGui("gui_start", this.endStarMsg.bind(this));
                        HudBrawler.instance = this;
                        this.hideEnemyBar();
                        this.hideEnemyBarBoss();
                        this.m_hideEnemyBarInterval = new Interval(this.hideEnemyBar.bind(this), this.TIME_HIDE_BAR);
                        this.m_special1 = this.getControl("mcSpecial1").child;
                        this.m_special2 = this.getControl("mcSpecial2").child;
                        this.m_special3 = this.getControl("mcSpecial3").child;
                        this.m_special1.gotoAndStop(7);
                        this.m_special2.gotoAndStop(8);
                        this.m_special3.gotoAndStop(9);
                        this.m_clock = this.getControl("mcTimeClock");
                        this.showTimer(false);
                        this.m_playerBar = this.getControl("mcPlayerEnergyBar");
                        this.m_playerBase = this.getControl("mcPlayerBase");
                        this.m_playerSpecial1 = this.getControl("mcSpecial1");
                        this.m_playerSpecial2 = this.getControl("mcSpecial2");
                        this.m_playerSpecial3 = this.getControl("mcSpecial3");
                        this.m_txtScore = this.getControl("mcTextScore");
                        this.m_txtLifes = this.getControl("mcTextLifes");
                        this.m_enemyBar = this.getControl("mcEnemyEnergyBar");
                        this.m_enemyBase = this.getControl("mcEnemyBase");
                        this.m_enemyTxtName = this.getControl("mcTextEnemyName");
                        this.m_bossBar = this.getControl("mcBossEnergyBar");
                        this.m_bossBase = this.getControl("mcBossBase");
                        this.m_bossFace = this.getControl("mcBossFace");
                        this.m_bossTxtName = this.getControl("mcTextBossName");
                        this.m_powerBar = this.getControl("mcPlayerPowerBar");
                        this.m_powerBar.child["mcHudMpBarActivated"].visible = false;
                        this.m_powerBar.child["mcHudMpBarLocked"].visible = false;
                        this.m_powerBar.child["mcShine"].visible = false;
                        this.m_powerBar.child["mcShine"].play();
                        this.m_txtScore.visible = false;
                        if (!project.StatsMain.enableSpecial1 && !project.StatsMain.enableSpecial2 && !project.StatsMain.enableSpecial3) {
                            this.m_powerBar.child["mcHudMpBarActivated"].visible = false;
                        }
                        else {
                            this.m_powerBar.child["mcHudMpBarActivated"].visible = false;
                            this.m_powerBar.child["mcHudMpBarLocked"].visible = false;
                        }
                    }
                    endStarMsg(e) {
                        if (project.Global.level == 1) {
                            gameBrawler.GameBrawler.instance.appearPlayer();
                        }
                        else {
                            gameBrawler.GameBrawler.instance.introPlayer();
                        }
                        var msg = this.addEffectGui("gui_level_x", this.endLevelMsg.bind(this));
                        msg.addFrameFunction([this.playStartSound, 41]);
                        var hard = project.Global.isInHardMode ? "_HARD" : "";
                        msg.gui.getControl("mcInfoMessage01").setText("TXT_META_LV_" + project.Global.level + hard);
                    }
                    playStartSound() {
                        project.Global.app.playSound("snd_atb_scenario_start");
                    }
                    endLevelMsg(e) {
                        if (project.Global.level == 1) {
                            gameBrawler.GameBrawler.instance.startGameplay();
                        }
                    }
                    showLevelCompleteMsg() {
                        project.Global.app.stopAllSound();
                        project.Global.app.playSound("snd_atb_scenario_awesome");
                        this.addEffectGui("gui_level_completed", this.endLevelCompleteMsg.bind(this));
                    }
                    showFakePopupSpecial(ending = true) {
                        var popup;
                        if (ending) {
                            popup = this.addEffectGui("gui_popup_unlocked", this.onEndFakePopup.bind(this));
                        }
                        else {
                            popup = this.addEffectGui("gui_popup_unlocked", this.onEndFakePopup2.bind(this));
                        }
                        this.isShowingSpecialPanel = true;
                        popup.gui.getControl("mcGuiUnlockedPower").changeClip("gui_popups_powerunlocked_power0" + project.Global.level);
                        popup.gui.getControl("mcInfoNewItem").setText("TXT_GET_SPECIAL_" + project.Global.level);
                    }
                    onEndFakePopup2(e) {
                        this.showMessageGo();
                        this.isShowingSpecialPanel = false;
                    }
                    onEndFakePopup(e) {
                        GuiGame.instance.game().world().player().setMoveToExitLevel();
                    }
                    showWarning(callback, finalBoss = false) {
                        if (finalBoss) {
                            this.addEffectGui("gui_warning_2", callback.bind(this));
                            return;
                        }
                        this.addEffectGui("gui_warning", callback.bind(this));
                    }
                    endLevelCompleteMsg(e) {
                        if (project.Global.level == 3) {
                            gameBrawler.GameBrawler.instance.showScoreCard();
                            return;
                        }
                        GuiGame.instance.game().world().player().setMoveToExitLevel();
                    }
                    selectSpecial(index) {
                        switch (index) {
                            case 1:
                                if (this.m_powerBar.child["mcShine"] != null) {
                                    this.m_powerBar.child["mcShine"].visible = true;
                                }
                                this.m_hideShine = false;
                                this.m_special1.gotoAndStop(project.StatsMain.enableSpecial1 ? 1 : 7);
                                this.m_special2.gotoAndStop(project.StatsMain.enableSpecial2 ? 5 : 8);
                                this.m_special3.gotoAndStop(project.StatsMain.enableSpecial3 ? 6 : 9);
                                break;
                            case 2:
                                if (this.m_powerBar.child["mcShine"] != null) {
                                    this.m_powerBar.child["mcShine"].visible = true;
                                }
                                this.m_hideShine = false;
                                this.m_special1.gotoAndStop(project.StatsMain.enableSpecial1 ? 4 : 7);
                                this.m_special2.gotoAndStop(project.StatsMain.enableSpecial2 ? 2 : 8);
                                this.m_special3.gotoAndStop(project.StatsMain.enableSpecial3 ? 6 : 9);
                                break;
                            case 3:
                                if (this.m_powerBar.child["mcShine"] != null) {
                                    this.m_powerBar.child["mcShine"].visible = false;
                                }
                                this.m_hideShine = true;
                                this.m_special1.gotoAndStop(project.StatsMain.enableSpecial1 ? 4 : 7);
                                this.m_special2.gotoAndStop(project.StatsMain.enableSpecial2 ? 5 : 8);
                                this.m_special3.gotoAndStop(project.StatsMain.enableSpecial3 ? 3 : 9);
                                break;
                            default:
                                if (this.m_powerBar.child["mcShine"] != null) {
                                    this.m_powerBar.child["mcShine"].visible = true;
                                }
                                this.m_hideShine = false;
                                this.m_special1.gotoAndStop(project.StatsMain.enableSpecial1 ? 4 : 7);
                                this.m_special2.gotoAndStop(project.StatsMain.enableSpecial2 ? 5 : 8);
                                this.m_special3.gotoAndStop(project.StatsMain.enableSpecial3 ? 6 : 9);
                        }
                    }
                    enableSpecial(index) {
                        switch (index) {
                            case 1:
                                GuiGame.instance.game().world().player().magic = 100;
                                this.m_powerBar.child["mcHudMpBarLocked"].visible = false;
                                this.m_powerBar.child["mcHudMpBarActivated"].visible = true;
                                this.m_powerBar.child["mcHudMpBarActivated"].gotoAndPlay(1);
                                this.m_special1.gotoAndStop(1);
                                this.m_special2.gotoAndStop(project.StatsMain.enableSpecial2 ? 5 : 8);
                                this.m_special3.gotoAndStop(project.StatsMain.enableSpecial3 ? 6 : 9);
                                break;
                            case 2:
                                this.m_isEnablingSpecial = true;
                                this.m_special1.gotoAndStop(project.StatsMain.enableSpecial1 ? 4 : 7);
                                this.m_special2.gotoAndStop(2);
                                this.m_special3.gotoAndStop(project.StatsMain.enableSpecial3 ? 6 : 9);
                                break;
                            case 3:
                                this.m_isEnablingSpecial = true;
                                this.m_hideShine = true;
                                if (this.m_powerBar.child["mcShine"] != null) {
                                    this.m_powerBar.child["mcShine"].visible = false;
                                    this.m_hideShine = true;
                                }
                                this.m_special1.gotoAndStop(project.StatsMain.enableSpecial1 ? 4 : 7);
                                this.m_special2.gotoAndStop(project.StatsMain.enableSpecial2 ? 5 : 8);
                                this.m_special3.gotoAndStop(3);
                                break;
                        }
                    }
                    setPlayerEnergy(percent) {
                        this.getControl("mcPlayerEnergyBar").value = percent;
                    }
                    setPlayerPower(percent) {
                        if (this.m_hideShine && this.m_powerBar.child["mcShine"] != null) {
                            this.m_powerBar.child["mcShine"].visible = false;
                        }
                        this.getControl("mcPlayerPowerBar").value = percent;
                    }
                    /*override*/ setLifes(lifes) {
                        if (lifes < 0) {
                            lifes = 0;
                        }
                        this.getControl("mcTextLifes").setText("TXT_HUD_NUMBER", "x" + lifes);
                    }
                    showMessageGo() {
                        project.Global.app.playSound("snd_atb_scenario_go");
                        this.addEffectGui("gui_go");
                    }
                    /*override*/ onMouseOverControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onMouseOverControl(control);
                        project.Global.app.playSound("snd_atb_interface_over");
                    }
                    setEnemyEnergy(percent, face, name, boss = false, idBoss = 1) {
                        this.getControl("mcTextBossName").visible = boss;
                        this.getControl("mcBossBase").visible = boss;
                        this.getControl("mcBossEnergyBar").visible = boss;
                        this.getControl("mcBossFace").visible = boss;
                        if (boss) {
                            if (idBoss == 1) {
                                this.getControl("mcBossFace").child.gotoAndStop(1);
                            }
                            else {
                                this.getControl("mcBossFace").child.gotoAndStop(6);
                            }
                        }
                        this.getControl("mcEnemyFace").canvas.visible = !boss;
                        this.getControl("mcTextEnemyName").canvas.visible = !boss;
                        this.getControl("mcEnemyEnergyBar").visible = !boss;
                        this.getControl("mcEnemyBase").visible = !boss;
                        if (boss === true) {
                            this.getControl("mcBossEnergyBar").value = 101 - percent;
                        }
                        else {
                            this.getControl("mcEnemyFace").child.gotoAndStop(face);
                            this.getControl("mcEnemyEnergyBar").value = 101 - percent;
                        }
                        if (name == null || name == "") {
                            name = "TXT_NAME_COMMON_ENEMY";
                        }
                        this.getControl("mcTextEnemyName").setText(name);
                        this.m_hideEnemyBarInterval.reset();
                    }
                    hideEnemyBar(boss = false) {
                        if (boss) {
                            return;
                        }
                        if (Gunter.instance != null) {
                            if (Gunter.instance.isEnabled()) {
                                this.showEnemyBarBoss();
                            }
                        }
                        this.getControl("mcEnemyFace").canvas.visible = false;
                        this.getControl("mcTextEnemyName").canvas.visible = false;
                        this.getControl("mcEnemyEnergyBar").visible = false;
                        this.getControl("mcEnemyBase").visible = false;
                    }
                    showEnemyBarBoss(idBoss = 1) {
                        this.getControl("mcTextBossName").visible = true;
                        this.getControl("mcBossBase").visible = true;
                        this.getControl("mcBossEnergyBar").visible = true;
                        this.getControl("mcBossFace").visible = true;
                        if (idBoss == 1) {
                            this.getControl("mcBossFace").child.gotoAndStop(1);
                        }
                        else {
                            this.getControl("mcBossFace").child.gotoAndStop(6);
                        }
                    }
                    hideEnemyBarBoss() {
                        this.getControl("mcTextBossName").visible = false;
                        this.getControl("mcBossBase").visible = false;
                        this.getControl("mcBossEnergyBar").visible = false;
                        this.getControl("mcBossFace").visible = false;
                    }
                    resetCombo() {
                        this.m_currentComboGrade = -1;
                        if (this.m_comboBase != null) {
                            this.m_needStopComboBase = false;
                            this.m_comboBase.pause = false;
                        }
                        if (this.m_comboGrade != null) {
                            this.m_needStopGrade = false;
                            this.m_comboGrade.pause = false;
                        }
                        if (this.m_comboHits != null) {
                            this.m_needStopComboHits = false;
                            this.m_comboHits.pause = false;
                        }
                    }
                    showCountCombos(value) {
                        if (this.m_comboBase == null) {
                            this.m_comboBase = this.addEffectGui("gui_combo01", this.clearComboBase.bind(this));
                            this.m_comboBase.gui.getControl("mcInfoCombo01").setText("TXT_HUD_COMBO");
                            this.m_needStopComboBase = true;
                        }
                        if (this.m_comboHits != null) {
                            this.m_comboHits.isAwaitingDelete = true;
                        }
                        this.m_comboHits = this.addEffectGui("gui_combo02", this.clearComboHits.bind(this));
                        this.m_comboHits.gui.getControl("mcInfoCombo02").setText("TXT_HUD_NUMBER_COMBO", value);
                        this.m_needStopComboHits = true;
                        var comboGrade = project.Global.comboRangeD;
                        if (value >= project.Global.comboRangeD) {
                            comboGrade = project.Global.comboRangeD;
                        }
                        if (value >= project.Global.comboRangeC) {
                            comboGrade = project.Global.comboRangeC;
                        }
                        if (value >= project.Global.comboRangeB) {
                            comboGrade = project.Global.comboRangeB;
                        }
                        if (value >= project.Global.comboRangeA) {
                            comboGrade = project.Global.comboRangeA;
                        }
                        if (value >= project.Global.comboRangeS) {
                            comboGrade = project.Global.comboRangeS;
                        }
                        switch (comboGrade) {
                            case project.Global.comboRangeD:
                                if (this.m_currentComboGrade != project.Global.comboRangeD) {
                                    this.m_needStopGrade = true;
                                    if (this.m_comboMessage != null) {
                                        this.m_comboMessage.isAwaitingDelete = true;
                                    }
                                    this.m_comboMessage = this.addEffectGui("gui_combo03", this.clearComboMessage.bind(this));
                                    this.m_comboMessage.gui.getControl("mcInfoCombo03").setText("TXT_COMBO_A");
                                    this.m_currentComboGrade = project.Global.comboRangeD;
                                }
                                break;
                            case project.Global.comboRangeC:
                                if (this.m_currentComboGrade != project.Global.comboRangeC) {
                                    this.m_needStopGrade = true;
                                    if (this.m_comboMessage != null) {
                                        this.m_comboMessage.isAwaitingDelete = true;
                                    }
                                    this.m_comboMessage = this.addEffectGui("gui_combo03", this.clearComboMessage.bind(this));
                                    this.m_comboMessage.gui.getControl("mcInfoCombo03").setText("TXT_COMBO_B");
                                    this.m_currentComboGrade = project.Global.comboRangeC;
                                }
                                break;
                            case project.Global.comboRangeB:
                                if (this.m_currentComboGrade != project.Global.comboRangeB) {
                                    this.m_needStopGrade = true;
                                    if (this.m_comboMessage != null) {
                                        this.m_comboMessage.isAwaitingDelete = true;
                                    }
                                    this.m_comboMessage = this.addEffectGui("gui_combo03", this.clearComboMessage.bind(this));
                                    this.m_comboMessage.gui.getControl("mcInfoCombo03").setText("TXT_COMBO_C");
                                    this.m_currentComboGrade = project.Global.comboRangeB;
                                }
                                break;
                            case project.Global.comboRangeA:
                                if (this.m_currentComboGrade != project.Global.comboRangeA) {
                                    this.m_needStopGrade = true;
                                    if (this.m_comboMessage != null) {
                                        this.m_comboMessage.isAwaitingDelete = true;
                                    }
                                    this.m_comboMessage = this.addEffectGui("gui_combo03", this.clearComboMessage.bind(this));
                                    this.m_comboMessage.gui.getControl("mcInfoCombo03").setText("TXT_COMBO_D");
                                    this.m_currentComboGrade = project.Global.comboRangeA;
                                }
                                break;
                            case project.Global.comboRangeS:
                                if (this.m_currentComboGrade != project.Global.comboRangeS) {
                                    this.m_needStopGrade = true;
                                    if (this.m_comboMessage != null) {
                                        this.m_comboMessage.isAwaitingDelete = true;
                                    }
                                    this.m_comboMessage = this.addEffectGui("gui_combo03", this.clearComboMessage.bind(this));
                                    this.m_comboMessage.gui.getControl("mcInfoCombo03").setText("TXT_COMBO_E");
                                    this.m_currentComboGrade = project.Global.comboRangeS;
                                }
                                break;
                        }
                    }
                    clearComboMessage(fx) {
                        if (this.m_comboMessage != null) {
                            this.m_comboMessage.pause = false;
                        }
                        this.m_comboMessage = null;
                    }
                    clearComboHits(fx) {
                        if (this.m_comboHits != null) {
                            this.m_comboHits.pause = false;
                        }
                        this.m_comboHits = null;
                    }
                    clearComboBase(fx) {
                        if (this.m_comboBase != null) {
                            this.m_comboBase.pause = false;
                        }
                        this.m_comboBase = null;
                    }
                    clearComboFx(fx) {
                        this.m_comboBase = null;
                    }
                    /*override*/ setScore(score) {
                        this.getControl("mcTextScore").setText("TXT_HUD_NUMBER", score);
                    }
                    showTimer(show) {
                        if (this.m_clock == null) {
                            return;
                        }
                        this.m_clock.visible = show;
                    }
                    setTime(value) {
                        this.m_clock.time = value;
                    }
                    /*override*/ onClickControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onClickControl(control);
                        project.Global.app.playSound("snd_atb_interface_button");
                        if (control.name == "mcBtnPause") {
                            GuiGame.instance.addPopup(GuiPopupPause, "gui_pause");
                        }
                    }
                    toggleHud(show) {
                        this.m_showingHud = show;
                        this.m_playerBar.visible = show;
                        this.m_playerBase.visible = show;
                        this.m_playerSpecial1.visible = show;
                        this.m_playerSpecial2.visible = show;
                        this.m_playerSpecial3.visible = show;
                        this.m_txtLifes.visible = show;
                        this.m_powerBar.visible = show;
                    }
                    /*override*/ update(dt) {
                        super.update(dt);
                        this.m_hideEnemyBarInterval.update(dt);
                        if (this.m_needStopComboBase == true && this.m_comboBase != null && this.m_comboBase.gui.clip.currentFrame > 30) {
                            this.m_comboBase.pause = true;
                            this.m_needStopComboBase = false;
                        }
                        if (this.m_needStopComboHits == true && this.m_comboHits != null && this.m_comboHits.gui.clip.currentFrame > 12) {
                            this.m_comboHits.pause = true;
                            this.m_needStopComboHits = false;
                        }
                        if (this.m_needStopGrade == true && this.m_comboGrade != null && this.m_comboGrade.gui.clip.currentFrame > 12) {
                            this.m_comboGrade.pause = true;
                            this.m_needStopGrade = false;
                        }
                        if (this.m_isEnablingSpecial) {
                            GuiGame.instance.game().world().player().magic += 10;
                            if (GuiGame.instance.game().world().player().magic >= 100) {
                                GuiGame.instance.game().world().player().magic = 100;
                                this.m_isEnablingSpecial = false;
                            }
                        }
                    }
                    /*override*/ onKeyDown(keyCode) {
                        if (this.m_popusQueue != null) {
                            this.m_popusQueue.onKeyDown(keyCode);
                        }
                    }
                    /*override*/ free() {
                        this.m_hideEnemyBarInterval = null;
                        super.free();
                    }
                }
                gameBrawler.HudBrawler = HudBrawler;
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var HudBrawler = com.bamtang.project.gameBrawler.HudBrawler;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                class PlayerBrawler extends BRW_PlayerExt {
                    constructor(canvas, world, generalFile, x, y) {
                        super(canvas, world, x - 100, y);
                        this.m_selectedSpecialAttack = PlayerBrawler.SELECTED_SPECIAL_ATTACK_NONE;
                        this.mTeleportTargetX = 0;
                        this.mTeleportTargetY = 0;
                        this.mIsRespawn = false;
                        this.mTimerFinishAnimation = 400;
                        this.m_timeCounter = 0;
                        this.m_timeTotalWait = 0;
                        this.m_isInBigFeetMode = false;
                        this.m_isInSharkSwordMode = false;
                        this.m_isInFearMode = false;
                        this.m_killedBigWormDecoy = false;
                        this.mCanPlayerInput = false;
                        this.mDisableJumpKey = false;
                        this.mDisableActionKey = false;
                        this.mDisableHudKey = false;
                        this.m_winMovement = null;
                        this.m_enableKeyLeftShark = true;
                        this.m_enableKeyRightShark = true;
                        this.specialTick = -1;
                        this.isWatchinBigWormDecoy = false;
                        this.onEndTeleportInAnimation = null;
                        this.m_walkingCounter = 0;
                        this.m_realInitX = x;
                        if (project.Global.level == 1 || project.Global.level == 2) {
                            this.m_selectedSpecialAttack = PlayerBrawler.SELECTED_SPECIAL_ATTACK_SHARK_SWORD;
                        }
                        else if (project.Global.level == 3) {
                            this.m_selectedSpecialAttack = PlayerBrawler.SELECTED_SPECIAL_ATTACK_BIG_FEET;
                        }
                        this.m_control = new BRW_PlayerControlExt(this);
                        this.mData = new dtPlayer();
                        this.mAttackMode = PlayerBrawler.MODE_ATTACK_NORMAL;
                        this.setShadowClip("mcBaseShadow");
                        this.mIsVisible = true;
                        this.mInTeleport = false;
                        this.m_character = new Character(x, y, this.m_canvas);
                        this.setPlayerSkin();
                        var gendata = xml2js(project.Global.app.getXMLData(generalFile), { compact: true, spaces: 4 }).xmlData;
                        for (var xd in gendata.player) {
                            gendata.player[xd] = gendata.player[xd]._text;
                        }
                        this.loadDataGeneral(gendata.player);
                        this.m_character.onEndAnimation = this.onEndAnimation.bind(this);
                        this.gotoState(PlayerBrawler.ST_NONE);
                        this.createCorners();
                        this.m_limitUp = true;
                        this.m_limitLeft = true;
                        this.m_limitRight = true;
                        this.m_health = parseInt(project.Global.settings.xml.player.health.value);
                        this.m_oldHealth = 0;
                        this.m_magic = project.StatsMain.playerMagic;
                        this.m_oldMagic = -1;
                        this.m_lifes = project.StatsMain.playerLifes;
                        this.m_oldLifes = 0;
                        this.mCountShurikens = 0;
                        this.mTimePausedJump = 0;
                        var xml = project.Global.app.getXMLData(generalFile);
                        var w = 100;
                        var h = 100;
                        if (w > 0 && h > 0) {
                            this.resize(w, h);
                        }
                        this.mCurrentCombo = PlayerBrawler.COMBO_1;
                        this.mMaxComboEnabled = false;
                        this.mCurrentJumpCombo = 0;
                        this.mWaitForCombo = 1000;
                        this.mRespawnPosition = new Vector2D(0, 0);
                        this.mInvulnerableInterval = new TintInterval(this.m_canvas, 3000, 100);
                        this.mInvulnerableInterval.onFinish = this.onFinishInvulnerableInterval.bind(this);
                        this.m_boundsBodyDepth = new PIXI.Rectangle(-50, -10, 100, 20);
                        this.mBoundsNormalAttackDepth = new PIXI.Rectangle(-50, -10, 100, 20);
                        this.m_boundsAttackDepth = this.mBoundsNormalAttackDepth;
                        this.mTimerEnemyCombo = 0;
                        this.mCountEnemyHit = 0;
                        this.mTimeToDropEnemy = 0;
                        this.mBulletOffset_X = 20;
                        this.mBulletOffset_Y = 0;
                        this.mWinFlag = false;
                        this.mDisableInputs = false;
                        this.mCanPlayerInput = false;
                        this.m_control.setCallbackToCompleteJump(this.onCompleteJumpControl.bind(this));
                        this.m_control.setCallbackToMaxHeight(this.onMaxJumpHeightReached.bind(this));
                        gameBrawler.HudBrawler.instance.selectSpecial(this.m_selectedSpecialAttack);
                        this.mOnWaitRespawn = false;
                        this.setScale(1.2);
                    }
                    getCurrentJumpCombo() { return this.mCurrentJumpCombo; }
                    setInvulnerability(val) { this.m_isInvulnerable = val; }
                    getCurrentDamage() { return this.mCurrentDamage; }
                    isLookingToLeft() { return (this.m_clip.scale.x < 0); }
                    isJumping() { return this.m_control.isJumping(); }
                    introWalking() {
                        this.m_winMovement = new LinearMovement(this.m_x, this.m_y, 0.1);
                        this.m_winMovement.gotoPosition(this.m_realInitX, this.m_y);
                        this.m_winMovement.endCallback = this.onEndIntroWalking.bind(this);
                    }
                    getCanPlayerInput() {
                        return this.mCanPlayerInput;
                    }
                    setCanPlayerInput(value) {
                        this.mCanPlayerInput = value;
                        if (this.mCanPlayerInput == false) {
                            this.m_control.reset();
                        }
                    }
                    getCurrentCombo() {
                        return this.mCurrentCombo;
                    }
                    loadDataGeneral(xmlData) {
                        this.m_control.loadData(xmlData);
                        this.mData.loadData(xmlData);
                        this.m_canGrabEnemy = this.mData.grabEnemy;
                        this.mCurrentDamage = this.mData.damageHit;
                        this.mCurrentScorePerHit = this.mData.scoreHit;
                    }
                    setPlayerSkin() {
                        if (this.m_character == null) {
                            Application.error("character is null", "DemoPlayer::setPlayerSkin()");
                            return false;
                        }
                        this.m_character.addState(String(PlayerBrawler.ST_NONE), "mc_" + PlayerBrawler.type + "_run");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_STAND), "mc_" + PlayerBrawler.type + "_stand");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_STAND_2), "mc_" + PlayerBrawler.type + "_idle");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_WALK), "mc_" + PlayerBrawler.type + "_run");
                        this.m_character.addState(String(PlayerBrawler.ST_WIN_WALK), "mc_" + PlayerBrawler.type + "_run");
                        this.m_character.addState(String(PlayerBrawler.ST_PRE_WIN_WALK), "mc_" + PlayerBrawler.type + "_run");
                        this.m_character.addState(String(PlayerBrawler.ST_TELEPORT_WALK), "mc_" + PlayerBrawler.type + "_run");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_RUN), "mc_" + PlayerBrawler.type + "_dash");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_JUMP_UP), "mc_" + PlayerBrawler.type + "_jumpup");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_JUMP_DOWN), "mc_" + PlayerBrawler.type + "_jump_01");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_HIT), "mc_" + PlayerBrawler.type + "_hit");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_LOSE), "mc_" + PlayerBrawler.type + "_defeat");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_WIN), "mc_" + PlayerBrawler.type + "_win");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_ATTACK), "mc_" + PlayerBrawler.type + "_attack_1", [this.playSoundAttack1.bind(this), 1]);
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_ATTACK_JUMP), "mc_" + PlayerBrawler.type + "_jumpattack_01");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_ATTACK_DASH), "mc_" + PlayerBrawler.type + "_dashattack");
                        this.m_character.addState(String(PlayerBrawler.ST_APPEARS), "mc_" + PlayerBrawler.type + "_appear" + (project.Global.level == 1 ? "2" : ""));
                        this.m_character.addState(String(PlayerBrawler.ST_SPECIAL_INTRO), "mc_" + PlayerBrawler.type + "_special_intro");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_THROW_ENEMY), "mc_" + PlayerBrawler.type + "_grabthrow");
                        this.m_character.addState(String(PlayerBrawler.ST_DROP_ENEMY), "mc_" + PlayerBrawler.type + "_grabsmash");
                        this.m_character.addState(String(PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_HALF), "mc_" + PlayerBrawler.type + "_special_attack_big_feet_half", [this.playBigFeetWalkHalf.bind(this), 10], [this.shakeScreen.bind(this), 17]);
                        this.m_character.addState(String(PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_FULL_START), "mc_" + PlayerBrawler.type + "_special_attack_big_feet_full_start");
                        this.m_character.addState(String(PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_FULL), "mc_" + PlayerBrawler.type + "_special_attack_big_feet_full_stand");
                        this.m_character.addState(String(PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_FULL_FINISH), "mc_" + PlayerBrawler.type + "_special_attack_big_feet_full_finish", [this.playBigFeetFinish.bind(this), 1]);
                        this.m_character.addState(String(PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_HALF), "mc_" + PlayerBrawler.type + "_special_attack_shark_sword_half");
                        this.m_character.addState(String(PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL_START), "mc_" + PlayerBrawler.type + "_special_attack_shark_sword_full_start");
                        this.m_character.addState(String(PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL), "mc_" + PlayerBrawler.type + "_run_shark_sword_full");
                        this.m_character.addState(String(PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL_FINISH), "mc_" + PlayerBrawler.type + "_special_attack_shark_sword_full_finish");
                        this.m_character.addState(String(PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER_START), "mc_" + PlayerBrawler.type + "_special_attack_fear_feaster_start");
                        this.m_character.addState(String(PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER_FINISH), "mc_" + PlayerBrawler.type + "_special_attack_fear_feaster_finish");
                        this.m_character.addState(String(PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER), "mc_" + PlayerBrawler.type + "_special_attack_fear_feaster");
                        this.m_character.addState(String(PlayerBrawler.ST_KNOCK), "mc_" + PlayerBrawler.type + "_fall" + (project.Global.level != 1 ? "2" : ""));
                        this.m_character.addState(String(PlayerBrawler.ST_GETUP), "mc_" + PlayerBrawler.type + "_getup");
                        this.m_character.addState(String(PlayerBrawler.ST_TELEPORT_IN), "mc_" + PlayerBrawler.type + "_teleport_in");
                        this.m_character.addState(String(PlayerBrawler.ST_TELEPORT_OUT), "mc_" + PlayerBrawler.type + "_teleport_out");
                        return true;
                    }
                    playSoundAttack1() {
                        project.Global.app.playSound("snd_atb_player_attack1");
                    }
                    playSoundAttack2() {
                    }
                    playSoundAttack3() {
                        project.Global.app.playSound("snd_atb_player_attack3");
                    }
                    setVisible(visible) {
                        this.mIsVisible = visible;
                        this.m_clip.visible = this.mIsVisible;
                        this.m_clipShadow.visible = this.mIsVisible;
                    }
                    setWinFlag() {
                        this.mWinFlag = true;
                    }
                    checkStateToWin() {
                        return ((this.m_enemyCatchRef == null) && !this.m_control.isJumping() &&
                            (this.mAttackMode == PlayerBrawler.MODE_ATTACK_NORMAL) && !this.m_isDead);
                    }
                    initTeleport(callback = null, _x = 0, _y = 0) {
                        if (this.m_enemyCatchRef != null || this.m_control.isJumping() || this.mAttackMode != PlayerBrawler.MODE_ATTACK_NORMAL) {
                            return false;
                        }
                        if (this.m_winMovement != null) {
                            this.m_winMovement.cancelMotion();
                            this.m_winMovement.free();
                            this.m_winMovement = null;
                        }
                        this.m_winMovement = new LinearMovement(this.m_x, this.m_y, 0.5);
                        this.m_winMovement.gotoPosition(_x - 75, _y + 25);
                        this.m_winMovement.endCallback = this.onEndPreTeleportMove.bind(this);
                        this.gotoState(PlayerBrawler.ST_TELEPORT_WALK);
                        this.setCanPlayerInput(false);
                        this.onEndTeleportInAnimation = callback;
                        return true;
                    }
                    onEndPreTeleportMove(e) {
                        this.gotoState(PlayerBrawler.ST_TELEPORT_IN);
                        this.setFlipX(false);
                        this.m_control.reset();
                        this.mInTeleport = true;
                        this.m_clipShadow.visible = false;
                    }
                    doTeleport() {
                        if (this.m_currentStop != null) {
                            if (this.m_currentStop.isPaused()) {
                                this.m_currentStop.setPaused(false);
                            }
                            else {
                                this.m_currentStop.setPaused(true);
                            }
                        }
                        this.setPosition(this.mTeleportTargetX, this.mTeleportTargetY);
                        this.gotoState(PlayerBrawler.ST_TELEPORT_OUT);
                        this.m_clipShadow.visible = true;
                        var cameraX = this.x() - this.m_world.cameraWidth * 0.5;
                        var cameraY = this.y() - this.m_world.cameraHeight * 0.5;
                        if (this.m_currentStop != null && !this.m_currentStop.isPaused()) {
                            if (cameraX > (this.m_currentStop.x() - this.m_world.camera().width)) {
                                cameraX = this.m_currentStop.x() - this.m_world.camera().width;
                            }
                        }
                        this.m_world.camera().setX(cameraX);
                        this.m_world.camera().setY(cameraY);
                        this.m_world.camera().setWorldLimitLeft(cameraX);
                        this.m_world.camera().update(0);
                    }
                    endTeleport() {
                        this.setCanPlayerInput(true);
                        this.mInTeleport = false;
                    }
                    setTeleportTarget(targetX, targetY) {
                        this.mTeleportTargetX = targetX;
                        this.mTeleportTargetY = targetY;
                    }
                    /*override*/ respawnPlayer() {
                        this.mOnWaitRespawn = false;
                        this.mTimeForceRespawn = -1;
                        this.m_health = parseInt(project.Global.settings.xml.player.health.value);
                        this.m_oldHealth = 0;
                        this.m_isDead = false;
                        this.mIsRespawn = true;
                        this.m_x = this.mRespawnPosition.x;
                        this.m_y = this.mRespawnPosition.y;
                        this.setModeAttack(PlayerBrawler.MODE_ATTACK_NORMAL);
                        if (this.mLastComboInterval != null) {
                            this.mLastComboInterval.free();
                            this.mLastComboInterval = null;
                        }
                        if (this.mComboInterval != null) {
                            this.mComboInterval.free();
                            this.mComboInterval = null;
                        }
                        this.resetCombo();
                        this.knockOutEnemies();
                        this.m_character.addState(String(PlayerBrawler.ST_APPEARS), "mc_" + PlayerBrawler.type + "_appear2");
                        this.gotoState(PlayerBrawler.ST_APPEARS);
                    }
                    /*override*/ setCurrentStop(stop) {
                        var succes = super.setCurrentStop(stop);
                        if (succes && this.m_currentStop != null) {
                            this.m_timerStop = stop.getTimer();
                            this.m_wavesRequeridedStop = stop.getWavesRequired();
                            if (this.m_timerStop > 0 && this.m_wavesRequeridedStop <= 0) {
                                this.addLockForSolvingStop();
                                gameBrawler.HudBrawler.instance.showTimer(true);
                                gameBrawler.HudBrawler.instance.setTime(1);
                            }
                            else if (this.m_timerStop > 0 && this.m_wavesRequeridedStop > 0) {
                                this.addLockForSolvingStop();
                                gameBrawler.HudBrawler.instance.showTimer(true);
                                gameBrawler.HudBrawler.instance.setTime(1);
                            }
                        }
                        return succes;
                    }
                    /*override*/ countKills(amount = 1) {
                        this.m_oldStopGroup = this.currentStopGroup;
                        super.countKills(amount);
                        if (this.currentStopGroup != this.m_oldStopGroup) {
                            if (this.m_oldStopGroup == this.m_wavesRequeridedStop && this.m_timerStop > 0) {
                                this.removeLockForSolvingStop();
                                if (this.m_currentStop != null) {
                                    this.solveCurrentStop();
                                    var actors = this.m_world.actorManager().actors;
                                    for (var k = 0; k < actors.length; k++) {
                                        if (actors[k] instanceof BaseEnemy) {
                                            actors[k].markToDisappear();
                                        }
                                    }
                                    gameBrawler.HudBrawler.instance.showTimer(false);
                                }
                            }
                        }
                    }
                    knockOutEnemies() {
                        var actors = this.m_world.actorManager().actors;
                        for (var k = actors.length - 1; k >= 0; --k) {
                            if (actors[k] instanceof BaseEnemy && !(actors[k] instanceof Gunter)) {
                                actors[k].onKnock(0, this);
                            }
                        }
                    }
                    evaluateCurrentStop(idStop, group, nameClass) {
                        if (this.m_currentStop == null) {
                            Application.warn("Object stop is null", "DemoPlayer::evaluateCurrentStop()");
                            return false;
                        }
                        if ((this.currentStop == idStop) && (this.currentStopGroup == group)) {
                            if (this.m_currentStop.getTypeObjectControlled() == nameClass) {
                                this.countKills();
                                return true;
                            }
                            else {
                                Application.warn("Expected the class name: '" + this.m_currentStop.getTypeObjectControlled() + "' and found: '" + nameClass + "'", "DemoPlayer::evaluateCurrentStop()");
                            }
                        }
                        return false;
                    }
                    /*override*/ getStateString() {
                        if (this.m_state == PlayerBrawler.ST_APPEARS) {
                            return "ST_APPEARS";
                        }
                        return super.getStateString();
                    }
                    resetCombo() {
                        this.mCurrentCombo = PlayerBrawler.COMBO_1;
                        this.mMaxComboEnabled = false;
                    }
                    /*override*/ setClipsCatchEnemy() {
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_STAND), "mc_" + PlayerBrawler.type + "_grab");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_STAND_2), "mc_" + PlayerBrawler.type + "_grab");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_WALK), "mc_" + PlayerBrawler.type + "_grabrun");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_JUMP_UP), "mc_" + PlayerBrawler.type + "_grabjump");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_JUMP_DOWN), "mc_" + PlayerBrawler.type + "_grabjumpfall");
                    }
                    /*override*/ setClipsDropEnemy() {
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_STAND), "mc_" + PlayerBrawler.type + "_stand");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_STAND_2), "mc_" + PlayerBrawler.type + "_stand");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_WALK), "mc_" + PlayerBrawler.type + "_run");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_JUMP_UP), "mc_" + PlayerBrawler.type + "_jumpup");
                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_JUMP_DOWN), "mc_" + PlayerBrawler.type + "_jump_01");
                    }
                    makeInvulnerableEffect(forHit = false) {
                        if (forHit) {
                            this.mInvulnerableInterval.setColors(new TintColor(), new TintColor(2, 2, 2, 1));
                            this.mInvulnerableInterval.start(2000, 100);
                        }
                        else {
                            this.mInvulnerableInterval.setColors(new TintColor(), new TintColor(1.1, 3, 1.1, 1));
                            this.mInvulnerableInterval.start(4000, 100);
                        }
                        this.m_isInvulnerable = true;
                    }
                    getAttackMode() {
                        return this.mAttackMode;
                    }
                    setModeAttack(mode) {
                        if (this.mAttackMode == mode) {
                            return;
                        }
                        this.mAttackMode = mode;
                        var a = this.m_world.actorManager().actors;
                        var i;
                        switch (this.mAttackMode) {
                            case PlayerBrawler.MODE_ATTACK_NORMAL:
                                this.m_boundsAttackDepth = this.mBoundsNormalAttackDepth;
                                this.mCurrentDamage = this.mData.damageHit;
                                this.m_control.onAction(false);
                                break;
                            case PlayerBrawler.MODE_ATTACK_SPECIAL_BIG_FEET_HALF:
                                this.m_control.reset();
                                this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_HALF);
                                this.mCurrentDamage = this.mData.damageSpecial_bigFeetHalf;
                                if (this.mComboInterval != null) {
                                    this.mComboInterval.stop();
                                }
                                this.m_control.onAction(true);
                                this.m_boundsAttackDepth = new PIXI.Rectangle(-250, -100, 500, 200);
                                break;
                            case PlayerBrawler.MODE_ATTACK_SPECIAL_BIG_FEET_FULL:
                                this.m_control.reset();
                                project.Global.app.playSound("snd_atb_player_sharkfullstart");
                                this.gotoState(PlayerBrawler.ST_SPECIAL_INTRO);
                                this.mCurrentDamage = this.mData.damageSpecial_bigFeetFull;
                                this.m_world.pauseEnemies(true);
                                break;
                            case PlayerBrawler.MODE_ATTACK_SPECIAL_SHARK_SWORD_HALF:
                                this.m_control.reset();
                                project.Global.app.playSound("snd_atb_player_sharkhalf");
                                this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_HALF);
                                this.mCurrentDamage = this.mData.damageSpecial_sharkHalf;
                                if (this.mComboInterval != null) {
                                    this.mComboInterval.stop();
                                }
                                this.m_control.onAction(true);
                                break;
                            case PlayerBrawler.MODE_ATTACK_SPECIAL_SHARK_SWORD_FULL:
                                this.m_control.reset();
                                project.Global.app.playSound("snd_atb_player_sharkfullstart");
                                this.gotoState(PlayerBrawler.ST_SPECIAL_INTRO);
                                this.mCurrentDamage = this.mData.damageSpecial_sharkFull;
                                this.m_world.pauseEnemies(true);
                                break;
                            case PlayerBrawler.MODE_ATTACK_SPECIAL_FEAR_FEASTER:
                                this.m_control.reset();
                                project.Global.app.playSound("snd_atb_player_sharkfullstart");
                                this.gotoState(PlayerBrawler.ST_SPECIAL_INTRO);
                                this.mCurrentDamage = this.mData.damageSpecial_fearFeaster;
                                this.m_world.pauseEnemies(true);
                                this.m_boundsAttackDepth = new PIXI.Rectangle(-600, -400, 1200, 800);
                                break;
                        }
                        if (this.m_state == PlayerBrawler.ST_SPECIAL_INTRO) {
                            for (i = 0; i < a.length; i++) {
                                if (a[i] != null && a[i] instanceof Tutorial) {
                                    a[i].clip().alpha = 0;
                                }
                            }
                        }
                    }
                    checkInitSpecialPower() {
                        if (this.m_selectedSpecialAttack == PlayerBrawler.SELECTED_SPECIAL_ATTACK_NONE) {
                            return false;
                        }
                        if (this.mAttackMode != PlayerBrawler.MODE_ATTACK_NORMAL) {
                            return false;
                        }
                        if (this.m_enemyCatchRef != null) {
                            return false;
                        }
                        if (this.m_magic < PlayerBrawler.MIN_POWERBAR_TO_SPECIAL_ATTACK_HALF) {
                            return false;
                        }
                        if (this.m_state == BRW_PlayerExt.ST_PLAYER_STAND || this.m_state == BRW_PlayerExt.ST_PLAYER_WALK) {
                            var powerUsed = 0;
                            if (this.m_magic < PlayerBrawler.MIN_POWERBAR_TO_SPECIAL_ATTACK_FULL) {
                                powerUsed = 25;
                                switch (this.m_selectedSpecialAttack) {
                                    case PlayerBrawler.SELECTED_SPECIAL_ATTACK_BIG_FEET:
                                        this.setModeAttack(PlayerBrawler.MODE_ATTACK_SPECIAL_BIG_FEET_HALF);
                                        break;
                                    case PlayerBrawler.SELECTED_SPECIAL_ATTACK_SHARK_SWORD:
                                        this.setModeAttack(PlayerBrawler.MODE_ATTACK_SPECIAL_SHARK_SWORD_HALF);
                                        break;
                                    case PlayerBrawler.SELECTED_SPECIAL_ATTACK_FEAR_FEASTER:
                                        return false;
                                }
                            }
                            else {
                                powerUsed = 100;
                                switch (this.m_selectedSpecialAttack) {
                                    case PlayerBrawler.SELECTED_SPECIAL_ATTACK_BIG_FEET:
                                        this.setModeAttack(PlayerBrawler.MODE_ATTACK_SPECIAL_BIG_FEET_FULL);
                                        break;
                                    case PlayerBrawler.SELECTED_SPECIAL_ATTACK_SHARK_SWORD:
                                        this.setModeAttack(PlayerBrawler.MODE_ATTACK_SPECIAL_SHARK_SWORD_FULL);
                                        break;
                                    case PlayerBrawler.SELECTED_SPECIAL_ATTACK_FEAR_FEASTER:
                                        this.setModeAttack(PlayerBrawler.MODE_ATTACK_SPECIAL_FEAR_FEASTER);
                                        break;
                                }
                            }
                            this.m_magic -= powerUsed;
                            return true;
                        }
                        return false;
                    }
                    addShuriken(amount) {
                        this.mCountShurikens += amount;
                    }
                    hitTestCollisionPower(actor) {
                        if ((this.mAttackMode == PlayerBrawler.MODE_ATTACK_SPECIAL_BIG_FEET_HALF) ||
                            (this.mAttackMode == PlayerBrawler.MODE_ATTACK_SPECIAL_BIG_FEET_FULL)) {
                            return (this.checkCollisionAttackDepth(actor) && actor.hitTestReceivedAttack(this));
                        }
                        return false;
                    }
                    processAttackToEnemy(enemy) {
                        if (enemy.hitTestReceivedAttack(this)) {
                            this.mCurrentCombo++;
                            if (this.mCurrentCombo > PlayerBrawler.COMBO_4) {
                                this.mCurrentCombo = PlayerBrawler.COMBO_1;
                            }
                            if (enemy.isInAir()) {
                                if (this.mAttackMode == PlayerBrawler.MODE_ATTACK_NORMAL) {
                                    if ((this.m_control.isJumping() && this.m_control.isInAction()) || this.mMaxComboEnabled) {
                                        enemy.onHitAir(this.mCurrentDamage, this, true, true);
                                    }
                                    else {
                                        var lastHit = (this.mCurrentJumpCombo == 0 && this.m_control.isInAction());
                                        enemy.onHitAir(this.mCurrentDamage, this, lastHit);
                                    }
                                }
                                else {
                                    enemy.onHitAir(this.mCurrentDamage, this, false);
                                }
                                return true;
                            }
                            if (this.mAttackMode != PlayerBrawler.MODE_ATTACK_NORMAL) {
                                if (this.mAttackMode == PlayerBrawler.MODE_ATTACK_SPECIAL_SHARK_SWORD_FULL) {
                                    enemy.onKnockUpward(this.mCurrentDamage, this);
                                    return true;
                                }
                                enemy.onKnock(this.mCurrentDamage, this);
                                return true;
                            }
                            if (this.m_control.isJumping() && this.m_control.isInAction()) {
                                enemy.onKnockUpward(this.mCurrentDamage, this);
                                return true;
                            }
                            if (this.mMaxComboEnabled) {
                                enemy.onKnockUpward(this.mCurrentDamage, this);
                                return true;
                            }
                            enemy.onHit(this.mCurrentDamage, this);
                            return true;
                        }
                        return false;
                    }
                    processAttackToBullet(bullet) {
                        if (bullet.hitTestReceivedAttack(this)) {
                            if (this.isLookingToLeft() && this.m_x > bullet.x() || !this.isLookingToLeft() && this.m_x < bullet.x()) {
                                bullet.setTarget(gameBrawler.BulletBrawler.TARGET_ENEMY | gameBrawler.BulletBrawler.TARGET_BREAKABLES, true);
                                bullet.setFlipX(!bullet.flipX());
                                return true;
                            }
                        }
                        return false;
                    }
                    processAttackToBulletBoss2(bullet) {
                        if (bullet.hitTestReceivedAttack(this, false)) {
                            if (this.isLookingToLeft() && this.m_x > bullet.x() || !this.isLookingToLeft() && this.m_x < bullet.x()) {
                                bullet.setTarget(BulletBoss2.TARGET_ENEMY | BulletBoss2.TARGET_BREAKABLES, true);
                                return true;
                            }
                        }
                        return false;
                    }
                    processAttackToBulletBoss(bullet) {
                        if (bullet.hitTestReceivedAttack(this)) {
                            if (this.isLookingToLeft() && this.m_x > bullet.x() || !this.isLookingToLeft() && this.m_x < bullet.x()) {
                                bullet.setTarget(BulletBoss.TARGET_ENEMY | BulletBoss.TARGET_BREAKABLES, true);
                                return true;
                            }
                        }
                        return false;
                    }
                    createShuriken() {
                        var fdist = (this.isLookingToLeft() ? -1 : 1);
                        var bullet = new gameBrawler.BulletBrawler("mc_sword_shuriken", this.m_world, this, this.m_x + fdist * this.mBulletOffset_X, this.m_y + this.mBulletOffset_Y, this.mData.shurikenSpeed, this.mData.shurikenDamage, fdist);
                        bullet.setTarget(gameBrawler.BulletBrawler.TARGET_ENEMY | gameBrawler.BulletBrawler.TARGET_BREAKABLES);
                        this.m_world.actorManager().add(bullet);
                    }
                    /*override*/ gotoState(state) {
                        var body_x = 0;
                        var body_y = 0;
                        if (this.m_clip && this.m_clip.mcBody) {
                            body_x = this.m_clip.mcBody.x;
                            body_y = this.m_clip.mcBody.y;
                        }
                        super.gotoState(state);
                        if (this.m_clip && this.m_clip.mcBody) {
                            this.m_clip.mcBody.x = body_x;
                            this.m_clip.mcBody.y = body_y;
                        }
                        if (state == PlayerBrawler.ST_APPEARS || state == BRW_PlayerExt.ST_PLAYER_LOSE) {
                            this.m_clip.alpha = 1;
                            this.m_character.loop = false;
                        }
                        else {
                            this.m_character.loop = true;
                        }
                        if (this.m_state == BRW_PlayerExt.ST_PLAYER_JUMP_UP) {
                            this.mCurrentJumpCombo = 0;
                        }
                        if (this.m_state == PlayerBrawler.ST_TELEPORT_IN || this.m_state == PlayerBrawler.ST_TELEPORT_OUT) {
                            this.m_character.loop = false;
                        }
                        if (this.m_state == PlayerBrawler.ST_NONE && project.Global.level == 1) {
                            this.m_clip.alpha = 0;
                        }
                        this.setVisible(this.mIsVisible);
                        switch (this.m_state) {
                            case BRW_PlayerExt.ST_PLAYER_STAND:
                            case BRW_PlayerExt.ST_PLAYER_STAND_2:
                            case BRW_PlayerExt.ST_PLAYER_WALK:
                            case BRW_PlayerExt.ST_PLAYER_ATTACK:
                            case BRW_PlayerExt.ST_PLAYER_THROW_ENEMY:
                                if (this.m_enemyCatchRef && this.m_clip["mcContentEnemy"]) {
                                    this.m_clip["mcContentEnemy"].gotoAndStop(this.m_enemyCatchRef.getSkinName());
                                }
                                break;
                            case BRW_PlayerExt.ST_PLAYER_JUMP_UP:
                            case BRW_PlayerExt.ST_PLAYER_JUMP_DOWN:
                            case PlayerBrawler.ST_DROP_ENEMY:
                                if (this.m_enemyCatchRef && this.m_clip.mcBody && this.m_clip.mcBody["mcContentEnemy"]) {
                                    this.m_clip.mcBody["mcContentEnemy"].gotoAndStop(this.m_enemyCatchRef.getSkinName());
                                }
                                break;
                            case PlayerBrawler.ST_SPECIAL_INTRO:
                                this.mSpecialAttackBase = project.Global.app.getClip("mc_player_one_cutscene");
                                this.mSpecialAttackCanvas = this.m_world.postTileCanvas();
                                this.mSpecialAttackCanvas.addChild(this.mSpecialAttackBase);
                                break;
                        }
                        this.playSoundOfState(true);
                    }
                    playSoundOfState(type) {
                        if (type) {
                            switch (this.m_state) {
                                case BRW_PlayerExt.ST_PLAYER_LAND:
                                    project.Global.app.playSound("snd_atb_player_land");
                                    break;
                                case BRW_PlayerExt.ST_PLAYER_RUN:
                                    project.Global.app.playSound("snd_atb_player_dash");
                                    break;
                                case BRW_PlayerExt.ST_PLAYER_WALK:
                                    break;
                                case BRW_PlayerExt.ST_PLAYER_THROW_ENEMY:
                                    break;
                                case BRW_PlayerExt.ST_PLAYER_JUMP_UP:
                                    project.Global.app.playSound("snd_atb_player_jump");
                                    break;
                                case BRW_PlayerExt.ST_PLAYER_ATTACK:
                                case BRW_PlayerExt.ST_PLAYER_ATTACK_JUMP:
                                case BRW_PlayerExt.ST_PLAYER_ATTACK_DASH:
                                    project.Global.app.playSound(String("snd_atb_attack" + Common.random(1, 3)));
                                    break;
                                case PlayerBrawler.MODE_ATTACK_NORMAL:
                                    switch (type) {
                                        //case PlayerBrawler.TYPE_PLAYER_ONE:
                                        //    break;
                                    }
                                    break;
                                case PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_HALF:
                                    switch (type) {
                                        //case PlayerBrawler.TYPE_PLAYER_ONE:
                                        //    break;
                                    }
                                    break;
                                case PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_FULL_START:
                                    break;
                                case BRW_PlayerExt.ST_PLAYER_LOSE:
                                    project.Global.app.playSound(String("snd_atb_ow"));
                                    break;
                                case BRW_PlayerExt.ST_PLAYER_HIT:
                                case PlayerBrawler.ST_KNOCK:
                                    project.Global.app.playSound(String("snd_atb_hit" + Common.random(1, 3)));
                                    break;
                                case BRW_PlayerExt.ST_PLAYER_WIN:
                                    project.Global.app.playSound(String("snd_atb_schdow"));
                                    break;
                            }
                        }
                    }
                    /*override*/ onEnemyCollision(enemy, damage, fall = false) {
                        if (this.m_isDead) {
                            return;
                        }
                        if (this.m_isInvulnerable) {
                            return;
                        }
                        if (this.m_state == BRW_PlayerExt.ST_PLAYER_HIT) {
                            return;
                        }
                        if (this.m_freeMovement) {
                            return;
                        }
                        if (this.mAttackMode != PlayerBrawler.MODE_ATTACK_NORMAL) {
                            return;
                        }
                        super.onEnemyCollision(enemy, damage, fall);
                        //fixdebug
                        this.m_health -= damage;
                        if (this.m_health > 0) {
                            if (this.m_control.isJumping()) {
                                this.makeInvulnerableEffect(true);
                            }
                            else {
                                if (enemy instanceof BaseEnemy) {
                                    if (this.mTimerEnemyCombo <= 0) {
                                        this.mTimerEnemyCombo = this.mData.maxTimeForEnemyCombo;
                                    }
                                    this.mCountEnemyHit++;
                                    if (this.mCountEnemyHit >= this.mData.hitsForEnemyCombo) {
                                        this.mCountEnemyHit = 0;
                                        this.mTimerEnemyCombo = 0;
                                        fall = true;
                                        this.setFlipX(enemy.x() < this.m_x);
                                    }
                                }
                                if (fall) {
                                    this.setFlipX(enemy.x() < this.m_x);
                                    this.makeInvulnerableEffect(true);
                                    this.gotoState(PlayerBrawler.ST_KNOCK);
                                }
                                else if (this.m_state != BRW_PlayerExt.ST_PLAYER_HIT) {
                                    this.gotoState(BRW_PlayerExt.ST_PLAYER_HIT);
                                }
                                this.resetControl();
                            }
                        }
                        else {
                            this.mRespawnPosition.x = this.m_x;
                            this.mRespawnPosition.y = this.m_y;
                            this.resetControl();
                            this.m_isInvulnerable = true;
                            this.gotoState(BRW_PlayerExt.ST_PLAYER_LOSE);
                            this.m_control.reset();
                        }
                        if (this.m_control.isInDashAttack()) {
                            this.m_control.onDashAttack(false);
                            this.m_dashForce = 0;
                        }
                        if (this.m_enemyCatchRef) {
                            this.m_enemyCatchRef.onCatch(false, false);
                        }
                        gameBrawler.GameBrawler.instance.onPlayerKicked(this);
                    }
                    setMoveToExitLevel() {
                        this.gotoState(PlayerBrawler.ST_WIN_WALK);
                        if (project.Global.level == 1) {
                            this.m_world.setRangeCollisionCell(325, 10, 365, 15, BRW_WorldCollisionLayer.CELL_EMPTY);
                            this.m_world.refreshCollision();
                        }
                        else if (project.Global.level == 2) {
                            this.m_world.setRangeCollisionCell(270, 10, 280, 17, BRW_WorldCollisionLayer.CELL_EMPTY);
                            this.m_world.refreshCollision();
                        }
                        if (this.m_winMovement != null) {
                            this.m_winMovement.free();
                            this.m_winMovement = null;
                        }
                        this.m_winMovement = new LinearMovement(this.m_x, this.m_y, 0.1);
                        this.m_winMovement.gotoPosition(this.m_world.camera().x() + this.m_world.camera().width + 200, this.m_y);
                        this.m_world.camera().setWorldLimitRight(this.m_world.camera().x() + 50);
                    }
                    /*override*/
                    onEndAnimation(state) {
                        super.onEndAnimation(state);
                        if (this.m_control.isInDashAttack()) {
                            this.m_control.onDashAttack(false);
                            this.gotoState(BRW_PlayerExt.ST_PLAYER_STAND);
                            this.m_dashForce = 0;
                            this.m_control.backupHorizontalBuffer();
                            this.resetControl();
                            this.m_control.restoreHorizontalBuffer();
                            return;
                        }
                        switch (parseInt(state)) {
                            case BRW_PlayerExt.ST_PLAYER_WIN:
                                if (project.Global.level == 3) {
                                    this.m_character.onEndAnimation = null;
                                    gameBrawler.GameBrawler.instance.onGameEnd(true);
                                    return;
                                }
                                gameBrawler.GameBrawler.instance.onGameEnd(true);
                                break;
                            case PlayerBrawler.ST_WIN_WALK:
                                this.m_walkingCounter++;
                                if (this.m_walkingCounter > 3) {
                                    gameBrawler.GameBrawler.instance.showScoreCard();
                                    this.m_character.onEndAnimation = null;
                                }
                                break;
                            case BRW_PlayerExt.ST_PLAYER_LOSE:
                                this.m_lifes -= 1;
                                if (this.m_lifes >= 0) {
                                    gameBrawler.GameBrawler.instance.resetGame();
                                }
                                else {
                                    this.m_lifes = 0;
                                    gameBrawler.GameBrawler.instance.onGameEnd(false);
                                }
                                break;
                            case BRW_PlayerExt.ST_PLAYER_ATTACK:
                                if (this.m_enemyCatchRef != null) {
                                    this.m_enemyCatchRef.onHitInCatch(this.mCurrentDamage, this);
                                    this.mTimeToDropEnemy = this.mData.timeToDropEnemy;
                                }
                                this.m_control.onAction(false);
                                this.gotoState(BRW_PlayerExt.ST_PLAYER_STAND);
                                break;
                            case BRW_PlayerExt.ST_PLAYER_ATTACK_JUMP:
                                this.m_control.onAction(false);
                                this.gotoState(BRW_PlayerExt.ST_PLAYER_JUMP_DOWN);
                                break;
                            case BRW_PlayerExt.ST_PLAYER_THROW_ENEMY:
                                this.m_control.onAction(false);
                                this.setClipsDropEnemy();
                                this.gotoState(BRW_PlayerExt.ST_PLAYER_STAND);
                                this.onLastHitToEnemy(true, false);
                                break;
                            case BRW_PlayerExt.ST_PLAYER_HIT:
                                this.mDisableActionKey = false;
                                this.mDisableJumpKey = false;
                                this.gotoState(BRW_PlayerExt.ST_PLAYER_STAND);
                                if (this.m_pressingLeft) {
                                    this.onKeyDown(Application.keyLeft);
                                    this.m_pressingLeft = false;
                                }
                                if (this.m_pressingRight) {
                                    this.onKeyDown(Application.keyRight);
                                    this.m_pressingRight = false;
                                }
                                this.m_control.setLastHorizontalBuffer();
                                break;
                            case PlayerBrawler.ST_APPEARS:
                                this.gotoState(BRW_PlayerExt.ST_PLAYER_STAND);
                                this.setInvulnerability(false);
                                if (this.mIsRespawn) {
                                    this.mIsRespawn = false;
                                }
                                this.setCanPlayerInput(true);
                                this.m_isDead = false;
                                this.mInTeleport = false;
                                break;
                            case PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_HALF:
                            case PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_HALF:
                                if (this.mComboInterval != null) {
                                    this.mComboInterval.resume();
                                }
                                this.gotoState(BRW_PlayerExt.ST_PLAYER_STAND);
                                this.setModeAttack(PlayerBrawler.MODE_ATTACK_NORMAL);
                                break;
                            case PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_FULL_START:
                                this.m_timeCounter = 0;
                                this.specialTick = -1;
                                this.m_timeTotalWait = this.mData.timeBigFeetFull;
                                this.m_isInBigFeetMode = true;
                                this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_STAND), "mc_" + PlayerBrawler.type + "_stand_big_feet_full");
                                this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_STAND_2), "mc_" + PlayerBrawler.type + "_stand_big_feet_full");
                                this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_WALK), "mc_" + PlayerBrawler.type + "_run_big_feet_full", [this.playBigFeetWalkSound.bind(this), 1], [this.playBigFeetWalkSound.bind(this), 13]);
                                this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_RUN), "mc_" + PlayerBrawler.type + "_run_big_feet_full");
                                this.gotoState(BRW_PlayerExt.ST_PLAYER_STAND);
                                this.m_world.pauseEnemies(false);
                                break;
                            case PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER_START:
                                this.m_timeCounter = 0;
                                this.specialTick = -1;
                                this.m_timeTotalWait = this.mData.timeFearFeaster;
                                this.m_isInFearMode = true;
                                this.m_x = this.m_world.camera().x() + this.m_world.camera().width * 0.5;
                                project.Global.app.playSound("snd_atb_player_fear2");
                                this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER);
                                this.m_world.pauseEnemies(false);
                                break;
                            case PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL_START:
                                this.m_timeCounter = 0;
                                this.specialTick = -1;
                                this.m_timeTotalWait = this.mData.timeSharkSwordFull;
                                this.m_isInSharkSwordMode = true;
                                project.Global.app.playSound("snd_atb_player_sharkfull");
                                this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL);
                                this.m_world.pauseEnemies(false);
                                if (this.m_winMovement != null) {
                                    this.m_winMovement.free();
                                    this.m_winMovement = null;
                                }
                                this.m_winMovement = new LinearMovement(this.m_x, this.m_y, 0.5);
                                this.m_winMovement.endCallback = this.onEndSharckAttack1.bind(this);
                                if (this.m_flipX) {
                                    this.m_winMovement.gotoPosition(this.m_world.camera().x() + 100, this.m_y);
                                }
                                else {
                                    this.m_winMovement.gotoPosition(this.m_world.camera().x() + this.m_world.camera().width - 100, this.m_y);
                                }
                                break;
                            case PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER_FINISH:
                                this.m_isInFearMode = false;
                                if (this.m_killedBigWormDecoy) {
                                    this.onkillingBigWorm();
                                }
                                else {
                                    this.gotoState(BRW_PlayerExt.ST_PLAYER_STAND);
                                }
                                this.setModeAttack(PlayerBrawler.MODE_ATTACK_NORMAL);
                                break;
                            case PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_FULL_FINISH:
                                project.Global.app.playSound("snd_atb_player_bigfeetfinish");
                                this.m_isInBigFeetMode = false;
                                this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_STAND), "mc_" + PlayerBrawler.type + "_stand");
                                this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_STAND_2), "mc_" + PlayerBrawler.type + "_idle");
                                this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_WALK), "mc_" + PlayerBrawler.type + "_run");
                                this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_RUN), "mc_" + PlayerBrawler.type + "_dash");
                                if (this.m_killedBigWormDecoy) {
                                    this.onkillingBigWorm();
                                }
                                else {
                                    this.gotoState(BRW_PlayerExt.ST_PLAYER_STAND);
                                }
                                this.setModeAttack(PlayerBrawler.MODE_ATTACK_NORMAL);
                                break;
                            case PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL_FINISH:
                                project.Global.app.stopSound("snd_atb_player_sharkfull");
                                this.m_isInSharkSwordMode = false;
                                this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_STAND), "mc_" + PlayerBrawler.type + "_stand");
                                this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_STAND_2), "mc_" + PlayerBrawler.type + "_idle");
                                this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_WALK), "mc_" + PlayerBrawler.type + "_run");
                                this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_RUN), "mc_" + PlayerBrawler.type + "_dash");
                                this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_ATTACK), "mc_" + PlayerBrawler.type + "_attack_1", [this.playSoundAttack1.bind(this), 1]);
                                if (this.m_killedBigWormDecoy) {
                                    this.onkillingBigWorm();
                                }
                                else {
                                    this.gotoState(BRW_PlayerExt.ST_PLAYER_STAND);
                                }
                                this.setModeAttack(PlayerBrawler.MODE_ATTACK_NORMAL);
                                break;
                            case PlayerBrawler.ST_KNOCK:
                                this.m_control.reset();
                                this.gotoState(PlayerBrawler.ST_GETUP);
                                break;
                            case PlayerBrawler.ST_GETUP:
                                this.gotoState(BRW_PlayerExt.ST_PLAYER_STAND);
                                break;
                            case PlayerBrawler.ST_TELEPORT_IN:
                                if (this.onEndTeleportInAnimation != null) {
                                    this.onEndTeleportInAnimation(this);
                                }
                                break;
                            case PlayerBrawler.ST_TELEPORT_OUT:
                                this.gotoState(BRW_PlayerExt.ST_PLAYER_STAND);
                                break;
                            case PlayerBrawler.ST_SPECIAL_INTRO:
                                var a = this.m_world.actorManager().actors;
                                var i;
                                if (this.m_selectedSpecialAttack != PlayerBrawler.SELECTED_SPECIAL_ATTACK_FEAR_FEASTER) {
                                    for (i = 0; i < a.length; i++) {
                                        if (a[i] != null && a[i] instanceof Tutorial) {
                                            a[i].clip().alpha = 1;
                                        }
                                    }
                                }
                                switch (this.m_selectedSpecialAttack) {
                                    case PlayerBrawler.SELECTED_SPECIAL_ATTACK_NONE:
                                        return;
                                    case PlayerBrawler.SELECTED_SPECIAL_ATTACK_BIG_FEET:
                                        this.mSpecialAttackCanvas.removeChild(this.mSpecialAttackBase);
                                        try {
                                            this.mSpecialAttackBase.destroy();
                                        }
                                        catch (e) { }
                                        project.Global.app.playSound("snd_atb_player_bigfeetactivate");
                                        this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_FULL_START);
                                        return;
                                    case PlayerBrawler.SELECTED_SPECIAL_ATTACK_SHARK_SWORD:
                                        this.mSpecialAttackCanvas.removeChild(this.mSpecialAttackBase);
                                        try {
                                            this.mSpecialAttackBase.destroy();
                                        }
                                        catch (e) { }
                                        project.Global.app.playSound("snd_atb_player_sharkfullactivate");
                                        this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL_START);
                                        break;
                                    case PlayerBrawler.SELECTED_SPECIAL_ATTACK_FEAR_FEASTER:
                                        this.mSpecialAttackCanvas.removeChild(this.mSpecialAttackBase);
                                        try {
                                            this.mSpecialAttackBase.destroy();
                                        }
                                        catch (e) { }
                                        project.Global.app.playSound("snd_atb_player_fearactivate");
                                        this.mSpecialAttackBase = project.Global.app.getClip("ATB_cinetic_01");
                                        this.mSpecialAttackBase.x += this.m_world.camera().width / 2;
                                        this.mSpecialAttackBase.y += this.m_world.camera().height / 2;
                                        this.mSpecialAttackCanvas = this.m_world.postTileCanvas();
                                        this.mSpecialAttackCanvas.addChild(this.mSpecialAttackBase);
                                        this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER_START);
                                        for (i = 0; i < a.length; i++) {
                                            if (a[i] != null && a[i] instanceof Bridge && a[i].isStand()) {
                                                a[i].clip().alpha = 0;
                                                break;
                                            }
                                        }
                                        break;
                                }
                                break;
                        }
                    }
                    playBigFeetWalkSound() {
                        Common.shake(GuiGame.instance.canvasGame(), 5, 1);
                        project.Global.app.playSound("snd_atb_player_bigfeetwalk");
                    }
                    playBigFeetWalkHalf() {
                        project.Global.app.playSound("snd_atb_player_bigfeethalf");
                    }
                    shakeScreen() {
                        Common.shake(GuiGame.instance.canvasGame(), 5, 1);
                    }
                    playBigFeetFinish() {
                        project.Global.app.playSound("snd_atb_player_bigfeetfinish");
                    }
                    waitRespawnPlayer() {
                        this.mTimeForceRespawn = PlayerBrawler.TIME_FORCE_RESPAWN;
                        this.mOnWaitRespawn = true;
                    }
                    onFinishInvulnerableInterval() {
                        this.m_isInvulnerable = false;
                    }
                    /*override*/ onCatchEnemy(actor) {
                        super.onCatchEnemy(actor);
                        this.mTimeToDropEnemy = ((actor == null) ? 0 : this.mData.timeToDropEnemy);
                    }
                    /*override*/ onAttack(superHit = false) {
                        var hhit = 1;
                        if (superHit)
                            hhit = 100;
                        if (this.m_freeMovement)
                            return;
                        if (this.m_state == BRW_PlayerExt.ST_PLAYER_WIN || this.m_state == BRW_PlayerExt.ST_PLAYER_LOSE)
                            return;
                        if (this.m_control.isInAction())
                            return;
                        if (this.m_control.isInDashAttack())
                            return;
                        if (this.m_control.isJumping()) {
                            if (this.m_enemyCatchRef) {
                                this.m_control.applyImpulseWhileJumping(30);
                                this.gotoState(PlayerBrawler.ST_DROP_ENEMY);
                                this.m_control.reset();
                                this.mCurrentDamage = this.mData.damageGroundSmash * hhit;
                                this.m_world.pauseEnemies(true);
                            }
                            else {
                                switch (this.mCurrentJumpCombo) {
                                    case 0:
                                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_ATTACK_JUMP), "mc_" + PlayerBrawler.type + "_jumpattack_01");
                                        this.mCurrentJumpCombo = 1;
                                        break;
                                    case 1:
                                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_ATTACK_JUMP), "mc_" + PlayerBrawler.type + "_jumpattack_02");
                                        this.mCurrentJumpCombo = 2;
                                        break;
                                    case 2:
                                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_ATTACK_JUMP), "mc_" + PlayerBrawler.type + "_jumpattack_03");
                                        this.mCurrentJumpCombo = 0;
                                        break;
                                }
                                this.gotoState(BRW_PlayerExt.ST_PLAYER_ATTACK_JUMP);
                            }
                            this.m_control.onAction(true);
                            this.mCurrentDamage = this.mData.damageAttackJump * hhit;
                        }
                        else if (!this.m_control.isJumping()
                            && this.m_control.isRunning()
                            && this.m_control.canAttackDash) {
                            this.gotoState(BRW_PlayerExt.ST_PLAYER_ATTACK_DASH);
                            this.m_dashForce = this.m_control.forceX() * this.m_control.initFactorSpeedAttackDash;
                            this.m_control.onDashMove(false);
                            this.m_control.onDashAttack(true);
                            this.mCurrentDamage = this.mData.damageAttackDash * hhit;
                        }
                        else {
                            if (this.m_enemyCatchRef == null) {
                                if (this.mCountShurikens > 0) {
                                    this.addShuriken(-1);
                                    this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_ATTACK), "mc_" + PlayerBrawler.type + "_shoot", [this.createShuriken.bind(this), 6]);
                                }
                                else {
                                    this.mComboInterval = new Interval(this.resetCombo.bind(this), this.mWaitForCombo);
                                    this.mComboInterval.onFinish = this.onEndComboInterval.bind(this);
                                    switch (this.mCurrentCombo) {
                                        case PlayerBrawler.COMBO_1:
                                            this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_ATTACK), "mc_" + PlayerBrawler.type + "_attack_1", [this.playSoundAttack1.bind(this), 1]);
                                            this.mCurrentDamage = this.mData.damageHit * hhit;
                                            this.mCurrentScorePerHit = this.mData.scoreHit;
                                            this.mMaxComboEnabled = false;
                                            if (this.mLastComboInterval != null) {
                                                this.mLastComboInterval.free();
                                                this.mLastComboInterval = null;
                                            }
                                            break;
                                        case PlayerBrawler.COMBO_2:
                                            this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_ATTACK), "mc_" + PlayerBrawler.type + "_attack_1", [this.playSoundAttack1.bind(this), 1]);
                                            this.mCurrentDamage = this.mData.damageHit * hhit;
                                            this.mCurrentScorePerHit = this.mData.scoreHit;
                                            this.mMaxComboEnabled = false;
                                            break;
                                        case PlayerBrawler.COMBO_3:
                                            this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_ATTACK), "mc_" + PlayerBrawler.type + "_attack_2", [this.playSoundAttack2.bind(this), 1]);
                                            this.mCurrentDamage = this.mData.damageHit2 * hhit;
                                            this.mCurrentScorePerHit = this.mData.scoreHit2;
                                            this.mMaxComboEnabled = false;
                                            break;
                                        case PlayerBrawler.COMBO_4:
                                            this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_ATTACK), "mc_" + PlayerBrawler.type + "_attack_3", [this.playSoundAttack3.bind(this), 1]);
                                            this.mCurrentDamage = this.mData.damageHit3 * hhit;
                                            this.mCurrentScorePerHit = this.mData.scoreHit3;
                                            this.mCurrentCombo = PlayerBrawler.COMBO_1;
                                            this.mMaxComboEnabled = true;
                                            this.mLastComboInterval = new Interval(this.resetCombo.bind(this), this.mWaitForCombo * 2);
                                            this.mLastComboInterval.onFinish = this.onEndLastComboInterval.bind(this);
                                            this.mComboInterval.free();
                                            this.mComboInterval = null;
                                            break;
                                    }
                                }
                            }
                            else {
                                switch (this.m_enemyCatchRef.countHitCatch()) {
                                    case 0:
                                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_ATTACK), "mc_" + PlayerBrawler.type + "_grabhit");
                                        this.mCurrentDamage = this.mData.damageGrabHit * hhit;
                                        this.mCurrentScorePerHit = this.mData.scoreGrabHit;
                                        break;
                                    case 1:
                                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_ATTACK), "mc_" + PlayerBrawler.type + "_grabhit");
                                        this.mCurrentDamage = this.mData.damageGrabHit2 * hhit;
                                        this.mCurrentScorePerHit = this.mData.scoreGrabHit2;
                                        break;
                                    case 2:
                                        this.m_character.addState(String(BRW_PlayerExt.ST_PLAYER_ATTACK), "mc_" + PlayerBrawler.type + "_grabhit", [this.onLastHitToEnemy.bind(this), 7]);
                                        this.mCurrentDamage = this.mData.damageGrabHit3 * hhit;
                                        this.mCurrentScorePerHit = this.mData.scoreGrabHit3;
                                        break;
                                }
                            }
                            this.gotoState(BRW_PlayerExt.ST_PLAYER_ATTACK);
                            this.m_control.onAction(true);
                        }
                    }
                    onLastHitToEnemy(isThrow = false, lastHit = true) {
                        if (this.m_enemyCatchRef) {
                            var enemy = this.m_enemyCatchRef;
                            this.m_enemyCatchRef.onCatch(false);
                            enemy.onKnock(this.mCurrentDamage, this, isThrow, lastHit);
                            if (this.m_clip["mcContentEnemy"]) {
                                this.m_clip["mcContentEnemy"].visible = false;
                            }
                        }
                    }
                    onFinishShakeDropEnemy() {
                        this.m_control.onAction(false);
                        this.setClipsDropEnemy();
                        this.onLastHitToEnemy(true, false);
                        this.m_world.pauseEnemies(false);
                        this.m_control.onCompleteJump();
                    }
                    onCompleteJumpControl() {
                        if (this.m_state == PlayerBrawler.ST_DROP_ENEMY) {
                            Common.shake(GuiGame.instance.canvasGame(), 5, 3, this, "onFinishShakeDropEnemy");
                        }
                        else {
                            project.Global.app.playSound("snd_atb_player_land");
                            this.m_control.onCompleteJump();
                        }
                    }
                    onMaxJumpHeightReached() {
                    }
                    onEndLastComboInterval() {
                        this.mLastComboInterval.free();
                        this.mLastComboInterval = null;
                    }
                    onEndComboInterval() {
                        this.mComboInterval.free();
                        this.mComboInterval = null;
                    }
                    onEnemyKicked(enemy, abusive) {
                        gameBrawler.GameBrawler.instance.addScore(this.mCurrentScorePerHit);
                        if (!this.m_isInBigFeetMode && !this.m_isInSharkSwordMode && !this.m_isInFearMode &&
                            (project.StatsMain.enableSpecial1 || project.StatsMain.enableSpecial2 || project.StatsMain.enableSpecial3)) {
                            if (enemy instanceof Gunter || enemy instanceof Lich) {
                                this.m_magic += this.mData.unitPowerPercent;
                            }
                        }
                        if ((abusive == this) && this.m_control.isJumping() && (this.mAttackMode == PlayerBrawler.MODE_ATTACK_NORMAL)) {
                            this.m_control.applyImpulseWhileJumping(-30);
                        }
                        if ((abusive == this) && (enemy.getHealth() == 0)) {
                            enemy.markDeathWithAttackMode(this.mAttackMode);
                        }
                    }
                    onGameWin() {
                        this.m_isInvulnerable = true;
                        this.mDisableInputs = true;
                        this.m_control.reset();
                        gameBrawler.HudBrawler.instance.showLevelCompleteMsg();
                    }
                    /*override*/ hitTestProximity(actor) {
                        if (this.mInTeleport || this.m_freeMovement) {
                            return false;
                        }
                        return super.hitTestProximity(actor);
                    }
                    traceStateInput() {
                        Application.log("DemoGame.instance.isPaused: " + gameBrawler.GameBrawler.instance.isPaused);
                        Application.log("mIsDead: " + this.m_isDead);
                        Application.log("mControl.isInDashAttack(): " + this.m_control.isInDashAttack());
                        Application.log("mState == ST_APPEARS: " + (this.m_state == PlayerBrawler.ST_APPEARS));
                        Application.log("mState == ST_DROP_ENEMY: " + (this.m_state == PlayerBrawler.ST_DROP_ENEMY));
                        Application.log("mState == ST_PLAYER_WIN: " + (this.m_state == BRW_PlayerExt.ST_PLAYER_WIN));
                        Application.log("mState == ST_PLAYER_LOSE: " + (this.m_state == BRW_PlayerExt.ST_PLAYER_LOSE));
                        Application.log("mState == ST_KNOCK: " + (this.m_state == PlayerBrawler.ST_KNOCK));
                        Application.log("mState == ST_GETUP: " + (this.m_state == PlayerBrawler.ST_GETUP));
                        Application.log("mInTeleport: " + this.mInTeleport);
                        Application.log("mDisableInputs: " + this.mDisableInputs);
                    }
                    /*override*/ onKeyDown(keyCode) {
                        if (this.mCanPlayerInput == false) {
                            return;
                        }
                        if (gameBrawler.GameBrawler.instance.isPaused ||
                            this.m_isDead ||
                            this.m_control.isInDashAttack() ||
                            (this.m_state == PlayerBrawler.ST_APPEARS) ||
                            (this.m_state == PlayerBrawler.ST_DROP_ENEMY) ||
                            (this.m_state == BRW_PlayerExt.ST_PLAYER_WIN) ||
                            (this.m_state == BRW_PlayerExt.ST_PLAYER_LOSE) ||
                            (this.m_state == PlayerBrawler.ST_KNOCK) ||
                            (this.m_state == PlayerBrawler.ST_GETUP) ||
                            this.mInTeleport ||
                            this.mDisableInputs) {
                            return;
                        }
                        var isKeyRestricted = false;
                        if (this.mAttackMode != PlayerBrawler.MODE_ATTACK_NORMAL) {
                            isKeyRestricted = true;
                            if ((this.m_state != PlayerBrawler.ST_SPECIAL_INTRO) &&
                                (this.m_state != PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_HALF) &&
                                (this.m_state != PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_FULL_START) &&
                                (this.m_state != PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_FULL_FINISH) &&
                                (this.m_state != PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_HALF) &&
                                (this.m_state != PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL_START) &&
                                (this.m_state != PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL) &&
                                (this.m_state != PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL_FINISH) &&
                                (this.m_state != PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER_START) &&
                                (this.m_state != PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER) &&
                                (this.m_state != PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER_FINISH)) {
                                isKeyRestricted = false;
                            }
                            if (this.m_state == PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL && this.m_isInSharkSwordMode) {
                                if (this.flipX() && keyCode == Application.keyRight && this.m_enableKeyRightShark) {
                                    if (this.m_winMovement != null) {
                                        this.m_winMovement.cancelMotion();
                                        this.m_winMovement.gotoPosition(this.m_world.camera().x() + this.m_world.camera().width - 100, this.m_y);
                                        this.m_winMovement.endCallback = this.onEndSharckAttack1.bind(this);
                                        this.setFlipX(false);
                                        this.m_enableKeyRightShark = false;
                                    }
                                }
                                else if (!this.flipX() && keyCode == Application.keyLeft && this.m_enableKeyLeftShark) {
                                    if (this.m_winMovement != null) {
                                        this.m_winMovement.cancelMotion();
                                        this.m_winMovement.gotoPosition(this.m_world.camera().x() + 100, this.m_y);
                                        this.m_winMovement.endCallback = this.onEndSharckAttack1.bind(this);
                                        this.setFlipX(true);
                                        this.m_enableKeyLeftShark = false;
                                    }
                                }
                                return;
                            }
                        }
                        if (!isKeyRestricted) {
                            if (keyCode == Application.keyC && !this.m_isInBigFeetMode && !this.m_isInSharkSwordMode && !this.m_isInFearMode) {
                                if (!project.StatsMain.enableSpecial1 && !project.StatsMain.enableSpecial2 && !project.StatsMain.enableSpecial3) {
                                    return;
                                }
                                switch (this.m_selectedSpecialAttack) {
                                    case 0:
                                        if (project.StatsMain.enableSpecial1) {
                                            this.m_selectedSpecialAttack = PlayerBrawler.SELECTED_SPECIAL_ATTACK_SHARK_SWORD;
                                        }
                                        break;
                                    case 1:
                                        if (project.StatsMain.enableSpecial2) {
                                            this.m_selectedSpecialAttack = PlayerBrawler.SELECTED_SPECIAL_ATTACK_BIG_FEET;
                                        }
                                        break;
                                    case 2:
                                        if (project.StatsMain.enableSpecial3) {
                                            this.m_selectedSpecialAttack = PlayerBrawler.SELECTED_SPECIAL_ATTACK_FEAR_FEASTER;
                                        }
                                        else {
                                            this.m_selectedSpecialAttack = PlayerBrawler.SELECTED_SPECIAL_ATTACK_SHARK_SWORD;
                                        }
                                        break;
                                    case 3:
                                        this.m_selectedSpecialAttack = PlayerBrawler.SELECTED_SPECIAL_ATTACK_SHARK_SWORD;
                                        break;
                                }
                                project.Global.app.playSound("snd_atb_player_specialselector");
                                gameBrawler.HudBrawler.instance.selectSpecial(this.m_selectedSpecialAttack);
                            }
                            if (keyCode == Application.keySpace && !this.m_isInBigFeetMode && !this.m_isInSharkSwordMode && !this.m_isInFearMode) {
                                this.checkInitSpecialPower();
                            }
                            if ((this.m_isInBigFeetMode || this.m_isInSharkSwordMode || this.m_isInFearMode) &&
                                (keyCode == Application.keyZ || keyCode == Application.keyX)) {
                                return;
                            }
                            if (this.m_isInSharkSwordMode && keyCode == Application.keyX) {
                                return;
                            }
                            if (keyCode == Application.keyZ && this.mDisableActionKey) {
                                return;
                            }
                            else if (keyCode == Application.keyZ && !this.mDisableActionKey) {
                                this.mDisableActionKey = true;
                            }
                            if (keyCode == Application.keyX && this.mDisableJumpKey) {
                                return;
                            }
                            else if (keyCode == Application.keyX && !this.mDisableJumpKey) {
                                this.mDisableJumpKey = true;
                            }
                            if (keyCode == Application.keyC && this.mDisableHudKey) {
                                return;
                            }
                            else if (keyCode == Application.keyC && !this.mDisableHudKey) {
                                this.mDisableHudKey = true;
                            }
                            super.onKeyDown(keyCode);
                        }
                        if (this.m_enemyCatchRef != null && this.m_control.isInAction()) {
                            if (this.m_control.horizontalBuffer() != 0 && !this.m_control.isJumping()) {
                                this.gotoState(BRW_PlayerExt.ST_PLAYER_THROW_ENEMY);
                                this.m_control.onAction(true);
                            }
                        }
                    }
                    /*override*/ onKeyUp(keyCode) {
                        if (this.mCanPlayerInput == false) {
                            return;
                        }
                        if (gameBrawler.GameBrawler.instance.isPaused ||
                            this.m_isDead) {
                            return;
                        }
                        if (keyCode == Application.keyZ && this.mDisableActionKey) {
                            this.mDisableActionKey = false;
                        }
                        if (keyCode == Application.keyX && this.mDisableJumpKey) {
                            this.mDisableJumpKey = false;
                        }
                        if (keyCode == Application.keyC && this.mDisableHudKey) {
                            this.mDisableHudKey = false;
                        }
                        if (keyCode == Application.keyLeft) {
                            this.m_enableKeyLeftShark = true;
                        }
                        if (keyCode == Application.keyRight) {
                            this.m_enableKeyRightShark = true;
                        }
                        super.onKeyUp(keyCode);
                    }
                    onBreakingBigBox() {
                        if (this.m_isInBigFeetMode) {
                            this.m_control.reset();
                            this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_FULL_FINISH);
                            this.m_control.onAction(true);
                            this.m_timeCounter = 0;
                            this.specialTick = -1;
                            this.m_timeTotalWait = 0;
                        }
                        else if (this.m_isInSharkSwordMode) {
                            this.setFlipX(this.m_x > this.m_world.camera().x() + this.m_world.camera().width * 0.5);
                            if (this.m_winMovement != null) {
                                this.m_winMovement.cancelMotion();
                                this.m_winMovement.free();
                                this.m_winMovement = null;
                            }
                            this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL_FINISH);
                        }
                        else if (this.m_isInFearMode) {
                            this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER_FINISH);
                            this.mSpecialAttackCanvas.removeChild(this.mSpecialAttackBase);
                            try {
                                this.mSpecialAttackBase.destroy();
                            }
                            catch (e) { }
                        }
                    }
                    placePlayerInFrontBigWorm(newX, newY) {
                        this.m_killedBigWormDecoy = true;
                        this.m_wormRefX = newX;
                        this.m_wormRefY = newY;
                        if (this.m_isInBigFeetMode) {
                            this.m_control.reset();
                            this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_FULL_FINISH);
                            this.m_control.onAction(true);
                            this.m_timeCounter = 0;
                            this.specialTick = -1;
                            this.m_timeTotalWait = 0;
                        }
                        else if (this.m_isInSharkSwordMode) {
                            this.setFlipX(this.m_x > this.m_world.camera().x() + this.m_world.camera().width * 0.5);
                            if (this.m_winMovement != null) {
                                this.m_winMovement.cancelMotion();
                                this.m_winMovement.free();
                                this.m_winMovement = null;
                            }
                            this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL_FINISH);
                        }
                        else if (this.m_isInFearMode) {
                            project.Global.app.stopSound("snd_atb_player_fear2");
                            project.Global.app.playSound("snd_atb_player_fear3");
                            this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER_FINISH);
                            this.mSpecialAttackCanvas.removeChild(this.mSpecialAttackBase);
                            try {
                                this.mSpecialAttackBase.destroy();
                            }
                            catch (e) { }
                        }
                        else {
                            this.onkillingBigWorm();
                        }
                    }
                    onkillingBigWorm() {
                        this.gotoState(PlayerBrawler.ST_PRE_WIN_WALK);
                        this.setFlipX(false);
                        if (this.m_winMovement != null) {
                            this.m_winMovement.free();
                            this.m_winMovement = null;
                        }
                        this.m_winMovement = new LinearMovement(this.m_x, this.m_y, 0.15);
                        this.m_winMovement.gotoPosition(this.m_wormRefX, this.m_wormRefY);
                        this.m_winMovement.endCallback = this.onEndPreWinWalk.bind(this);
                    }
                    onEndPreWinWalk(m) {
                        this.gotoState(BRW_PlayerExt.ST_PLAYER_STAND);
                        this.m_winMovement.free();
                        this.m_winMovement = null;
                    }
                    onEndIntroWalking(m) {
                        this.gotoState(PlayerBrawler.ST_APPEARS);
                        this.m_winMovement.free();
                        this.m_winMovement = null;
                    }
                    onEndSharckAttack1(m) {
                        if (this.m_x > this.m_world.camera().x() + this.m_world.camera().width * 0.5) {
                            this.m_winMovement.gotoPosition(this.m_world.camera().x() + 100, this.m_y);
                            this.setFlipX(true);
                        }
                        else {
                            this.m_winMovement.gotoPosition(this.m_world.camera().x() + this.m_world.camera().width - 100, this.m_y);
                            this.setFlipX(false);
                        }
                        this.m_winMovement.endCallback = this.onEndSharckAttack1.bind(this);
                    }
                    /*override*/ update(dt) {
                        if ((this.m_state == PlayerBrawler.ST_TELEPORT_WALK ||
                            this.m_state == PlayerBrawler.ST_PRE_WIN_WALK ||
                            this.m_state == PlayerBrawler.ST_WIN_WALK ||
                            this.m_state == PlayerBrawler.ST_NONE ||
                            this.m_state == PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL) &&
                            this.m_winMovement != null) {
                            super.update(dt);
                            if (this.m_isInSharkSwordMode) {
                                if (this.m_collision != null && this.m_collision.x != 0 && this.m_collision.y != 0) {
                                    this.setFlipX(this.m_x > this.m_world.camera().x() + this.m_world.camera().width * 0.5);
                                    this.m_winMovement.cancelMotion();
                                    this.m_winMovement.free();
                                    this.m_winMovement = null;
                                    this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL_FINISH);
                                    this.m_timeCounter = 0;
                                    this.specialTick = -1;
                                    this.m_timeTotalWait = 0;
                                    this.m_x = this.m_old_x_no_collision;
                                    return;
                                }
                                else {
                                    this.m_old_x_no_collision = this.m_x;
                                    if (this.m_timeTotalWait > 0) {
                                        this.m_timeCounter += dt;
                                        this.specialTick++;
                                        if (this.m_timeCounter >= this.m_timeTotalWait) {
                                            this.m_control.reset();
                                            this.m_winMovement.cancelMotion();
                                            this.m_winMovement.free();
                                            this.m_winMovement = null;
                                            this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL_FINISH);
                                            this.m_control.onAction(true);
                                            this.m_timeCounter = 0;
                                            this.specialTick = -1;
                                            this.m_timeTotalWait = 0;
                                            return;
                                        }
                                    }
                                }
                            }
                            if (this.m_winMovement != null) {
                                this.m_winMovement.update(dt);
                            }
                            if (this.m_winMovement != null) {
                                this.m_x = this.m_winMovement.x();
                                this.m_y = this.m_winMovement.y();
                            }
                            return;
                        }
                        if (this.m_state == PlayerBrawler.ST_KNOCK) {
                            var camera = this.m_world.camera();
                            var incX = 0;
                            if (this.m_state == PlayerBrawler.ST_KNOCK) {
                                incX = dt * (this.isLookingToLeft() ? 0.15 : -0.15);
                            }
                            else {
                                incX = dt * (this.isLookingToLeft() ? -0.25 : 0.25);
                            }
                            if (incX > 0) {
                                if (this.m_x + incX + this.clip().width / 4 >= camera.x() + camera.width) {
                                    incX = 0;
                                }
                            }
                            else if (incX < 0) {
                                if (this.m_x + incX - this.clip().width / 4 <= camera.x()) {
                                    incX = 0;
                                }
                            }
                            this.setX(this.m_x + incX);
                        }
                        if (this.mWinFlag && this.checkStateToWin()) {
                            this.m_world.game().onGameEnd(true);
                            this.mWinFlag = false;
                        }
                        super.update(dt);
                        if (this.m_clip.mcBody && this.m_clip.mcBody.mcBoundsAttack) {
                            this.m_clip.mcBody.mcBoundsAttack.visible = project.Global.COLLISION_DEBUG;
                            this.updateBoundsAttack(this.m_clip.mcBody.mcBoundsAttack, true);
                            this.m_boundsAttack.x += this.m_clip.mcBody.x;
                            this.m_boundsAttack.y += this.m_clip.mcBody.y;
                        }
                        else {
                            this.updateBoundsAttack();
                        }
                        if (this.m_clip.mcBody && this.m_clip.mcBody.mcBounds) {
                            //this.m_clip.mcBody.mcBounds.visible = false;
                            this.updateBoundsBody(this.m_clip.mcBody.mcBounds);
                            this.m_boundsBody.x += this.m_clip.mcBody.x;
                            this.m_boundsBody.y += this.m_clip.mcBody.y;
                        }
                        else {
                            this.updateBoundsBody();
                        }
                        if (this.mComboInterval) {
                            this.mComboInterval.update(dt);
                        }
                        if (this.mLastComboInterval) {
                            this.mLastComboInterval.update(dt);
                        }
                        if (this.mInvulnerableInterval) {
                            this.mInvulnerableInterval.update(dt);
                        }
                        if ((this.m_state == BRW_PlayerExt.ST_PLAYER_WIN) && this.m_freeMovement) {
                            this.m_character.setX(this.m_clip.x);
                            this.m_character.setY(this.m_clip.y);
                            this.m_character.update(dt);
                            this.m_control.update(dt);
                            this.mTimerFinishAnimation -= dt;
                            if (this.mTimerFinishAnimation <= 0) {
                                this.mTimerFinishAnimation = 3000;
                            }
                        }
                        if (this.mTimePausedJump > 0) {
                            this.mTimePausedJump -= dt;
                            if (this.mTimePausedJump <= 0) {
                                this.m_control.pauseJump(false);
                            }
                        }
                        if (this.mTimerEnemyCombo > 0) {
                            this.mTimerEnemyCombo -= dt;
                            if (this.mTimerEnemyCombo <= 0) {
                                this.mTimerEnemyCombo = 0;
                                this.mCountEnemyHit = 0;
                            }
                        }
                        if (this.m_timeTotalWait > 0) {
                            this.m_timeCounter += dt;
                            this.specialTick++;
                            if (this.m_timeCounter >= this.m_timeTotalWait) {
                                this.m_control.reset();
                                if (this.m_isInBigFeetMode) {
                                    this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_FULL_FINISH);
                                }
                                else if (this.m_isInFearMode) {
                                    project.Global.app.stopSound("snd_atb_player_fear2");
                                    project.Global.app.playSound("snd_atb_player_fear3");
                                    this.gotoState(PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER_FINISH);
                                    this.mSpecialAttackCanvas.removeChild(this.mSpecialAttackBase);
                                    try {
                                        this.mSpecialAttackBase.destroy();
                                    }
                                    catch (e) { }
                                    var a = this.m_world.actorManager().actors;
                                    for (var i = 0; i < a.length; i++) {
                                        if (a[i] != null && a[i] instanceof Bridge && a[i].isStand()) {
                                            a[i].clip().alpha = 1;
                                            break;
                                        }
                                        else if (a[i] != null && a[i] instanceof Tutorial) {
                                            a[i].clip().alpha = 1;
                                            break;
                                        }
                                    }
                                }
                                this.m_control.onAction(true);
                                this.m_timeCounter = 0;
                                this.specialTick = -1;
                                this.m_timeTotalWait = 0;
                            }
                        }
                        if (this.m_timerStop > 0 && this.m_currentStop != null) {
                            if (this.m_currentStop.getWavesRequired() <= 0) {
                                this.m_timerStop -= dt;
                                if (this.m_timerStop <= 0) {
                                    this.m_timerStop = 0;
                                    this.removeLockForSolvingStop();
                                    if (this.m_currentStop != null) {
                                        this.solveCurrentStop();
                                        var actors = this.m_world.actorManager().actors;
                                        for (var k = 0; k < actors.length; k++) {
                                            if (actors[k] instanceof BaseEnemy) {
                                                actors[k].markToDisappear();
                                            }
                                        }
                                    }
                                    gameBrawler.HudBrawler.instance.setTime(100);
                                    gameBrawler.HudBrawler.instance.showTimer(false);
                                }
                                else {
                                    gameBrawler.HudBrawler.instance.setTime(101 - 100 * this.m_timerStop / this.m_currentStop.getTimer());
                                }
                            }
                            else {
                                this.m_timerStop -= dt;
                                if (this.m_timerStop <= 0) {
                                    this.m_timerStop = 0;
                                    gameBrawler.HudBrawler.instance.setTime(100);
                                    gameBrawler.HudBrawler.instance.showTimer(false);
                                }
                                else {
                                    gameBrawler.HudBrawler.instance.setTime(101 - 100 * this.m_timerStop / this.m_currentStop.getTimer());
                                }
                            }
                        }
                        if (this.mTimeForceRespawn > 0) {
                            this.mTimeForceRespawn -= dt;
                            if (this.mTimeForceRespawn < 1) {
                                this.respawnPlayer();
                            }
                        }
                        if (this.m_health != this.m_oldHealth) {
                            this.m_health = Math.min(Math.max(0, this.m_health), 100);
                            gameBrawler.HudBrawler.instance.setPlayerEnergy(this.m_health);
                            this.m_oldHealth = this.m_health;
                            this.createHitEffect();
                        }
                        if (this.m_lifes != this.m_oldLifes) {
                            if (this.m_lifes < 0) {
                                this.m_lifes = 0;
                            }
                            gameBrawler.HudBrawler.instance.setLifes(this.m_lifes);
                            this.m_oldLifes = this.m_lifes;
                            project.StatsMain.playerLifes = this.m_lifes;
                        }
                        if (this.m_magic != this.m_oldMagic) {
                            this.m_magic = Math.min(Math.max(0, this.m_magic), 100);
                            gameBrawler.HudBrawler.instance.setPlayerPower(this.m_magic);
                            this.m_oldMagic = this.m_magic;
                            project.StatsMain.playerMagic = this.m_magic;
                        }
                    }
                    forceSelectesSpecial(val) {
                        this.m_selectedSpecialAttack = val;
                    }
                    createHitEffect(x_offset = 0, y_offset = -50) {
                        var nameClip = "mc_fx_hit";
                        if (nameClip.length > 0) {
                            var fDir = (this.isLookingToLeft() ? -1 : 1);
                            var fx = this.m_world.addEffect(nameClip, this.m_x + x_offset * fDir, this.m_y + y_offset);
                            fx.actor().clip().scale.x *= fDir;
                        }
                    }
                    /*override*/ free() {
                        this.mBoundsNormalAttackDepth = null;
                        super.free();
                    }
                }
                PlayerBrawler.ST_APPEARS = 122;
                PlayerBrawler.ST_DROP_ENEMY = 123;
                PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_HALF = 124;
                PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_FULL_START = 125;
                PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_FULL = 126;
                PlayerBrawler.ST_SPECIAL_ATTACK_BIG_FEET_FULL_FINISH = 127;
                PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_HALF = 128;
                PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL_START = 129;
                PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL = 130;
                PlayerBrawler.ST_SPECIAL_ATTACK_SHARK_SWORD_FULL_FINISH = 131;
                PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER_START = 132;
                PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER = 133;
                PlayerBrawler.ST_SPECIAL_ATTACK_FEAR_FEASTER_FINISH = 134;
                PlayerBrawler.ST_KNOCK = 135;
                PlayerBrawler.ST_GETUP = 136;
                PlayerBrawler.ST_NONE = 137;
                PlayerBrawler.ST_TELEPORT_IN = 138;
                PlayerBrawler.ST_TELEPORT_OUT = 139;
                PlayerBrawler.ST_WIN_WALK = 140;
                PlayerBrawler.ST_PRE_WIN_WALK = 141;
                PlayerBrawler.ST_SPECIAL_INTRO = 142;
                PlayerBrawler.ST_TELEPORT_WALK = 143;
                PlayerBrawler.COMBO_1 = 1;
                PlayerBrawler.COMBO_2 = 2;
                PlayerBrawler.COMBO_3 = 3;
                PlayerBrawler.COMBO_4 = 4;
                PlayerBrawler.MODE_ATTACK_NORMAL = 1;
                PlayerBrawler.MODE_ATTACK_SPECIAL_BIG_FEET_HALF = 2;
                PlayerBrawler.MODE_ATTACK_SPECIAL_BIG_FEET_FULL = 3;
                PlayerBrawler.MODE_ATTACK_SPECIAL_SHARK_SWORD_HALF = 4;
                PlayerBrawler.MODE_ATTACK_SPECIAL_SHARK_SWORD_FULL = 5;
                PlayerBrawler.MODE_ATTACK_SPECIAL_FEAR_FEASTER = 6;
                PlayerBrawler.SELECTED_SPECIAL_ATTACK_NONE = 0;
                PlayerBrawler.SELECTED_SPECIAL_ATTACK_BIG_FEET = 2;
                PlayerBrawler.SELECTED_SPECIAL_ATTACK_SHARK_SWORD = 1;
                PlayerBrawler.SELECTED_SPECIAL_ATTACK_FEAR_FEASTER = 3;
                PlayerBrawler.MIN_POWERBAR_TO_SPECIAL_ATTACK_HALF = 50;
                PlayerBrawler.MIN_POWERBAR_TO_SPECIAL_ATTACK_FULL = 100;
                PlayerBrawler.TYPE_PLAYER_ONE = "player_one";
                PlayerBrawler.type = PlayerBrawler.TYPE_PLAYER_ONE;
                PlayerBrawler.TIME_FORCE_RESPAWN = 200;
                gameBrawler.PlayerBrawler = PlayerBrawler;
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var PlayerBrawler = com.bamtang.project.gameBrawler.PlayerBrawler;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                class TouchControlBrawler {
                    constructor() {
                        this.mCurrentTime = 0;
                        this.mTimeReset = 400;
                        this.mCounterTouch = 0;
                        this.mMaxTouch = 2;
                    }
                    sense(toLeft) {
                        if (this.mLock)
                            return;
                        this.mLock = true;
                        this.mCounterTouch++;
                        if (this.mCounterTouch == 1) {
                            this.mEqual = toLeft;
                        }
                        if (this.mCounterTouch != 1 && this.mEqual != toLeft) {
                            this.mCounterTouch = 0;
                            return;
                        }
                        this.mCurrentTime = 0;
                        if (this.mCounterTouch >= this.mMaxTouch) {
                            if (this.onActiveAction != null) {
                                this.onActiveAction(this.mEqual);
                            }
                            this.mCounterTouch = 0;
                        }
                    }
                    unlock() {
                        this.mLock = false;
                    }
                    update(dt) {
                        this.mCurrentTime += dt;
                        if (this.mCurrentTime > this.mTimeReset) {
                            this.mCurrentTime = 0;
                            this.mCounterTouch = 0;
                        }
                    }
                }
                gameBrawler.TouchControlBrawler = TouchControlBrawler;
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var TouchControlBrawler = com.bamtang.project.gameBrawler.TouchControlBrawler;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                class WorldBrawler extends BRW_WorldExt {
                    constructor(canvas, game, worldFile, generalFile) {
                        super(canvas, game, worldFile);
                        this.m_player = new gameBrawler.PlayerBrawler(this.objectsCanvas(), this, generalFile, this.playerInitX, this.playerInitY);
                        this.m_actorManager.init(this.m_player);
                        this.m_camera.update(0);
                        this.init();
                    }
                    /*override*/ createNpcManagers() {
                        this.m_actorManager = new gameBrawler.ActorManagerBrawler(this);
                    }
                    showCameraZones(show) {
                        var actors = this.m_actorManager.actors;
                        for (var k = actors.length - 1; k >= 0; --k) {
                            if (actors[k] instanceof CameraZone) {
                                actors[k].clip().alpha = (show ? 1 : 0);
                            }
                        }
                    }
                    pauseEnemies(pause) {
                        var actors = this.m_actorManager.actors;
                        for (var k = actors.length - 1; k >= 0; --k) {
                            if (actors[k] instanceof BaseEnemy) {
                                actors[k].setPaused(pause);
                            }
                        }
                    }
                }
                gameBrawler.WorldBrawler = WorldBrawler;
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var WorldBrawler = com.bamtang.project.gameBrawler.WorldBrawler;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var boss;
                (function (boss) {
                    class BossActionAttack_4 extends BaseEnemyAction {
                        constructor(enemy) {
                            super(enemy);
                            this.state = 0;
                            this.posInitX = 0;
                            this.posInitY = 0;
                            this.m_idPointPath = 0;
                            this.m_time = 0;
                            this.m_time_dizzy = 0;
                            this.m_idAttack = 0;
                            this.m_rangeStand = 10;
                            this.m_time_fall = 0;
                            this.m_laser_range = 1000;
                            this.m_spped_bullet = 0.5;
                            this.m_time_waiting_post_attack = 5000;
                            this.m_speed_movement = 0.25;
                            this.m_time_waiting = 4000;
                            this.m_num_minions = 2;
                            this.m_health_enemys = 10;
                            this.m_cooldown_dizzy = 3000;
                            this.m_delay_fall = 3500;
                            this.m_speed_movement_to_player = 0;
                            this.m_size_bullet = 1;
                            this.m_coverProb_enemy = 1;
                            this.loadNodesOfAttack();
                            this.initializePointFallObject();
                            this.posInitX = this.mEnemyRef.posInitX;
                            this.posInitY = this.mEnemyRef.posInitY;
                        }
                        /*override*/ setPaused(paused) {
                            super.setPaused(paused);
                            if (this.mIsPaused) {
                            }
                            else {
                                this.decideAction();
                            }
                        }
                        /*override*/ onActionStarted() {
                            this.state = BossActionAttack_4.ST_MOVEMENT_TO_INIT;
                            this.mStateAction = BossActionAttack_4.ST_ACTION_APPEAR_SHIELD;
                            this.mEnemyRef.gotoState(boss.Gunter.ST_APPEAR_SHIELD);
                        }
                        decideAction() {
                            if (this.state == BossActionAttack_4.ST_MOVEMENT_TO_INIT) {
                                switch (this.mEnemyRef.getState()) {
                                    case boss.Gunter.ST_APPEAR_SHIELD:
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                                        this.gotoPostionInit();
                                        break;
                                }
                            }
                            if (this.state == BossActionAttack_4.ST_MOVEMENT_AND_LASER) {
                                switch (this.mEnemyRef.getState()) {
                                    case BaseEnemy.ST_HIT_AIR:
                                    case BaseEnemy.ST_HIT:
                                        if (this.mStateAction == BossActionAttack_4.ST_ACTION_WAITING_POST_ATTACK) {
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_FLY);
                                        }
                                        break;
                                    case BaseEnemy.ST_SHOOT:
                                        this.lookPlayer();
                                        this.mEnemyRef.onCreateBullet(this.m_laser_range, this.m_spped_bullet, this.m_size_bullet);
                                        this.mHealthBase = this.mEnemyRef.getHealth();
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_FLY);
                                        this.mStateAction = BossActionAttack_4.ST_ACTION_WAITING_POST_ATTACK;
                                        break;
                                    case boss.Gunter.ST_APPEAR_SHIELD:
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                                        if (this.mHealthBase == this.mEnemyRef.getHealth()) {
                                            this.goNextPointPath();
                                        }
                                        else {
                                            this.gotoPostionInit();
                                        }
                                        break;
                                }
                                return;
                            }
                            if (this.state == BossActionAttack_4.ST_MINIONS) {
                                switch (this.mEnemyRef.getState()) {
                                    case BaseEnemy.ST_HIT_AIR:
                                    case BaseEnemy.ST_HIT:
                                    case boss.Gunter.ST_ANGRY:
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_ANGRY);
                                        break;
                                    case boss.Gunter.ST_APPEAR_SHIELD:
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                                        this.state = BossActionAttack_4.ST_ATTACK_PLAYER;
                                        this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                        break;
                                    case boss.Gunter.ST_SUMMON:
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                                        this.mEnemyRef.onCreateEnemies(this.m_num_minions, this.m_health_enemys, this.m_coverProb_enemy);
                                        this.mStateAction = BossActionAttack_4.ST_ACTION_WAITING_POST_ATTACK;
                                        break;
                                }
                            }
                            if (this.state == BossActionAttack_4.ST_ATTACK_PLAYER) {
                                switch (this.mEnemyRef.getState()) {
                                    case BaseEnemy.ST_HIT_AIR:
                                    case BaseEnemy.ST_HIT:
                                        if (this.mStateAction != BossActionAttack_4.ST_ACTION_DIZZY) {
                                            this.mStateAction = BossActionAttack_4.ST_ACTION_DIZZY;
                                            this.mHealthBase = this.mEnemyRef.getHealth();
                                        }
                                        this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                        break;
                                    case BaseEnemy.ST_DIZZI:
                                        this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                        break;
                                    case boss.Gunter.ST_APPEAR_SHIELD:
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                                        this.gotoPostionInit();
                                        break;
                                }
                            }
                        }
                        /*override*/ update(dt) {
                            if (this.mIsPaused == true) {
                                return;
                            }
                            if (this.state == BossActionAttack_4.ST_MOVEMENT_TO_INIT) {
                                switch (this.mStateAction) {
                                    case BossActionAttack_4.ST_ACTION_APPEAR_SHIELD:
                                        this.lookPlayer();
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                        this.parabolicMovement.update(dt);
                                        this.mEnemyRef.setX(this.parabolicMovement.x());
                                        this.mEnemyRef.setY(this.parabolicMovement.y());
                                        break;
                                }
                            }
                            if (this.state == BossActionAttack_4.ST_MOVEMENT_AND_LASER) {
                                switch (this.mStateAction) {
                                    case BaseEnemyAction.ST_ACTION_NONE:
                                        this.lookPlayer();
                                        if (this.isNodeAttack()) {
                                            this.startActionWaiting();
                                            this.m_idAttack++;
                                            this.m_idAttack = this.m_idAttack % this.indexNodesOfAttack.length;
                                        }
                                        else {
                                            this.goNextPointPath();
                                        }
                                        break;
                                    case BaseEnemyAction.ST_ACTION_WAITING:
                                        this.m_time += dt;
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        this.lookPlayer();
                                        if (this.m_time >= this.m_time_waiting) {
                                            this.m_time = 0;
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_SHOOT);
                                            this.mStateAction = BossActionAttack_4.ST_ACTION_SHOOT;
                                        }
                                        break;
                                    case BossActionAttack_4.ST_ACTION_SHOOT:
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        break;
                                    case BossActionAttack_4.ST_ACTION_WAITING_POST_ATTACK:
                                        this.m_time += dt;
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        this.lookPlayer();
                                        if (this.m_time >= this.m_time_waiting_post_attack || this.mEnemyRef.healthPercent(this.mHealthBase) >= this.m_damage_attack) {
                                            this.m_time = 0;
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_APPEAR_SHIELD);
                                            this.mStateAction = BossActionAttack_4.ST_ACTION_APPEAR_SHIELD;
                                        }
                                        break;
                                    case BossActionAttack_4.ST_ACTION_APPEAR_SHIELD:
                                        this.lookPlayer();
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                        this.parabolicMovement.update(dt);
                                        this.mEnemyRef.setX(this.parabolicMovement.x());
                                        this.mEnemyRef.setY(this.parabolicMovement.y());
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_LINEAR:
                                        this.linearMovement.update(dt);
                                        this.mEnemyRef.setX(this.linearMovement.x());
                                        this.mEnemyRef.setY(this.linearMovement.y());
                                        break;
                                }
                            }
                            if (this.state == BossActionAttack_4.ST_MINIONS) {
                                switch (this.mStateAction) {
                                    case BaseEnemyAction.ST_ACTION_WAITING:
                                        this.lookPlayer();
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        this.m_time += dt;
                                        if (this.m_time >= this.m_time_waiting) {
                                            this.m_time = 0;
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_SUMMON);
                                        }
                                        break;
                                    case BossActionAttack_4.ST_ACTION_WAITING_POST_ATTACK:
                                        this.lookPlayer();
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        if (this.mEnemyRef.allMinionsAreDead() == true) {
                                            this.mStateAction = BossActionAttack_4.ST_ACTION_ANGRY;
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_ANGRY);
                                        }
                                        break;
                                    case BossActionAttack_4.ST_ACTION_ANGRY:
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        this.m_time += dt;
                                        if (this.m_time >= this.m_cooldown_angry) {
                                            this.m_time = 0;
                                            this.mStateAction = BossActionAttack_4.ST_ACTION_APPEAR_SHIELD;
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_APPEAR_SHIELD);
                                        }
                                        break;
                                    case BossActionAttack_4.ST_ACTION_APPEAR_SHIELD:
                                        this.lookPlayer();
                                        break;
                                }
                            }
                            if (this.state == BossActionAttack_4.ST_ATTACK_PLAYER) {
                                this.m_time_fall += dt;
                                if (this.m_time_fall >= this.m_delay_fall) {
                                    this.m_time_fall = 0;
                                    this.onCreateFallingObject();
                                }
                                switch (this.mStateAction) {
                                    case BaseEnemyAction.ST_ACTION_NONE:
                                        this.m_time += dt;
                                        if (this.m_time >= 0) {
                                            this.launchedToPlayer();
                                        }
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_LINEAR:
                                        this.linearMovement.update(dt);
                                        this.tmpX = this.linearMovement.x();
                                        this.tmpY = this.linearMovement.y();
                                        this.mEnemyRef.setX(this.tmpX);
                                        this.mEnemyRef.setY(this.tmpY);
                                        this.lookPlayer();
                                        break;
                                    case BaseEnemyAction.ST_ACTION_WAITING:
                                        this.m_time += dt;
                                        this.lookPlayer();
                                        if (this.m_time >= this.m_time_waiting_attack_player) {
                                            this.m_time = 0;
                                            if (Math.abs(this.mEnemyRef.world().player().x() - this.mEnemyRef.x()) < 80 && Math.abs(this.mEnemyRef.world().player().y() - this.mEnemyRef.y()) < 80) {
                                                this.gotoPostionInit();
                                            }
                                            else {
                                                this.launchedToPlayer();
                                            }
                                        }
                                        break;
                                    case BossActionAttack_4.ST_ACTION_DIZZY:
                                        this.m_time_dizzy += dt;
                                        this.m_time_fall = 0;
                                        if (this.m_time_dizzy >= this.m_cooldown_dizzy || this.mEnemyRef.healthPercent(this.mHealthBase) >= this.m_damage_attack) {
                                            this.m_time_dizzy = 0;
                                            this.m_time = 0;
                                            this.mStateAction = BossActionAttack_4.ST_ACTION_APPEAR_SHIELD;
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_APPEAR_SHIELD);
                                        }
                                        break;
                                    case BossActionAttack_4.ST_ACTION_APPEAR_SHIELD:
                                        this.lookPlayer();
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                        this.parabolicMovement.update(dt);
                                        this.mEnemyRef.setX(this.parabolicMovement.x());
                                        this.mEnemyRef.setY(this.parabolicMovement.y());
                                        break;
                                }
                            }
                        }
                        goNextPointPath() {
                            this.m_idPointPath++;
                            this.m_idPointPath = this.m_idPointPath % 6;
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[this.m_idPointPath]).x;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[this.m_idPointPath]).y;
                            if (this.m_idPointPath == 0 || this.m_idPointPath == 3) {
                                this.startParabolicMovement(this.tmpX, this.tmpY, -0.07, this.m_speed_movement);
                            }
                            else {
                                this.startLinearMovement(this.tmpX, this.tmpY, this.m_speed_movement);
                            }
                        }
                        loadNodesOfAttack() {
                            this.indexNodesOfAttack = new Array();
                            this.indexNodesOfAttack.push(2);
                            this.indexNodesOfAttack.push(3);
                            this.indexNodesOfAttack.push(1);
                            this.indexNodesOfAttack.push(4);
                        }
                        initializePointFallObject() {
                            var range = 50;
                            this.m_pointFallObject = new Array();
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[0]).x - range;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[0]).y + range;
                            this.m_pointFallObject.push(new Vector2D(this.tmpX, this.tmpY));
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[2]).x - range;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[2]).y - range;
                            this.m_pointFallObject.push(new Vector2D(this.tmpX, this.tmpY));
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[3]).x + range;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[3]).y + range;
                            this.m_pointFallObject.push(new Vector2D(this.tmpX, this.tmpY));
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[5]).x + range;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[5]).y - range;
                            this.m_pointFallObject.push(new Vector2D(this.tmpX, this.tmpY));
                        }
                        isNodeAttack() {
                            return (this.m_idPointPath == this.indexNodesOfAttack[this.m_idAttack]);
                        }
                        launchedToPlayer() {
                            if (Math.random() < 0.5) {
                                this.mEnemyRef.gotoState(BaseEnemy.ST_DASH);
                            }
                            var range = 90;
                            for (var i = 0; i < this.m_pointFallObject.length; i++) {
                                this.tmpX = this.m_pointFallObject[i].x;
                                this.tmpY = this.m_pointFallObject[i].y;
                                if (Math.abs(this.tmpX - this.mPlayerRef.x()) < range && Math.abs(this.tmpY - this.mPlayerRef.y()) < range) {
                                    this.startLinearMovement(this.tmpX, this.tmpY, this.m_speed_movement_to_player);
                                    this.lookPlayer();
                                    return;
                                }
                            }
                            this.gotoPositionPlayer(0.5);
                        }
                        onCreateFallingObject() {
                            for (var i = 0; i < this.m_pointFallObject.length; i++) {
                                this.tmpX = new Vector2D(this.m_pointFallObject[i]).x;
                                this.tmpY = new Vector2D(this.m_pointFallObject[i]).y;
                                this.mEnemyRef.onCreateFallingObject(this.m_speed_fall[i], 500, 0, this.tmpX, this.tmpY, "");
                            }
                        }
                        startParabolicMovement(tx, ty, gravity, speed) {
                            this.parabolicMovement = new ParametricParabolicMovement(this.mEnemyRef.x(), this.mEnemyRef.y(), tx, ty, gravity, speed / 10);
                            this.parabolicMovement.endCallback = this.endMovement.bind(this);
                            this.mStateAction = BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR;
                        }
                        startLinearMovement(tx, ty, speed) {
                            this.linearMovement = new LinearMovement(this.mEnemyRef.x(), this.mEnemyRef.y(), speed);
                            this.linearMovement.gotoPosition(tx, ty, speed);
                            this.linearMovement.endCallback = this.endMovementLinear.bind(this);
                            this.mStateAction = BaseEnemyAction.ST_ACTION_MOVE_LINEAR;
                        }
                        endMovement(movement) {
                            if (this.state == BossActionAttack_4.ST_MOVEMENT_TO_INIT) {
                                this.state = BossActionAttack_4.ST_MOVEMENT_AND_LASER;
                                this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                                return;
                            }
                            if (this.state == BossActionAttack_4.ST_MOVEMENT_AND_LASER) {
                                switch (this.mStateAction) {
                                    case BaseEnemyAction.ST_ACTION_WAITING:
                                    case BossActionAttack_4.ST_ACTION_WAITING_POST_ATTACK:
                                        this.gotoStandCharacter();
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                        if (this.mHealthBase == this.mEnemyRef.getHealth()) {
                                            this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                        }
                                        else {
                                            this.state = BossActionAttack_4.ST_MINIONS;
                                            this.startActionWaiting();
                                        }
                                        break;
                                }
                                return;
                            }
                            if (this.state == BossActionAttack_4.ST_ATTACK_PLAYER) {
                                switch (this.mStateAction) {
                                    case BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                        if (this.mEnemyRef.getHealthPercent() <= 50) {
                                            this.onCreateFallingObject();
                                            this.mEnemyRef.nextBossAction();
                                        }
                                        else {
                                            this.state = BossActionAttack_4.ST_MOVEMENT_AND_LASER;
                                            this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                            this.m_idAttack = 0;
                                            this.m_idPointPath = 0;
                                        }
                                        break;
                                }
                            }
                        }
                        endMovementLinear(movement) {
                            if (this.state == BossActionAttack_4.ST_MOVEMENT_AND_LASER) {
                                this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                return;
                            }
                            if (this.state == BossActionAttack_4.ST_ATTACK_PLAYER) {
                                this.mStateAction = BaseEnemyAction.ST_ACTION_WAITING;
                                this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                                return;
                            }
                        }
                        startActionWaiting() {
                            this.mStateAction = BaseEnemyAction.ST_ACTION_WAITING;
                            this.gotoStandCharacter();
                        }
                        gotoPostionInit() {
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[0]).x;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[0]).y;
                            this.startParabolicMovement(this.tmpX, this.tmpY, -0.07, this.m_speed_movement);
                            if (this.posInitX <= this.mEnemyRef.x()) {
                                this.mEnemyRef.setLookAtLeft(true);
                            }
                            else {
                                this.mEnemyRef.setLookAtLeft(false);
                            }
                        }
                        gotoStandCharacter() {
                            this.tmpX = this.mEnemyRef.x();
                            this.tmpY = this.mEnemyRef.y();
                            this.m_rangeStand *= -1;
                            this.standMovement = new ParametricParabolicMovement(this.tmpX, this.tmpY, this.tmpX + this.m_rangeStand, this.tmpY, 0.01, 0.08);
                            this.standMovement.endCallback = this.endMovement.bind(this);
                        }
                        lookPlayer() {
                            if (this.mPlayerRef.x() < this.mEnemyRef.x()) {
                                this.mEnemyRef.setLookAtLeft(true);
                            }
                            else {
                                this.mEnemyRef.setLookAtLeft(false);
                            }
                        }
                        gotoPositionPlayer(speed) {
                            this.tmpX = this.mEnemyRef.world().player().x();
                            this.tmpY = this.mEnemyRef.world().player().y();
                            this.startLinearMovement(this.tmpX, this.tmpY, this.m_speed_movement_to_player);
                            this.lookPlayer();
                        }
                        setParams(param) {
                            this.m_speed_movement = Number(param["speed_movement"]);
                            this.m_speed_movement_to_player = Number(param["speed_movement_to_player"]);
                            this.m_laser_range = Number(param["laser_range"]);
                            this.m_num_minions = Number(param["num_minions"]);
                            this.m_time_waiting = Number(param["time_waiting"]);
                            this.m_time_waiting_post_attack = Number(param["time_waiting_post_attack"]);
                            this.m_time_waiting_attack_player = Number(param["time_waiting_attack_player"]);
                            this.m_delay_fall = Number(param["delay_fall"]);
                            this.m_speed_fall = new Array();
                            this.m_speed_fall.push(Number(param["speed_fall_1"]));
                            this.m_speed_fall.push(Number(param["speed_fall_2"]));
                            this.m_speed_fall.push(Number(param["speed_fall_3"]));
                            this.m_speed_fall.push(Number(param["speed_fall_4"]));
                            this.m_health_enemys = parseInt(param["health_enemys"]);
                            this.m_cooldown_dizzy = parseInt(param["cooldown_dizzy"]);
                            this.m_spped_bullet = Number(param["speed_bullet"]);
                            this.m_cooldown_angry = Number(param["cooldown_angry"]);
                            this.m_damage_attack = Number(param["damage_attack"]);
                            this.m_size_bullet = parseInt(param["size_bullet"]);
                            this.m_coverProb_enemy = Number(param["coverProb_enemy"]);
                        }
                    }
                    BossActionAttack_4.ST_ACTION_WAITING_POST_ATTACK = 11;
                    BossActionAttack_4.ST_ACTION_ANGRY = 12;
                    BossActionAttack_4.ST_ACTION_DIZZY = 13;
                    BossActionAttack_4.ST_ACTION_SHOOT = 14;
                    BossActionAttack_4.ST_ACTION_APPEAR_SHIELD = 15;
                    BossActionAttack_4.ST_MOVEMENT_TO_INIT = 3;
                    BossActionAttack_4.ST_MOVEMENT_AND_LASER = 0;
                    BossActionAttack_4.ST_MINIONS = 1;
                    BossActionAttack_4.ST_ATTACK_PLAYER = 2;
                    boss.BossActionAttack_4 = BossActionAttack_4;
                })(boss = gameBrawler.boss || (gameBrawler.boss = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BossActionAttack_4 = com.bamtang.project.gameBrawler.boss.BossActionAttack_4;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var boss;
                (function (boss) {
                    class BossActionAttack_5 extends BaseEnemyAction {
                        constructor(enemy) {
                            super(enemy);
                            this.state = 0;
                            this.posInitX = 0;
                            this.posInitY = 0;
                            this.m_idPointPath = 0;
                            this.m_time = 0;
                            this.m_time_dizzy = 0;
                            this.m_idAttack = 0;
                            this.m_rangeStand = 10;
                            this.m_time_fall = 0;
                            this.m_laser_range = 1000;
                            this.m_spped_bullet = 0.5;
                            this.m_time_waiting_post_attack = 5000;
                            this.m_speed_movement = 0.25;
                            this.m_time_waiting = 4000;
                            this.m_num_minions = 2;
                            this.m_health_enemys = 10;
                            this.m_cooldown_dizzy = 3000;
                            this.m_delay_fall = 3500;
                            this.m_speed_movement_to_player = 0;
                            this.m_size_bullet = 1;
                            this.m_coverProb_enemy = 1;
                            this.loadNodesOfAttack();
                            this.initializePointFallObject();
                            this.posInitX = this.mEnemyRef.posInitX;
                            this.posInitY = this.mEnemyRef.posInitY;
                        }
                        /*override*/ setPaused(paused) {
                            super.setPaused(paused);
                            if (this.mIsPaused) {
                            }
                            else {
                                this.decideAction();
                            }
                        }
                        /*override*/ onActionStarted() {
                            this.state = BossActionAttack_5.ST_MOVEMENT_AND_LASER;
                            this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                            this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                        }
                        decideAction() {
                            if (this.state == BossActionAttack_5.ST_MOVEMENT_AND_LASER) {
                                switch (this.mEnemyRef.getState()) {
                                    case BaseEnemy.ST_HIT_AIR:
                                    case BaseEnemy.ST_HIT:
                                        if (this.mStateAction == BossActionAttack_5.ST_ACTION_WAITING_POST_ATTACK) {
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_FLY);
                                        }
                                        break;
                                    case BaseEnemy.ST_SHOOT:
                                        this.lookPlayer();
                                        this.mEnemyRef.onCreateBullet(this.m_laser_range, this.m_spped_bullet, this.m_size_bullet);
                                        this.mHealthBase = this.mEnemyRef.getHealth();
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_FLY);
                                        this.mStateAction = BossActionAttack_5.ST_ACTION_WAITING_POST_ATTACK;
                                        break;
                                    case boss.Gunter.ST_APPEAR_SHIELD:
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                                        if (this.mHealthBase == this.mEnemyRef.getHealth()) {
                                            this.goNextPointPath();
                                        }
                                        else {
                                            this.gotoPostionInit();
                                        }
                                        break;
                                }
                                return;
                            }
                            if (this.state == BossActionAttack_5.ST_MINIONS) {
                                switch (this.mEnemyRef.getState()) {
                                    case BaseEnemy.ST_HIT_AIR:
                                    case BaseEnemy.ST_HIT:
                                        if (this.mStateAction == BossActionAttack_5.ST_ACTION_WAITING_POST_ATTACK) {
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_FLY);
                                        }
                                        else if (this.mStateAction == BossActionAttack_5.ST_ACTION_ANGRY) {
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_ANGRY);
                                        }
                                        break;
                                    case boss.Gunter.ST_ANGRY:
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_ANGRY);
                                        break;
                                    case BaseEnemy.ST_SHOOT:
                                        this.lookPlayer();
                                        this.mEnemyRef.onCreateBullet(this.m_laser_range, this.m_spped_bullet, this.m_size_bullet);
                                        this.mHealthBase = this.mEnemyRef.getHealth();
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_FLY);
                                        this.mStateAction = BossActionAttack_5.ST_ACTION_WAITING_POST_ATTACK;
                                        break;
                                    case boss.Gunter.ST_APPEAR_SHIELD:
                                        if (this.mEnemyRef.allMinionsAreDead() == true) {
                                            this.state = BossActionAttack_5.ST_ATTACK_PLAYER;
                                            this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                        }
                                        else {
                                            this.goNextPointPath();
                                        }
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                                        break;
                                    case boss.Gunter.ST_SUMMON:
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                                        this.mEnemyRef.onCreateEnemies(this.m_num_minions, this.m_health_enemys, this.m_coverProb_enemy);
                                        break;
                                }
                                return;
                            }
                            if (this.state == BossActionAttack_5.ST_ATTACK_PLAYER) {
                                switch (this.mEnemyRef.getState()) {
                                    case BaseEnemy.ST_HIT_AIR:
                                    case BaseEnemy.ST_HIT:
                                        if (this.mStateAction != BossActionAttack_5.ST_ACTION_DIZZY) {
                                            this.mStateAction = BossActionAttack_5.ST_ACTION_DIZZY;
                                            this.mHealthBase = this.mEnemyRef.getHealth();
                                        }
                                        this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                        break;
                                    case BaseEnemy.ST_DIZZI:
                                        this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                        break;
                                    case boss.Gunter.ST_APPEAR_SHIELD:
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                                        this.gotoPostionInit();
                                        break;
                                }
                            }
                        }
                        /*override*/ update(dt) {
                            if (this.mIsPaused == true) {
                                return;
                            }
                            if (this.state == BossActionAttack_5.ST_MOVEMENT_AND_LASER) {
                                switch (this.mStateAction) {
                                    case BaseEnemyAction.ST_ACTION_NONE:
                                        this.lookPlayer();
                                        if (this.isNodeAttack()) {
                                            this.startActionWaiting();
                                            this.m_idAttack++;
                                            this.m_idAttack = this.m_idAttack % this.indexNodesOfAttack.length;
                                        }
                                        else {
                                            this.goNextPointPath();
                                        }
                                        break;
                                    case BaseEnemyAction.ST_ACTION_WAITING:
                                        this.m_time += dt;
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        this.lookPlayer();
                                        if (this.m_time >= this.m_time_waiting) {
                                            this.m_time = 0;
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_SHOOT);
                                            this.mStateAction = BossActionAttack_5.ST_ACTION_SHOOT;
                                        }
                                        break;
                                    case BossActionAttack_5.ST_ACTION_SHOOT:
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        break;
                                    case BossActionAttack_5.ST_ACTION_WAITING_POST_ATTACK:
                                        this.m_time += dt;
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        this.lookPlayer();
                                        var tmp = this.mEnemyRef.healthPercent(this.mHealthBase);
                                        if (this.m_time >= this.m_time_waiting_post_attack || tmp >= this.m_damage_attack) {
                                            this.m_time = 0;
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_APPEAR_SHIELD);
                                            this.mStateAction = BossActionAttack_5.ST_ACTION_APPEAR_SHIELD;
                                        }
                                        break;
                                    case BossActionAttack_5.ST_ACTION_APPEAR_SHIELD:
                                        this.lookPlayer();
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                        this.parabolicMovement.update(dt);
                                        this.mEnemyRef.setX(this.parabolicMovement.x());
                                        this.mEnemyRef.setY(this.parabolicMovement.y());
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_LINEAR:
                                        this.linearMovement.update(dt);
                                        this.mEnemyRef.setX(this.linearMovement.x());
                                        this.mEnemyRef.setY(this.linearMovement.y());
                                        break;
                                }
                            }
                            if (this.state == BossActionAttack_5.ST_MINIONS) {
                                switch (this.mStateAction) {
                                    case BaseEnemyAction.ST_ACTION_NONE:
                                        this.lookPlayer();
                                        if (this.isNodeAttack_1()) {
                                            this.startActionWaiting();
                                            this.m_idAttack++;
                                            this.m_idAttack = this.m_idAttack % this.indexNodesOfAttack_1.length;
                                        }
                                        else {
                                            this.goNextPointPath();
                                        }
                                        break;
                                    case BaseEnemyAction.ST_ACTION_WAITING:
                                        this.m_time += dt;
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        this.lookPlayer();
                                        if (this.m_time >= this.m_time_waiting) {
                                            this.m_time = 0;
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_SHOOT);
                                            this.mStateAction = BossActionAttack_5.ST_ACTION_SHOOT;
                                        }
                                        break;
                                    case BossActionAttack_5.ST_ACTION_SHOOT:
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        break;
                                    case BossActionAttack_5.ST_ACTION_WAITING_POST_ATTACK:
                                        this.m_time += dt;
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        this.lookPlayer();
                                        if (this.m_time >= this.m_time_waiting_post_attack || this.mEnemyRef.healthPercent(this.mHealthBase) >= this.m_damage_attack) {
                                            this.m_time = 0;
                                            if (this.mEnemyRef.allMinionsAreDead() == true) {
                                                this.mStateAction = BossActionAttack_5.ST_ACTION_ANGRY;
                                                this.mEnemyRef.gotoState(boss.Gunter.ST_ANGRY);
                                            }
                                            else {
                                                this.mStateAction = BossActionAttack_5.ST_ACTION_APPEAR_SHIELD;
                                                this.mEnemyRef.gotoState(boss.Gunter.ST_APPEAR_SHIELD);
                                            }
                                        }
                                        break;
                                    case BossActionAttack_5.ST_ACTION_ANGRY:
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        this.m_time += dt;
                                        if (this.m_time >= this.m_cooldown_angry) {
                                            this.m_time = 0;
                                            this.mStateAction = BossActionAttack_5.ST_ACTION_APPEAR_SHIELD;
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_APPEAR_SHIELD);
                                        }
                                        break;
                                    case BossActionAttack_5.ST_ACTION_APPEAR_SHIELD:
                                        this.lookPlayer();
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                        this.parabolicMovement.update(dt);
                                        this.mEnemyRef.setX(this.parabolicMovement.x());
                                        this.mEnemyRef.setY(this.parabolicMovement.y());
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_LINEAR:
                                        this.linearMovement.update(dt);
                                        this.mEnemyRef.setX(this.linearMovement.x());
                                        this.mEnemyRef.setY(this.linearMovement.y());
                                        break;
                                }
                            }
                            if (this.state == BossActionAttack_5.ST_ATTACK_PLAYER) {
                                this.m_time_fall += dt;
                                if (this.m_time_fall >= this.m_delay_fall) {
                                    this.m_time_fall = 0;
                                    this.onCreateFallingObject();
                                }
                                switch (this.mStateAction) {
                                    case BaseEnemyAction.ST_ACTION_NONE:
                                        this.m_time += dt;
                                        if (this.m_time >= 0) {
                                            this.launchedToPlayer();
                                        }
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_LINEAR:
                                        this.linearMovement.update(dt);
                                        this.tmpX = this.linearMovement.x();
                                        this.tmpY = this.linearMovement.y();
                                        this.mEnemyRef.setX(this.tmpX);
                                        this.mEnemyRef.setY(this.tmpY);
                                        this.lookPlayer();
                                        break;
                                    case BaseEnemyAction.ST_ACTION_WAITING:
                                        this.m_time += dt;
                                        this.lookPlayer();
                                        if (this.m_time >= this.m_time_waiting_attack_player) {
                                            this.m_time = 0;
                                            if (Math.abs(this.mEnemyRef.world().player().x() - this.mEnemyRef.x()) < 80 && Math.abs(this.mEnemyRef.world().player().y() - this.mEnemyRef.y()) < 80) {
                                                this.gotoPostionInit();
                                            }
                                            else {
                                                this.launchedToPlayer();
                                            }
                                        }
                                        break;
                                    case BossActionAttack_5.ST_ACTION_DIZZY:
                                        this.m_time_dizzy += dt;
                                        this.m_time_fall = 0;
                                        if (this.m_time_dizzy >= this.m_cooldown_dizzy || this.mEnemyRef.healthPercent(this.mHealthBase) >= this.m_damage_attack) {
                                            this.m_time_dizzy = 0;
                                            this.m_time = 0;
                                            this.mStateAction = BossActionAttack_5.ST_ACTION_APPEAR_SHIELD;
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_APPEAR_SHIELD);
                                        }
                                        break;
                                    case BossActionAttack_5.ST_ACTION_APPEAR_SHIELD:
                                        this.lookPlayer();
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                        this.parabolicMovement.update(dt);
                                        this.mEnemyRef.setX(this.parabolicMovement.x());
                                        this.mEnemyRef.setY(this.parabolicMovement.y());
                                        break;
                                }
                            }
                        }
                        goNextPointPath() {
                            this.m_idPointPath++;
                            this.m_idPointPath = this.m_idPointPath % 6;
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[this.m_idPointPath]).x;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[this.m_idPointPath]).y;
                            if (this.m_idPointPath == 0 || this.m_idPointPath == 3) {
                                this.startParabolicMovement(this.tmpX, this.tmpY, -0.07, this.m_speed_movement);
                            }
                            else {
                                this.startLinearMovement(this.tmpX, this.tmpY, this.m_speed_movement);
                            }
                        }
                        loadNodesOfAttack() {
                            this.indexNodesOfAttack = new Array();
                            this.indexNodesOfAttack.push(0);
                            this.indexNodesOfAttack.push(1);
                            this.indexNodesOfAttack.push(2);
                            this.indexNodesOfAttack.push(3);
                            this.indexNodesOfAttack.push(4);
                            this.indexNodesOfAttack.push(5);
                            this.indexNodesOfAttack_1 = new Array();
                            this.indexNodesOfAttack_1.push(0);
                            this.indexNodesOfAttack_1.push(2);
                            this.indexNodesOfAttack_1.push(3);
                            this.indexNodesOfAttack_1.push(5);
                        }
                        initializePointFallObject() {
                            var range = 50;
                            this.m_pointFallObject = new Array();
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[0]).x - range;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[0]).y + range;
                            this.m_pointFallObject.push(new Vector2D(this.tmpX, this.tmpY));
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[2]).x - range;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[2]).y - range;
                            this.m_pointFallObject.push(new Vector2D(this.tmpX, this.tmpY));
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[3]).x + range;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[3]).y + range;
                            this.m_pointFallObject.push(new Vector2D(this.tmpX, this.tmpY));
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[5]).x + range;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[5]).y - range;
                            this.m_pointFallObject.push(new Vector2D(this.tmpX, this.tmpY));
                        }
                        isNodeAttack() {
                            return (this.m_idPointPath == this.indexNodesOfAttack[this.m_idAttack]);
                        }
                        isNodeAttack_1() {
                            return (this.m_idPointPath == this.indexNodesOfAttack_1[this.m_idAttack]);
                        }
                        launchedToPlayer() {
                            if (Math.random() < 0.5) {
                                this.mEnemyRef.gotoState(BaseEnemy.ST_DASH);
                            }
                            var range = 90;
                            for (var i = 0; i < this.m_pointFallObject.length; i++) {
                                this.tmpX = this.m_pointFallObject[i].x;
                                this.tmpY = this.m_pointFallObject[i].y;
                                if (Math.abs(this.tmpX - this.mPlayerRef.x()) < range && Math.abs(this.tmpY - this.mPlayerRef.y()) < range) {
                                    this.startLinearMovement(this.tmpX, this.tmpY, this.m_speed_movement_to_player);
                                    this.lookPlayer();
                                    return;
                                }
                            }
                            this.gotoPositionPlayer(0.5);
                        }
                        onCreateFallingObject() {
                            for (var i = 0; i < this.m_pointFallObject.length; i++) {
                                this.tmpX = new Vector2D(this.m_pointFallObject[i]).x;
                                this.tmpY = new Vector2D(this.m_pointFallObject[i]).y;
                                this.mEnemyRef.onCreateFallingObject(this.m_speed_fall[i], 500, 0, this.tmpX, this.tmpY, "");
                            }
                        }
                        startParabolicMovement(tx, ty, gravity, speed) {
                            this.parabolicMovement = new ParametricParabolicMovement(this.mEnemyRef.x(), this.mEnemyRef.y(), tx, ty, gravity, speed / 10);
                            this.parabolicMovement.endCallback = this.endMovement.bind(this);
                            this.mStateAction = BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR;
                        }
                        startLinearMovement(tx, ty, speed) {
                            this.linearMovement = new LinearMovement(this.mEnemyRef.x(), this.mEnemyRef.y(), speed);
                            this.linearMovement.gotoPosition(tx, ty, speed);
                            this.linearMovement.endCallback = this.endMovementLinear.bind(this);
                            this.mStateAction = BaseEnemyAction.ST_ACTION_MOVE_LINEAR;
                        }
                        endMovement(movement) {
                            if (this.state == BossActionAttack_5.ST_MOVEMENT_AND_LASER) {
                                switch (this.mStateAction) {
                                    case BaseEnemyAction.ST_ACTION_WAITING:
                                    case BossActionAttack_5.ST_ACTION_WAITING_POST_ATTACK:
                                        this.gotoStandCharacter();
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                        if (this.mHealthBase == this.mEnemyRef.getHealth()) {
                                            this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                        }
                                        else {
                                            this.state = BossActionAttack_5.ST_MINIONS;
                                            this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_SUMMON);
                                            this.m_idAttack = 0;
                                        }
                                        break;
                                }
                                return;
                            }
                            if (this.state == BossActionAttack_5.ST_MINIONS) {
                                switch (this.mStateAction) {
                                    case BaseEnemyAction.ST_ACTION_WAITING:
                                    case BossActionAttack_5.ST_ACTION_WAITING_POST_ATTACK:
                                        this.gotoStandCharacter();
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                        this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                        break;
                                }
                                return;
                            }
                            if (this.state == BossActionAttack_5.ST_ATTACK_PLAYER) {
                                switch (this.mStateAction) {
                                    case BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                        if (this.mEnemyRef.getHealthPercent() <= 20) {
                                            this.onCreateFallingObject();
                                            this.mEnemyRef.nextBossAction();
                                        }
                                        else {
                                            this.state = BossActionAttack_5.ST_MOVEMENT_AND_LASER;
                                            this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                            this.m_idAttack = 0;
                                            this.m_idPointPath = 0;
                                        }
                                        break;
                                }
                            }
                        }
                        endMovementLinear(movement) {
                            if (this.state == BossActionAttack_5.ST_MOVEMENT_AND_LASER) {
                                this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                return;
                            }
                            if (this.state == BossActionAttack_5.ST_MINIONS) {
                                this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                return;
                            }
                            if (this.state == BossActionAttack_5.ST_ATTACK_PLAYER) {
                                this.mStateAction = BaseEnemyAction.ST_ACTION_WAITING;
                                this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                                return;
                            }
                        }
                        startActionWaiting() {
                            this.mStateAction = BaseEnemyAction.ST_ACTION_WAITING;
                            this.gotoStandCharacter();
                        }
                        gotoPostionInit() {
                            this.m_idPointPath = 0;
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[0]).x;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[0]).y;
                            this.startParabolicMovement(this.tmpX, this.tmpY, -0.07, this.m_speed_movement);
                            if (this.posInitX <= this.mEnemyRef.x()) {
                                this.mEnemyRef.setLookAtLeft(true);
                            }
                            else {
                                this.mEnemyRef.setLookAtLeft(false);
                            }
                        }
                        gotoStandCharacter() {
                            this.tmpX = this.mEnemyRef.x();
                            this.tmpY = this.mEnemyRef.y();
                            this.m_rangeStand *= -1;
                            this.standMovement = new ParametricParabolicMovement(this.tmpX, this.tmpY, this.tmpX + this.m_rangeStand, this.tmpY, 0.01, 0.08);
                            this.standMovement.endCallback = this.endMovement.bind(this);
                        }
                        lookPlayer() {
                            if (this.mPlayerRef.x() < this.mEnemyRef.x()) {
                                this.mEnemyRef.setLookAtLeft(true);
                            }
                            else {
                                this.mEnemyRef.setLookAtLeft(false);
                            }
                        }
                        gotoPositionPlayer(speed) {
                            this.tmpX = this.mEnemyRef.world().player().x();
                            this.tmpY = this.mEnemyRef.world().player().y();
                            this.startLinearMovement(this.tmpX, this.tmpY, this.m_speed_movement_to_player);
                            this.lookPlayer();
                        }
                        setParams(param) {
                            this.m_speed_movement = Number(param["speed_movement"]);
                            this.m_speed_movement_to_player = Number(param["speed_movement_to_player"]);
                            this.m_laser_range = Number(param["laser_range"]);
                            this.m_num_minions = Number(param["num_minions"]);
                            this.m_time_waiting = Number(param["time_waiting"]);
                            this.m_time_waiting_post_attack = Number(param["time_waiting_post_attack"]);
                            this.m_time_waiting_attack_player = Number(param["time_waiting_attack_player"]);
                            this.m_delay_fall = Number(param["delay_fall"]);
                            this.m_speed_fall = new Array();
                            this.m_speed_fall.push(Number(param["speed_fall_1"]));
                            this.m_speed_fall.push(Number(param["speed_fall_2"]));
                            this.m_speed_fall.push(Number(param["speed_fall_3"]));
                            this.m_speed_fall.push(Number(param["speed_fall_4"]));
                            this.m_health_enemys = parseInt(param["health_enemys"]);
                            this.m_cooldown_dizzy = parseInt(param["cooldown_dizzy"]);
                            this.m_spped_bullet = Number(param["speed_bullet"]);
                            this.m_cooldown_angry = Number(param["cooldown_angry"]);
                            this.m_damage_attack = Number(param["damage_attack"]);
                            this.m_size_bullet = parseInt(param["size_bullet"]);
                            this.m_coverProb_enemy = Number(param["coverProb_enemy"]);
                        }
                    }
                    BossActionAttack_5.ST_ACTION_WAITING_POST_ATTACK = 11;
                    BossActionAttack_5.ST_ACTION_ANGRY = 12;
                    BossActionAttack_5.ST_ACTION_DIZZY = 13;
                    BossActionAttack_5.ST_ACTION_SHOOT = 14;
                    BossActionAttack_5.ST_ACTION_APPEAR_SHIELD = 15;
                    BossActionAttack_5.ST_MOVEMENT_AND_LASER = 0;
                    BossActionAttack_5.ST_MINIONS = 1;
                    BossActionAttack_5.ST_ATTACK_PLAYER = 2;
                    boss.BossActionAttack_5 = BossActionAttack_5;
                })(boss = gameBrawler.boss || (gameBrawler.boss = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BossActionAttack_5 = com.bamtang.project.gameBrawler.boss.BossActionAttack_5;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var boss;
                (function (boss) {
                    class BossActionAttack_6 extends BaseEnemyAction {
                        constructor(enemy) {
                            super(enemy);
                            this.state = 0;
                            this.posInitX = 0;
                            this.posInitY = 0;
                            this.m_idPointPath = 0;
                            this.m_time = 0;
                            this.m_time_dizzy = 0;
                            this.m_idAttack = 0;
                            this.m_rangeStand = 10;
                            this.m_time_fall = 0;
                            this.m_laser_range = 1000;
                            this.m_spped_bullet = 0.5;
                            this.m_time_waiting_post_attack = 5000;
                            this.m_speed_movement = 0.25;
                            this.m_time_waiting = 4000;
                            this.m_num_minions = 2;
                            this.m_health_enemys = 10;
                            this.m_cooldown_dizzy = 3000;
                            this.m_delay_fall = 3500;
                            this.m_speed_movement_to_player = 0;
                            this.m_size_bullet = 1;
                            this.loadNodesOfAttack();
                            this.initializePointFallObject();
                            this.posInitX = this.mEnemyRef.posInitX;
                            this.posInitY = this.mEnemyRef.posInitY;
                        }
                        /*override*/ setPaused(paused) {
                            super.setPaused(paused);
                            if (this.mIsPaused) {
                            }
                            else {
                                this.decideAction();
                            }
                        }
                        /*override*/ onActionStarted() {
                            this.state = BossActionAttack_6.ST_MOVEMENT_AND_LASER;
                            this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                            this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                        }
                        decideAction() {
                            if (this.state == BossActionAttack_6.ST_MOVEMENT_AND_LASER) {
                                switch (this.mEnemyRef.getState()) {
                                    case BaseEnemy.ST_HIT_AIR:
                                    case BaseEnemy.ST_HIT:
                                        if (this.mStateAction == BossActionAttack_6.ST_ACTION_WAITING_POST_ATTACK) {
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_FLY);
                                        }
                                        break;
                                    case BaseEnemy.ST_SHOOT:
                                        this.lookPlayer();
                                        this.mEnemyRef.onCreateBullet(this.m_laser_range, this.m_spped_bullet, this.m_size_bullet);
                                        this.mHealthBase = this.mEnemyRef.getHealth();
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_FLY);
                                        this.mStateAction = BossActionAttack_6.ST_ACTION_WAITING_POST_ATTACK;
                                        break;
                                    case boss.Gunter.ST_APPEAR_SHIELD:
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                                        if (this.mHealthBase == this.mEnemyRef.getHealth()) {
                                            this.goNextPointPath();
                                        }
                                        else {
                                            this.gotoPostionInit();
                                        }
                                        break;
                                }
                                return;
                            }
                            if (this.state == BossActionAttack_6.ST_ATTACK_PLAYER) {
                                switch (this.mEnemyRef.getState()) {
                                    case BaseEnemy.ST_HIT_AIR:
                                    case BaseEnemy.ST_HIT:
                                        if (this.mStateAction != BossActionAttack_6.ST_ACTION_DIZZY) {
                                            this.mStateAction = BossActionAttack_6.ST_ACTION_DIZZY;
                                            this.mHealthBase = this.mEnemyRef.getHealth();
                                        }
                                        this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                        break;
                                    case BaseEnemy.ST_DIZZI:
                                        this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                        break;
                                    case boss.Gunter.ST_APPEAR_SHIELD:
                                        this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                                        this.gotoPostionInit();
                                        break;
                                }
                            }
                        }
                        /*override*/ update(dt) {
                            if (this.mIsPaused == true) {
                                return;
                            }
                            if (this.state == BossActionAttack_6.ST_MOVEMENT_AND_LASER) {
                                switch (this.mStateAction) {
                                    case BaseEnemyAction.ST_ACTION_NONE:
                                        this.lookPlayer();
                                        if (this.isNodeAttack()) {
                                            this.startActionWaiting();
                                            this.m_idAttack++;
                                            this.m_idAttack = this.m_idAttack % this.indexNodesOfAttack.length;
                                        }
                                        else {
                                            this.goNextPointPath();
                                        }
                                        break;
                                    case BaseEnemyAction.ST_ACTION_WAITING:
                                        this.m_time += dt;
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        this.lookPlayer();
                                        if (this.m_time >= this.m_time_waiting) {
                                            this.m_time = 0;
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_SHOOT);
                                            this.mStateAction = BossActionAttack_6.ST_ACTION_SHOOT;
                                        }
                                        break;
                                    case BossActionAttack_6.ST_ACTION_SHOOT:
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        break;
                                    case BossActionAttack_6.ST_ACTION_WAITING_POST_ATTACK:
                                        this.m_time += dt;
                                        this.standMovement.update(dt);
                                        this.mEnemyRef.setX(this.standMovement.x());
                                        this.mEnemyRef.setY(this.standMovement.y());
                                        this.lookPlayer();
                                        var tmp = this.mEnemyRef.healthPercent(this.mHealthBase);
                                        if (this.m_time >= this.m_time_waiting_post_attack || tmp >= this.m_damage_attack) {
                                            this.m_time = 0;
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_APPEAR_SHIELD);
                                            this.mStateAction = BossActionAttack_6.ST_ACTION_APPEAR_SHIELD;
                                        }
                                        break;
                                    case BossActionAttack_6.ST_ACTION_APPEAR_SHIELD:
                                        this.lookPlayer();
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                        this.parabolicMovement.update(dt);
                                        this.mEnemyRef.setX(this.parabolicMovement.x());
                                        this.mEnemyRef.setY(this.parabolicMovement.y());
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_LINEAR:
                                        this.linearMovement.update(dt);
                                        this.mEnemyRef.setX(this.linearMovement.x());
                                        this.mEnemyRef.setY(this.linearMovement.y());
                                        break;
                                }
                            }
                            if (this.state == BossActionAttack_6.ST_ATTACK_PLAYER) {
                                this.m_time_fall += dt;
                                if (this.m_time_fall >= this.m_delay_fall) {
                                    this.m_time_fall = 0;
                                    this.onCreateFallingObject();
                                }
                                switch (this.mStateAction) {
                                    case BaseEnemyAction.ST_ACTION_NONE:
                                        this.m_time += dt;
                                        if (this.m_time >= 0) {
                                            this.launchedToPlayer();
                                        }
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_LINEAR:
                                        this.linearMovement.update(dt);
                                        this.tmpX = this.linearMovement.x();
                                        this.tmpY = this.linearMovement.y();
                                        this.mEnemyRef.setX(this.tmpX);
                                        this.mEnemyRef.setY(this.tmpY);
                                        this.lookPlayer();
                                        break;
                                    case BaseEnemyAction.ST_ACTION_WAITING:
                                        this.m_time += dt;
                                        this.lookPlayer();
                                        if (this.m_time >= this.m_time_waiting_attack_player) {
                                            this.m_time = 0;
                                            if (Math.abs(this.mEnemyRef.world().player().x() - this.mEnemyRef.x()) < 80 && Math.abs(this.mEnemyRef.world().player().y() - this.mEnemyRef.y()) < 80) {
                                                this.gotoPostionInit();
                                            }
                                            else {
                                                this.launchedToPlayer();
                                            }
                                        }
                                        break;
                                    case BossActionAttack_6.ST_ACTION_DIZZY:
                                        this.m_time_dizzy += dt;
                                        this.m_time_fall = 0;
                                        if (this.m_time_dizzy >= this.m_cooldown_dizzy || this.mEnemyRef.healthPercent(this.mHealthBase) >= this.m_damage_attack) {
                                            this.m_time_dizzy = 0;
                                            this.m_time = 0;
                                            this.mStateAction = BossActionAttack_6.ST_ACTION_APPEAR_SHIELD;
                                            this.mEnemyRef.gotoState(boss.Gunter.ST_APPEAR_SHIELD);
                                        }
                                        break;
                                    case BossActionAttack_6.ST_ACTION_APPEAR_SHIELD:
                                        this.lookPlayer();
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                        this.parabolicMovement.update(dt);
                                        this.mEnemyRef.setX(this.parabolicMovement.x());
                                        this.mEnemyRef.setY(this.parabolicMovement.y());
                                        break;
                                }
                            }
                        }
                        goNextPointPath() {
                            this.m_idPointPath++;
                            this.m_idPointPath = this.m_idPointPath % 6;
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[this.m_idPointPath]).x;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[this.m_idPointPath]).y;
                            if (this.m_idPointPath == 0 || this.m_idPointPath == 3) {
                                this.startParabolicMovement(this.tmpX, this.tmpY, -0.07, this.m_speed_movement);
                            }
                            else {
                                this.startLinearMovement(this.tmpX, this.tmpY, this.m_speed_movement);
                            }
                        }
                        loadNodesOfAttack() {
                            this.indexNodesOfAttack = new Array();
                            this.indexNodesOfAttack.push(0);
                            this.indexNodesOfAttack.push(1);
                            this.indexNodesOfAttack.push(2);
                            this.indexNodesOfAttack.push(3);
                            this.indexNodesOfAttack.push(4);
                            this.indexNodesOfAttack.push(5);
                        }
                        initializePointFallObject() {
                            var range = 50;
                            this.m_pointFallObject = new Array();
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[0]).x - range;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[0]).y + range;
                            this.m_pointFallObject.push(new Vector2D(this.tmpX, this.tmpY));
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[2]).x - range;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[2]).y - range;
                            this.m_pointFallObject.push(new Vector2D(this.tmpX, this.tmpY));
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[3]).x + range;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[3]).y + range;
                            this.m_pointFallObject.push(new Vector2D(this.tmpX, this.tmpY));
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[5]).x + range;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[5]).y - range;
                            this.m_pointFallObject.push(new Vector2D(this.tmpX, this.tmpY));
                        }
                        isNodeAttack() {
                            return (this.m_idPointPath == this.indexNodesOfAttack[this.m_idAttack]);
                        }
                        launchedToPlayer() {
                            this.mEnemyRef.gotoState(BaseEnemy.ST_DASH);
                            var range = 90;
                            for (var i = 0; i < this.m_pointFallObject.length; i++) {
                                this.tmpX = this.m_pointFallObject[i].x;
                                this.tmpY = this.m_pointFallObject[i].y;
                                if (Math.abs(this.tmpX - this.mPlayerRef.x()) < range && Math.abs(this.tmpY - this.mPlayerRef.y()) < range) {
                                    this.startLinearMovement(this.tmpX, this.tmpY, this.m_speed_movement_to_player);
                                    this.lookPlayer();
                                    return;
                                }
                            }
                            this.gotoPositionPlayer(0.5);
                        }
                        onCreateFallingObject() {
                            for (var i = 0; i < this.m_pointFallObject.length; i++) {
                                this.tmpX = new Vector2D(this.m_pointFallObject[i]).x;
                                this.tmpY = new Vector2D(this.m_pointFallObject[i]).y;
                                this.mEnemyRef.onCreateFallingObject(this.m_speed_fall[i], 500, 0, this.tmpX, this.tmpY, "");
                            }
                        }
                        startParabolicMovement(tx, ty, gravity, speed) {
                            this.parabolicMovement = new ParametricParabolicMovement(this.mEnemyRef.x(), this.mEnemyRef.y(), tx, ty, gravity, speed / 10);
                            this.parabolicMovement.endCallback = this.endMovement.bind(this);
                            this.mStateAction = BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR;
                        }
                        startLinearMovement(tx, ty, speed) {
                            this.linearMovement = new LinearMovement(this.mEnemyRef.x(), this.mEnemyRef.y(), speed);
                            this.linearMovement.gotoPosition(tx, ty, speed);
                            this.linearMovement.endCallback = this.endMovementLinear.bind(this);
                            this.mStateAction = BaseEnemyAction.ST_ACTION_MOVE_LINEAR;
                        }
                        endMovement(movement) {
                            if (this.state == BossActionAttack_6.ST_MOVEMENT_AND_LASER) {
                                switch (this.mStateAction) {
                                    case BaseEnemyAction.ST_ACTION_WAITING:
                                    case BossActionAttack_6.ST_ACTION_WAITING_POST_ATTACK:
                                        this.gotoStandCharacter();
                                        break;
                                    case BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                        if (this.mHealthBase == this.mEnemyRef.getHealth()) {
                                            this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                        }
                                        else {
                                            this.state = BossActionAttack_6.ST_ATTACK_PLAYER;
                                            this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                        }
                                        break;
                                }
                                return;
                            }
                            if (this.state == BossActionAttack_6.ST_ATTACK_PLAYER) {
                                switch (this.mStateAction) {
                                    case BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                        this.state = BossActionAttack_6.ST_MOVEMENT_AND_LASER;
                                        this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                        this.m_idAttack = 0;
                                        this.m_idPointPath = 0;
                                        break;
                                }
                            }
                        }
                        endMovementLinear(movement) {
                            if (this.state == BossActionAttack_6.ST_MOVEMENT_AND_LASER) {
                                this.mStateAction = BaseEnemyAction.ST_ACTION_NONE;
                                return;
                            }
                            if (this.state == BossActionAttack_6.ST_ATTACK_PLAYER) {
                                this.mStateAction = BaseEnemyAction.ST_ACTION_WAITING;
                                this.mEnemyRef.gotoState(boss.Gunter.ST_SHIELD);
                                return;
                            }
                        }
                        startActionWaiting() {
                            this.mStateAction = BaseEnemyAction.ST_ACTION_WAITING;
                            this.gotoStandCharacter();
                        }
                        gotoPostionInit() {
                            this.m_idPointPath = 0;
                            this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[0]).x;
                            this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[0]).y;
                            this.startParabolicMovement(this.tmpX, this.tmpY, -0.07, this.m_speed_movement);
                            if (this.posInitX <= this.mEnemyRef.x()) {
                                this.mEnemyRef.setLookAtLeft(true);
                            }
                            else {
                                this.mEnemyRef.setLookAtLeft(false);
                            }
                        }
                        gotoStandCharacter() {
                            this.tmpX = this.mEnemyRef.x();
                            this.tmpY = this.mEnemyRef.y();
                            this.m_rangeStand *= -1;
                            this.standMovement = new ParametricParabolicMovement(this.tmpX, this.tmpY, this.tmpX + this.m_rangeStand, this.tmpY, 0.01, 0.08);
                            this.standMovement.endCallback = this.endMovement.bind(this);
                        }
                        lookPlayer() {
                            if (this.mPlayerRef.x() < this.mEnemyRef.x()) {
                                this.mEnemyRef.setLookAtLeft(true);
                            }
                            else {
                                this.mEnemyRef.setLookAtLeft(false);
                            }
                        }
                        gotoPositionPlayer(speed) {
                            this.tmpX = this.mEnemyRef.world().player().x();
                            this.tmpY = this.mEnemyRef.world().player().y();
                            this.startLinearMovement(this.tmpX, this.tmpY, this.m_speed_movement_to_player);
                            this.lookPlayer();
                        }
                        setParams(param) {
                            this.m_speed_movement = Number(param["speed_movement"]);
                            this.m_speed_movement_to_player = Number(param["speed_movement_to_player"]);
                            this.m_laser_range = Number(param["laser_range"]);
                            this.m_num_minions = Number(param["num_minions"]);
                            this.m_time_waiting = Number(param["time_waiting"]);
                            this.m_time_waiting_post_attack = Number(param["time_waiting_post_attack"]);
                            this.m_time_waiting_attack_player = Number(param["time_waiting_attack_player"]);
                            this.m_delay_fall = Number(param["delay_fall"]);
                            this.m_speed_fall = new Array();
                            this.m_speed_fall.push(Number(param["speed_fall_1"]));
                            this.m_speed_fall.push(Number(param["speed_fall_2"]));
                            this.m_speed_fall.push(Number(param["speed_fall_3"]));
                            this.m_speed_fall.push(Number(param["speed_fall_4"]));
                            this.m_health_enemys = parseInt(param["health_enemys"]);
                            this.m_cooldown_dizzy = parseInt(param["cooldown_dizzy"]);
                            this.m_spped_bullet = Number(param["speed_bullet"]);
                            this.m_cooldown_angry = Number(param["cooldown_angry"]);
                            this.m_damage_attack = Number(param["damage_attack"]);
                            this.m_size_bullet = parseInt(param["size_bullet"]);
                        }
                    }
                    BossActionAttack_6.ST_ACTION_WAITING_POST_ATTACK = 11;
                    BossActionAttack_6.ST_ACTION_ANGRY = 12;
                    BossActionAttack_6.ST_ACTION_DIZZY = 13;
                    BossActionAttack_6.ST_ACTION_SHOOT = 14;
                    BossActionAttack_6.ST_ACTION_APPEAR_SHIELD = 15;
                    BossActionAttack_6.ST_MOVEMENT_AND_LASER = 0;
                    BossActionAttack_6.ST_MINIONS = 1;
                    BossActionAttack_6.ST_ATTACK_PLAYER = 2;
                    boss.BossActionAttack_6 = BossActionAttack_6;
                })(boss = gameBrawler.boss || (gameBrawler.boss = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BossActionAttack_6 = com.bamtang.project.gameBrawler.boss.BossActionAttack_6;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var boss;
                (function (boss) {
                    class BossDefeat extends BRW_WorldActorExt {
                        constructor(canvas, world, x, y) {
                            super(canvas, world, x, y);
                            this.LAST_FRAME = 205;
                        }
                        setClipDefeat(clipName) {
                            this.setActorClip(clipName);
                            this.m_clip.scale.x = 1.2 * project.Global.CLIPS_SCALE;
                            this.m_clip.scale.y = 1.2 * project.Global.CLIPS_SCALE;
                        }
                    }
                    boss.BossDefeat = BossDefeat;
                })(boss = gameBrawler.boss || (gameBrawler.boss = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BossDefeat = com.bamtang.project.gameBrawler.boss.BossDefeat;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var boss;
                (function (boss) {
                    class BulletBoss extends BRW_WorldActorExt {
                        constructor(clipName, world, owner, x, y, speed, damage, scale, dir = 1, horizontal = true, distance = 600, weak = true) {
                            super(world.objectsCanvas(), world, x, y);
                            this.stateBullet = 0;
                            this.setActorClip(clipName);
                            this.setActorClipTrail("ani_fx_boss01_laserbeam_trail");
                            this.mDamage = damage;
                            this.mRange = distance;
                            this.mDirection = dir;
                            this.mReceivePlayerAttack = true;
                            this.mWeakMode = weak;
                            this.mMove = new LinearMovement(x, y, speed);
                            this.mMove.endCallback = this.onEndMove.bind(this);
                            this.mMove.gotoPosition(this.m_world.player().x(), this.m_world.player().y() - 10);
                            this.setRangeControlled(false);
                            this.m_clip.play();
                            this.m_clip_trail.play();
                            this.m_clip.scale.x = scale * project.Global.CLIPS_SCALE;
                            this.m_clip.scale.y = scale * project.Global.CLIPS_SCALE;
                            this.m_clip_trail.scale.x = scale * project.Global.CLIPS_SCALE;
                            this.m_clip_trail.scale.y = scale * project.Global.CLIPS_SCALE;
                            this.mTarget = 0;
                            var dsX = this.m_world.player().x() - this.m_x;
                            var dsY = this.m_world.player().y() - this.m_y - 10;
                            this.m_clip_trail.rotation = Math.atan2(dsY, dsX) * 180 / Math.PI + 180;
                            this.updateBoundsAttack();
                            this.updateBoundsBody();
                        }
                        getTarget() { return this.mTarget; }
                        setReceivePlayerAttack(value) { this.mReceivePlayerAttack = value; }
                        setTarget(target, changeDirection = false) {
                            this.mTarget = target;
                            if (changeDirection) {
                                this.mDirection *= -1;
                                this.mMove.resetPosition(this.m_x, this.m_y);
                                this.mMove.gotoPosition(this.m_world.player().x(), this.m_world.player().y());
                            }
                        }
                        onEndMove(linearMovemente) {
                            if (this.stateBullet != BulletBoss.ST_HIT) {
                                this.onHitBullet();
                            }
                        }
                        /*override*/ update(dt) {
                            this.mMove.update(dt);
                            this.m_x = this.mMove.x();
                            this.m_y = this.mMove.y();
                            var actorsGroup = this.m_world.actorManager().actors;
                            var actor = null;
                            var k = 0;
                            if (this.stateBullet != BulletBoss.ST_HIT) {
                                if (this.mTarget & BulletBoss.TARGET_PLAYER) {
                                    if (this.m_world.player().hitTestReceivedAttack(this, false)) {
                                        this.m_world.player().onEnemyCollision(this, this.mDamage, !this.mWeakMode);
                                        if (this.mWeakMode) {
                                            this.onHitBullet();
                                            this.mTarget = 0;
                                        }
                                    }
                                    else if (this.mReceivePlayerAttack) {
                                    }
                                }
                                if (this.mTarget & BulletBoss.TARGET_BREAKABLES) {
                                    for (k = actorsGroup.length - 1; (k >= 0) && !this.m_isAwaitingDelete; --k) {
                                        actor = actorsGroup[k];
                                        if (actor.isIdle()) {
                                            continue;
                                        }
                                        if (actor instanceof Breakable && actor.isInCamera(this.m_world.camera())) {
                                            if (actor.hitTestReceivedAttack(this)) {
                                                actor.onHit(this.mDamage);
                                                if (this.mWeakMode) {
                                                    this.onHitBullet();
                                                    this.mTarget = 0;
                                                }
                                            }
                                        }
                                    }
                                }
                                if (this.mTarget & BulletBoss.TARGET_ENEMY) {
                                    for (k = actorsGroup.length - 1; (k >= 0) && !this.m_isAwaitingDelete; --k) {
                                        actor = actorsGroup[k];
                                        if (actor.isIdle()) {
                                            continue;
                                        }
                                        if (actor instanceof BaseEnemy && actor.isEnabled()) {
                                            if (actor.hitTestReceivedAttack(this)) {
                                                actor.onHit(this.mDamage, this);
                                                if (this.mWeakMode) {
                                                    this.onHitBullet();
                                                    this.mTarget = 0;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            super.update(dt);
                            if (this.m_clip_trail != null) {
                                this.m_clip_trail.x = this.m_x - this.m_world.camera().x();
                                this.m_clip_trail.y = this.m_y - this.m_world.camera().y();
                            }
                            if (this.stateBullet == BulletBoss.ST_HIT && this.m_clip.currentFrame >= this.m_clip.totalFrames) {
                                this.m_isAwaitingDelete = true;
                            }
                        }
                        onHitBullet() {
                            if (this.m_clip) {
                                this.m_canvas.removeChild(this.m_clip);
                                this.m_canvas.removeChild(this.m_clip_trail);
                                try {
                                    this.m_clip_trail.destroy();
                                }
                                catch (e) { }
                                this.m_clip_trail = null;
                            }
                            this.stateBullet = BulletBoss.ST_HIT;
                            this.setActorClip("ani_fx_boss01_laserbeam_hit");
                            this.m_clip.play();
                        }
                        /*override*/ createCorners() { }
                        /*override*/ free() {
                            if (this.m_clip_trail) {
                                this.m_canvas.removeChild(this.m_clip_trail);
                                try {
                                    this.m_clip_trail.destroy();
                                }
                                catch (e) { }
                            }
                            super.free();
                            this.mMove = null;
                        }
                        setActorClipTrail(clipName) {
                            if (clipName) {
                                this.m_clip_trail = Application.instance.getClip(clipName);
                                this.m_canvas.addChild(this.m_clip_trail);
                            }
                        }
                    }
                    BulletBoss.TARGET_PLAYER = 1;
                    BulletBoss.TARGET_ENEMY = 2;
                    BulletBoss.TARGET_BREAKABLES = 4;
                    BulletBoss.ST_HIT = 1;
                    BulletBoss.ST_MOVE = 0;
                    boss.BulletBoss = BulletBoss;
                })(boss = gameBrawler.boss || (gameBrawler.boss = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BulletBoss = com.bamtang.project.gameBrawler.boss.BulletBoss;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var boss;
                (function (boss) {
                    class Gunter extends BaseEnemy {
                        constructor(canvas, world, x, y, npc) {
                            super(canvas, world, x, y, npc);
                            this.behavior = 0;
                            this.posInitX = 0;
                            this.posInitY = 0;
                            this.width = 300;
                            this.height = 150;
                            this.pathPoints = new Array();
                            this.enemies = new Array();
                            this.bulletSpeed = 0.7;
                            this.bulletDamage = 5;
                            this.m_range = 500;
                            this.m_timeStand = 0;
                            this.m_rangeStand = 20;
                            this.m_numEnemies = 0;
                            this.loadData(xml2js(project.Global.app.getXMLData("dtBoss"), { compact: true, spaces: 4 }).data);
                            this.posInitX = this.m_x + this.width / 2;
                            this.posInitY = this.m_y - this.height / 2;
                            this.createPathPoints();
                            this.mTestStateDied = false;
                            this.mInitActionDelay = 2000;
                            this.gotoBehavior(Gunter.BH_BOSS_1);
                            Gunter.instance = this;
                        }
                        loadData(data) {
                            for (var xd in data.state) {
                                for (var xd1 in data.state[xd]) {
                                    for (var xd2 in data.state[xd][xd1]) {
                                        if (data.state[xd][xd1].length != 1)
                                            if (data.state[xd][xd1][xd2] != undefined)
                                                for (var xd3 in data.state[xd][xd1][xd2])
                                                    if (data.state[xd][xd1][xd2] && data.state[xd][xd1][xd2][xd3] && data.state[xd][xd1][xd2][xd3].name != undefined && data.state[xd][xd1][xd2][xd3].value != undefined) {
                                                        data.state[xd][xd1][xd2] = data.state[xd][xd1][xd2][xd3];
                                                    }
                                    }
                                }
                            }
                            this.dataAction1 = new Object();
                            this.dataAction2 = new Object();
                            this.dataAction3 = new Object();
                            this.dataAction4 = new Object();
                            var i = 1;
                            for (var dataState in data.state) {
                                for (var dataProperty in data.state[dataState]["property"]) {
                                    var name = data.state[dataState]["property"][dataProperty]["name"];
                                    var value = data.state[dataState]["property"][dataProperty]["value"];
                                    if (i == 1)
                                        this.dataAction1[String(name)] = value;
                                    if (i == 2)
                                        this.dataAction2[String(name)] = value;
                                    if (i == 3)
                                        this.dataAction3[String(name)] = value;
                                    if (i == 4)
                                        this.dataAction4[String(name)] = value;
                                }
                                i++;
                            }
                            this.width = parseInt(this.dataAction4["width"]);
                            this.height = parseInt(this.dataAction4["height"]);
                        }
                        nextBossAction() {
                            this.gotoBehavior(this.behavior + 1);
                        }
                        gotoBehavior(b) {
                            this.behavior = b;
                            switch (this.behavior) {
                                case Gunter.BH_BOSS_1:
                                    this.mBaseAction = new boss.BossActionAttack_4(this);
                                    this.mBaseAction.setParams(this.dataAction1);
                                    break;
                                case Gunter.BH_BOSS_2:
                                    this.mBaseAction = new boss.BossActionAttack_5(this);
                                    this.mBaseAction.setParams(this.dataAction2);
                                    this.mBaseAction.startAction(0);
                                    break;
                                case Gunter.BH_BOSS_3:
                                    this.mBaseAction = new boss.BossActionAttack_6(this);
                                    this.mBaseAction.setParams(this.dataAction3);
                                    this.mBaseAction.startAction(0);
                                    break;
                            }
                        }
                        createPathPoints() {
                            this.pathPoints = new Array();
                            this.pathPoints[0] = new Vector2D(this.posInitX, this.posInitY);
                            this.pathPoints[1] = new Vector2D(this.posInitX, this.posInitY + this.height / 2);
                            this.pathPoints[2] = new Vector2D(this.posInitX, this.posInitY + this.height);
                            this.pathPoints[3] = new Vector2D(this.posInitX - this.width, this.posInitY);
                            this.pathPoints[4] = new Vector2D(this.posInitX - this.width, this.posInitY + this.height / 2);
                            this.pathPoints[5] = new Vector2D(this.posInitX - this.width, this.posInitY + this.height);
                        }
                        /*override*/ initCharacterStates() {
                            this.m_character.addState(String(BaseEnemy.ST_STAND), "mcAniChBoss01Stand");
                            this.m_character.addState(String(BaseEnemy.ST_DASH), "mcAniChBoss01Dash");
                            this.m_character.addState(String(BaseEnemy.ST_DIZZI), "mcAniChBoss01Dizzy");
                            this.m_character.addState(String(BaseEnemy.ST_ALERT), "mcAniChBoss01Alert");
                            this.m_character.addState(String(Gunter.ST_ANGRY), "mcAniChBoss01Angry");
                            this.m_character.addState(String(BaseEnemy.ST_WALK), "mcAniChBoss01SpecialFloat");
                            this.m_character.addState(String(BaseEnemy.ST_APPEAR), "mcAniChBoss01Appear");
                            this.m_character.addState(String(BaseEnemy.ST_DIE), "mcAniChBoss01Defeat");
                            this.m_character.addState(String(Gunter.ST_FLY), "mcAniChBoss01Fly");
                            this.m_character.addState(String(BaseEnemy.ST_HIT), "mcAniChBoss01Hit");
                            this.m_character.addState(String(BaseEnemy.ST_KNOCK), "mcAniChBoss01Hit");
                            this.m_character.addState(String(BaseEnemy.ST_HIT_AIR), "mcAniChBoss01Hitair");
                            this.m_character.addState(String(Gunter.ST_SHIELD), "mcAniChBoss01Shield");
                            this.m_character.addState(String(Gunter.ST_SPECIAL_FLOAT), "mcAniChBoss01SpecialFloat");
                            this.m_character.addState(String(Gunter.ST_SPECIAL_STAND), "mcAniChBoss01SpecialStand");
                            this.m_character.addState(String(Gunter.ST_SPECIAL_TURN_LEFT), "mcAniChBoss01SpecialTurnLeft");
                            this.m_character.addState(String(Gunter.ST_SPECIAL_TURN_RIGHT), "mcAniChBoss01SpecialTurnRight");
                            this.m_character.addState(String(Gunter.ST_SUMMON), "mcAniChBoss01Summon");
                            this.m_character.addState(String(BaseEnemy.ST_SHOOT), "mcAniChBoss01Shoot");
                            this.m_character.addState(String(Gunter.ST_APPEAR_SHIELD), "mcAniChBoss01ShieldCharge");
                        }
                        /*override*/ gotoState(state) {
                            super.gotoState(state);
                            switch (this.m_state) {
                                case BaseEnemy.ST_HIT_AIR:
                                case BaseEnemy.ST_HIT:
                                    this.mBaseAction.setPaused(true);
                                    project.Global.app.stopSound("snd_atb_boss_weg_shield");
                                    project.Global.app.playSound("snd_atb_boss_weg_gethit");
                                    break;
                                case BaseEnemy.ST_DIE:
                                    project.Global.app.stopSound("snd_atb_boss_weg_shield");
                                    project.Global.app.playSound("snd_atb_boss_weg_defeat");
                                    this.killEnemies();
                                    break;
                                case Gunter.ST_SHIELD:
                                    project.Global.app.playSound("snd_atb_boss_weg_shield");
                                    break;
                                case Gunter.ST_FLY:
                                    project.Global.app.stopSound("snd_atb_boss_weg_shield");
                                    break;
                                case BaseEnemy.ST_DIZZI:
                                    project.Global.app.stopSound("snd_atb_boss_weg_shield");
                                    break;
                                case BaseEnemy.ST_DASH:
                                    project.Global.app.stopSound("snd_atb_boss_weg_shield");
                                    break;
                                case BaseEnemy.ST_ALERT:
                                case BaseEnemy.ST_STAND:
                                    project.Global.app.stopSound("snd_atb_boss_weg_shield");
                                    break;
                                case Gunter.ST_SUMMON:
                                    this.mBaseAction.setPaused(true);
                                    project.Global.app.stopSound("snd_atb_boss_weg_shield");
                                    break;
                            }
                        }
                        /*override*/ onHit(damage, abusive) {
                            return super.onHit(damage, abusive);
                        }
                        /*override*/ onEndAnimation(state) {
                            switch (parseInt(state)) {
                                case BaseEnemy.ST_APPEAR:
                                    gameBrawler.HudBrawler.instance.showEnemyBarBoss();
                                    if (this.mBaseAction != null) {
                                        this.mInitActionDelay = 0;
                                        this.mBaseAction.startAction(this.mInitActionDelay);
                                    }
                                    this.mIsEnabled = true;
                                    break;
                                case BaseEnemy.ST_KNOCK:
                                case BaseEnemy.ST_HIT_AIR:
                                case BaseEnemy.ST_HIT:
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case BaseEnemy.ST_DIE:
                                    this.gotoState(BaseEnemy.ST_END_DIE);
                                    this.remove();
                                    gameBrawler.HudBrawler.instance.hideEnemyBarBoss();
                                    this.onCreateBossDefeat();
                                    this.mIsEnabled = false;
                                    break;
                                case Gunter.ST_SUMMON:
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case Gunter.ST_ANGRY:
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case BaseEnemy.ST_DIZZI:
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case Gunter.ST_SHIELD:
                                    break;
                                case BaseEnemy.ST_SHOOT:
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case Gunter.ST_APPEAR_SHIELD:
                                    this.mBaseAction.setPaused(false);
                                    break;
                            }
                        }
                        /*override*/ update(dt) {
                            //if (!Main.isNumeric(this.m_x))  debugger;
                            super.update(dt);
                        }
                        onCreateBossDefeat() {
                            var bossDefeat = new boss.BossDefeat(this.m_world.objectsCanvas(), this.m_world, this.m_x, this.m_y);
                            bossDefeat.setClipDefeat("mcAniChBoss01DefeatStand");
                            if (this.mToLeft == false) {
                                bossDefeat.clip().scale.x *= -1;
                            }
                            this.m_world.actorManager().add(bossDefeat);
                        }
                        onCreateFallingObject(speed, range, timeInit, nx, ny, item) {
                            var npc = new BRW_NpcExt(gameBrawler.ActorManagerBrawler.ITEM_STALACTILE, 0, 0, "", false, "", null);
                            npc.range = range;
                            npc.speed = speed;
                            npc.damage = 20;
                            npc.dropHeight = 400;
                            npc.timeInit = timeInit;
                            npc.item = item;
                            var fallenObject = new Fallen(this.m_world.objectsCanvas(), this.m_world, nx, ny, npc);
                            this.m_world.actorManager().add(fallenObject);
                        }
                        onCreateEnemies(number, health, coverProb = 0) {
                            project.Global.app.playSound("snd_atb_boss_weg_summonpenguins");
                            this.m_numEnemies = number;
                            this.enemies = new Array(number);
                            var sigma = 0;
                            for (var i = 0; i < this.enemies.length; i++) {
                                var npc = new BRW_NpcExt(gameBrawler.ActorManagerBrawler.ITEM_ENEMY, 0, 0, "", false, "", null);
                                npc.health = health;
                                npc.damage = 20;
                                npc.skin = "mc_enemy_06";
                                npc.speed = 0.07;
                                npc.typeAction = "fighter_1";
                                npc.initAction = EnemyFighter.ACTION_FIGHTER;
                                npc.params = String("name:TXT_NAME_ENEMY;coverProb:" + coverProb.toString());
                                if (i == 1) {
                                    sigma = 60;
                                }
                                else if (i == 2) {
                                    sigma = -60;
                                }
                                else {
                                    sigma = 0;
                                }
                                var tmpX = this.m_world.camera().x() + this.m_world.camera().width / 2 + sigma;
                                var tmpY = this.m_world.camera().y() + this.m_world.camera().height / 2 + 120;
                                this.enemies[i] = new EnemyFighter(this.m_world.objectsCanvas(), this.m_world, tmpX, tmpY, npc);
                                this.enemies[i].setScaleFromGunter();
                                this.enemies[i].boss = this;
                                this.m_world.actorManager().add(this.enemies[i]);
                            }
                        }
                        onCreateBullet(range, speed, size = 0) {
                            var fdist = (this.isLookingToLeft() ? -1 : 1);
                            var dtX = this.m_x - this.m_world.player().x();
                            var dtY = this.m_y - this.m_world.player().y();
                            var norm = Math.sqrt(dtX * dtX + dtY * dtY);
                            var nX = dtX / (norm);
                            var nY = dtY / norm;
                            var shift = 50;
                            var bullet = new boss.BulletBoss("ani_fx_boss01_laserbeam", this.m_world, this, this.m_x + shift * nX, this.m_y + shift * nY, speed, this.bulletDamage, size, fdist, false, range);
                            bullet.setTarget(boss.BulletBoss.TARGET_PLAYER | boss.BulletBoss.TARGET_BREAKABLES);
                            this.m_world.actorManager().add(bullet);
                            project.Global.app.playSound("snd_atb_boss_weg_special");
                        }
                        /*override*/ free() {
                            this.mBaseAction.free();
                            this.mBaseAction = null;
                            if (this.mData) {
                                this.mData.free();
                                this.mData = null;
                            }
                            super.free();
                            this.mIsEnabled = false;
                        }
                        /*override*/ applyDamage(damage, abusive) {
                            if (!this.mCanGetHit || !this.mIsEnabled) {
                                return false;
                            }
                            var attackMode = this.m_world.player().getAttackMode();
                            if (abusive instanceof gameBrawler.PlayerBrawler &&
                                (attackMode == gameBrawler.PlayerBrawler.MODE_ATTACK_SPECIAL_FEAR_FEASTER || attackMode == gameBrawler.PlayerBrawler.MODE_ATTACK_SPECIAL_BIG_FEET_FULL || attackMode == gameBrawler.PlayerBrawler.MODE_ATTACK_SPECIAL_SHARK_SWORD_FULL)) {
                                if (abusive.specialTick % 5 != 0) {
                                    damage = 0;
                                    return false;
                                }
                            }
                            this.mHealth -= damage;
                            if (this.mHealth <= 0) {
                                this.mHealth = 0;
                                this.mCanGetHit = false;
                            }
                            var porcent = (100 * this.mHealth / this.mHealthBase);
                            gameBrawler.HudBrawler.instance.setEnemyEnergy(porcent, this.mSkin, "", true);
                            this.m_world.game().onEnemyKicked(this, abusive);
                            return true;
                        }
                        /*override*/ hitTestReceivedAttack(actor, check = true) {
                            if (actor instanceof gameBrawler.PlayerBrawler && (this.m_state == Gunter.ST_SHIELD || this.m_state == BaseEnemy.ST_DASH)) {
                                return false;
                            }
                            return super.hitTestReceivedAttack(actor, check);
                        }
                        /*override*/ onHitAir(damage, abusive, lastHit, pendingBounce = false) {
                            if (this.applyDamage(damage, abusive)) {
                                if (!this.mJumpControl.isJump) {
                                    Application.error("This enemy is not jumping", "BaseEnemy::onHitAir()");
                                    return;
                                }
                                if (this.mHealth == 0) {
                                    this.mCanGetHit = true;
                                }
                                this.m_character.addState(String(BaseEnemy.ST_HIT_AIR), this.mSkin + "_hit_air");
                                this.mJumpControl.applyForceY(-30);
                                this.gotoState(BaseEnemy.ST_HIT_AIR);
                            }
                        }
                        /*override*/ onProcessAttackToPlayer() {
                            if (this.m_world.player().hitTestReceivedAttack(this)) {
                                this.m_world.player().onEnemyCollision(this, this.mDamage, true);
                            }
                        }
                        enemyDie() {
                            this.m_numEnemies--;
                        }
                        allMinionsAreDead() {
                            return (this.m_numEnemies <= 0);
                        }
                        killEnemies() {
                            for (var k = 0; k < this.enemies.length; k++) {
                                if (this.enemies[k] != null) {
                                    if (this.enemies[k] instanceof BaseEnemy) {
                                        this.enemies[k].markToDisappear();
                                    }
                                }
                            }
                        }
                        /*override*/ onKnock(damage, abusive, thrown = false, lastHit = false) {
                            if (this.applyDamage(damage, abusive)) {
                                if (this.mHealth > 0) {
                                    this.gotoState(BaseEnemy.ST_HIT);
                                }
                                else {
                                    this.gotoState(BaseEnemy.ST_DIE);
                                }
                                if (this.mBaseAction) {
                                    this.mBaseAction.setPaused(true);
                                }
                                if (!thrown && (abusive == this.m_world.player())) {
                                    this.createHitEffect();
                                }
                                return true;
                            }
                            return false;
                        }
                        /*override*/ onKnockUpward(damage, abusive) {
                            if (this.applyDamage(damage, abusive)) {
                                if (this.mHealth > 0) {
                                    this.gotoState(BaseEnemy.ST_HIT);
                                }
                                else {
                                    this.gotoState(BaseEnemy.ST_DIE);
                                }
                                this.setLookAtLeft(abusive.x() < this.m_x);
                                if (this.mBaseAction) {
                                    this.mBaseAction.setPaused(true);
                                }
                                if (abusive == this.m_world.player()) {
                                    this.createHitEffect();
                                }
                                return true;
                            }
                            return false;
                        }
                        healthPercent(newHealthBase) {
                            return (-100 * (this.mHealth - newHealthBase) / this.mHealthBase);
                        }
                        /*override*/ onDelayComplete() {
                            gameBrawler.HudBrawler.instance.showWarning(this.bossAppears.bind(this));
                        }
                        bossAppears(e) {
                            project.Global.app.playSound("snd_atb_boss_weg_appear");
                            this.gotoState(BaseEnemy.ST_APPEAR);
                            this.setScale(1.2);
                            this.update(0);
                        }
                    }
                    Gunter.ST_ANGRY = 124;
                    Gunter.ST_FLY = 125;
                    Gunter.ST_SHIELD = 126;
                    Gunter.ST_SPECIAL_FLOAT = 127;
                    Gunter.ST_SPECIAL_STAND = 128;
                    Gunter.ST_SPECIAL_TURN_RIGHT = 129;
                    Gunter.ST_SPECIAL_TURN_LEFT = 130;
                    Gunter.ST_SUMMON = 131;
                    Gunter.ST_APPEAR_SHIELD = 132;
                    Gunter.BH_BOSS_1 = 0;
                    Gunter.BH_BOSS_2 = 1;
                    Gunter.BH_BOSS_3 = 2;
                    boss.Gunter = Gunter;
                })(boss = gameBrawler.boss || (gameBrawler.boss = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Gunter = com.bamtang.project.gameBrawler.boss.Gunter;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var boss;
                (function (boss) {
                    var boss2;
                    (function (boss2) {
                        class Boss2ActionAttack_1 extends BaseEnemyAction {
                            constructor(enemy) {
                                super(enemy);
                                this.state = 0;
                                this.posInitX = 0;
                                this.posInitY = 0;
                                this.m_time = 0;
                                this.m_idPointPath = 0;
                                this.m_attack_necromancy = false;
                                this.m_counter_bullets = 0;
                                this.m_time_global = 0;
                                this.m_time_stand_vulnerable = 0;
                                this.m_time_warning = 4000;
                                this.m_num_necromany = 0;
                                this.m_counter_teleport = 0;
                                this.posInitX = this.mEnemyRef.posInitX;
                                this.posInitY = this.mEnemyRef.posInitY;
                                this.m_idPointPath = 5;
                            }
                            getIdPointPath() { return this.m_idPointPath; }
                            setIdPointPath(idPointPath) { this.m_idPointPath = idPointPath; }
                            /*override*/ setPaused(paused) {
                                super.setPaused(paused);
                                if (this.mIsPaused) {
                                }
                                else {
                                    this.decideAction();
                                }
                            }
                            /*override*/ onActionStarted() {
                                this.state = Boss2ActionAttack_1.ST_STAND_AND_VULNERABILITY;
                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_STAND;
                                this.m_time = 0;
                                this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                this.mHealthBase = this.mEnemyRef.getHealth();
                                Application.log(" BH == 1, state = ST_STAND_AND_VULNERABILITY && mStateAction = ST_ACTION_STAND");
                            }
                            decideAction() {
                                if (this.state == Boss2ActionAttack_1.ST_STAND_AND_VULNERABILITY) {
                                    switch (this.mEnemyRef.getState()) {
                                        case BaseEnemy.ST_HIT_AIR:
                                        case BaseEnemy.ST_HIT:
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                            break;
                                        case boss2.Lich.ST_MELEE:
                                            this.mStateAction = Boss2ActionAttack_1.ST_ACTION_CHECK_DAMAGE;
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                            Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_CHECK_DAMAGE");
                                            break;
                                    }
                                }
                                if (this.state == Boss2ActionAttack_1.ST_ATTACK_AND_TELEPORT) {
                                    switch (this.mEnemyRef.getState()) {
                                        case BaseEnemy.ST_HIT_AIR:
                                        case BaseEnemy.ST_HIT:
                                            if (this.mStateAction == Boss2ActionAttack_1.ST_ACTION_WARNING) {
                                                this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_WARNING);
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_1.ST_ACTION_DIZZI_S) {
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_1.ST_ACTION_SHOOT || this.mStateAction == Boss2ActionAttack_1.ST_ACTION_FIRST_CREATE_BULLET || this.mStateAction == Boss2ActionAttack_1.ST_ACTION_CREATE_BULLET || this.mStateAction == Boss2ActionAttack_1.ST_ACTION_COOLDOWN_CREATE_BULLET) {
                                                this.mEnemyRef.setShield(false);
                                                this.mEnemyRef.damageInDizziShoot = 0;
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_DIZZI_S;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                                Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_DIZZI_S");
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_1.ST_ACTION_WAITING_POST_SHOOT) {
                                                this.mEnemyRef.setShield(false);
                                                this.mEnemyRef.damageInDizziShoot = 0;
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_DIZZI_S;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                                Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_DIZZI_S");
                                            }
                                            else {
                                                Application.log(" BH == 1, BUGGG function decideAction 1");
                                            }
                                            break;
                                        case boss2.Lich.ST_BOSS_WARNING:
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_IN:
                                            this.goNextPointPath();
                                            this.mStateAction = Boss2ActionAttack_1.ST_ACTION_TELEPORT_DELAY;
                                            Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_TELEPORT_DELAY");
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_OUT:
                                            this.mEnemyRef.setShield(false);
                                            this.lookPlayer();
                                            this.mStateAction = Boss2ActionAttack_1.ST_ACTION_SHOOT;
                                            Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_SHOOT");
                                            break;
                                        case boss2.Lich.ST_BOSS_ATTACK_1:
                                            if (this.m_counter_bullets < (this.m_num_bullet - 1)) {
                                                this.m_counter_bullets++;
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_SHOOT;
                                                Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_SHOOT");
                                            }
                                            else {
                                                this.m_counter_bullets = 0;
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_WAITING_POST_SHOOT;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                                Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_WAITING_POST_SHOOT");
                                            }
                                            break;
                                        case BaseEnemy.ST_DIZZI:
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            break;
                                    }
                                }
                                if (this.state == Boss2ActionAttack_1.ST_VULNERABILITY_AND_TELEPORT) {
                                    switch (this.mEnemyRef.getState()) {
                                        case BaseEnemy.ST_HIT_AIR:
                                        case BaseEnemy.ST_HIT:
                                            if (this.mStateAction == Boss2ActionAttack_1.ST_ACTION_ANGRY) {
                                                this.mEnemyRef.gotoState(boss2.Lich.ST_ANGRY);
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_1.ST_ACTION_WAITING) {
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_1.ST_ACTION_DIZZI_N) {
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_1.ST_ACTION_VULNERABLE) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_DIZZI;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                                Application.log(" BH == 1, state = ST_VULNERABILITY_AND_TELEPORT; mStateAction = ST_ACTION_DIZZI ");
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_1.ST_ACTION_DIZZI) {
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            }
                                            break;
                                        case boss2.Lich.ST_BOSS_ATTACK_2:
                                            this.m_time = 0;
                                            this.mStateAction = Boss2ActionAttack_1.ST_ACTION_DIZZI_N;
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            Application.log(" BH == 1, state = ST_VULNERABILITY_AND_TELEPORT; mStateAction = ST_ACTION_DIZZI_N ");
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_IN:
                                            this.goNextPointPath();
                                            this.mStateAction = Boss2ActionAttack_1.ST_ACTION_TELEPORT_DELAY;
                                            Application.log(" BH == 1, state = ST_VULNERABILITY_AND_TELEPORT; mStateAction = ST_ACTION_TELEPORT_DELAY ");
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_OUT:
                                            if (this.m_attack_necromancy == true) {
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_NECROMANCY;
                                                this.m_num_necromany = 0;
                                                this.m_attack_necromancy = false;
                                                Application.log(" BH == 1, state = ST_VULNERABILITY_AND_TELEPORT; mStateAction = ST_ACTION_NECROMANCY ");
                                            }
                                            else {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_VULNERABLE;
                                                this.m_counter_teleport++;
                                                if (this.m_counter_teleport <= this.m_num_teleport) {
                                                    this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                                    Application.log(" BH == 1, state = ST_VULNERABILITY_AND_TELEPORT; mStateAction = ST_ACTION_VULNERABLE anim STAND");
                                                }
                                                else {
                                                    this.m_counter_teleport = 0;
                                                    this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                                    Application.log(" BH == 3, state = ST_VULNERABILITY_AND_TELEPORT && mStateAction = ST_ACTION_VULNERABLE anim DIZZY");
                                                }
                                            }
                                            this.lookPlayer();
                                            break;
                                        case boss2.Lich.ST_APPEAR_SHIELD:
                                            this.mEnemyRef.setShield(true);
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_ANGRY);
                                            break;
                                    }
                                }
                            }
                            /*override*/ update(dt) {
                                if (this.mIsPaused == true) {
                                    return;
                                }
                                if (this.state == Boss2ActionAttack_1.ST_STAND_AND_VULNERABILITY) {
                                    this.m_time_global += dt;
                                    if (this.m_time_global >= this.m_time_stand_and_vulnerability) {
                                        this.m_time_global = 0;
                                        this.state = Boss2ActionAttack_1.ST_ATTACK_AND_TELEPORT;
                                        this.mStateAction = Boss2ActionAttack_1.ST_ACTION_WARNING;
                                        this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_WARNING);
                                        Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_WARNING");
                                    }
                                    switch (this.mStateAction) {
                                        case Boss2ActionAttack_1.ST_ACTION_STAND:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_stand_vulnerable) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_STAND_ATTACK;
                                                Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_STAND_ATTACK");
                                            }
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_STAND_ATTACK:
                                            this.checkAttackToPlayer();
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_CHECK_DAMAGE:
                                            if (this.changeDamage(this.m_damage_stand_vulnerable) == true) {
                                                this.state = Boss2ActionAttack_1.ST_ATTACK_AND_TELEPORT;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_WARNING;
                                                this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_WARNING);
                                                Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_WARNING");
                                            }
                                            else {
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_STAND;
                                                Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_STAND ");
                                            }
                                            break;
                                    }
                                }
                                if (this.state == Boss2ActionAttack_1.ST_ATTACK_AND_TELEPORT) {
                                    switch (this.mStateAction) {
                                        case Boss2ActionAttack_1.ST_ACTION_WARNING:
                                            this.lookPlayer();
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_warning) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_TELEPORT_IN;
                                                this.setRandNextPoint();
                                                Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_TELEPORT_IN");
                                            }
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_TELEPORT_IN:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_IN);
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_TELEPORT_DELAY:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_teleport_delay) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_TELEPORT_OUT;
                                                Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_TELEPORT_OUT");
                                            }
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_TELEPORT_OUT:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_OUT);
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_SHOOT:
                                            this.lookPlayer();
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_ATTACK_1);
                                            this.mStateAction = Boss2ActionAttack_1.ST_ACTION_FIRST_CREATE_BULLET;
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_FIRST_CREATE_BULLET:
                                            this.lookPlayer();
                                            if (this.mEnemyRef.getCharacter().actor().clip().currentFrame >= 15) {
                                                this.mEnemyRef.onCreateBullet(500, this.m_speed_bullet);
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_COOLDOWN_CREATE_BULLET;
                                                this.m_time = 0;
                                                Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_COOLDOWN_CREATE_BULLET");
                                            }
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_COOLDOWN_CREATE_BULLET:
                                            this.lookPlayer();
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_WAITING_POST_SHOOT:
                                            this.lookPlayer();
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_waiting_post_shoot) {
                                                this.mEnemyRef.setShield(false);
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_TELEPORT_IN;
                                                this.setRandNextPoint();
                                                Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_TELEPORT_IN");
                                            }
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_DIZZI_S:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_dizzi_S ||
                                                this.mEnemyRef.damageInDizziShoot >= this.m_percentHealthLimit * this.mHealthBase) {
                                                this.m_time = 0;
                                                this.state = Boss2ActionAttack_1.ST_VULNERABILITY_AND_TELEPORT;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_ANGRY;
                                                this.mEnemyRef.damageInDizziShoot = 0;
                                                this.mEnemyRef.gotoState(boss2.Lich.ST_APPEAR_SHIELD);
                                                Application.log(" BH == 1, state = ST_VULNERABILITY_AND_TELEPORT; mStateAction = ST_ACTION_ANGRY ");
                                            }
                                            break;
                                    }
                                }
                                if (this.state == Boss2ActionAttack_1.ST_VULNERABILITY_AND_TELEPORT) {
                                    switch (this.mStateAction) {
                                        case Boss2ActionAttack_1.ST_ACTION_ANGRY:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_angry) {
                                                this.mEnemyRef.setShield(false);
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_TELEPORT_IN;
                                                this.setNextPoint(5);
                                                this.m_attack_necromancy = true;
                                                Application.log(" BH == 1, state = ST_VULNERABILITY_AND_TELEPORT; mStateAction = ST_ACTION_TELEPORT_IN ");
                                            }
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_NECROMANCY:
                                            if (this.m_num_necromany >= this.m_necromancy_attacks) {
                                                this.m_num_necromany = 0;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_TELEPORT_IN;
                                                this.setRandNextPoint();
                                                Application.log(" BH == 1, state = ST_VULNERABILITY_AND_TELEPORT; mStateAction = ST_ACTION_TELEPORT_IN ");
                                                break;
                                            }
                                            this.m_num_necromany++;
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_ATTACK_2);
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_DIZZI_N:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_dizzi_N) {
                                                this.m_time = 0;
                                                if (this.m_num_necromany < this.m_necromancy_attacks) {
                                                    this.mStateAction = Boss2ActionAttack_1.ST_ACTION_NECROMANCY;
                                                    Application.log(" BH == 2, state = ST_STAND_AND_VULNERABILITY && mStateAction = ST_ACTION_NECROMANCY");
                                                }
                                                else {
                                                    this.m_num_necromany = 0;
                                                    this.mStateAction = Boss2ActionAttack_1.ST_ACTION_TELEPORT_IN;
                                                    this.setRandNextPoint();
                                                    Application.log(" BH == 1, state = ST_VULNERABILITY_AND_TELEPORT; mStateAction = ST_ACTION_TELEPORT_IN ");
                                                }
                                            }
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_TELEPORT_IN:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_IN);
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_TELEPORT_DELAY:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_teleport_delay) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_TELEPORT_OUT;
                                                Application.log(" BH == 1, state = ST_VULNERABILITY_AND_TELEPORT; mStateAction = ST_ACTION_TELEPORT_OUT ");
                                            }
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_TELEPORT_OUT:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_OUT);
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_VULNERABLE:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_post_teleport_vulnerable) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_1.ST_ACTION_TELEPORT_IN;
                                                this.setRandNextPoint();
                                                Application.log(" BH == 1, state = ST_VULNERABILITY_AND_TELEPORT; mStateAction = ST_ACTION_TELEPORT_IN ");
                                            }
                                            break;
                                        case Boss2ActionAttack_1.ST_ACTION_DIZZI:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_dizzi) {
                                                if (this.mEnemyRef.getHealthPercent() <= this.m_threshold_hp) {
                                                    Application.log(" BH == 1, GO NEXT BEHAVIOR 2");
                                                    this.mEnemyRef.nextBossAction();
                                                }
                                                else {
                                                    this.m_time = 0;
                                                    this.mStateAction = Boss2ActionAttack_1.ST_ACTION_TELEPORT_IN;
                                                    this.setRandNextPoint();
                                                    this.m_attack_necromancy = true;
                                                    Application.log(" BH == 1, state = ST_VULNERABILITY_AND_TELEPORT; mStateAction = ST_ACTION_TELEPORT_IN ");
                                                }
                                            }
                                            break;
                                    }
                                }
                            }
                            checkAttackToPlayer() {
                                var radioAttack = 180;
                                if (Math.abs(this.mEnemyRef.x() - this.mPlayerRef.x()) <= radioAttack && Math.abs(this.mEnemyRef.y() - this.mPlayerRef.y()) <= radioAttack) {
                                    this.lookPlayer();
                                    this.mEnemyRef.gotoState(boss2.Lich.ST_MELEE);
                                }
                                else {
                                    this.mStateAction = Boss2ActionAttack_1.ST_ACTION_CHECK_DAMAGE;
                                    Application.log(" BH == 1, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_CHECK_DAMAGE");
                                }
                            }
                            lookPlayer() {
                                if (this.mPlayerRef.x() < this.mEnemyRef.x()) {
                                    this.mEnemyRef.setLookAtLeft(true);
                                }
                                else {
                                    this.mEnemyRef.setLookAtLeft(false);
                                }
                            }
                            changeDamage(ratio_damage) {
                                return (this.mEnemyRef.healthPercent(this.mHealthBase) >= ratio_damage);
                            }
                            setNextPoint(nextPoint) {
                                this.m_idPointPath = nextPoint;
                            }
                            setRandNextPoint() {
                                var idPointTmp = this.m_idPointPath;
                                this.m_idPointPath = ~~(Math.random() * this.mEnemyRef.pathPoints.length);
                                if (this.m_idPointPath == idPointTmp) {
                                    this.m_idPointPath = (this.m_idPointPath + 1) % (this.mEnemyRef.pathPoints.length);
                                }
                            }
                            goNextPointPath() {
                                if (this.m_idPointPath >= this.mEnemyRef.pathPoints.length) {
                                    this.m_idPointPath = 5;
                                }
                                this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[this.m_idPointPath]).x;
                                this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[this.m_idPointPath]).y;
                                this.mEnemyRef.setPosition(this.tmpX, this.tmpY);
                            }
                            setParams(param) {
                                this.m_time_stand_vulnerable = Number(param["time_stand_vulnerable"]);
                                this.m_time_warning = Number(param["time_warning"]);
                                this.m_time_angry = Number(param["time_angry"]);
                                this.m_damage_stand_vulnerable = Number(param["damage_stand_vulnerable"]);
                                this.m_time_teleport_delay = Number(param["time_teleport_delay"]);
                                this.m_time_waiting_post_shoot = Number(param["time_waiting_post_shoot"]);
                                this.m_time_waiting_post_necromancy = Number(param["time_waiting_post_necromancy"]);
                                this.m_time_post_teleport_vulnerable = Number(param["time_post_teleport_vulnerable"]);
                                this.m_damage_wave = Number(param["damage_wave"]);
                                this.m_speed_bullet = Number(param["speed_bullet"]);
                                this.m_time_dizzi = Number(param["time_dizzi"]);
                                this.m_num_bullet = parseInt(param["num_bullet"]);
                                this.m_time_stand_and_vulnerability = parseInt(param["time_stand_and_vulnerability"]);
                                this.m_cooldown_create_bullet = parseInt(param["cooldown_create_bullet"]);
                                this.m_threshold_hp = parseInt(param["threshold_hp"]);
                                this.m_time_dizzi_N = parseInt(param["time_dizzi_N"]);
                                this.m_time_dizzi_S = parseInt(param["time_dizzi_S"]);
                                this.m_damage_attack_and_teleport = Number(param["damage_attack_and_teleport"]);
                                this.m_num_teleport = parseInt(param["num_teleport"]);
                                this.m_percentHealthLimit = Number(param["percentHealthLimit"]);
                                this.m_necromancy_attacks = parseInt(param["necromancy_attacks"]);
                            }
                        }
                        Boss2ActionAttack_1.ST_STAND_AND_VULNERABILITY = 0;
                        Boss2ActionAttack_1.ST_ATTACK_AND_TELEPORT = 1;
                        Boss2ActionAttack_1.ST_VULNERABILITY_AND_TELEPORT = 2;
                        Boss2ActionAttack_1.ST_ACTION_STAND = 11;
                        Boss2ActionAttack_1.ST_ACTION_STAND_ATTACK = 12;
                        Boss2ActionAttack_1.ST_ACTION_CHECK_DAMAGE = 13;
                        Boss2ActionAttack_1.ST_ACTION_WARNING = 14;
                        Boss2ActionAttack_1.ST_ACTION_TELEPORT_DELAY = 15;
                        Boss2ActionAttack_1.ST_ACTION_SHOOT = 16;
                        Boss2ActionAttack_1.ST_ACTION_TELEPORT_IN = 17;
                        Boss2ActionAttack_1.ST_ACTION_TELEPORT_OUT = 18;
                        Boss2ActionAttack_1.ST_ACTION_WAITING_POST_SHOOT = 19;
                        Boss2ActionAttack_1.ST_ACTION_ANGRY = 20;
                        Boss2ActionAttack_1.ST_ACTION_NECROMANCY = 21;
                        Boss2ActionAttack_1.ST_ACTION_VULNERABLE = 22;
                        Boss2ActionAttack_1.ST_ACTION_DIZZI = 23;
                        Boss2ActionAttack_1.ST_ACTION_CREATE_BULLET = 24;
                        Boss2ActionAttack_1.ST_ACTION_COOLDOWN_CREATE_BULLET = 25;
                        Boss2ActionAttack_1.ST_ACTION_FIRST_CREATE_BULLET = 26;
                        Boss2ActionAttack_1.ST_ACTION_DIZZI_N = 27;
                        Boss2ActionAttack_1.ST_ACTION_DIZZI_S = 28;
                        boss2.Boss2ActionAttack_1 = Boss2ActionAttack_1;
                    })(boss2 = boss.boss2 || (boss.boss2 = {}));
                })(boss = gameBrawler.boss || (gameBrawler.boss = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Boss2ActionAttack_1 = com.bamtang.project.gameBrawler.boss.boss2.Boss2ActionAttack_1;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var boss;
                (function (boss) {
                    var boss2;
                    (function (boss2) {
                        class Boss2ActionAttack_2 extends BaseEnemyAction {
                            constructor(enemy) {
                                super(enemy);
                                this.state = 0;
                                this.posInitX = 0;
                                this.posInitY = 0;
                                this.m_time = 0;
                                this.m_idPointPath = 0;
                                this.m_num_necromany = 0;
                                this.m_counter_bullets = 0;
                                this.m_time_stand_vulnerable = 0;
                                this.m_time_warning = 4000;
                                this.m_counter_teleport = 0;
                                this.posInitX = this.mEnemyRef.posInitX;
                                this.posInitY = this.mEnemyRef.posInitY;
                                this.m_idPointPath = 5;
                            }
                            getIdPointPath() { return this.m_idPointPath; }
                            setIdPointPath(idPointPath) { this.m_idPointPath = idPointPath; }
                            /*override*/ setPaused(paused) {
                                super.setPaused(paused);
                                if (this.mIsPaused) {
                                }
                                else {
                                    this.decideAction();
                                }
                            }
                            /*override*/ onActionStarted() {
                                this.state = Boss2ActionAttack_2.ST_STAND_AND_VULNERABILITY;
                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_ANGRY;
                                this.mHealthBase = this.mEnemyRef.getHealth();
                                this.mEnemyRef.gotoState(boss2.Lich.ST_APPEAR_SHIELD);
                                Application.log(" BH == 2, state = ST_STAND_AND_VULNERABILITY && mStateAction = ST_ACTION_ANGRY");
                            }
                            decideAction() {
                                if (this.state == Boss2ActionAttack_2.ST_STAND_AND_VULNERABILITY) {
                                    switch (this.mEnemyRef.getState()) {
                                        case BaseEnemy.ST_HIT_AIR:
                                        case BaseEnemy.ST_HIT:
                                            if (this.mStateAction == Boss2ActionAttack_2.ST_ACTION_ANGRY) {
                                                this.mEnemyRef.gotoState(boss2.Lich.ST_ANGRY);
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_2.ST_ACTION_VULNERABLE) {
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_2.ST_ACTION_DIZZI_N) {
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            }
                                            else {
                                                Application.log(" BH == 2, Warning   !!! mStateAction = ", this.mStateAction);
                                            }
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_IN:
                                            this.goNextPointPath();
                                            this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_DELAY;
                                            Application.log(" BH == 2, state = ST_STAND_AND_VULNERABILITY && mStateAction = ST_ACTION_TELEPORT_DELAY");
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_OUT:
                                            this.lookPlayer();
                                            this.mStateAction = Boss2ActionAttack_2.ST_ACTION_NECROMANCY;
                                            this.m_num_necromany = 0;
                                            Application.log(" BH == 2, state = ST_STAND_AND_VULNERABILITY && mStateAction = ST_ACTION_NECROMANCY");
                                            break;
                                        case boss2.Lich.ST_BOSS_ATTACK_2:
                                            this.m_time = 0;
                                            this.mStateAction = Boss2ActionAttack_2.ST_ACTION_DIZZI_N;
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            Application.log(" BH == 2, state = ST_STAND_AND_VULNERABILITY && mStateAction = ST_ACTION_DIZZI_N");
                                            break;
                                        case boss2.Lich.ST_MELEE:
                                            this.mStateAction = Boss2ActionAttack_2.ST_ACTION_CHECK_DAMAGE;
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                            Application.log(" BH == 2, state = ST_STAND_AND_VULNERABILITY && mStateAction = ST_ACTION_CHECK_DAMAGE");
                                            break;
                                        case BaseEnemy.ST_DIZZI:
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            break;
                                        case boss2.Lich.ST_APPEAR_SHIELD:
                                            this.mEnemyRef.setShield(true);
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_ANGRY);
                                            break;
                                    }
                                }
                                if (this.state == Boss2ActionAttack_2.ST_ATTACK_AND_TELEPORT) {
                                    switch (this.mEnemyRef.getState()) {
                                        case BaseEnemy.ST_HIT_AIR:
                                        case BaseEnemy.ST_HIT:
                                            if (this.mStateAction == Boss2ActionAttack_2.ST_ACTION_WARNING) {
                                                this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_WARNING);
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_2.ST_ACTION_DIZZI_S) {
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_2.ST_ACTION_SHOOT || this.mStateAction == Boss2ActionAttack_2.ST_ACTION_FIRST_CREATE_BULLET || this.mStateAction == Boss2ActionAttack_2.ST_ACTION_CREATE_BULLET || this.mStateAction == Boss2ActionAttack_2.ST_ACTION_COOLDOWN_CREATE_BULLET) {
                                                this.mEnemyRef.setShield(false);
                                                this.mEnemyRef.damageInDizziShoot = 0;
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_DIZZI_S;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                                Application.log(" BH == 2, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_DIZZI_S");
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_2.ST_ACTION_WAITING_POST_SHOOT) {
                                                this.mEnemyRef.setShield(false);
                                                this.m_time = 0;
                                                this.mEnemyRef.damageInDizziShoot = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_DIZZI_S;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                                Application.log(" BH == 2, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_DIZZI_S");
                                            }
                                            else {
                                                Application.log(" BH == 2, WARNING: function decideAction 1");
                                            }
                                            break;
                                        case boss2.Lich.ST_BOSS_WARNING:
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_IN:
                                            this.goNextPointPath();
                                            this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_DELAY;
                                            Application.log(" BH == 2, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_TELEPORT_DELAY");
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_OUT:
                                            this.mEnemyRef.setShield(false);
                                            this.lookPlayer();
                                            this.mStateAction = Boss2ActionAttack_2.ST_ACTION_SHOOT;
                                            Application.log(" BH == 2, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_SHOOT");
                                            break;
                                        case boss2.Lich.ST_BOSS_ATTACK_1:
                                            if (this.m_counter_bullets < (this.m_num_bullet - 1)) {
                                                this.m_counter_bullets++;
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_SHOOT;
                                                Application.log(" BH == 2, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_SHOOT");
                                            }
                                            else {
                                                this.m_counter_bullets = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_WAITING_POST_SHOOT;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                                Application.log(" BH == 2, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_WAITING_POST_SHOOT");
                                            }
                                            break;
                                        case BaseEnemy.ST_DIZZI:
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            break;
                                    }
                                }
                                if (this.state == Boss2ActionAttack_2.ST_VULNERABILITY_AND_TELEPORT) {
                                    switch (this.mEnemyRef.getState()) {
                                        case BaseEnemy.ST_HIT_AIR:
                                        case BaseEnemy.ST_HIT:
                                            if (this.mStateAction == Boss2ActionAttack_2.ST_ACTION_ANGRY) {
                                                this.mEnemyRef.gotoState(boss2.Lich.ST_ANGRY);
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_2.ST_ACTION_DIZZI_N) {
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            }
                                            else {
                                                Application.log(" BH == 2, warning:no must be mStateAction != ST_ACTION_ANGRY");
                                            }
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_IN:
                                            this.goNextPointPath();
                                            this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_DELAY;
                                            Application.log(" BH == 2, state = ST_VULNERABILITY_AND_TELEPORT && mStateAction = ST_ACTION_TELEPORT_DELAY");
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_OUT:
                                            this.m_counter_teleport++;
                                            if (this.m_counter_teleport <= this.m_num_teleport) {
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_NECROMANCY;
                                                this.m_num_necromany = 0;
                                                Application.log(" BH == 2, state = ST_VULNERABILITY_AND_TELEPORT && mStateAction = ST_ACTION_NECROMANCY");
                                            }
                                            else {
                                                this.m_counter_teleport = 0;
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_DIZZI_N;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                                Application.log(" BH == 2, state = ST_VULNERABILITY_AND_TELEPORT && mStateAction = ST_ACTION_DIZZI_N check");
                                            }
                                            this.lookPlayer();
                                            break;
                                        case boss2.Lich.ST_BOSS_ATTACK_2:
                                            this.m_time = 0;
                                            this.mStateAction = Boss2ActionAttack_2.ST_ACTION_DIZZI_N;
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            Application.log(" BH == 2, state = ST_VULNERABILITY_AND_TELEPORT && mStateAction = ST_ACTION_DIZZI_N");
                                            break;
                                        case boss2.Lich.ST_APPEAR_SHIELD:
                                            this.mEnemyRef.setShield(true);
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_ANGRY);
                                            break;
                                    }
                                }
                                if (this.state == Boss2ActionAttack_2.ST_TELEPORT_AND_MELEE_ATTACK) {
                                    switch (this.mEnemyRef.getState()) {
                                        case BaseEnemy.ST_HIT_AIR:
                                        case BaseEnemy.ST_HIT:
                                            if (this.mStateAction == Boss2ActionAttack_2.ST_ACTION_WAITING) {
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_2.ST_ACTION_DIZZI_N || this.mStateAction == Boss2ActionAttack_2.ST_ACTION_DIZZI_S) {
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_2.ST_ACTION_ATTACK_1 || this.mStateAction == Boss2ActionAttack_2.ST_ACTION_COOLDOWN_CREATE_BULLET) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_DIZZI_S;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                                Application.log(" BH == 2, --> RECEIVED ATTACK WITH SHIELD ");
                                                Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_DIZZI_S");
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_2.ST_ACTION_CHECK_DAMAGE) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_DIZZI_S;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                                Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_DIZZI_S");
                                            }
                                            else {
                                                Application.log(" BH == 2, Warning: This should not pass!");
                                            }
                                            break;
                                        case boss2.Lich.ST_BOSS_ATTACK_2:
                                            this.m_time = 0;
                                            this.mStateAction = Boss2ActionAttack_2.ST_ACTION_DIZZI_N;
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_DIZZI_N");
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_IN:
                                            this.goNextPointPath();
                                            this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_DELAY;
                                            Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_TELEPORT_DELAY");
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_OUT:
                                            this.attackToPlayer();
                                            break;
                                        case boss2.Lich.ST_MELEE:
                                            this.m_time = 0;
                                            this.mStateAction = Boss2ActionAttack_2.ST_ACTION_CHECK_DAMAGE;
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                            Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_CHECK_DAMAGE");
                                            break;
                                        case boss2.Lich.ST_BOSS_ATTACK_1:
                                            this.mStateAction = Boss2ActionAttack_2.ST_ACTION_CHECK_DAMAGE;
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                            Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_CHECK_DAMAGE");
                                            break;
                                    }
                                }
                            }
                            /*override*/ update(dt) {
                                if (this.mIsPaused == true) {
                                    return;
                                }
                                if (this.state == Boss2ActionAttack_2.ST_STAND_AND_VULNERABILITY) {
                                    switch (this.mStateAction) {
                                        case Boss2ActionAttack_2.ST_ACTION_ANGRY:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_angry) {
                                                this.mEnemyRef.setShield(false);
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_IN;
                                                this.setNextPoint(5);
                                                Application.log(" BH == 2, state = ST_STAND_AND_VULNERABILITY && mStateAction = ST_ACTION_TELEPORT_IN");
                                            }
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_TELEPORT_IN:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_IN);
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_TELEPORT_DELAY:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_teleport_delay) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_OUT;
                                                Application.log(" BH == 2, state = ST_STAND_AND_VULNERABILITY && mStateAction = ST_ACTION_TELEPORT_OUT");
                                            }
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_TELEPORT_OUT:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_OUT);
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_NECROMANCY:
                                            if (this.m_num_necromany >= this.m_necromancy_attacks) {
                                                this.m_num_necromany = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_VULNERABLE;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                                Application.log(" BH == 2, state = ST_STAND_AND_VULNERABILITY && mStateAction = ST_ACTION_VULNERABLE");
                                                break;
                                            }
                                            this.m_num_necromany++;
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_ATTACK_2);
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_DIZZI_N:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_dizzi_N) {
                                                this.m_time = 0;
                                                if (this.m_num_necromany < this.m_necromancy_attacks) {
                                                    this.mStateAction = Boss2ActionAttack_2.ST_ACTION_NECROMANCY;
                                                    Application.log(" BH == 2, state = ST_STAND_AND_VULNERABILITY && mStateAction = ST_ACTION_NECROMANCY");
                                                }
                                                else {
                                                    this.m_num_necromany = 0;
                                                    this.mStateAction = Boss2ActionAttack_2.ST_ACTION_VULNERABLE;
                                                    this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                                    Application.log(" BH == 2, state = ST_STAND_AND_VULNERABILITY && mStateAction = ST_ACTION_VULNERABLE");
                                                }
                                            }
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_VULNERABLE:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_stand_vulnerable) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_STAND_ATTACK;
                                                Application.log(" BH == 2, state = ST_STAND_AND_VULNERABILITY && mStateAction = ST_ACTION_STAND_ATTACK");
                                            }
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_STAND_ATTACK:
                                            this.checkAttackToPlayer();
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_CHECK_DAMAGE:
                                            if (this.changeDamage(this.m_damage_stand_vulnerable) == true) {
                                                this.state = Boss2ActionAttack_2.ST_ATTACK_AND_TELEPORT;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_WARNING;
                                                this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_WARNING);
                                                Application.log(" BH == 2, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_WARNING");
                                            }
                                            else {
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_VULNERABLE;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                                Application.log(" BH == 2, state = ST_STAND_AND_VULNERABILITY && mStateAction = ST_ACTION_VULNERABLE");
                                            }
                                            break;
                                    }
                                }
                                if (this.state == Boss2ActionAttack_2.ST_ATTACK_AND_TELEPORT) {
                                    switch (this.mStateAction) {
                                        case Boss2ActionAttack_2.ST_ACTION_WARNING:
                                            this.lookPlayer();
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_warning) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_IN;
                                                this.setRandNextPoint();
                                                Application.log(" BH == 2, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_TELEPORT_IN");
                                            }
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_TELEPORT_IN:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_IN);
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_TELEPORT_DELAY:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_teleport_delay) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_OUT;
                                                Application.log(" BH == 2, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_TELEPORT_OUT");
                                            }
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_TELEPORT_OUT:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_OUT);
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_SHOOT:
                                            this.lookPlayer();
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_ATTACK_1);
                                            this.mStateAction = Boss2ActionAttack_2.ST_ACTION_FIRST_CREATE_BULLET;
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_FIRST_CREATE_BULLET:
                                            this.lookPlayer();
                                            if (this.mEnemyRef.getCharacter().actor().clip().currentFrame >= 15) {
                                                this.mEnemyRef.onCreateBullet(500, this.m_speed_bullet);
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_COOLDOWN_CREATE_BULLET;
                                                this.m_time = 0;
                                            }
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_COOLDOWN_CREATE_BULLET:
                                            this.lookPlayer();
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_WAITING_POST_SHOOT:
                                            this.lookPlayer();
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_waiting_post_shoot) {
                                                this.mEnemyRef.setShield(false);
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_IN;
                                                this.setRandNextPoint();
                                                Application.log(" BH == 2, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_TELEPORT_IN");
                                            }
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_DIZZI_S:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_dizzi_S ||
                                                this.mEnemyRef.damageInDizziShoot >= this.m_percentHealthLimit * this.mHealthBase) {
                                                this.m_time = 0;
                                                this.state = Boss2ActionAttack_2.ST_VULNERABILITY_AND_TELEPORT;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_ANGRY;
                                                this.mEnemyRef.damageInDizziShoot = 0;
                                                this.mEnemyRef.gotoState(boss2.Lich.ST_APPEAR_SHIELD);
                                                Application.log(" BH == 2, state = ST_VULNERABILITY_AND_TELEPORT; mStateAction = ST_ACTION_ANGRY ");
                                            }
                                            break;
                                    }
                                }
                                if (this.state == Boss2ActionAttack_2.ST_VULNERABILITY_AND_TELEPORT) {
                                    switch (this.mStateAction) {
                                        case Boss2ActionAttack_2.ST_ACTION_ANGRY:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_angry) {
                                                this.mEnemyRef.setShield(false);
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_IN;
                                                this.setNextPoint(5);
                                                Application.log(" BH == 2, state = ST_VULNERABILITY_AND_TELEPORT && mStateAction = ST_ACTION_TELEPORT_IN");
                                            }
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_TELEPORT_IN:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_IN);
                                            this.m_time = 0;
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_TELEPORT_DELAY:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_teleport_delay) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_OUT;
                                                Application.log(" BH == 2, state = ST_VULNERABILITY_AND_TELEPORT && mStateAction = ST_ACTION_TELEPORT_OUT");
                                            }
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_TELEPORT_OUT:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_OUT);
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_NECROMANCY:
                                            if (this.m_num_necromany >= this.m_necromancy_attacks) {
                                                this.m_num_necromany = 0;
                                                this.state = Boss2ActionAttack_2.ST_TELEPORT_AND_MELEE_ATTACK;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_WAITING;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                                Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_WAITING");
                                                break;
                                            }
                                            this.m_num_necromany++;
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_ATTACK_2);
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_DIZZI_N:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_dizzi_N) {
                                                this.m_time = 0;
                                                if (this.m_num_necromany < this.m_necromancy_attacks) {
                                                    this.mStateAction = Boss2ActionAttack_2.ST_ACTION_NECROMANCY;
                                                    Application.log(" BH == 2, state = ST_VULNERABILITY_AND_TELEPORT && mStateAction = ST_ACTION_NECROMANCY");
                                                }
                                                else {
                                                    this.m_num_necromany = 0;
                                                    this.state = Boss2ActionAttack_2.ST_TELEPORT_AND_MELEE_ATTACK;
                                                    this.mStateAction = Boss2ActionAttack_2.ST_ACTION_WAITING;
                                                    this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                                    Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_WAITING");
                                                }
                                            }
                                            break;
                                    }
                                }
                                if (this.state == Boss2ActionAttack_2.ST_TELEPORT_AND_MELEE_ATTACK) {
                                    switch (this.mStateAction) {
                                        case Boss2ActionAttack_2.ST_ACTION_WAITING:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_stand_vulnerable) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_NECROMANCY;
                                                this.m_num_necromany = 0;
                                                Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_NECROMANCY");
                                            }
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_NECROMANCY:
                                            if (this.m_num_necromany >= this.m_necromancy_attacks) {
                                                this.m_num_necromany = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_IN;
                                                this.setRandNextPoint();
                                                Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_TELEPORT_IN");
                                                break;
                                            }
                                            this.m_num_necromany++;
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_ATTACK_2);
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_DIZZI_N:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_dizzi_N) {
                                                this.m_time = 0;
                                                if (this.m_num_necromany < this.m_necromancy_attacks) {
                                                    this.mStateAction = Boss2ActionAttack_2.ST_ACTION_NECROMANCY;
                                                    Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_NECROMANCY");
                                                }
                                                else {
                                                    this.m_num_necromany = 0;
                                                    this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_IN;
                                                    this.setRandNextPoint();
                                                    Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_TELEPORT_IN");
                                                }
                                            }
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_TELEPORT_IN:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_IN);
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_TELEPORT_DELAY:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_teleport_delay) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_OUT;
                                                Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_TELEPORT_OUT");
                                            }
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_TELEPORT_OUT:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_OUT);
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_ATTACK_1:
                                            this.lookPlayer();
                                            if (this.mEnemyRef.getCharacter().actor().clip().currentFrame >= 15) {
                                                this.mEnemyRef.onCreateBullet(500, this.m_speed_bullet);
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_COOLDOWN_CREATE_BULLET;
                                                this.m_time = 0;
                                                Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_COOLDOWN_CREATE_BULLET");
                                            }
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_COOLDOWN_CREATE_BULLET:
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_CHECK_DAMAGE:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_post_teleport_vulnerable) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_IN;
                                                this.setRandNextPoint();
                                                Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_TELEPORT_IN");
                                            }
                                            break;
                                        case Boss2ActionAttack_2.ST_ACTION_DIZZI_S:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_dizzi_S) {
                                                this.m_time = 0;
                                                if (this.mEnemyRef.getHealthPercent() <= this.m_threshold_hp) {
                                                    Application.log(" BH == 2, -------->   GO NEXT BEHAVIOR 3");
                                                    this.mEnemyRef.nextBossAction();
                                                }
                                                else {
                                                    this.mStateAction = Boss2ActionAttack_2.ST_ACTION_TELEPORT_IN;
                                                    this.setRandNextPoint();
                                                    Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_TELEPORT_IN");
                                                }
                                            }
                                            break;
                                    }
                                }
                            }
                            checkAttackToPlayer() {
                                var radioAttackX = 180;
                                var radioAttackY = 50;
                                if (Math.abs(this.mEnemyRef.x() - this.mPlayerRef.x()) <= radioAttackX && Math.abs((this.mEnemyRef).y() - this.mPlayerRef.y()) <= radioAttackY) {
                                    this.lookPlayer();
                                    this.mEnemyRef.gotoState(boss2.Lich.ST_MELEE);
                                }
                                else {
                                    this.mStateAction = Boss2ActionAttack_2.ST_ACTION_CHECK_DAMAGE;
                                    Application.log(" BH == 2, state = ST_STAND_AND_VULNERABILITY && mStateAction = ST_ACTION_CHECK_DAMAGE");
                                }
                            }
                            attackToPlayer() {
                                var radioAttackToPlayerX = 180;
                                var radioAttackToPlayerY = 90;
                                this.lookPlayer();
                                if (Math.abs(this.mEnemyRef.x() - this.mPlayerRef.x()) <= radioAttackToPlayerX && Math.abs(this.mEnemyRef.y() - this.mPlayerRef.y()) <= radioAttackToPlayerY) {
                                    this.mEnemyRef.gotoState(boss2.Lich.ST_MELEE);
                                }
                                else {
                                    this.mStateAction = Boss2ActionAttack_2.ST_ACTION_ATTACK_1;
                                    this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_ATTACK_1);
                                    Application.log(" BH == 2, state = ST_TELEPORT_AND_MELEE_ATTACK && mStateAction = ST_ACTION_ATTACK_1");
                                }
                            }
                            lookPlayer() {
                                if (this.mPlayerRef.x() < this.mEnemyRef.x()) {
                                    this.mEnemyRef.setLookAtLeft(true);
                                }
                                else {
                                    this.mEnemyRef.setLookAtLeft(false);
                                }
                            }
                            changeDamage(ratio_damage) {
                                return (this.mEnemyRef.healthPercent(this.mHealthBase) >= ratio_damage);
                            }
                            setNextPoint(nextPoint) {
                                this.m_idPointPath = nextPoint;
                            }
                            setRandNextPoint() {
                                var idPointTmp = this.m_idPointPath;
                                this.m_idPointPath = ~~(Math.random() * this.mEnemyRef.pathPoints.length);
                                if (this.m_idPointPath == idPointTmp) {
                                    this.m_idPointPath = (this.m_idPointPath + 1) % (this.mEnemyRef.pathPoints.length);
                                }
                            }
                            goNextPointPath() {
                                if (this.m_idPointPath >= this.mEnemyRef.pathPoints.length) {
                                    this.m_idPointPath = 5;
                                }
                                this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[this.m_idPointPath]).x;
                                this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[this.m_idPointPath]).y;
                                this.mEnemyRef.setPosition(this.tmpX, this.tmpY);
                            }
                            setParams(param) {
                                this.m_time_stand_vulnerable = Number(param["time_stand_vulnerable"]);
                                this.m_time_warning = Number(param["time_warning"]);
                                this.m_time_angry = Number(param["time_angry"]);
                                this.m_damage_stand_vulnerable = Number(param["damage_stand_vulnerable"]);
                                this.m_time_teleport_delay = Number(param["time_teleport_delay"]);
                                this.m_time_waiting_post_shoot = Number(param["time_waiting_post_shoot"]);
                                this.m_time_waiting_post_necromancy = Number(param["time_waiting_post_necromancy"]);
                                this.m_time_post_teleport_vulnerable = Number(param["time_post_teleport_vulnerable"]);
                                this.m_damage_wave = Number(param["damage_wave"]);
                                this.m_speed_bullet = Number(param["speed_bullet"]);
                                this.m_time_dizzi = Number(param["time_dizzi"]);
                                this.m_num_bullet = parseInt(param["num_bullet"]);
                                this.m_cooldown_create_bullet = parseInt(param["cooldown_create_bullet"]);
                                this.m_threshold_hp = parseInt(param["threshold_hp"]);
                                this.m_time_dizzi_N = parseInt(param["time_dizzi_N"]);
                                this.m_time_dizzi_S = parseInt(param["time_dizzi_S"]);
                                this.m_damage_attack_and_teleport = Number(param["damage_attack_and_teleport"]);
                                this.m_vulnerability_and_teleport = Number(param["damage_vulnerability_and_teleport"]);
                                this.m_num_teleport = parseInt(param["num_teleport"]);
                                this.m_percentHealthLimit = Number(param["percentHealthLimit"]);
                                this.m_necromancy_attacks = parseInt(param["necromancy_attacks"]);
                            }
                        }
                        Boss2ActionAttack_2.ST_STAND_AND_VULNERABILITY = 0;
                        Boss2ActionAttack_2.ST_ATTACK_AND_TELEPORT = 1;
                        Boss2ActionAttack_2.ST_VULNERABILITY_AND_TELEPORT = 2;
                        Boss2ActionAttack_2.ST_TELEPORT_AND_MELEE_ATTACK = 3;
                        Boss2ActionAttack_2.ST_ACTION_STAND = 11;
                        Boss2ActionAttack_2.ST_ACTION_STAND_ATTACK = 12;
                        Boss2ActionAttack_2.ST_ACTION_CHECK_DAMAGE = 13;
                        Boss2ActionAttack_2.ST_ACTION_WARNING = 14;
                        Boss2ActionAttack_2.ST_ACTION_TELEPORT_DELAY = 15;
                        Boss2ActionAttack_2.ST_ACTION_SHOOT = 16;
                        Boss2ActionAttack_2.ST_ACTION_TELEPORT_IN = 17;
                        Boss2ActionAttack_2.ST_ACTION_TELEPORT_OUT = 18;
                        Boss2ActionAttack_2.ST_ACTION_WAITING_POST_SHOOT = 19;
                        Boss2ActionAttack_2.ST_ACTION_ANGRY = 20;
                        Boss2ActionAttack_2.ST_ACTION_NECROMANCY = 21;
                        Boss2ActionAttack_2.ST_ACTION_VULNERABLE = 22;
                        Boss2ActionAttack_2.ST_ACTION_DIZZI = 23;
                        Boss2ActionAttack_2.ST_ACTION_CREATE_BULLET = 24;
                        Boss2ActionAttack_2.ST_ACTION_COOLDOWN_CREATE_BULLET = 25;
                        Boss2ActionAttack_2.ST_ACTION_FIRST_CREATE_BULLET = 26;
                        Boss2ActionAttack_2.ST_ACTION_ATTACK_1 = 27;
                        Boss2ActionAttack_2.ST_ACTION_DIZZI_N = 28;
                        Boss2ActionAttack_2.ST_ACTION_DIZZI_S = 29;
                        boss2.Boss2ActionAttack_2 = Boss2ActionAttack_2;
                    })(boss2 = boss.boss2 || (boss.boss2 = {}));
                })(boss = gameBrawler.boss || (gameBrawler.boss = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Boss2ActionAttack_2 = com.bamtang.project.gameBrawler.boss.boss2.Boss2ActionAttack_2;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var boss;
                (function (boss) {
                    var boss2;
                    (function (boss2) {
                        class Boss2ActionAttack_3 extends BaseEnemyAction {
                            constructor(enemy) {
                                super(enemy);
                                this.state = 0;
                                this.posInitX = 0;
                                this.posInitY = 0;
                                this.m_position_target = new Vector2D(0, 0);
                                this.m_time = 0;
                                this.m_counter_teleport = 0;
                                this.m_counter_teleport_and_shoot = 0;
                                this.m_idPointPath = 0;
                                this.m_counter_bullets = 0;
                                this.posInitX = this.mEnemyRef.posInitX;
                                this.posInitY = this.mEnemyRef.posInitY;
                            }
                            getIdPointPath() { return this.m_idPointPath; }
                            setIdPointPath(idPointPath) { this.m_idPointPath = idPointPath; }
                            /*override*/ setPaused(paused) {
                                super.setPaused(paused);
                                if (this.mIsPaused) {
                                }
                                else {
                                    this.decideAction();
                                }
                            }
                            /*override*/ onActionStarted() {
                                this.state = Boss2ActionAttack_3.ST_SHIELD_AND_PROYECTILES;
                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_ANGRY;
                                this.mEnemyRef.gotoState(boss2.Lich.ST_APPEAR_SHIELD);
                                Application.log(" BH == 3, ON ACTION STARTED !!!");
                                Application.log(" BH == 3,  BH == 3, state = ST_SHIELD_AND_PROYECTILES && mStateAction = ST_ACTION_ANGRY");
                            }
                            decideAction() {
                                if (this.state == Boss2ActionAttack_3.ST_SHIELD_AND_PROYECTILES) {
                                    switch (this.mEnemyRef.getState()) {
                                        case BaseEnemy.ST_HIT_AIR:
                                        case BaseEnemy.ST_HIT:
                                            if (this.mStateAction == Boss2ActionAttack_3.ST_ACTION_ANGRY) {
                                                Application.echo("WARNING: HIT, state == ST_SHIELD_AND_PROYECTILES, mStateAction == ST_ACTION_ANGRY");
                                                this.mEnemyRef.gotoState(boss2.Lich.ST_ANGRY);
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_3.ST_ACTION_STAND_SHIELD) {
                                                Application.echo("WARNING: HIT, state == ST_SHIELD_AND_PROYECTILES, mStateAction == ST_ACTION_STAND_SHIELD");
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                            }
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_IN:
                                            this.mStateAction = Boss2ActionAttack_3.ST_ACTION_TELEPORT_DELAY;
                                            this.goNextPointPath();
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_OUT:
                                            this.mStateAction = Boss2ActionAttack_3.ST_ACTION_STAND_SHIELD;
                                            this.savePositionPlayer();
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                            this.mEnemyRef.setShield(true);
                                            break;
                                        case boss2.Lich.ST_APPEAR_SHIELD:
                                            this.mEnemyRef.setShield(true);
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_ANGRY);
                                            break;
                                    }
                                }
                                if (this.state == Boss2ActionAttack_3.ST_MELEE_FIGHT) {
                                    switch (this.mEnemyRef.getState()) {
                                        case BaseEnemy.ST_HIT_AIR:
                                        case BaseEnemy.ST_HIT:
                                            if (this.mStateAction == Boss2ActionAttack_3.ST_ACTION_STAND) {
                                                if (Math.random() > this.m_probability_melee) {
                                                    this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                                }
                                                else {
                                                    this.mStateAction = Boss2ActionAttack_3.ST_ACTION_ATTACK_MELEE;
                                                    Application.log(" BH == 3, state = ST_MELEE_FIGHT && mStateAction = ST_ACTION_ATTACK_MELEE");
                                                }
                                            }
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_IN:
                                            this.toPlayer();
                                            this.mStateAction = Boss2ActionAttack_3.ST_ACTION_TELEPORT_DELAY;
                                            Application.log(" BH == 3, state = ST_MELEE_FIGHT && mStateAction = ST_ACTION_TELEPORT_DELAY");
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_OUT:
                                            this.lookPlayer();
                                            this.mStateAction = Boss2ActionAttack_3.ST_ACTION_ATTACK_MELEE;
                                            Application.log(" BH == 3, state = ST_MELEE_FIGHT && mStateAction = ST_ACTION_ATTACK_MELEE");
                                            break;
                                        case boss2.Lich.ST_MELEE_2:
                                            this.mStateAction = Boss2ActionAttack_3.ST_ACTION_STAND;
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                            Application.log(" BH == 3, state = ST_MELEE_FIGHT && mStateAction = ST_ACTION_STAND");
                                            break;
                                        case boss2.Lich.ST_MELEE:
                                            this.mStateAction = Boss2ActionAttack_3.ST_ACTION_STAND;
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                            Application.log(" BH == 3, state = ST_MELEE_FIGHT && mStateAction = ST_ACTION_STAND");
                                            break;
                                    }
                                }
                                if (this.state == Boss2ActionAttack_3.ST_TELEPORT_AND_SHOOT) {
                                    switch (this.mEnemyRef.getState()) {
                                        case BaseEnemy.ST_HIT_AIR:
                                        case BaseEnemy.ST_HIT:
                                            if (this.mStateAction == Boss2ActionAttack_3.ST_ACTION_SHOOT || this.mStateAction == Boss2ActionAttack_3.ST_ACTION_FIRST_CREATE_BULLET || this.mStateAction == Boss2ActionAttack_3.ST_ACTION_CREATE_BULLET || this.mStateAction == Boss2ActionAttack_3.ST_ACTION_COOLDOWN_CREATE_BULLET) {
                                                this.mEnemyRef.setShield(false);
                                                this.mEnemyRef.damageInDizziShoot = 0;
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_DIZZI_S;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                                Application.log(" BH == 3, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_DIZZI_S");
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_3.ST_ACTION_WAITING_POST_SHOOT) {
                                                this.mEnemyRef.setShield(false);
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_DIZZI_S;
                                                this.mEnemyRef.damageInDizziShoot = 0;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                                Application.log(" BH == 3, state = ST_ATTACK_AND_TELEPORT && mStateAction = ST_ACTION_DIZZI_S");
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_3.ST_ACTION_DIZZI_S) {
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            }
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_IN:
                                            this.mStateAction = Boss2ActionAttack_3.ST_ACTION_TELEPORT_DELAY;
                                            this.goNextPointPath();
                                            Application.log(" BH == 3, state = ST_TELEPORT_AND_SHOOT && mStateAction = ST_ACTION_TELEPORT_DELAY");
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_OUT:
                                            this.lookPlayer();
                                            if (this.m_counter_teleport < this.m_num_teleport) {
                                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_TELEPORT_IN;
                                                this.setRandNextPoint();
                                                Application.log(" BH == 3, state = ST_TELEPORT_AND_SHOOT && mStateAction = ST_ACTION_TELEPORT_IN");
                                            }
                                            else {
                                                this.mEnemyRef.setShield(false);
                                                this.m_counter_teleport = 0;
                                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_SHOOT;
                                                Application.log(" BH == 3, state = ST_TELEPORT_AND_SHOOT && mStateAction = ST_ACTION_SHOOT");
                                            }
                                            break;
                                        case boss2.Lich.ST_BOSS_ATTACK_1:
                                            if (this.m_counter_bullets < (this.m_num_bullet - 1)) {
                                                this.m_counter_bullets++;
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_SHOOT;
                                                Application.log(" BH == 3, state = ST_TELEPORT_AND_SHOOT && mStateAction = ST_ACTION_SHOOT");
                                            }
                                            else {
                                                this.m_counter_bullets = 0;
                                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_WAITING_POST_SHOOT;
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                            }
                                            break;
                                    }
                                }
                                if (this.state == Boss2ActionAttack_3.ST_DIZZY_VULNERABLE) {
                                    switch (this.mEnemyRef.getState()) {
                                        case BaseEnemy.ST_HIT_AIR:
                                        case BaseEnemy.ST_HIT:
                                            if (this.mStateAction == Boss2ActionAttack_3.ST_ACTION_STAND) {
                                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_TELEPORT_IN;
                                                this.setNextPoint(5);
                                                this.m_time = 0;
                                                Application.log(" BH == 3, state = ST_DIZZY_VULNERABLE && mStateAction = ST_ACTION_TELEPORT_IN");
                                            }
                                            else if (this.mStateAction == Boss2ActionAttack_3.ST_ACTION_DIZZY) {
                                                this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            }
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_IN:
                                            this.mStateAction = Boss2ActionAttack_3.ST_ACTION_TELEPORT_DELAY;
                                            this.goNextPointPath();
                                            Application.log(" BH == 3, state = ST_DIZZY_VULNERABLE && mStateAction = ST_ACTION_TELEPORT_DELAY");
                                            break;
                                        case boss2.Lich.ST_BOSS_TELEPORT_OUT:
                                            this.mStateAction = Boss2ActionAttack_3.ST_ACTION_DIZZY;
                                            this.m_time = 0;
                                            this.mEnemyRef.gotoState(BaseEnemy.ST_DIZZI);
                                            break;
                                    }
                                }
                            }
                            /*override*/ update(dt) {
                                if (this.mIsPaused == true) {
                                    return;
                                }
                                if (this.state == Boss2ActionAttack_3.ST_SHIELD_AND_PROYECTILES) {
                                    switch (this.mStateAction) {
                                        case Boss2ActionAttack_3.ST_ACTION_ANGRY:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_angry) {
                                                this.mEnemyRef.setShield(false);
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_TELEPORT_IN;
                                                this.setNextPoint(5);
                                                Application.log(" BH == 3, state = ST_SHIELD_AND_PROYECTILES && mStateAction = ST_ACTION_STAND_SHIELD");
                                            }
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_TELEPORT_IN:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_IN);
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_TELEPORT_DELAY:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_teleport_delay) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_TELEPORT_OUT;
                                                Application.log(" BH == 3, state = ST_TELEPORT_AND_SHOOT && mStateAction = ST_ACTION_TELEPORT_OUT");
                                            }
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_TELEPORT_OUT:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_OUT);
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_STAND_SHIELD:
                                            this.lookPlayer();
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_cooldown_create_estalactita) {
                                                this.m_time = 0;
                                                if (this.m_count_estalactitas < this.m_num_estalactitas) {
                                                    this.m_count_estalactitas++;
                                                    this.savePositionPlayer();
                                                    this.mEnemyRef.onCreateFallingObject(this.m_speed_fall, 500, 0, this.m_position_target.x, this.m_position_target.y, "heartA");
                                                    this.mStateAction = Boss2ActionAttack_3.ST_ACTION_STAND_SHIELD;
                                                    Application.log(" BH == 3, onCreateFallingObject");
                                                }
                                                else {
                                                    this.state = Boss2ActionAttack_3.ST_MELEE_FIGHT;
                                                    this.mHealthBase = this.mEnemyRef.getHealth();
                                                    this.mStateAction = Boss2ActionAttack_3.ST_ACTION_TELEPORT_IN;
                                                    this.mEnemyRef.setShield(false);
                                                    Application.log(" BH == 3, state = ST_MELEE_FIGHT && mStateAction = ST_ACTION_TELEPORT_IN");
                                                }
                                            }
                                            break;
                                    }
                                    return;
                                }
                                if (this.state == Boss2ActionAttack_3.ST_MELEE_FIGHT) {
                                    switch (this.mStateAction) {
                                        case Boss2ActionAttack_3.ST_ACTION_TELEPORT_IN:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_IN);
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_TELEPORT_DELAY:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_teleport_delay) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_TELEPORT_OUT;
                                                Application.log(" BH == 3, state = ST_MELEE_FIGHT && mStateAction = ST_ACTION_TELEPORT_OUT");
                                            }
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_TELEPORT_OUT:
                                            this.lookPlayer();
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_OUT);
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_ATTACK_MELEE:
                                            this.lookPlayer();
                                            this.m_time = 0;
                                            if (Math.random() <= 0.5) {
                                                this.mEnemyRef.gotoState(boss2.Lich.ST_MELEE_2);
                                            }
                                            else {
                                                this.mEnemyRef.gotoState(boss2.Lich.ST_MELEE);
                                            }
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_STAND:
                                            this.lookPlayer();
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_stand_melee) {
                                                this.m_time = 0;
                                                if (this.changeDamage(20) == true) {
                                                    this.state = Boss2ActionAttack_3.ST_TELEPORT_AND_SHOOT;
                                                    this.mStateAction = Boss2ActionAttack_3.ST_ACTION_TELEPORT_IN;
                                                    this.setRandNextPoint();
                                                    Application.log(" BH == 3, state = ST_TELEPORT_AND_SHOOT && mStateAction = ST_ACTION_TELEPORT_IN");
                                                }
                                                else {
                                                    if (this.isPlayerRangeAttack() == true) {
                                                        this.mStateAction = Boss2ActionAttack_3.ST_ACTION_ATTACK_MELEE;
                                                        Application.log(" BH == 3, state = ST_MELEE_FIGHT && mStateAction = ST_ACTION_ATTACK_MELEE");
                                                    }
                                                    else {
                                                        this.mStateAction = Boss2ActionAttack_3.ST_ACTION_TELEPORT_IN;
                                                        Application.log(" BH == 3, state = ST_MELEE_FIGHT && mStateAction = ST_ACTION_TELEPORT_IN");
                                                    }
                                                }
                                            }
                                            break;
                                    }
                                    return;
                                }
                                if (this.state == Boss2ActionAttack_3.ST_TELEPORT_AND_SHOOT) {
                                    switch (this.mStateAction) {
                                        case Boss2ActionAttack_3.ST_ACTION_TELEPORT_IN:
                                            this.m_counter_teleport++;
                                            this.m_counter_teleport_and_shoot++;
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_IN);
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_TELEPORT_DELAY:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_teleport_delay) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_TELEPORT_OUT;
                                                Application.log(" BH == 3, state = ST_TELEPORT_AND_SHOOT && mStateAction = ST_ACTION_TELEPORT_OUT");
                                            }
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_TELEPORT_OUT:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_OUT);
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_SHOOT:
                                            this.lookPlayer();
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_ATTACK_1);
                                            this.mStateAction = Boss2ActionAttack_3.ST_ACTION_FIRST_CREATE_BULLET;
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_FIRST_CREATE_BULLET:
                                            this.lookPlayer();
                                            if (this.mEnemyRef.getCharacter().actor().clip().currentFrame >= 15) {
                                                this.mEnemyRef.onCreateBullet(500, this.m_speed_bullet);
                                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_COOLDOWN_CREATE_BULLET;
                                                this.m_time = 0;
                                            }
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_COOLDOWN_CREATE_BULLET:
                                            this.lookPlayer();
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_WAITING_POST_SHOOT:
                                            this.lookPlayer();
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_waiting_post_shoot) {
                                                this.mEnemyRef.setShield(false);
                                                this.m_time = 0;
                                                this.validateExit();
                                            }
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_DIZZI_S:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_dizzi_S ||
                                                this.mEnemyRef.damageInDizziShoot >= this.m_percentHealthLimit * this.mHealthBase) {
                                                this.m_time = 0;
                                                this.mEnemyRef.damageInDizziShoot = 0;
                                                this.validateExit();
                                            }
                                            break;
                                    }
                                }
                                if (this.state == Boss2ActionAttack_3.ST_DIZZY_VULNERABLE) {
                                    switch (this.mStateAction) {
                                        case Boss2ActionAttack_3.ST_ACTION_STAND:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_stand_vulnerable) {
                                                this.m_time = 0;
                                                this.state = Boss2ActionAttack_3.ST_SHIELD_AND_PROYECTILES;
                                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_ANGRY;
                                                this.mEnemyRef.gotoState(boss2.Lich.ST_APPEAR_SHIELD);
                                                Application.log(" BH == 3, state = ST_SHIELD_AND_PROYECTILES && mStateAction = ST_ACTION_ANGRY");
                                            }
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_TELEPORT_IN:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_IN);
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_TELEPORT_DELAY:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_teleport_delay) {
                                                this.m_time = 0;
                                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_TELEPORT_OUT;
                                                Application.log(" BH == 3, state = ST_DIZZY_VULNERABLE && mStateAction = ST_ACTION_TELEPORT_OUT");
                                            }
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_TELEPORT_OUT:
                                            this.mEnemyRef.gotoState(boss2.Lich.ST_BOSS_TELEPORT_OUT);
                                            break;
                                        case Boss2ActionAttack_3.ST_ACTION_DIZZY:
                                            this.m_time += dt;
                                            if (this.m_time >= this.m_time_dizzi) {
                                                this.m_time = 0;
                                                this.state = Boss2ActionAttack_3.ST_SHIELD_AND_PROYECTILES;
                                                this.mStateAction = Boss2ActionAttack_3.ST_ACTION_ANGRY;
                                                this.mEnemyRef.gotoState(boss2.Lich.ST_APPEAR_SHIELD);
                                                Application.log(" BH == 3, state = ST_DIZZY_VULNERABLE && mStateAction = ST_ACTION_DIZZY");
                                            }
                                            break;
                                    }
                                    return;
                                }
                            }
                            validateExit() {
                                if (this.m_counter_teleport_and_shoot > (this.m_num_teleport_and_shoot + 1)) {
                                    this.m_counter_teleport_and_shoot = 0;
                                    this.m_counter_teleport = 0;
                                    this.m_time = 0;
                                    this.state = Boss2ActionAttack_3.ST_DIZZY_VULNERABLE;
                                    this.mStateAction = Boss2ActionAttack_3.ST_ACTION_STAND;
                                    this.mEnemyRef.gotoState(BaseEnemy.ST_STAND);
                                    Application.log(" BH == 3, state = ST_DIZZY_VULNERABLE && mStateAction = ST_ACTION_STAND");
                                }
                                else {
                                    this.mStateAction = Boss2ActionAttack_3.ST_ACTION_TELEPORT_IN;
                                    this.m_counter_teleport = 0;
                                    this.setRandNextPoint();
                                    Application.log(" BH == 3, state = ST_TELEPORT_AND_SHOOT && mStateAction = ST_ACTION_TELEPORT_IN");
                                }
                            }
                            setNextPoint(nextPoint) {
                                this.m_idPointPath = nextPoint;
                            }
                            setRandNextPoint() {
                                var idPointTmp = this.m_idPointPath;
                                this.m_idPointPath = ~~(Math.random() * this.mEnemyRef.pathPoints.length);
                                if (this.m_idPointPath == idPointTmp) {
                                    this.m_idPointPath = (this.m_idPointPath + 1) % (this.mEnemyRef.pathPoints.length);
                                }
                            }
                            goNextPointPath() {
                                if (this.m_idPointPath >= this.mEnemyRef.pathPoints.length) {
                                    this.m_idPointPath = 5;
                                }
                                this.tmpX = new Vector2D(this.mEnemyRef.pathPoints[this.m_idPointPath]).x;
                                this.tmpY = new Vector2D(this.mEnemyRef.pathPoints[this.m_idPointPath]).y;
                                this.mEnemyRef.setPosition(this.tmpX, this.tmpY);
                            }
                            toPlayer() {
                                var offSetX;
                                if (this.mPlayerRef.x() < this.mEnemyRef.x()) {
                                    offSetX = 80;
                                }
                                else {
                                    offSetX = -80;
                                }
                                this.mEnemyRef.setPosition(this.mPlayerRef.x() + offSetX, this.mPlayerRef.y());
                            }
                            isPlayerRangeAttack() {
                                var radioAttackX = 180;
                                var radioAttackY = 30;
                                return (Math.abs(this.mEnemyRef.x() - this.mPlayerRef.x()) <= radioAttackX && Math.abs(this.mEnemyRef.y() - this.mPlayerRef.y()) <= radioAttackY);
                            }
                            changeDamage(ratio_damage) {
                                return (this.mEnemyRef.healthPercent(this.mHealthBase) >= ratio_damage);
                            }
                            savePositionPlayer() {
                                this.m_position_target.x = this.mPlayerRef.x();
                                this.m_position_target.y = this.mPlayerRef.y();
                            }
                            lookPlayer() {
                                if (this.mPlayerRef.x() < this.mEnemyRef.x()) {
                                    this.mEnemyRef.setLookAtLeft(true);
                                }
                                else {
                                    this.mEnemyRef.setLookAtLeft(false);
                                }
                            }
                            setParams(param) {
                                this.m_num_teleport = parseInt(param["num_teleport"]);
                                this.m_time_angry = Number(param["time_angry"]);
                                this.m_cooldown_create_estalactita = Number(param["cooldown_create_estalactita"]);
                                this.m_num_estalactitas = parseInt(param["num_estalactitas"]);
                                this.m_time_teleport_delay = Number(param["time_teleport_delay"]);
                                this.m_time_waiting_post_shoot = Number(param["time_waiting_post_shoot"]);
                                this.m_num_teleport_and_shoot = Number(param["num_teleport_and_shoot"]);
                                this.m_time_dizzi = Number(param["time_dizzi"]);
                                this.m_speed_bullet = Number(param["speed_bullet"]);
                                this.m_cooldown_create_bullet = parseInt(param["cooldown_create_bullet"]);
                                this.m_num_bullet = parseInt(param["num_bullet"]);
                                this.m_time_stand_melee = Number(param["time_stand_melee"]);
                                this.m_time_stand_vulnerable = Number(param["time_stand_vulnerable"]);
                                this.m_probability_melee = Number(param["probability_melee"]);
                                this.m_speed_fall = Number(param["speed_fall"]);
                                this.m_time_dizzi_N = parseInt(param["time_dizzi_N"]);
                                this.m_time_dizzi_S = parseInt(param["time_dizzi_S"]);
                                this.m_damage_shield_and_proyectiles = Number(param["damage_shield_and_proyectiles"]);
                                this.m_damage_melee_fight = Number(param["damage_melee_fight"]);
                                this.m_damage_teleport_and_shoot = Number(param["damage_teleport_and_shoot"]);
                                this.m_percentHealthLimit = Number(param["percentHealthLimit"]);
                            }
                        }
                        Boss2ActionAttack_3.ST_SHIELD_AND_PROYECTILES = 0;
                        Boss2ActionAttack_3.ST_MELEE_FIGHT = 1;
                        Boss2ActionAttack_3.ST_TELEPORT_AND_SHOOT = 2;
                        Boss2ActionAttack_3.ST_DIZZY_VULNERABLE = 3;
                        Boss2ActionAttack_3.ST_ACTION_ANGRY = 20;
                        Boss2ActionAttack_3.ST_ACTION_STAND_SHIELD = 21;
                        Boss2ActionAttack_3.ST_ACTION_TELEPORT_IN = 17;
                        Boss2ActionAttack_3.ST_ACTION_TELEPORT_OUT = 18;
                        Boss2ActionAttack_3.ST_ACTION_TELEPORT_DELAY = 15;
                        Boss2ActionAttack_3.ST_ACTION_SHOOT = 16;
                        Boss2ActionAttack_3.ST_ACTION_ATTACK_MELEE = 30;
                        Boss2ActionAttack_3.ST_ACTION_STAND = 31;
                        Boss2ActionAttack_3.ST_ACTION_CREATE_BULLET = 32;
                        Boss2ActionAttack_3.ST_ACTION_WAITING_POST_SHOOT = 33;
                        Boss2ActionAttack_3.ST_ACTION_DIZZY = 34;
                        Boss2ActionAttack_3.ST_ACTION_COOLDOWN_CREATE_BULLET = 25;
                        Boss2ActionAttack_3.ST_ACTION_FIRST_CREATE_BULLET = 35;
                        Boss2ActionAttack_3.ST_ACTION_DIZZI_N = 36;
                        Boss2ActionAttack_3.ST_ACTION_DIZZI_S = 37;
                        boss2.Boss2ActionAttack_3 = Boss2ActionAttack_3;
                    })(boss2 = boss.boss2 || (boss.boss2 = {}));
                })(boss = gameBrawler.boss || (gameBrawler.boss = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Boss2ActionAttack_3 = com.bamtang.project.gameBrawler.boss.boss2.Boss2ActionAttack_3;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var boss;
                (function (boss) {
                    var boss2;
                    (function (boss2) {
                        class BulletBoss2 extends BRW_WorldActorExt {
                            constructor(clipName, world, owner, x, y, speed, damage, dir = 1, horizontal = true, distance = 600, weak = true) {
                                super(world.objectsCanvas(), world, x, y);
                                this.mOwner = null;
                                this.stateBullet = 0;
                                y = y - 100;
                                if (owner.isLookingToLeft() == true) {
                                    x = x - 105;
                                }
                                else {
                                    x = x + 105;
                                }
                                this.setActorClip(clipName);
                                this.setActorClipTrail("ani_fx_boss01_laserbeam_trail");
                                this.mDamage = damage;
                                this.mRange = distance;
                                this.mDirection = dir;
                                this.mReceivePlayerAttack = true;
                                this.mWeakMode = weak;
                                this.mOwner = owner;
                                this.mMove = new LinearMovement(this.m_x, this.m_y, speed);
                                this.mMove.endCallback = this.onEndMove.bind(this);
                                var targetX = this.m_world.player().x();
                                var targetY = this.m_world.player().y() - 10;
                                this.mMove.gotoPosition(targetX, targetY);
                                this.setRangeControlled(false);
                                this.m_clip.play();
                                this.m_clip_trail.play();
                                this.mTarget = 0;
                                var dsX = targetX - this.m_x;
                                var dsY = targetY - this.m_y;
                                this.m_rotation = Math.atan2(dsY, dsX) * 180 / Math.PI + 180;
                                this.m_clip.rotation = this.m_rotation;
                                this.m_clip_trail.rotation = this.m_rotation;
                                this.updateBoundsAttack();
                                this.updateBoundsBody();
                            }
                            getTarget() { return this.mTarget; }
                            setReceivePlayerAttack(value) { this.mReceivePlayerAttack = value; }
                            /*override*/ setDepth() {
                                if (this.m_layer) {
                                    this.m_layer.setDepth(this.m_canvas, (this.m_y + 120) * 1000 + Common.random(10, 50));
                                }
                            }
                            setTarget(target, changeDirection = false) {
                                this.mTarget = target;
                                if (changeDirection) {
                                    this.mDirection *= -1;
                                    this.mMove.resetPosition(this.m_x, this.m_y);
                                    this.mMove.gotoPosition(this.mOwner.x(), this.mOwner.y() - 30);
                                    var dsX = this.m_x - this.mOwner.x();
                                    var dsY = this.m_y - (this.mOwner.y() - 30);
                                    this.m_clip.rotation = Math.atan2(dsY, dsX) * 180 / Math.PI;
                                    this.m_clip_trail.rotation = Math.atan2(dsY, dsX) * 180 / Math.PI;
                                }
                            }
                            onEndMove(linearMovemente) {
                                if (this.stateBullet != BulletBoss2.ST_HIT) {
                                    this.onHitBullet();
                                }
                            }
                            /*override*/ update(dt) {
                                this.mMove.update(dt);
                                this.m_x = this.mMove.x();
                                this.m_y = this.mMove.y();
                                var actorsGroup = this.m_world.actorManager().actors;
                                var actor = null;
                                var k = 0;
                                if (this.stateBullet != BulletBoss2.ST_HIT) {
                                    if (this.mTarget & BulletBoss2.TARGET_PLAYER) {
                                        if (this.m_world.player().hitTestReceivedAttack(this)) {
                                            this.m_world.player().onEnemyCollision(this, this.mDamage, !this.mWeakMode);
                                            if (this.mWeakMode) {
                                                this.onHitBullet();
                                                this.mTarget = 0;
                                            }
                                        }
                                        else if (this.mReceivePlayerAttack) {
                                            this.m_world.player().processAttackToBulletBoss2(this);
                                        }
                                    }
                                    if (this.mTarget & BulletBoss2.TARGET_BREAKABLES) {
                                        for (k = actorsGroup.length - 1; (k >= 0) && !this.m_isAwaitingDelete; --k) {
                                            actor = actorsGroup[k];
                                            if (actor.isIdle()) {
                                                continue;
                                            }
                                            if (actor instanceof Breakable && actor.isInCamera(this.m_world.camera())) {
                                                if (actor.hitTestReceivedAttack(this)) {
                                                    actor.onHit(this.mDamage);
                                                    if (this.mWeakMode) {
                                                        this.onHitBullet();
                                                        this.mTarget = 0;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (this.mTarget & BulletBoss2.TARGET_ENEMY) {
                                        for (k = actorsGroup.length - 1; (k >= 0) && !this.m_isAwaitingDelete; --k) {
                                            actor = actorsGroup[k];
                                            if (actor.isIdle()) {
                                                continue;
                                            }
                                            if (actor instanceof boss2.Lich && actor.isEnabled()) {
                                                if (actor.hitTestReceivedAttack(this, false)) {
                                                    actor.onHit(this.mDamage, this);
                                                    if (this.mWeakMode) {
                                                        this.onHitBullet();
                                                        this.mTarget = 0;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                super.update(dt);
                                if (this.m_clip_trail != null) {
                                    this.m_clip_trail.x = this.m_x - this.m_world.camera().x();
                                    this.m_clip_trail.y = this.m_y - this.m_world.camera().y();
                                }
                                if (this.stateBullet == BulletBoss2.ST_HIT && this.m_clip.currentFrame >= this.m_clip.totalFrames) {
                                    this.m_isAwaitingDelete = true;
                                }
                            }
                            onHitBullet() {
                                if (this.m_clip) {
                                    this.m_canvas.removeChild(this.m_clip);
                                    this.m_canvas.removeChild(this.m_clip_trail);
                                    try {
                                        this.m_clip_trail.destroy();
                                    }
                                    catch (e) { }
                                    this.m_clip_trail = null;
                                }
                                this.stateBullet = BulletBoss2.ST_HIT;
                                this.setActorClip("mcAniChBoss02BulletHit");
                                this.m_clip.play();
                                this.m_clip.rotation = this.m_rotation;
                            }
                            /*override*/ createCorners() { }
                            /*override*/ free() {
                                if (this.m_clip_trail) {
                                    this.m_canvas.removeChild(this.m_clip_trail);
                                    try {
                                        this.m_clip_trail.destroy();
                                    }
                                    catch (e) { }
                                }
                                super.free();
                                this.mMove = null;
                            }
                            setActorClipTrail(clipName) {
                                if (clipName) {
                                    this.m_clip_trail = Application.instance.getClip(clipName);
                                    this.m_canvas.addChild(this.m_clip_trail);
                                }
                            }
                        }
                        BulletBoss2.TARGET_PLAYER = 1;
                        BulletBoss2.TARGET_ENEMY = 2;
                        BulletBoss2.TARGET_BREAKABLES = 4;
                        BulletBoss2.ST_HIT = 1;
                        BulletBoss2.ST_MOVE = 0;
                        boss2.BulletBoss2 = BulletBoss2;
                    })(boss2 = boss.boss2 || (boss.boss2 = {}));
                })(boss = gameBrawler.boss || (gameBrawler.boss = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BulletBoss2 = com.bamtang.project.gameBrawler.boss.boss2.BulletBoss2;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var boss;
                (function (boss) {
                    var boss2;
                    (function (boss2) {
                        class Lich extends BaseEnemy {
                            constructor(canvas, world, x, y, npc) {
                                super(canvas, world, x, y, npc);
                                this.behavior = 0;
                                this.posInitX = 0;
                                this.posInitY = 0;
                                this.width = 300;
                                this.height = 150;
                                this.bulletDamage = 5;
                                this.invulnerable = false;
                                this.posInitX = this.m_x;
                                this.posInitY = this.m_y;
                                this.loadData(xml2js(project.Global.app.getXMLData("dtBoss2"), { compact: true, spaces: 4 }).data);
                                this.mTestStateDied = false;
                                Lich.instance = this;
                                this.createPathPoints();
                                this.gotoBehavior(Lich.BH_BOSS_1);
                                this.clip_shield = Application.instance.getClip("mcAniChBoss02Shield");
                                this.m_clipShadow.scale.x = 2 * project.Global.CLIPS_SCALE;
                            }
                            getCharacter() {
                                return this.m_character;
                            }
                            setShield(shield) {
                                if (shield != this.m_withShield) {
                                    if (shield == true) {
                                        this.m_character.actor().clip().addChild(this.clip_shield);
                                        this.m_withShield = true;
                                    }
                                    else {
                                        this.m_character.actor().clip().removeChild(this.clip_shield);
                                        this.m_withShield = false;
                                    }
                                }
                                this.clip_shield.scale.x = 0.8 * project.Global.CLIPS_SCALE;
                                ;
                                this.clip_shield.scale.y = 0.8 * project.Global.CLIPS_SCALE;
                                ;
                                this.clip_shield.y = -20;
                            }
                            /*override*/ initCharacterStates() {
                                this.m_character.addState(String(Lich.ST_APPEAR), "mcAniChBoss02Appear");
                                this.m_character.addState(String(Lich.ST_STAND), "mcAniChBoss02Stand");
                                this.m_character.addState(String(Lich.ST_ALERT), "mcAniChBoss02Alert");
                                this.m_character.addState(String(Lich.ST_BOSS_WARNING), "mcAniChBoss02Alert");
                                this.m_character.addState(String(Lich.ST_ANGRY), "mcAniChBoss02Angry");
                                this.m_character.addState(String(Lich.ST_BOSS_ATTACK_1), "mcAniChBoss02Attack01");
                                this.m_character.addState(String(Lich.ST_BOSS_ATTACK_2), "mcAniChBoss02Attack02");
                                this.m_character.addState(String(Lich.ST_DIE), "mcAniChBoss02Defeat");
                                this.m_character.addState(String(Lich.ST_DIZZI), "mcAniChBoss02Dizzy");
                                this.m_character.addState(String(Lich.ST_HIT), "mcAniChBoss02Hit");
                                this.m_character.addState(String(Lich.ST_MELEE), "mcAniChBoss02Melee");
                                this.m_character.addState(String(Lich.ST_MELEE_2), "mcAniChBoss02Melee02");
                                this.m_character.addState(String(Lich.ST_APPEAR_SHIELD), "mcAniChBoss02ShieldOn");
                                this.m_character.addState(String(Lich.ST_BOSS_TELEPORT_IN), "mcAniChBoss02TeleportOut");
                                this.m_character.addState(String(Lich.ST_BOSS_TELEPORT_OUT), "mcAniChBoss02TeleportIn");
                            }
                            /*override*/ gotoState(state) {
                                var tmpFlag = false;
                                if (state != this.m_state) {
                                    tmpFlag = true;
                                }
                                this.m_clipShadow.visible = true;
                                super.gotoState(state);
                                switch (this.m_state) {
                                    case BaseEnemy.ST_APPEAR:
                                        project.Global.app.playSound("snd_atb_boss_lich_appear");
                                        this.m_clipShadow.visible = false;
                                        break;
                                    case BaseEnemy.ST_HIT_AIR:
                                    case BaseEnemy.ST_HIT:
                                        project.Global.app.playSound("snd_atb_boss_lich_gethit");
                                        this.mBaseAction.setPaused(true);
                                        break;
                                    case BaseEnemy.ST_DIE:
                                        project.Global.app.playSound("snd_atb_boss_lich_die");
                                        break;
                                    case BaseEnemy.ST_DIZZI:
                                        break;
                                    case BaseEnemy.ST_ALERT:
                                        break;
                                    case BaseEnemy.ST_STAND:
                                        break;
                                    case Lich.ST_BOSS_TELEPORT_OUT:
                                        project.Global.app.playSound("snd_atb_boss_lich_teleport_out");
                                        this.m_character.loop = true;
                                        this.mBaseAction.setPaused(true);
                                        this.m_clipShadow.visible = false;
                                        break;
                                    case Lich.ST_BOSS_TELEPORT_IN:
                                        project.Global.app.playSound("snd_atb_boss_lich_teleport_in");
                                        this.m_character.loop = false;
                                        this.mBaseAction.setPaused(true);
                                        this.m_clipShadow.visible = false;
                                        break;
                                    case Lich.ST_BOSS_ATTACK_1:
                                        break;
                                    case Lich.ST_BOSS_ATTACK_2:
                                        this.mBaseAction.setPaused(true);
                                        break;
                                    case Lich.ST_MELEE:
                                        this.mBaseAction.setPaused(true);
                                        break;
                                    case Lich.ST_MELEE_2:
                                        this.mBaseAction.setPaused(true);
                                        break;
                                    case Lich.ST_APPEAR_SHIELD:
                                        this.mBaseAction.setPaused(true);
                                        break;
                                }
                                if (this.m_withShield == true) {
                                    this.m_character.actor().clip().addChild(this.clip_shield);
                                    this.clip_shield.scale.x = 0.8 * project.Global.CLIPS_SCALE;
                                    this.clip_shield.scale.y = 0.8 * project.Global.CLIPS_SCALE;
                                    this.clip_shield.y = -20;
                                }
                                if (tmpFlag == true) {
                                    this.m_character.actor().clip().scale.x *= 0.85;
                                    this.m_character.actor().clip().scale.y *= 0.85;
                                }
                            }
                            /*override*/ onEndAnimation(state) {
                                switch (parseInt(state)) {
                                    case Lich.ST_APPEAR:
                                        this.gotoState(BaseEnemy.ST_STAND);
                                        gameBrawler.HudBrawler.instance.showEnemyBarBoss(2);
                                        if (this.mBaseAction != null) {
                                            this.mInitActionDelay = 0;
                                            this.mBaseAction.startAction(this.mInitActionDelay);
                                        }
                                        this.mIsEnabled = true;
                                        break;
                                    case BaseEnemy.ST_KNOCK:
                                    case BaseEnemy.ST_HIT_AIR:
                                    case BaseEnemy.ST_HIT:
                                        this.mBaseAction.setPaused(false);
                                        break;
                                    case BaseEnemy.ST_DIE:
                                        this.gotoState(BaseEnemy.ST_END_DIE);
                                        this.remove();
                                        gameBrawler.HudBrawler.instance.hideEnemyBarBoss();
                                        this.mIsEnabled = false;
                                        break;
                                    case Lich.ST_ANGRY:
                                        break;
                                    case BaseEnemy.ST_DIZZI:
                                        this.mBaseAction.setPaused(false);
                                        break;
                                    case BaseEnemy.ST_SHOOT:
                                        break;
                                    case Lich.ST_BOSS_TELEPORT_OUT:
                                        this.mBaseAction.setPaused(false);
                                        break;
                                    case Lich.ST_BOSS_TELEPORT_IN:
                                        this.mBaseAction.setPaused(false);
                                        break;
                                    case Lich.ST_BOSS_ATTACK_1:
                                        this.mBaseAction.setPaused(false);
                                        break;
                                    case Lich.ST_BOSS_ATTACK_2:
                                        this.mBaseAction.setPaused(false);
                                        break;
                                    case Lich.ST_MELEE:
                                        this.mBaseAction.setPaused(false);
                                        break;
                                    case Lich.ST_BOSS_WARNING:
                                        this.mBaseAction.setPaused(false);
                                        break;
                                    case Lich.ST_MELEE_2:
                                        this.mBaseAction.setPaused(false);
                                        break;
                                    case Lich.ST_APPEAR_SHIELD:
                                        this.mBaseAction.setPaused(false);
                                        break;
                                }
                            }
                            nextBossAction() {
                                this.gotoBehavior(this.behavior + 1);
                            }
                            gotoBehavior(b) {
                                var tmp;
                                this.behavior = b;
                                switch (this.behavior) {
                                    case Lich.BH_BOSS_1:
                                        this.mBaseAction = new boss2.Boss2ActionAttack_1(this);
                                        this.mBaseAction.setParams(this.dataAction1);
                                        break;
                                    case Lich.BH_BOSS_2:
                                        tmp = this.mBaseAction.getIdPointPath();
                                        this.mBaseAction = new boss2.Boss2ActionAttack_2(this);
                                        this.mBaseAction.setIdPointPath(tmp);
                                        this.mBaseAction.setParams(this.dataAction2);
                                        this.mBaseAction.startAction(0);
                                        break;
                                    case Lich.BH_BOSS_3:
                                        tmp = this.mBaseAction.getIdPointPath();
                                        this.mBaseAction = new boss2.Boss2ActionAttack_3(this);
                                        this.mBaseAction.setIdPointPath(tmp);
                                        this.mBaseAction.setParams(this.dataAction3);
                                        this.mBaseAction.startAction(0);
                                        break;
                                }
                            }
                            loadData(data) {
                                for (var xd in data.state) {
                                    for (var xd1 in data.state[xd]) {
                                        for (var xd2 in data.state[xd][xd1]) {
                                            if (data.state[xd][xd1].length != 1)
                                                if (data.state[xd][xd1][xd2] != undefined)
                                                    for (var xd3 in data.state[xd][xd1][xd2])
                                                        if (data.state[xd][xd1][xd2] && data.state[xd][xd1][xd2][xd3] && data.state[xd][xd1][xd2][xd3].name != undefined && data.state[xd][xd1][xd2][xd3].value != undefined) {
                                                            data.state[xd][xd1][xd2] = data.state[xd][xd1][xd2][xd3];
                                                        }
                                        }
                                    }
                                }
                                this.dataAction1 = new Object();
                                this.dataAction2 = new Object();
                                this.dataAction3 = new Object();
                                this.dataAction4 = new Object();
                                var i = 1;
                                for (var dataState in data.state) {
                                    for (var dataProperty in data.state[dataState]["property"]) {
                                        var name = data.state[dataState]["property"][dataProperty]["name"];
                                        var value = data.state[dataState]["property"][dataProperty]["value"];
                                        if (i == 1)
                                            this.dataAction1[String(name)] = value;
                                        if (i == 2)
                                            this.dataAction2[String(name)] = value;
                                        if (i == 3)
                                            this.dataAction3[String(name)] = value;
                                        if (i == 4)
                                            this.dataAction4[String(name)] = value;
                                    }
                                    i++;
                                }
                                this.width = parseInt(this.dataAction4["width"]);
                                this.height = parseInt(this.dataAction4["height"]);
                            }
                            /*override*/ update(dt) {
                                super.update(dt);
                                if (this.m_clip) {
                                    this.m_clipShadow.x = this.m_clip.x + ((this.m_clip.scale.x < 0) ? -30 : 30);
                                    this.m_clipShadow.y = this.m_clip.y - 5;
                                }
                                if (this.m_withShield == true) {
                                    if (this.isLookingToLeft() == true) {
                                        this.clip_shield.x = 10;
                                    }
                                    else {
                                        this.clip_shield.x = 20;
                                    }
                                }
                                if (this.m_state == BaseEnemy.ST_APPEAR) {
                                    this.m_character.actor().clip().scale.x = 0.95 * project.Global.CLIPS_SCALE;
                                    this.m_character.actor().clip().scale.y = 0.95 * project.Global.CLIPS_SCALE;
                                }
                            }
                            healthPercent(newHealthBase) {
                                return (-100 * (this.mHealth - newHealthBase) / this.mHealthBase);
                            }
                            onCreateBullet(range, speed) {
                                var fdist = (this.isLookingToLeft() ? -1 : 1);
                                var dtX = this.m_x - this.m_world.player().x();
                                var dtY = this.m_y - this.m_world.player().y();
                                var norm = Math.sqrt(dtX * dtX + dtY * dtY);
                                var nX = dtX / (norm);
                                var nY = dtY / norm;
                                var shift = 50;
                                var bullet = new boss2.BulletBoss2("mcAniChBoss02Bullet", this.m_world, this, this.m_x + shift * nX, this.m_y + shift * nY, speed, this.bulletDamage, fdist, false, range);
                                bullet.setTarget(boss2.BulletBoss2.TARGET_PLAYER | boss2.BulletBoss2.TARGET_BREAKABLES);
                                this.m_world.actorManager().add(bullet);
                                project.Global.app.playSound("snd_atb_boss_lich_fireball");
                            }
                            createPathPoints() {
                                this.pathPoints = new Array();
                                var tmpX = this.posInitX - this.width / 2;
                                var tmpY = this.posInitY - this.height / 2;
                                this.pathPoints[0] = new Vector2D(tmpX, tmpY);
                                this.pathPoints[1] = new Vector2D(tmpX + this.width / 3, tmpY);
                                this.pathPoints[2] = new Vector2D(tmpX + 2 * this.width / 3, tmpY);
                                this.pathPoints[3] = new Vector2D(tmpX + this.width, tmpY);
                                this.pathPoints[4] = new Vector2D(tmpX, tmpY + this.height / 2);
                                this.pathPoints[5] = new Vector2D(tmpX + this.width / 2, tmpY + this.height / 2);
                                this.pathPoints[6] = new Vector2D(tmpX + this.width, tmpY + this.height / 2);
                                this.pathPoints[7] = new Vector2D(tmpX, tmpY + this.height);
                                this.pathPoints[8] = new Vector2D(tmpX + this.width / 3, tmpY + this.height);
                                this.pathPoints[9] = new Vector2D(tmpX + 2 * this.width / 3, tmpY + this.height);
                                this.pathPoints[10] = new Vector2D(tmpX + this.width, tmpY + this.height);
                            }
                            /*override*/ applyDamage(damage, abusive) {
                                if (!this.mCanGetHit || !this.mIsEnabled || this.m_withShield) {
                                    return false;
                                }
                                var attackMode = this.m_world.player().getAttackMode();
                                if (abusive instanceof gameBrawler.PlayerBrawler &&
                                    (attackMode == gameBrawler.PlayerBrawler.MODE_ATTACK_SPECIAL_FEAR_FEASTER || attackMode == gameBrawler.PlayerBrawler.MODE_ATTACK_SPECIAL_BIG_FEET_FULL || attackMode == gameBrawler.PlayerBrawler.MODE_ATTACK_SPECIAL_SHARK_SWORD_FULL)) {
                                    if (abusive.specialTick % 5 != 0) {
                                        damage = 0;
                                    }
                                }
                                if (this.m_state == BaseEnemy.ST_DIZZI) {
                                    this.damageInDizziShoot += damage;
                                }
                                this.mHealth -= damage;
                                if (this.mHealth <= 0) {
                                    this.mHealth = 0;
                                    this.mCanGetHit = false;
                                }
                                var porcent = (100 * this.mHealth / this.mHealthBase);
                                gameBrawler.HudBrawler.instance.setEnemyEnergy(porcent, this.mSkin, "", true, 2);
                                this.m_world.game().onEnemyKicked(this, abusive);
                                return true;
                            }
                            /*override*/ hitTestReceivedAttack(actor, check = true) {
                                if ((actor instanceof gameBrawler.PlayerBrawler || actor instanceof Fallen) && this.m_withShield) {
                                    return false;
                                }
                                if (super.hitTestReceivedAttack(actor, check) == true) {
                                    if (this.m_state == Lich.ST_BOSS_ATTACK_1 && !this.m_withShield) {
                                        return actor instanceof boss2.BulletBoss2;
                                    }
                                    if (actor instanceof boss2.BulletBoss2 && this.m_withShield == true) {
                                        this.setShield(false);
                                    }
                                    return true;
                                }
                                else {
                                    return false;
                                }
                            }
                            /*override*/ onHitAir(damage, abusive, lastHit, pendingBounce = false) {
                                if (this.applyDamage(damage, abusive)) {
                                    if (!this.mJumpControl.isJump) {
                                        Application.error("This enemy is not jumping", "BaseEnemy::onHitAir()");
                                        return;
                                    }
                                    if (this.mHealth == 0) {
                                        this.mCanGetHit = true;
                                    }
                                    this.m_character.addState(String(BaseEnemy.ST_HIT_AIR), this.mSkin + "_hit_air");
                                    this.mJumpControl.applyForceY(-30);
                                    this.gotoState(BaseEnemy.ST_HIT_AIR);
                                }
                            }
                            /*override*/ onProcessAttackToPlayer() {
                                if (this.m_state == Lich.ST_BOSS_ATTACK_2) {
                                    if (this.m_world.player().hitTestReceivedAttack(this, false)) {
                                        this.m_world.player().onEnemyCollision(this, this.mDamage, true);
                                    }
                                }
                                else if (this.m_state == Lich.ST_MELEE || this.m_state == Lich.ST_MELEE_2) {
                                    if (this.m_world.player().hitTestReceivedAttack(this, true)) {
                                        this.m_world.player().onEnemyCollision(this, this.mDamage);
                                    }
                                }
                                else {
                                    if (this.m_world.player().hitTestReceivedAttack(this, true)) {
                                        if (this.m_withShield) {
                                            this.m_world.player().onEnemyCollision(this, 0, true);
                                        }
                                        else {
                                            this.m_world.player().onEnemyCollision(this, this.mDamage, true);
                                        }
                                    }
                                }
                            }
                            /*override*/ onKnock(damage, abusive, thrown = false, lastHit = false) {
                                if (this.applyDamage(damage, abusive)) {
                                    if (this.mHealth > 0) {
                                        this.gotoState(BaseEnemy.ST_HIT);
                                    }
                                    else {
                                        this.gotoState(BaseEnemy.ST_DIE);
                                    }
                                    if (this.mBaseAction) {
                                        this.mBaseAction.setPaused(true);
                                    }
                                    if (!thrown && (abusive == this.m_world.player())) {
                                        this.createHitEffect();
                                    }
                                    return true;
                                }
                                return false;
                            }
                            /*override*/ onKnockUpward(damage, abusive) {
                                if (this.applyDamage(damage, abusive)) {
                                    if (this.mHealth > 0) {
                                        this.gotoState(BaseEnemy.ST_HIT);
                                    }
                                    else {
                                        this.gotoState(BaseEnemy.ST_DIE);
                                    }
                                    this.setLookAtLeft(abusive.x() < this.m_x);
                                    if (this.mBaseAction) {
                                        this.mBaseAction.setPaused(true);
                                    }
                                    if (abusive == this.m_world.player()) {
                                        this.createHitEffect();
                                    }
                                    return true;
                                }
                                return false;
                            }
                            /*override*/ updateBoundsAttack(clipTarget = null) {
                                var boundsClip = null;
                                if (this.m_withShield == true) {
                                    boundsClip = this.clip_shield["mcBoundsAttack"];
                                }
                                else {
                                    boundsClip = this.m_clip["mcBoundsAttack"];
                                }
                                if (clipTarget != null) {
                                    boundsClip = clipTarget;
                                }
                                if (boundsClip) {
                                    boundsClip.visible = false;
                                    var _scaleX = this.m_scaleX;
                                    var _scaleY = this.m_scaleY;
                                    if (this.m_scaleX == this.m_scaleY) {
                                        this.m_scale = this.m_scaleX;
                                    }
                                    this.m_boundsAttack = new PIXI.Rectangle(_scaleX * (this.m_flipX ? -boundsClip.x - boundsClip.width : boundsClip.x), _scaleY * boundsClip.y, _scaleX * boundsClip.width, _scaleY * boundsClip.height);
                                }
                                else {
                                    this.m_boundsAttack = null;
                                }
                            }
                            onCreateFallingObject(speed, range, timeInit, nx, ny, item) {
                                var npc = new BRW_NpcExt(gameBrawler.ActorManagerBrawler.ITEM_STALACTILE, 0, 0, "", false, "", null);
                                npc.range = range;
                                npc.speed = speed;
                                npc.damage = 20;
                                npc.dropHeight = 400;
                                npc.timeInit = timeInit;
                                npc.item = item;
                                var fallenObject = new Fallen(this.m_world.objectsCanvas(), this.m_world, nx, ny, npc);
                                this.m_world.actorManager().add(fallenObject);
                            }
                            /*override*/ onDelayComplete() {
                                gameBrawler.HudBrawler.instance.showWarning(this.bossAppears.bind(this), true);
                            }
                            bossAppears(e) {
                                this.gotoState(BaseEnemy.ST_APPEAR);
                                this.setScale(1.2);
                                this.update(0);
                            }
                        }
                        Lich.ST_BOSS_ATTACK_1 = 125;
                        Lich.ST_BOSS_ATTACK_2 = 126;
                        Lich.ST_APPEAR_SHIELD = 132;
                        Lich.ST_BOSS_TELEPORT_OUT = 133;
                        Lich.ST_BOSS_TELEPORT_IN = 134;
                        Lich.ST_BOSS_WARNING = 135;
                        Lich.ST_SHIELD = 136;
                        Lich.ST_MELEE = 137;
                        Lich.ST_ANGRY = 138;
                        Lich.ST_MELEE_2 = 140;
                        Lich.BH_BOSS_1 = 0;
                        Lich.BH_BOSS_2 = 1;
                        Lich.BH_BOSS_3 = 2;
                        boss2.Lich = Lich;
                    })(boss2 = boss.boss2 || (boss.boss2 = {}));
                })(boss = gameBrawler.boss || (gameBrawler.boss = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Lich = com.bamtang.project.gameBrawler.boss.boss2.Lich;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var data;
                (function (data_1) {
                    class dtEnemy {
                        constructor(data) {
                            if (data) {
                                this.setDefaultData(data);
                            }
                        }
                        setDefaultData(data) {
                            var showWarnings = false;
                            this.setData(data, showWarnings);
                        }
                        setData(data, warnings) {
                            this.probAttackZone_A = BRW_World.getOptionalData("int", data, "probAttackZone_A", this.probAttackZone_A, warnings);
                            this.probBackZone_A = BRW_World.getOptionalData("int", data, "probBackZone_A", this.probBackZone_A, warnings);
                            this.probWaitZone_B = BRW_World.getOptionalData("int", data, "probWaitZone_B", this.probWaitZone_B, warnings);
                            this.probGoToPlayerZone_B = BRW_World.getOptionalData("int", data, "probGoToPlayerZone_B", this.probGoToPlayerZone_B, warnings);
                            this.probBackZone_B = BRW_World.getOptionalData("int", data, "probBackZone_B", this.probBackZone_B, warnings);
                            this.probAmbushZone_B = BRW_World.getOptionalData("int", data, "probAmbushZone_B", this.probAmbushZone_B, warnings);
                            this.probWaitZone_C = BRW_World.getOptionalData("int", data, "probWaitZone_C", this.probWaitZone_C, warnings);
                            this.probGoToPLayerZone_C = BRW_World.getOptionalData("int", data, "probGoToPLayerZone_C", this.probGoToPLayerZone_C, warnings);
                            this.probPatrolZone_C = BRW_World.getOptionalData("int", data, "probPatrolZone_C", this.probPatrolZone_C, warnings);
                            this.probAttack_1_zone_C = BRW_World.getOptionalData("int", data, "probAttack_1_zone_C", this.probAttack_1_zone_C, warnings);
                            this.probBack_line_zone_A = BRW_World.getOptionalData("int", data, "probBack_line_zone_A", this.probBack_line_zone_A, warnings);
                            this.probBack_curve_zone_A = BRW_World.getOptionalData("int", data, "probBack_curve_zone_A", this.probBack_curve_zone_A, warnings);
                            this.probWait_1_zone_B = BRW_World.getOptionalData("int", data, "probWait_1_zone_B", this.probWait_1_zone_B, warnings);
                            this.probGoToPlayer_line_zone_B = BRW_World.getOptionalData("int", data, "probGoToPlayer_line_zone_B", this.probGoToPlayer_line_zone_B, warnings);
                            this.probGoToPlayer_zigzag_zone_B = BRW_World.getOptionalData("int", data, "probGoToPlayer_zigzag_zone_B", this.probGoToPlayer_zigzag_zone_B, warnings);
                            this.probGoToPlayer_border_zone_B = BRW_World.getOptionalData("int", data, "probGoToPlayer_border_zone_B", this.probGoToPlayer_border_zone_B, warnings);
                            this.probBack_line_zone_B = BRW_World.getOptionalData("int", data, "probBack_line_zone_B", this.probBack_line_zone_B, warnings);
                            this.probBack_curve_zone_B = BRW_World.getOptionalData("int", data, "probBack_curve_zone_B", this.probBack_curve_zone_B, warnings);
                            this.probAmbush_out_zone_B = BRW_World.getOptionalData("int", data, "probAmbush_out_zone_B", this.probAmbush_out_zone_B, warnings);
                            this.probAmbush_in_zone_B = BRW_World.getOptionalData("int", data, "probAmbush_in_zone_B", this.probAmbush_in_zone_B, warnings);
                            this.probWait_1_zone_C = BRW_World.getOptionalData("int", data, "probWait_1_zone_C", this.probWait_1_zone_C, warnings);
                            this.probGoToPlayer_line_zone_C = BRW_World.getOptionalData("int", data, "probGoToPlayer_line_zone_C", this.probGoToPlayer_line_zone_C, warnings);
                            this.probGoToPlayer_zigzag_zone_C = BRW_World.getOptionalData("int", data, "probGoToPlayer_zigzag_zone_C", this.probGoToPlayer_zigzag_zone_C, warnings);
                            this.probPatrol_X_zone_C = BRW_World.getOptionalData("int", data, "probPatrol_X_zone_C", this.probPatrol_X_zone_C, warnings);
                        }
                        free() {
                        }
                    }
                    data_1.dtEnemy = dtEnemy;
                })(data = gameBrawler.data || (gameBrawler.data = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var dtEnemy = com.bamtang.project.gameBrawler.data.dtEnemy;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var data;
                (function (data_2) {
                    class dtPlayer {
                        constructor(data = null) {
                            if (data) {
                                this.setDefaultData(data);
                            }
                        }
                        loadData(data) {
                            if (data) {
                                this.setDefaultData(data);
                            }
                        }
                        setDefaultData(data) {
                            var showWarnings = false;
                            this.setData(data, false);
                        }
                        setData(data, warnings) {
                            this.grabEnemy = Boolean(BRW_World.getOptionalData("int", data, "grabEnemy", 0, warnings));
                            this.maxTimeForEnemyCombo = BRW_World.getOptionalData("int", data, "maxTimeForEnemyCombo", this.maxTimeForEnemyCombo, warnings);
                            this.hitsForEnemyCombo = BRW_World.getOptionalData("int", data, "hitsForEnemyCombo", this.hitsForEnemyCombo, warnings);
                            this.damageAttackDash = BRW_World.getOptionalData("int", data, "damageAttackDash", this.damageAttackDash, warnings);
                            this.damageAttackJump = BRW_World.getOptionalData("int", data, "damageAttackJump", this.damageAttackJump, warnings);
                            this.damageHit = BRW_World.getOptionalData("int", data, "damageHit", this.damageHit, warnings);
                            this.damageHit2 = BRW_World.getOptionalData("int", data, "damageHit2", this.damageHit2, warnings);
                            this.damageHit3 = BRW_World.getOptionalData("int", data, "damageHit3", this.damageHit3, warnings);
                            this.damageGrabHit = BRW_World.getOptionalData("int", data, "damageGrabHit", this.damageGrabHit, warnings);
                            this.damageGrabHit2 = BRW_World.getOptionalData("int", data, "damageGrabHit2", this.damageGrabHit2, warnings);
                            this.damageGrabHit3 = BRW_World.getOptionalData("int", data, "damageGrabHit3", this.damageGrabHit3, warnings);
                            this.damageGroundSmash = BRW_World.getOptionalData("int", data, "damageGroundSmash", this.damageGroundSmash, warnings);
                            this.damageSpecial_bigFeetHalf = BRW_World.getOptionalData("int", data, "damageSpecial_bigFeetHalf", this.damageSpecial_bigFeetHalf, warnings);
                            this.damageSpecial_bigFeetFull = BRW_World.getOptionalData("int", data, "damageSpecial_bigFeetFull", this.damageSpecial_bigFeetFull, warnings);
                            this.damageSpecial_sharkHalf = BRW_World.getOptionalData("int", data, "damageSpecial_sharkHalf", this.damageSpecial_sharkHalf, warnings);
                            this.damageSpecial_sharkFull = BRW_World.getOptionalData("int", data, "damageSpecial_sharkFull", this.damageSpecial_sharkFull, warnings);
                            this.damageSpecial_fearFeaster = BRW_World.getOptionalData("int", data, "damageSpecial_fearFeaster", this.damageSpecial_fearFeaster, warnings);
                            this.timeBigFeetFull = BRW_World.getOptionalData("int", data, "timeBigFeetFull", this.timeBigFeetFull, warnings);
                            this.timeSharkSwordFull = BRW_World.getOptionalData("int", data, "timeSharkSwordFull", this.timeSharkSwordFull, warnings);
                            this.timeFearFeaster = BRW_World.getOptionalData("int", data, "timeFearFeaster", this.timeFearFeaster, warnings);
                            this.scoreHit = BRW_World.getOptionalData("int", data, "scoreHit", this.scoreHit, warnings);
                            this.scoreHit2 = BRW_World.getOptionalData("int", data, "scoreHit2", this.scoreHit2, warnings);
                            this.scoreHit3 = BRW_World.getOptionalData("int", data, "scoreHit3", this.scoreHit3, warnings);
                            this.scoreGrabHit = BRW_World.getOptionalData("int", data, "scoreGrabHit", this.scoreGrabHit, warnings);
                            this.scoreGrabHit2 = BRW_World.getOptionalData("int", data, "scoreGrabHit2", this.scoreGrabHit2, warnings);
                            this.scoreGrabHit3 = BRW_World.getOptionalData("int", data, "scoreGrabHit3", this.scoreGrabHit3, warnings);
                            this.unitPowerPercent = BRW_World.getOptionalData("int", data, "unitPowerPercent", this.unitPowerPercent, warnings);
                            this.timeToDropEnemy = BRW_World.getOptionalData("int", data, "timeToDropEnemy", this.timeToDropEnemy, warnings);
                            this.shurikenDamage = BRW_World.getOptionalData("int", data, "shurikenDamage", this.shurikenDamage, warnings);
                            this.shurikenSpeed = BRW_World.getOptionalData("int", data, "shurikenSpeed", this.shurikenSpeed, warnings);
                        }
                    }
                    data_2.dtPlayer = dtPlayer;
                })(data = gameBrawler.data || (gameBrawler.data = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var dtPlayer = com.bamtang.project.gameBrawler.data.dtPlayer;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyAction {
                        constructor(enemy, timeInit, timeWait, timeWalk, appear = 0) {
                            this.m_offSettCam = 25;
                            this.m_rangeX = 60;
                            this.m_rangeY = 10;
                            this.m_walkingOption = 0;
                            this.m_timeMaxExec = 0;
                            this.m_timeElapse = 0;
                            this.m_command = "";
                            this.m_appear = 0;
                            this.m_timeStandUp = 800;
                            this.m_enemy = enemy;
                            this.m_rangeWalkingOption = new Array();
                            this.m_rangeWalkingOption = [0];
                            this.m_timeInit = timeInit;
                            this.m_timeWait = timeWait;
                            this.m_timeWalk = timeWalk;
                            this.m_appear = appear;
                            if (this.m_timeInit != 0) {
                                this.m_timeInit = Common.random(this.m_timeInit - 500, this.m_timeInit + 500);
                            }
                            this.m_timeWait = Common.random(this.m_timeWait - 200, this.m_timeWait + 200);
                            if (this.m_timeWalk != 0) {
                                this.m_timeWalk = Common.random(this.m_timeWalk - 300, this.m_timeWalk + 300);
                            }
                        }
                        setPatternWalkingOption(value) {
                            this.m_rangeWalkingOption = value;
                        }
                        onStart() {
                            if (this.m_appear == 1) {
                                this.onAppear();
                            }
                            else if (this.m_timeInit == 0) {
                                this.onWalk();
                            }
                            else {
                                this.onInit();
                            }
                        }
                        onAppear() {
                            this.m_enemy.gotoState(enemies.BaseEnemy.ST_APPEAR);
                            this.m_state = EnemyAction.ST_WAIT;
                        }
                        endAppear() {
                            this.m_enemy.gotoState(enemies.BaseEnemy.ST_END_APPEAR);
                        }
                        endWaitAppear() {
                            this.m_state = EnemyAction.ST_END_WAIT_APPEAR;
                        }
                        update(dt) {
                            this.m_timeElapse += dt;
                            if (this.m_command != "" && this.m_timeElapse >= this.m_timeMaxExec) {
                                var tempCommand = this.m_command;
                                this.m_command = "";
                                this[tempCommand]();
                            }
                            switch (this.m_state) {
                                case EnemyAction.ST_WALK:
                                    this.m_enemy.walkToPlayer(this.m_walkingOption, dt);
                                    break;
                                case EnemyAction.ST_KNOCK:
                                    this.m_enemy.displaceFallingKnock(dt);
                                    break;
                                case EnemyAction.ST_WAIT:
                                    this.m_enemy.toHit = false;
                                    break;
                                case EnemyAction.ST_INIT:
                                    break;
                                case EnemyAction.ST_STAND:
                                    break;
                                case EnemyAction.ST_HIT:
                                    break;
                                case EnemyAction.ST_CHECK_NEAR_PLAYER:
                                    break;
                                case EnemyAction.ST_ATTACK:
                                    break;
                                case EnemyAction.ST_DIE:
                                    break;
                                case EnemyAction.ST_END_DIE:
                                    break;
                                case EnemyAction.ST_END_ATTACK:
                                    this.onWait();
                                    break;
                                case EnemyAction.ST_END_HIT:
                                    this.m_enemy.toHit = false;
                                    var nextAction = Common.random(1, 2);
                                    switch (nextAction) {
                                        case 1:
                                            this.onWait();
                                            break;
                                        case 2:
                                            this.onCheckNearPlayer();
                                            break;
                                    }
                                    break;
                                case EnemyAction.ST_END_KNOCK:
                                    this.executeCommad("onStandUp", this.m_timeStandUp);
                                    this.m_state = EnemyAction.ST_WAIT;
                                    break;
                                case EnemyAction.ST_STAND_UP:
                                    this.m_enemy.gotoState(enemies.BaseEnemy.ST_STAND_UP);
                                    this.m_state = EnemyAction.ST_WAIT;
                                    break;
                                case EnemyAction.ST_END_STAND_UP:
                                    this.m_enemy.toKnock = false;
                                    this.onCheckNearPlayer();
                                    break;
                                case EnemyAction.ST_END_WAIT_APPEAR:
                                    this.onWait();
                                    break;
                            }
                        }
                        onInit() {
                            this.m_command = "";
                            this.m_state = EnemyAction.ST_INIT;
                            this.m_enemy.gotoState(enemies.BaseEnemy.ST_STAND);
                            this.executeCommad("onWalk", this.m_timeInit);
                        }
                        onWalk() {
                            if (this.m_timeWalk != 0) {
                                this.m_command = "";
                                this.m_state = EnemyAction.ST_WALK;
                                this.m_enemy.gotoState(enemies.BaseEnemy.ST_WALK);
                                return true;
                            }
                            else {
                                this.m_command = "";
                                this.m_state = EnemyAction.ST_WAIT;
                                this.m_enemy.gotoState(enemies.BaseEnemy.ST_STAND);
                                this.executeCommad("onWait", 0);
                            }
                            return false;
                        }
                        onWait() {
                            this.m_command = "";
                            this.m_state = EnemyAction.ST_WAIT;
                            this.m_enemy.gotoState(enemies.BaseEnemy.ST_STAND);
                        }
                        onCheckNearPlayer() {
                            this.m_command = "";
                            this.m_state = EnemyAction.ST_CHECK_NEAR_PLAYER;
                            this.m_enemy.gotoState(enemies.BaseEnemy.ST_STAND);
                        }
                        onHit() {
                            this.m_command = "";
                            this.m_state = EnemyAction.ST_HIT;
                            this.effectHit();
                            this.m_enemy.autoFlip = false;
                        }
                        endHit() {
                            this.m_command = "";
                            this.m_enemy.toHit = false;
                            this.m_enemy.toBack = false;
                            this.m_enemy.toKnock = false;
                            this.m_enemy.autoFlip = true;
                            this.m_state = EnemyAction.ST_END_HIT;
                        }
                        onTeleport() {
                            this.m_command = "";
                            this.m_state = EnemyAction.ST_TELEPORT;
                        }
                        onAttack() {
                            this.m_state = EnemyAction.ST_ATTACK;
                            this.m_enemy.gotoState(enemies.BaseEnemy.ST_ATTACK_1);
                            this.m_enemy.autoFlip = false;
                            this.effectAttack();
                        }
                        endAttack() {
                            this.m_command = "";
                            this.m_state = EnemyAction.ST_END_ATTACK;
                            this.m_enemy.autoFlip = true;
                        }
                        onKnock() {
                            this.m_command = "";
                            this.m_state = EnemyAction.ST_KNOCK;
                            this.m_enemy.toKnock = true;
                            this.m_enemy.autoFlip = false;
                        }
                        endKnock() {
                            this.m_command = "";
                            this.m_state = EnemyAction.ST_END_KNOCK;
                        }
                        onStandUp() {
                            this.m_command = "";
                            this.m_state = EnemyAction.ST_STAND_UP;
                        }
                        endStandUp() {
                            this.m_command = "";
                            this.m_enemy.toKnock = false;
                            this.m_state = EnemyAction.ST_END_STAND_UP;
                            this.m_enemy.autoFlip = true;
                        }
                        onDie() {
                            this.m_command = "";
                            this.m_state = EnemyAction.ST_DIE;
                        }
                        endDie() {
                            this.m_command = "";
                            this.m_state = EnemyAction.ST_END_DIE;
                        }
                        executeCommad(command, timeExec) {
                            this.m_command = command;
                            this.m_timeMaxExec = timeExec;
                            this.m_timeElapse = 0;
                        }
                        effectHit() {
                        }
                        effectDie() {
                        }
                        effectAttack() {
                        }
                        free() {
                            if (this.m_enemy != null) {
                                this.m_enemy = null;
                            }
                            this.m_rangeWalkingOption = null;
                        }
                    }
                    EnemyAction.ST_INIT = 10;
                    EnemyAction.ST_STAND = 20;
                    EnemyAction.ST_WAIT = 30;
                    EnemyAction.ST_WALK = 40;
                    EnemyAction.ST_HIT = 60;
                    EnemyAction.ST_KNOCK = 70;
                    EnemyAction.ST_STAND_UP = 80;
                    EnemyAction.ST_CHECK_NEAR_PLAYER = 100;
                    EnemyAction.ST_ATTACK = 120;
                    EnemyAction.ST_DIE = 500;
                    EnemyAction.ST_END_HIT = 301;
                    EnemyAction.ST_END_STAND_UP = 302;
                    EnemyAction.ST_END_KNOCK = 303;
                    EnemyAction.ST_END_ATTACK = 304;
                    EnemyAction.ST_END_DIE = 305;
                    EnemyAction.ST_END_WAIT_APPEAR = 306;
                    EnemyAction.ST_TELEPORT = 307;
                    enemies.EnemyAction = EnemyAction;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyAction = com.bamtang.project.gameBrawler.enemies.EnemyAction;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyActionCoward extends enemies.BaseEnemyAction {
                        constructor(enemy, npc) {
                            super(enemy);
                            this.setValuesFromEnemy(npc);
                        }
                        setValuesFromEnemy(npc) {
                            this.mSpeed = this.mEnemyRef.getSpeed();
                            this.mDistance = npc.range;
                            this.mFrequency = npc.frequency;
                            this.mShootingsCount = 0;
                            this.mNumberOfShootings = npc.totalShots;
                        }
                        shoot() {
                            if (this.mShootingsCount > this.mNumberOfShootings) {
                                this.goToMovingAway();
                            }
                            else {
                                this.mShootingsCount++;
                                this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_ATTACK;
                                this.mEnemyRef.onActionAttack();
                            }
                        }
                        goToApproaching() {
                            this.mState = EnemyActionCoward.ST_APPROACHING;
                            this.mEnemyRef.onActionMove();
                        }
                        goToShooting() {
                            this.mState = EnemyActionCoward.ST_SHOOTING;
                            this.mTimerShooting = 0;
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_WAITING;
                            this.mEnemyRef.onActionStand();
                        }
                        goToMovingAway() {
                            this.mState = EnemyActionCoward.ST_MOVING_AWAY;
                            this.mDirectionMovementAxisX = !this.mDirectionMovementAxisX;
                            this.mEnemyRef.onActionMove();
                            this.mEnemyRef.setLookAtLeft(!this.mDirectionMovementAxisX);
                        }
                        goToDeath() {
                            this.mEnemyRef.remove(false);
                        }
                        /*override*/ onActionStarted() {
                            this.mInitX = this.mEnemyRef.x();
                            this.mDirectionMovementAxisX = (this.mPlayerRef.x() > this.mEnemyRef.x());
                            this.mEnemyRef.setLookAtLeft(!this.mDirectionMovementAxisX);
                            this.goToApproaching();
                        }
                        /*override*/ setPaused(paused) {
                            super.setPaused(paused);
                            if (this.mIsPaused) {
                                return;
                            }
                            if (this.mStateAction == enemies.BaseEnemyAction.ST_ACTION_ATTACK) {
                                this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_WAITING;
                                this.mEnemyRef.onActionStand();
                            }
                        }
                        /*override*/ update(dt) {
                            if (this.mIsPaused) {
                                return;
                            }
                            if (this.mState == EnemyActionCoward.ST_APPROACHING) {
                                this.mEnemyRef.setX(this.mEnemyRef.x() + dt * this.mSpeed * ((this.mDirectionMovementAxisX) ? 1 : -1));
                                if (Math.abs(this.mEnemyRef.x() - this.mInitX) >= this.mDistance) {
                                    this.goToShooting();
                                }
                            }
                            else if (this.mState == EnemyActionCoward.ST_SHOOTING) {
                                this.mTimerShooting += dt;
                                if (this.mTimerShooting >= this.mFrequency) {
                                    this.shoot();
                                    this.mTimerShooting = 0;
                                }
                            }
                            else if (this.mState == EnemyActionCoward.ST_MOVING_AWAY) {
                                this.mEnemyRef.setX(this.mEnemyRef.x() + dt * this.mSpeed * ((this.mDirectionMovementAxisX) ? 1 : -1));
                                if (Math.abs(this.mEnemyRef.x() - this.mInitX) >= this.mDistance) {
                                    this.goToDeath();
                                }
                            }
                        }
                    }
                    EnemyActionCoward.ST_APPROACHING = 0;
                    EnemyActionCoward.ST_SHOOTING = 1;
                    EnemyActionCoward.ST_MOVING_AWAY = 2;
                    enemies.EnemyActionCoward = EnemyActionCoward;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyActionCoward = com.bamtang.project.gameBrawler.enemies.EnemyActionCoward;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyActionFighter extends enemies.BaseEnemyAction {
                        constructor(enemy) {
                            super(enemy);
                            this.mCurrentArea = 0;
                            this.mCurrentDecision = 0;
                            this.mCurrentType = 0;
                            this.mAmountAttacksSelected = 0;
                            this.mCountAttacksConsecutives = 0;
                            this.A_NUMBER_DECISIONS = 2;
                            this.INDEX_A_ATTACK = 0;
                            this.INDEX_A_ATTACK_NUM = 1;
                            this.INDEX_A_ATTACK_1 = 0;
                            this.INDEX_A_BACK = 1;
                            this.INDEX_A_BACK_NUM = 2;
                            this.INDEX_A_BACK_LINE = 0;
                            this.INDEX_A_BACK_CURVE = 1;
                            this.B_NUMBER_DECISIONS = 4;
                            this.INDEX_B_WAIT = 0;
                            this.INDEX_B_WAIT_NUM = 1;
                            this.INDEX_B_WAIT_1 = 0;
                            this.INDEX_B_TOPLAYER = 1;
                            this.INDEX_B_TOPLAYER_NUM = 3;
                            this.INDEX_B_TOPLAYER_LINE = 0;
                            this.INDEX_B_TOPLAYER_ZIGZAG = 1;
                            this.INDEX_B_TOPLAYER_BORDER = 2;
                            this.INDEX_B_BACK = 2;
                            this.INDEX_B_BACK_NUM = 2;
                            this.INDEX_B_BACK_LINE = 0;
                            this.INDEX_B_BACK_CURVE = 1;
                            this.INDEX_B_AMBUSH = 3;
                            this.INDEX_B_AMBUSH_NUM = 2;
                            this.INDEX_B_AMBUSH_OUT = 0;
                            this.INDEX_B_AMBUSH_IN = 1;
                            this.C_NUMBER_DECISIONS = 3;
                            this.INDEX_C_WAIT = 0;
                            this.INDEX_C_WAIT_NUM = 1;
                            this.INDEX_C_WAIT_1 = 0;
                            this.INDEX_C_TOPLAYER = 1;
                            this.INDEX_C_TOPLAYER_NUM = 2;
                            this.INDEX_C_TOPLAYER_LINE = 0;
                            this.INDEX_C_TOPLAYER_ZIGZAG = 1;
                            this.INDEX_C_PATROL = 2;
                            this.INDEX_C_PATROL_NUM = 1;
                            this.INDEX_C_PATROL_X = 0;
                            this.mCosTheta = 0;
                            this.mSinTheta = 0;
                            this.mAlpha = 0;
                            this.mPlayerPositionX = 0;
                            this.mPlayerPositionY = 0;
                            this.mBorderFactor = 0;
                            this.mDirectionOnBorderMovement = 0;
                            this.mIndexOnPath = 0;
                            this.mXmapMin = 0;
                            this.mYmapMin = 0;
                            this.mTimer = 0;
                            this.mTimer = 0;
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_INIT;
                            this.mMotionLinear = new LinearMovement(this.mEnemyRef.x(), this.mEnemyRef.y(), this.mEnemyRef.getSpeed());
                            this.mMotionLinear.endCallback = this.onMovementCompleted.bind(this);
                            this.mMotionCircular = new CircularMovement(this.mEnemyRef.x(), this.mEnemyRef.y(), this.mEnemyRef.getSpeed(), false, false);
                            this.mMotionCircular.endCallback = this.onMovementCompleted.bind(this);
                            this.precalcSin();
                            this.setupDecisionArray();
                            this.setValuesFromEnemy();
                            this.setupSumOfDecisions();
                            this.setupSumOfTypesOnDecisions();
                            this.mCountAttacksConsecutives = 0;
                            this.mAmountAttacksSelected = -1;
                        }
                        setupDecisionArray() {
                            this.mDecisionArrayCount = new Array(EnemyActionFighter.TOTAL_AREAS).fill(0);
                            this.mDecisionArrayCount[EnemyActionFighter.A] = this.A_NUMBER_DECISIONS;
                            this.mDecisionArrayCount[EnemyActionFighter.B] = this.B_NUMBER_DECISIONS;
                            this.mDecisionArrayCount[EnemyActionFighter.C] = this.C_NUMBER_DECISIONS;
                            this.mTypeArrayCount = new Array(EnemyActionFighter.TOTAL_AREAS).fill(0);
                            this.mTypeArrayCount[EnemyActionFighter.A] = new Array(this.mDecisionArrayCount[EnemyActionFighter.A]).fill(0);
                            this.mTypeArrayCount[EnemyActionFighter.B] = new Array(this.mDecisionArrayCount[EnemyActionFighter.B]).fill(0);
                            this.mTypeArrayCount[EnemyActionFighter.C] = new Array(this.mDecisionArrayCount[EnemyActionFighter.C]).fill(0);
                            this.mTypeArrayCount[EnemyActionFighter.A][this.INDEX_A_ATTACK] = this.INDEX_A_ATTACK_NUM;
                            this.mTypeArrayCount[EnemyActionFighter.A][this.INDEX_A_BACK] = this.INDEX_A_BACK_NUM;
                            this.mTypeArrayCount[EnemyActionFighter.B][this.INDEX_B_WAIT] = this.INDEX_B_WAIT_NUM;
                            this.mTypeArrayCount[EnemyActionFighter.B][this.INDEX_B_TOPLAYER] = this.INDEX_B_TOPLAYER_NUM;
                            this.mTypeArrayCount[EnemyActionFighter.B][this.INDEX_B_BACK] = this.INDEX_B_BACK_NUM;
                            this.mTypeArrayCount[EnemyActionFighter.B][this.INDEX_B_AMBUSH] = this.INDEX_B_AMBUSH_NUM;
                            this.mTypeArrayCount[EnemyActionFighter.C][this.INDEX_C_WAIT] = this.INDEX_C_WAIT_NUM;
                            this.mTypeArrayCount[EnemyActionFighter.C][this.INDEX_C_TOPLAYER] = this.INDEX_C_TOPLAYER_NUM;
                            this.mTypeArrayCount[EnemyActionFighter.C][this.INDEX_C_PATROL] = this.INDEX_C_PATROL_NUM;
                            this.mTypeArray = new Array(EnemyActionFighter.TOTAL_AREAS).fill(0);
                            this.mTypeArray[EnemyActionFighter.A] = new Array(this.mDecisionArrayCount[EnemyActionFighter.A]).fill(0);
                            this.mTypeArray[EnemyActionFighter.A][this.INDEX_A_ATTACK] = new Array(this.mTypeArrayCount[EnemyActionFighter.A][this.INDEX_B_WAIT]).fill(0);
                            this.mTypeArray[EnemyActionFighter.A][this.INDEX_A_BACK] = new Array(this.mTypeArrayCount[EnemyActionFighter.A][this.INDEX_A_BACK]).fill(0);
                            this.mTypeArray[EnemyActionFighter.B] = new Array(this.mDecisionArrayCount[EnemyActionFighter.B]).fill(0);
                            this.mTypeArray[EnemyActionFighter.B][this.INDEX_B_WAIT] = new Array(this.mTypeArrayCount[EnemyActionFighter.B][this.INDEX_B_WAIT]).fill(0);
                            this.mTypeArray[EnemyActionFighter.B][this.INDEX_B_TOPLAYER] = new Array(this.mTypeArrayCount[EnemyActionFighter.B][this.INDEX_B_TOPLAYER]).fill(0);
                            this.mTypeArray[EnemyActionFighter.B][this.INDEX_B_BACK] = new Array(this.mTypeArrayCount[EnemyActionFighter.B][this.INDEX_B_BACK]).fill(0);
                            this.mTypeArray[EnemyActionFighter.B][this.INDEX_B_AMBUSH] = new Array(this.mTypeArrayCount[EnemyActionFighter.B][this.INDEX_B_AMBUSH]).fill(0);
                            this.mTypeArray[EnemyActionFighter.C] = new Array(this.mDecisionArrayCount[EnemyActionFighter.C]).fill(0);
                            this.mTypeArray[EnemyActionFighter.C][this.INDEX_C_WAIT] = new Array(this.mTypeArrayCount[EnemyActionFighter.C][this.INDEX_C_WAIT]).fill(0);
                            this.mTypeArray[EnemyActionFighter.C][this.INDEX_C_TOPLAYER] = new Array(this.mTypeArrayCount[EnemyActionFighter.C][this.INDEX_C_TOPLAYER]).fill(0);
                            this.mTypeArray[EnemyActionFighter.C][this.INDEX_C_PATROL] = new Array(this.mTypeArrayCount[EnemyActionFighter.C][this.INDEX_C_PATROL]).fill(0);
                        }
                        setValuesFromEnemy() {
                            var data = this.mEnemyRef.getData();
                            this.mDecisionArray = new Array(EnemyActionFighter.TOTAL_AREAS).fill(0);
                            this.mDecisionArray[EnemyActionFighter.A] = new Array(this.mDecisionArrayCount[EnemyActionFighter.A]).fill(0);
                            this.mDecisionArray[EnemyActionFighter.A][this.INDEX_A_ATTACK] = data.probAttackZone_A;
                            this.mDecisionArray[EnemyActionFighter.A][this.INDEX_A_BACK] = data.probBackZone_A;
                            this.mDecisionArray[EnemyActionFighter.B] = new Array(this.mDecisionArrayCount[EnemyActionFighter.B]).fill(0);
                            this.mDecisionArray[EnemyActionFighter.B][this.INDEX_B_WAIT] = data.probWaitZone_B;
                            this.mDecisionArray[EnemyActionFighter.B][this.INDEX_B_TOPLAYER] = data.probGoToPlayerZone_B;
                            this.mDecisionArray[EnemyActionFighter.B][this.INDEX_B_BACK] = data.probBackZone_B;
                            this.mDecisionArray[EnemyActionFighter.B][this.INDEX_B_AMBUSH] = data.probAmbushZone_B;
                            this.mDecisionArray[EnemyActionFighter.C] = new Array(this.mDecisionArrayCount[EnemyActionFighter.C]).fill(0);
                            this.mDecisionArray[EnemyActionFighter.C][this.INDEX_C_WAIT] = data.probWaitZone_C;
                            this.mDecisionArray[EnemyActionFighter.C][this.INDEX_C_TOPLAYER] = data.probGoToPLayerZone_C;
                            this.mDecisionArray[EnemyActionFighter.C][this.INDEX_C_PATROL] = data.probPatrolZone_C;
                            this.mTypeArray[EnemyActionFighter.A][this.INDEX_A_ATTACK][this.INDEX_A_ATTACK_1] = data.probAttack_1_zone_C;
                            this.mTypeArray[EnemyActionFighter.A][this.INDEX_A_BACK][this.INDEX_A_BACK_LINE] = data.probBack_line_zone_A;
                            this.mTypeArray[EnemyActionFighter.A][this.INDEX_A_BACK][this.INDEX_A_BACK_CURVE] = data.probBack_curve_zone_A;
                            this.mTypeArray[EnemyActionFighter.B][this.INDEX_B_WAIT][this.INDEX_B_WAIT_1] = data.probWait_1_zone_B;
                            this.mTypeArray[EnemyActionFighter.B][this.INDEX_B_TOPLAYER][this.INDEX_B_TOPLAYER_LINE] = data.probGoToPlayer_line_zone_B;
                            this.mTypeArray[EnemyActionFighter.B][this.INDEX_B_TOPLAYER][this.INDEX_B_TOPLAYER_ZIGZAG] = data.probGoToPlayer_zigzag_zone_B;
                            this.mTypeArray[EnemyActionFighter.B][this.INDEX_B_TOPLAYER][this.INDEX_B_TOPLAYER_BORDER] = data.probGoToPlayer_border_zone_B;
                            this.mTypeArray[EnemyActionFighter.B][this.INDEX_B_BACK][this.INDEX_B_BACK_LINE] = data.probBack_line_zone_B;
                            this.mTypeArray[EnemyActionFighter.B][this.INDEX_B_BACK][this.INDEX_B_BACK_CURVE] = data.probBack_curve_zone_B;
                            this.mTypeArray[EnemyActionFighter.B][this.INDEX_B_AMBUSH][this.INDEX_B_AMBUSH_OUT] = data.probAmbush_out_zone_B;
                            this.mTypeArray[EnemyActionFighter.B][this.INDEX_B_AMBUSH][this.INDEX_B_AMBUSH_IN] = data.probAmbush_in_zone_B;
                            this.mTypeArray[EnemyActionFighter.C][this.INDEX_C_WAIT][this.INDEX_C_WAIT_1] = data.probWait_1_zone_C;
                            this.mTypeArray[EnemyActionFighter.C][this.INDEX_C_TOPLAYER][this.INDEX_C_TOPLAYER_LINE] = data.probGoToPlayer_line_zone_C;
                            this.mTypeArray[EnemyActionFighter.C][this.INDEX_C_TOPLAYER][this.INDEX_C_TOPLAYER_ZIGZAG] = data.probGoToPlayer_zigzag_zone_C;
                            this.mTypeArray[EnemyActionFighter.C][this.INDEX_C_PATROL][this.INDEX_C_PATROL_X] = data.probPatrol_X_zone_C;
                        }
                        setupSumOfDecisions() {
                            this.mDecisionArraySum = new Array(EnemyActionFighter.TOTAL_AREAS).fill(0);
                            var c;
                            var i;
                            var j;
                            for (i = 0; i < EnemyActionFighter.TOTAL_AREAS; ++i) {
                                c = 0;
                                for (j = 0; j < this.mDecisionArrayCount[i]; ++j) {
                                    c += this.mDecisionArray[i][j];
                                }
                                this.mDecisionArraySum[i] = c;
                            }
                        }
                        setupSumOfTypesOnDecisions() {
                            this.mTypeArraySum = new Array(EnemyActionFighter.TOTAL_AREAS).fill(0);
                            this.mTypeArraySum[EnemyActionFighter.A] = new Array(this.mDecisionArrayCount[EnemyActionFighter.A]).fill(0);
                            this.mTypeArraySum[EnemyActionFighter.B] = new Array(this.mDecisionArrayCount[EnemyActionFighter.B]).fill(0);
                            this.mTypeArraySum[EnemyActionFighter.C] = new Array(this.mDecisionArrayCount[EnemyActionFighter.C]).fill(0);
                            var c;
                            var i;
                            var j;
                            var k;
                            for (i = 0; i < EnemyActionFighter.TOTAL_AREAS; ++i) {
                                for (j = 0; j < this.mDecisionArrayCount[i]; ++j) {
                                    c = 0;
                                    for (k = 0; k < this.mTypeArrayCount[i][j]; ++k) {
                                        c += this.mTypeArray[i][j][k];
                                    }
                                    this.mTypeArraySum[i][j] = c;
                                }
                            }
                        }
                        /*override*/ setPaused(paused) {
                            super.setPaused(paused);
                            if (this.mIsPaused) {
                                this.mMotionLinear.cancelMotion();
                                this.mMotionCircular.cancelMotion();
                            }
                            else {
                                this.decideAction();
                            }
                        }
                        isInAttackArea() {
                            return this.mEnemyRef.hitTestBaseCollision(this.mPlayerRef);
                        }
                        isInSafeArea() {
                            var dx = this.mPlayerRef.x() - this.mEnemyRef.x();
                            return (Math.abs(dx) <= 150);
                        }
                        decideAction() {
                            this.mMotionLinear.resetPosition(this.mEnemyRef.x(), this.mEnemyRef.y());
                            this.mMotionCircular.resetPosition(this.mEnemyRef.x(), this.mEnemyRef.y());
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_NONE;
                            this.checkCurrentArea();
                            this.selectDecision();
                            this.selectTypeOfDecision();
                            this.processDecisionArray();
                        }
                        checkCurrentArea() {
                            if (this.isInAttackArea()) {
                                this.mCurrentArea = EnemyActionFighter.A;
                            }
                            else if (this.isInSafeArea()) {
                                this.mCurrentArea = EnemyActionFighter.B;
                            }
                            else {
                                this.mCurrentArea = EnemyActionFighter.C;
                            }
                        }
                        selectDecision() {
                            if (this.mAmountAttacksSelected != -1) {
                                if (this.mCountAttacksConsecutives < this.mAmountAttacksSelected) {
                                    if (this.mCurrentArea == EnemyActionFighter.A) {
                                        this.mCurrentDecision = this.INDEX_A_ATTACK;
                                        return;
                                    }
                                    else {
                                        this.mAmountAttacksSelected = -1;
                                    }
                                }
                                else {
                                    this.mAmountAttacksSelected = -1;
                                    this.mCurrentDecision = this.INDEX_A_BACK;
                                }
                                return;
                            }
                            var sumRand = ~~(Common.random(1, this.mDecisionArraySum[this.mCurrentArea]));
                            var total = ~~(this.mDecisionArraySum[this.mCurrentArea]);
                            for (var i = this.mDecisionArrayCount[this.mCurrentArea] - 1; i >= 0; --i) {
                                total -= this.mDecisionArray[this.mCurrentArea][i];
                                if (sumRand > total) {
                                    this.mCurrentDecision = i;
                                    return;
                                }
                            }
                        }
                        selectTypeOfDecision() {
                            var sumRand = ~~(Common.random(1, this.mTypeArraySum[this.mCurrentArea][this.mCurrentDecision]));
                            var total = ~~(this.mTypeArraySum[this.mCurrentArea][this.mCurrentDecision]);
                            var i;
                            for (i = this.mTypeArrayCount[this.mCurrentArea][this.mCurrentDecision] - 1; i >= 0; --i) {
                                total -= this.mTypeArray[this.mCurrentArea][this.mCurrentDecision][i];
                                if (sumRand > total) {
                                    this.mCurrentType = i;
                                    return;
                                }
                            }
                        }
                        processDecisionArray() {
                            switch (this.mCurrentArea) {
                                case EnemyActionFighter.A:
                                    {
                                        switch (this.mCurrentDecision) {
                                            case this.INDEX_A_ATTACK:
                                                if (this.mAmountAttacksSelected == -1) {
                                                    this.mAmountAttacksSelected = 1;
                                                    this.mCountAttacksConsecutives = 1;
                                                }
                                                else {
                                                    this.mCountAttacksConsecutives++;
                                                }
                                                this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                                                this.mEnemyRef.onActionAttack();
                                                this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_ATTACK;
                                                break;
                                            case this.INDEX_A_BACK: {
                                                switch (this.mCurrentType) {
                                                    case this.INDEX_A_BACK_LINE:
                                                        this.goBackLine();
                                                        break;
                                                    case this.INDEX_A_BACK_CURVE:
                                                        this.goBackCurve();
                                                        break;
                                                }
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                case EnemyActionFighter.B:
                                    {
                                        switch (this.mCurrentDecision) {
                                            case this.INDEX_B_WAIT:
                                                this.goWait();
                                                break;
                                            case this.INDEX_B_TOPLAYER: {
                                                switch (this.mCurrentType) {
                                                    case this.INDEX_B_TOPLAYER_LINE:
                                                        this.goToPlayerLine();
                                                        break;
                                                    case this.INDEX_B_TOPLAYER_ZIGZAG:
                                                        this.goToPlayerZigZag();
                                                        this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_MOVE_ZIGZAG;
                                                        break;
                                                    case this.INDEX_B_TOPLAYER_BORDER:
                                                        this.goBorder();
                                                        break;
                                                }
                                                break;
                                            }
                                            case this.INDEX_B_BACK: {
                                                switch (this.mCurrentType) {
                                                    case this.INDEX_B_BACK_LINE:
                                                        this.goBackLine();
                                                        break;
                                                    case this.INDEX_B_BACK_CURVE:
                                                        this.goBackCurve();
                                                        break;
                                                }
                                                break;
                                            }
                                            case this.INDEX_B_AMBUSH:
                                                switch (this.mCurrentType) {
                                                    case this.INDEX_B_AMBUSH_IN:
                                                        this.goAmbushIn();
                                                        break;
                                                    case this.INDEX_B_AMBUSH_OUT:
                                                        this.goAmbushOut();
                                                        break;
                                                }
                                                break;
                                        }
                                        break;
                                    }
                                case EnemyActionFighter.C:
                                    {
                                        switch (this.mCurrentDecision) {
                                            case this.INDEX_C_WAIT:
                                                this.goWait();
                                                break;
                                            case this.INDEX_C_TOPLAYER: {
                                                switch (this.mCurrentType) {
                                                    case this.INDEX_C_TOPLAYER_LINE:
                                                        this.goToPlayerLine();
                                                        break;
                                                    case this.INDEX_C_TOPLAYER_ZIGZAG:
                                                        this.goToPlayerZigZag();
                                                        this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_MOVE_ZIGZAG;
                                                        break;
                                                }
                                                break;
                                            }
                                            case this.INDEX_C_PATROL:
                                                this.goPatrolX();
                                                break;
                                        }
                                        break;
                                    }
                            }
                        }
                        onMovementCompleted(movement) {
                            this.mMotionLinear.setAwaitingToDelete(true);
                            this.mMotionCircular.setAwaitingToDelete(true);
                        }
                        /*override*/ onActionStarted() {
                            if (!this.mIsPaused) {
                                this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                                this.decideAction();
                            }
                        }
                        goWait() {
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_WAITING;
                            this.mEnemyRef.onActionStand();
                            if (this.mTimer <= 0) {
                                this.mTimer = Common.random(500, 1000);
                            }
                        }
                        goToPlayerLine() {
                            var dx = this.mPlayerRef.x() - this.mEnemyRef.x();
                            var dy = this.mPlayerRef.y() - this.mEnemyRef.y();
                            var radians = Math.atan2(dy, dx);
                            this.mMotionLinear.setAwaitingToDelete(false);
                            this.mMotionLinear.gotoRadialPoint(Common.random(EnemyActionFighter.MIN_MOTION, EnemyActionFighter.MAX_MOTION), radians);
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_MOVE_LINEAR;
                            this.mEnemyRef.onActionMove();
                        }
                        updateLinearMove(dt) {
                            if (this.mMotionLinear.isAwaitingDelete()) {
                                this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                                this.decideAction();
                                return;
                            }
                            this.mMotionLinear.update(dt);
                            if (this.IsOkPosition(this.mMotionLinear.x(), this.mMotionLinear.y())) {
                                this.mEnemyRef.setX(this.mMotionLinear.x());
                                this.mEnemyRef.setY(this.mMotionLinear.y());
                            }
                            else {
                                this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_NONE;
                                this.mMotionLinear.cancelMotion();
                                this.goPathFinding();
                            }
                        }
                        goBackLine() {
                            this.mMotionLinear.setAwaitingToDelete(false);
                            this.mMotionLinear.gotoRadialPoint(Common.random(EnemyActionFighter.MIN_MOTION, EnemyActionFighter.MAX_MOTION), this.mEnemyRef.isLookingToLeft() ? 0 : 3.1416);
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_MOVE_LINEAR;
                            this.mEnemyRef.onActionMove();
                        }
                        goBackCurve() {
                            this.mMotionCircular.setAwaitingToDelete(false);
                            var radio = Common.random(EnemyActionFighter.MIN_RADIO, EnemyActionFighter.MAX_RADIO);
                            var angle = Common.random(EnemyActionFighter.MIN_ANGLE, EnemyActionFighter.MAX_ANGLE);
                            angle *= (Common.random(0, 1)) ? 1 : -1;
                            var dx = this.mEnemyRef.x() - this.mPlayerRef.x();
                            var dy = this.mEnemyRef.y() - this.mPlayerRef.y();
                            var h = Math.sqrt(dx * dx + dy * dy);
                            dx /= h;
                            dy /= h;
                            this.mMotionCircular.startMovement(this.mEnemyRef.x() + dx * radio, this.mEnemyRef.y() + dy * radio, angle);
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR;
                            this.mEnemyRef.onActionMove();
                        }
                        goAmbushOut() {
                            this.mMotionCircular.setAwaitingToDelete(false);
                            var angle = Common.random(EnemyActionFighter.MIN_ANGLE, EnemyActionFighter.MAX_ANGLE);
                            this.mMotionCircular.startMovement(this.mPlayerRef.x(), this.mPlayerRef.y(), angle);
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR;
                            this.mEnemyRef.onActionMove();
                        }
                        goAmbushIn() {
                            this.mMotionCircular.setAwaitingToDelete(false);
                            var angle = Math.min(80, Common.random(EnemyActionFighter.MIN_ANGLE, EnemyActionFighter.MAX_ANGLE));
                            var ux = this.mEnemyRef.x() - this.mPlayerRef.x();
                            var uy = this.mEnemyRef.y() - this.mPlayerRef.y();
                            var h = Math.sqrt(ux * ux + uy * uy);
                            ux /= h;
                            uy /= h;
                            var vx = ux * this.getCos(angle) - uy * this.getSin(angle);
                            var vy = ux * this.getSin(angle) + uy * this.getCos(angle);
                            var dist = 2.0 * h * this.getCos(angle);
                            this.mMotionCircular.startMovement(this.mPlayerRef.x() + vx * dist, this.mPlayerRef.y() + vy * dist, angle);
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR;
                            this.mEnemyRef.onActionMove();
                        }
                        updateCircularMove(dt) {
                            if (this.mMotionCircular.isAwaitingDelete()) {
                                this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                                this.decideAction();
                                return;
                            }
                            this.mMotionCircular.update(dt);
                            if (this.IsOkPosition(this.mMotionCircular.x(), this.mMotionCircular.y())) {
                                this.mEnemyRef.setX(this.mMotionCircular.x());
                                this.mEnemyRef.setY(this.mMotionCircular.y());
                            }
                            else {
                                this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_NONE;
                                this.mMotionLinear.cancelMotion();
                                this.goPathFinding();
                            }
                        }
                        updateBorderMove(dt) {
                            if (this.mAlpha >= 180 || this.mAlpha <= -180) {
                                this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                                this.decideAction();
                                return;
                            }
                            this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                            this.mAlpha += ~~(dt * EnemyActionFighter.FACTOR_ANGLE_UPDATE * this.mDirectionOnBorderMovement);
                            var xtmp = this.mBorderFactor * (this.getCos(this.mAlpha) + 1) * this.getCos(this.mAlpha);
                            var ytmp = this.mBorderFactor * (this.getCos(this.mAlpha) + 1) * this.getSin(this.mAlpha);
                            var nextX = this.mPlayerPositionX + xtmp * this.mCosTheta - ytmp * this.mSinTheta;
                            var nextY = this.mPlayerPositionY + xtmp * this.mSinTheta + ytmp * this.mCosTheta;
                            if (this.IsOkPosition(nextX, nextY)) {
                                this.mEnemyRef.setX(nextX);
                                this.mEnemyRef.setY(nextY);
                            }
                            else {
                                this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_NONE;
                                this.goPathFinding();
                            }
                        }
                        goBorder() {
                            var dx = this.mEnemyRef.x() - this.mPlayerRef.x();
                            var dy = this.mEnemyRef.y() - this.mPlayerRef.y();
                            var h = Math.sqrt(dx * dx + dy * dy);
                            this.mCosTheta = dx / h;
                            this.mSinTheta = dy / h;
                            this.mAlpha = 0.0;
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_MOVE_BORDER;
                            this.mEnemyRef.onActionMove();
                            this.mPlayerPositionX = this.mPlayerRef.x();
                            this.mPlayerPositionY = this.mPlayerRef.y();
                            this.mBorderFactor = h / 2;
                            this.mDirectionOnBorderMovement = (Common.random(0, 1) ? -1 : 1);
                        }
                        goPatrolX() {
                            this.mMotionLinear.setAwaitingToDelete(false);
                            this.mMotionLinear.resetPosition(this.mEnemyRef.x(), this.mEnemyRef.y());
                            this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                            this.mMotionLinear.gotoRadialPoint(Math.abs(this.mPlayerRef.x() - this.mEnemyRef.x()) + Common.random(EnemyActionFighter.MIN_MOTION_PATROL, EnemyActionFighter.MAX_MOTION_PATROL), (this.mEnemyRef.x() < this.mPlayerRef.x()) ? 0 : 3.1416);
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_MOVE_PATROL;
                            this.mEnemyRef.onActionMove();
                        }
                        updatePatrolMove(dt) {
                            if (this.mMotionLinear.isAwaitingDelete()) {
                                if (this.mTimer <= 0) {
                                    this.mEnemyRef.onActionStand();
                                    this.mTimer = Common.random(500, 1000);
                                }
                                this.mTimer -= dt;
                                if (this.mTimer <= 0) {
                                    this.goPatrolX();
                                }
                            }
                            else {
                                this.mMotionLinear.update(dt);
                                if (this.IsOkPosition(this.mMotionLinear.x(), this.mMotionLinear.y())) {
                                    this.mEnemyRef.setX(this.mMotionLinear.x());
                                    this.mEnemyRef.setY(this.mMotionLinear.y());
                                }
                                else {
                                    this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_NONE;
                                    this.mMotionLinear.cancelMotion();
                                    this.goPathFinding();
                                }
                            }
                        }
                        goToPlayerZigZag() {
                            var dx = this.mPlayerRef.x() - this.mEnemyRef.x();
                            var dy = this.mPlayerRef.y() - this.mEnemyRef.y();
                            var angle = this.getAtan(dy, dx);
                            var deltaRand = Common.random(0, 2 * EnemyActionFighter.DELTA_ANGLE);
                            deltaRand -= EnemyActionFighter.DELTA_ANGLE;
                            angle += deltaRand;
                            angle = (angle + 360) % 360;
                            this.mMotionLinear.setAwaitingToDelete(false);
                            this.mMotionLinear.resetPosition(this.mEnemyRef.x(), this.mEnemyRef.y());
                            this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                            this.mMotionLinear.gotoRadialPoint(Common.random(EnemyActionFighter.MIN_MOTION, EnemyActionFighter.MAX_MOTION), angle * Math.PI / 180.0);
                            this.mEnemyRef.onActionMove();
                        }
                        updateZigZagMove(dt) {
                            if (this.mMotionLinear.isAwaitingDelete()) {
                                this.goToPlayerZigZag();
                            }
                            else {
                                this.mMotionLinear.update(dt);
                                if (this.IsOkPosition(this.mMotionLinear.x(), this.mMotionLinear.y())) {
                                    this.mEnemyRef.setX(this.mMotionLinear.x());
                                    this.mEnemyRef.setY(this.mMotionLinear.y());
                                }
                                else {
                                    this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_NONE;
                                    this.mMotionLinear.cancelMotion();
                                    this.goPathFinding();
                                }
                            }
                        }
                        findRandomPositionForTeleport() {
                            var x = this.mPlayerRef.x();
                            var y = this.mPlayerRef.y();
                            var count = 0;
                            while (true) {
                                var dx = Common.random(0, 200);
                                dx -= 100;
                                var dy = Common.random(0, 200);
                                dy -= 100;
                                if (this.IsOkPosition(x + dx, y + dy)) {
                                    this.mEnemyRef.onActionTeleport(x + dx, y + dy);
                                    return;
                                }
                                count++;
                                if (count > 100) {
                                    this.goWait();
                                    return;
                                }
                            }
                        }
                        goPathFinding() {
                            if (!this.IsOkPosition(this.mEnemyRef.x(), this.mEnemyRef.y())) {
                                this.findRandomPositionForTeleport();
                                return;
                            }
                            var tileWidth = ~~(this.mEnemyRef.world().tileWidth());
                            var tileHeight = ~~(this.mEnemyRef.world().tileHeight());
                            var xEnemy = ~~(this.mEnemyRef.x() / tileWidth);
                            var yEnemy = ~~(this.mEnemyRef.y() / tileHeight);
                            var xPlayer = ~~(this.mPlayerRef.x() / tileWidth);
                            var yPlayer = ~~((~~(this.mPlayerRef.y()) / tileHeight) - 0.5);
                            var xPlayerBorderMin = xPlayer - 5;
                            var xPlayerBorderMax = xPlayer + 5;
                            var xEnemyBorderMin = xEnemy - 5;
                            var xEnemyBorderMax = xEnemy + 5;
                            var yPlayerBorderMin = yPlayer - 5;
                            var yPlayerBorderMax = yPlayer + 5;
                            var yEnemyBorderMin = yEnemy - 5;
                            var yEnemyBorderMax = yEnemy + 5;
                            this.mXmapMin = Math.min(xPlayerBorderMin, xEnemyBorderMin);
                            var xMapMax = ~~(Math.max(xPlayerBorderMax, xEnemyBorderMax));
                            this.mYmapMin = Math.max(0, Math.min(yPlayerBorderMin, yEnemyBorderMin));
                            var yMapMax = Math.max(yPlayerBorderMax, yEnemyBorderMax);
                            var widthMap = ~~(xMapMax - this.mXmapMin + 1);
                            var heightMap = ~~(yMapMax - this.mYmapMin + 1);
                            var map = Array(widthMap).fill(0);
                            var i;
                            var j;
                            for (i = 0; i < widthMap; ++i) {
                                map[i] = Array(heightMap).fill(0);
                                for (j = 0; j < heightMap; ++j) {
                                    map[i][j] = this.mEnemyRef.world().getCellInPosition((i + this.mXmapMin) * tileWidth, (j + this.mYmapMin) * tileHeight);
                                }
                            }
                            this.mPath = enemies.PathFindingEnemy.getPath(map, xEnemy - this.mXmapMin, yEnemy - this.mYmapMin, xPlayer - this.mXmapMin, yPlayer - this.mYmapMin, 0);
                            if (this.mPath == null) {
                                this.goWait();
                            }
                            else {
                                this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_MOVE_PATHFINDING;
                                this.mIndexOnPath = 0;
                                this.goToNextPoint();
                            }
                        }
                        goToNextPoint() {
                            if (this.mIndexOnPath == this.mPath.length) {
                                this.mMotionLinear.cancelMotion();
                                this.decideAction();
                                return;
                            }
                            var tileWidth = this.mEnemyRef.world().tileWidth();
                            var tileHeight = this.mEnemyRef.world().tileHeight();
                            this.mMotionLinear.setAwaitingToDelete(false);
                            this.mMotionLinear.resetPosition(this.mEnemyRef.x(), this.mEnemyRef.y());
                            this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                            this.mMotionLinear.gotoPosition((this.mXmapMin + this.mPath[this.mIndexOnPath].i) * tileWidth, (this.mYmapMin + this.mPath[this.mIndexOnPath].j) * tileHeight);
                            this.mEnemyRef.onActionMove();
                            this.mIndexOnPath++;
                        }
                        updatePathFinding(dt) {
                            if (this.mMotionLinear.isAwaitingDelete()) {
                                this.goToNextPoint();
                            }
                            else {
                                this.mMotionLinear.update(dt);
                                this.mEnemyRef.setX(this.mMotionLinear.x());
                                this.mEnemyRef.setY(this.mMotionLinear.y());
                            }
                        }
                        IsOkPosition(x, y) {
                            return (this.mEnemyRef.world().getCellInPosition(x, y) == BRW_WorldCollisionLayer.CELL_EMPTY);
                        }
                        precalcSin() {
                            EnemyActionFighter.mSin = new Array(91).fill(0);
                            var i;
                            for (i = 0; i <= 90; ++i) {
                                EnemyActionFighter.mSin[i] = Math.sin(i * 3.1415 / 180.0);
                            }
                        }
                        getSin(angle) {
                            if (angle / 360 >= 1 || angle / 360 <= -1) {
                                angle -= 360 * ~~(angle / 360);
                            }
                            if (angle < 0) {
                                angle += 360;
                            }
                            if (angle >= 0 && angle <= 90) {
                                return EnemyActionFighter.mSin[angle];
                            }
                            if (angle > 90 && angle <= 180) {
                                return EnemyActionFighter.mSin[180 - angle];
                            }
                            if (angle > 180 && angle <= 270) {
                                return -EnemyActionFighter.mSin[angle - 180];
                            }
                            else {
                                return -EnemyActionFighter.mSin[360 - angle];
                            }
                        }
                        getCos(angle) {
                            if (angle / 360 >= 1 || angle / 360 <= -1) {
                                angle -= 360 * ~~(angle / 360);
                            }
                            if (angle < 0) {
                                angle += 360;
                            }
                            if (angle >= 0 && angle <= 90) {
                                return EnemyActionFighter.mSin[90 - angle];
                            }
                            if (angle > 90 && angle <= 180) {
                                return -EnemyActionFighter.mSin[angle - 90];
                            }
                            if (angle > 180 && angle <= 270) {
                                return -EnemyActionFighter.mSin[90 - (angle - 180)];
                            }
                            else {
                                return EnemyActionFighter.mSin[90 - (360 - angle)];
                            }
                        }
                        getAtan(dy, dx) {
                            if (dy == 0) {
                                if (dx > 0) {
                                    return 0;
                                }
                                else {
                                    return 180;
                                }
                            }
                            if (dx == 0) {
                                if (dy > 0) {
                                    return 90;
                                }
                                else {
                                    return 270;
                                }
                            }
                            if (dx > 0 && dy > 0) {
                                return Math.atan(dy / dx) * 180.0 / Math.PI;
                            }
                            else if (dx > 0 && dy < 0) {
                                return (2 * Math.PI + Math.atan(dy / dx)) * 180.0 / Math.PI;
                            }
                            else if (dx < 0 && dy > 0) {
                                return (Math.PI + Math.atan(dy / dx)) * 180.0 / Math.PI;
                            }
                            else if (dx < 0 && dy < 0) {
                                return (Math.PI + Math.atan(dy / dx)) * 180.0 / Math.PI;
                            }
                            return 0;
                        }
                        /*override*/ update(dt) {
                            if (this.mStateAction == enemies.BaseEnemyAction.ST_ACTION_INIT) {
                                return;
                            }
                            if (this.mIsPaused) {
                                return;
                            }
                            if (this.mStateAction == enemies.BaseEnemyAction.ST_ACTION_WAITING) {
                                if (this.mTimer > 0) {
                                    this.mTimer -= dt;
                                    if (this.mTimer <= 0) {
                                        this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                                        this.decideAction();
                                        return;
                                    }
                                }
                            }
                            var currentAreaTemp = this.mCurrentArea;
                            this.checkCurrentArea();
                            if (this.mCurrentArea != currentAreaTemp) {
                                this.mMotionLinear.cancelMotion();
                                this.mMotionCircular.cancelMotion();
                                this.mTimer = 0;
                                this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_NONE;
                                this.decideAction();
                            }
                            switch (this.mStateAction) {
                                case enemies.BaseEnemyAction.ST_ACTION_MOVE_LINEAR:
                                    this.updateLinearMove(dt);
                                    break;
                                case enemies.BaseEnemyAction.ST_ACTION_MOVE_CIRCULAR:
                                    this.updateCircularMove(dt);
                                    break;
                                case enemies.BaseEnemyAction.ST_ACTION_MOVE_BORDER:
                                    this.updateBorderMove(dt);
                                    break;
                                case enemies.BaseEnemyAction.ST_ACTION_MOVE_PATROL:
                                    this.updatePatrolMove(dt);
                                    break;
                                case enemies.BaseEnemyAction.ST_ACTION_MOVE_ZIGZAG:
                                    this.updateZigZagMove(dt);
                                    break;
                                case enemies.BaseEnemyAction.ST_ACTION_MOVE_PATHFINDING:
                                    this.updatePathFinding(dt);
                                    break;
                            }
                        }
                        /*override*/ free() {
                            this.mMotionLinear.free();
                            this.mMotionLinear = null;
                            this.mMotionCircular.free();
                            this.mMotionCircular = null;
                            super.free();
                        }
                    }
                    EnemyActionFighter.MIN_MOTION = 20;
                    EnemyActionFighter.MAX_MOTION = 70;
                    EnemyActionFighter.MIN_RADIO = 120;
                    EnemyActionFighter.MAX_RADIO = 180;
                    EnemyActionFighter.MIN_ANGLE = 30;
                    EnemyActionFighter.MAX_ANGLE = 60;
                    EnemyActionFighter.FACTOR_ANGLE_UPDATE = 0.08;
                    EnemyActionFighter.MIN_MOTION_PATROL = 80;
                    EnemyActionFighter.MAX_MOTION_PATROL = 150;
                    EnemyActionFighter.DELTA_ANGLE = 60;
                    EnemyActionFighter.TOTAL_AREAS = 3;
                    EnemyActionFighter.A = 0;
                    EnemyActionFighter.B = 1;
                    EnemyActionFighter.C = 2;
                    enemies.EnemyActionFighter = EnemyActionFighter;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyActionFighter = com.bamtang.project.gameBrawler.enemies.EnemyActionFighter;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyActionIntelligent extends enemies.BaseEnemyAction {
                        constructor(enemy) {
                            super(enemy);
                            this.mTimer = 0;
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_INIT;
                            this.mMotionLinear = new LinearMovement(this.mEnemyRef.x(), this.mEnemyRef.y(), this.mEnemyRef.getSpeed());
                            this.mMotionLinear.endCallback = this.onMovementCompleted.bind(this);
                            this.mMotionCircular = new CircularMovement(this.mEnemyRef.x(), this.mEnemyRef.y(), this.mEnemyRef.getSpeed(), false, false);
                            this.mMotionCircular.endCallback = this.onMovementCompleted.bind(this);
                            this.m_intelligence = gameBrawler.GameBrawler.instance.ai;
                        }
                        goToRefLine() {
                            this.mMotionLinear.free();
                            this.mMotionLinear = null;
                            this.mMotionLinear = new LinearMovement(this.mEnemyRef.x(), this.mEnemyRef.y(), this.mEnemyRef.getSpeed());
                            this.mMotionLinear.endCallback = this.onMovementCompleted.bind(this);
                            this.mMotionLinear.gotoPosition(this.getRefX(), this.getRefY());
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_MOVE_LINEAR;
                            this.mEnemyRef.onActionMove();
                            this.mEnemyRef.setFlipX((this.mEnemyRef.x() < this.getRefX()));
                        }
                        setRefX(value) {
                            this.m_offsetRefX = value;
                        }
                        setRefY(value) {
                            this.m_offsetRefY = value;
                        }
                        getRefX() {
                            return this.mPlayerRef.x() + this.m_offsetRefX;
                        }
                        getRefY() {
                            return this.mPlayerRef.y() + this.m_offsetRefY;
                        }
                        onMovementCompleted(movement) {
                            this.mMotionLinear.setAwaitingToDelete(true);
                            this.mMotionCircular.setAwaitingToDelete(true);
                        }
                        isInRef() {
                            if ((this.getRefX() - this.mEnemyRef.x() < 2 * EnemyActionIntelligent.MAX_OFFSET_X) && (this.getRefX() - this.mEnemyRef.x() > -2 * EnemyActionIntelligent.MAX_OFFSET_X)
                                && (this.getRefY() - this.mEnemyRef.y() < 2 * EnemyActionIntelligent.MAX_OFFSET_Y) && (this.getRefY() - this.mEnemyRef.y() > -2 * EnemyActionIntelligent.MAX_OFFSET_Y)) {
                                return true;
                            }
                            return false;
                        }
                        behaveAttack(dt) {
                            this.m_timerAttack += dt;
                            if (this.m_timerAttack >= 800) {
                                this.mEnemyRef.onActionAttack();
                                this.m_timerAttack = 0;
                            }
                        }
                        decideAction() {
                            if (this.isInRef()) {
                                if (this.mEnemyRef.leaderM || this.mEnemyRef.leaderR) {
                                    this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_ATTACK;
                                }
                                else {
                                    this.mEnemyRef.gotoState(BRW_Player.ST_PLAYER_STAND);
                                    this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_WAITING;
                                }
                            }
                            else {
                                this.goToRefLine();
                            }
                        }
                        updateLinearMove(dt) {
                            if (this.mMotionLinear.isAwaitingDelete()) {
                                this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                                this.mMotionLinear.resetPosition(this.mEnemyRef.x(), this.mEnemyRef.y());
                                this.mEnemyRef.gotoState(BRW_Player.ST_PLAYER_STAND);
                                this.decideAction();
                                return;
                            }
                            this.mMotionLinear.update(dt);
                            if (this.isOkPosition(this.mMotionLinear.x(), this.mMotionLinear.y())) {
                                this.mEnemyRef.setX(this.mMotionLinear.x());
                                this.mEnemyRef.setY(this.mMotionLinear.y());
                            }
                            else {
                                this.mEnemyRef.gotoState(BRW_Player.ST_PLAYER_STAND);
                                this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_WAITING;
                                this.mMotionLinear.cancelMotion();
                            }
                        }
                        isOkPosition(x, y) {
                            return (this.mEnemyRef.world().getCellInPosition(x, y) == BRW_WorldCollisionLayer.CELL_EMPTY);
                        }
                        checkPlayerPosition(dt) {
                            this.m_timerCheckPlayer += dt;
                            if (this.m_timerCheckPlayer >= 800) {
                                this.decideAction();
                                this.m_timerCheckPlayer = 0;
                            }
                        }
                        /*override*/ update(dt) {
                            if (this.mStateAction == enemies.BaseEnemyAction.ST_ACTION_INIT) {
                                return;
                            }
                            if (this.mIsPaused) {
                                return;
                            }
                            switch (this.mStateAction) {
                                case enemies.BaseEnemyAction.ST_ACTION_MOVE_LINEAR:
                                    this.updateLinearMove(dt);
                                    break;
                                case enemies.BaseEnemyAction.ST_ACTION_ATTACK:
                                    this.behaveAttack(dt);
                                    break;
                                case enemies.BaseEnemyAction.ST_ACTION_WAITING:
                                    this.checkPlayerPosition(dt);
                                    break;
                            }
                        }
                        /*override*/ free() {
                            this.m_intelligence = null;
                            super.free();
                        }
                    }
                    EnemyActionIntelligent.MIN_MOTION = 20;
                    EnemyActionIntelligent.MAX_MOTION = 70;
                    EnemyActionIntelligent.MAX_OFFSET_X = 5;
                    EnemyActionIntelligent.MAX_OFFSET_Y = 5;
                    enemies.EnemyActionIntelligent = EnemyActionIntelligent;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyActionIntelligent = com.bamtang.project.gameBrawler.enemies.EnemyActionIntelligent;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyActionRangeFighter extends enemies.BaseEnemyAction {
                        constructor(enemy, npc) {
                            super(enemy);
                            this.mActionFighter = new enemies.EnemyActionFighter(this.mEnemyRef);
                            this.mActionRanger = new enemies.EnemyActionRanger(this.mEnemyRef, npc);
                            this.setValuesFromEnemy(npc);
                            this.mCurrentTimerToChangeToRanger = this.mTimerToChangeToRanger;
                        }
                        /*override*/ startAction(delay) {
                            super.startAction(delay);
                            this.mActionFighter.startAction(0);
                            this.mActionRanger.startAction(0);
                            this.mActionFighter.setPaused(true);
                            this.mActionRanger.setPaused(true);
                            switch (this.mCurrentAction) {
                                case EnemyActionRangeFighter.ACTION_FIGHTER:
                                    this.mActionFighter.setPaused(false);
                                    break;
                                case EnemyActionRangeFighter.ACTION_RANGER:
                                    this.mActionRanger.setPaused(false);
                                    break;
                            }
                        }
                        setValuesFromEnemy(npc) {
                            this.mCurrentAction = EnemyActionRangeFighter.ACTION_FIGHTER;
                            if (npc.initAction == "ranger") {
                                this.mCurrentAction = EnemyActionRangeFighter.ACTION_RANGER;
                            }
                            this.mTimerToChangeToRanger = 5000;
                            this.mTimeToWaitMin = npc.timeWaitMin;
                            this.mTimeToWaitMax = npc.timeWaitMax;
                            this.mDistanceSafe = 120 * 120;
                        }
                        /*override*/ setPaused(paused) {
                            this.mIsPaused = paused;
                            if (this.mCurrentAction == EnemyActionRangeFighter.ACTION_FIGHTER) {
                                this.mActionFighter.setPaused(paused);
                            }
                            else if (this.mCurrentAction == EnemyActionRangeFighter.ACTION_RANGER) {
                                this.mActionRanger.setPaused(paused);
                            }
                        }
                        /*override*/ onActionStarted() {
                            if (!this.mIsPaused) {
                                this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_NONE;
                            }
                        }
                        goWait() {
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_WAITING;
                            this.mEnemyRef.onActionStand();
                            this.mTimer = Common.random(this.mTimeToWaitMin, this.mTimeToWaitMax);
                        }
                        isInSafeArea() {
                            var dx = this.mPlayerRef.x() - this.mEnemyRef.x();
                            var dy = this.mPlayerRef.y() - this.mEnemyRef.y();
                            return ((dx * dx + dy * dy) <= this.mDistanceSafe);
                        }
                        goToFighterAction() {
                            this.mCurrentAction = EnemyActionRangeFighter.ACTION_FIGHTER;
                            this.mActionRanger.setPaused(true);
                            this.mActionFighter.setPaused(false);
                            this.mCurrentTimerToChangeToRanger = this.mTimerToChangeToRanger;
                        }
                        goToRangerAction() {
                            this.mCurrentAction = EnemyActionRangeFighter.ACTION_RANGER;
                            this.mActionFighter.setPaused(true);
                            this.mActionRanger.setPaused(false);
                        }
                        isOnFightZone() {
                            return (this.mCurrentAction == EnemyActionRangeFighter.ACTION_FIGHTER);
                        }
                        /*override*/ update(dt) {
                            if (this.mStateAction == enemies.BaseEnemyAction.ST_ACTION_INIT) {
                                return;
                            }
                            if (this.mIsPaused) {
                                return;
                            }
                            if (this.mCurrentAction == EnemyActionRangeFighter.ACTION_FIGHTER) {
                                this.mCurrentTimerToChangeToRanger -= dt;
                                if (this.mCurrentTimerToChangeToRanger <= 0) {
                                    this.goToRangerAction();
                                }
                                else {
                                    this.mActionFighter.baseUpdate(dt);
                                }
                            }
                            else if (this.mCurrentAction == EnemyActionRangeFighter.ACTION_RANGER) {
                                if (this.isInSafeArea()) {
                                    this.goToFighterAction();
                                }
                                else {
                                    this.mActionRanger.baseUpdate(dt);
                                }
                            }
                        }
                    }
                    EnemyActionRangeFighter.ACTION_FIGHTER = 0;
                    EnemyActionRangeFighter.ACTION_RANGER = 1;
                    enemies.EnemyActionRangeFighter = EnemyActionRangeFighter;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyActionRangeFighter = com.bamtang.project.gameBrawler.enemies.EnemyActionRangeFighter;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyActionRanger extends enemies.BaseEnemyAction {
                        constructor(enemy, npc) {
                            super(enemy);
                            this.mTimerPatrol = 0;
                            this.mTimer = 0;
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_INIT;
                            this.mNextAction = enemies.BaseEnemyAction.ST_ACTION_NONE;
                            this.mMotionLinear = new LinearMovement(this.mEnemyRef.x(), this.mEnemyRef.y(), this.mEnemyRef.getSpeed());
                            this.mMotionLinear.endCallback = this.onMovementCompleted.bind(this);
                            this.setValuesFromEnemy(npc);
                            this.mX1 = this.mEnemyRef.x();
                            this.mY1 = this.mEnemyRef.y();
                            this.mX2 = this.mEnemyRef.x();
                            this.mY2 = this.mEnemyRef.y() + ((this.mDirectionUp) ? (-this.mDistance) : this.mDistance);
                            if (this.mDirectionUp) {
                                var temp = this.mY1;
                                this.mY1 = this.mY2;
                                this.mY2 = temp;
                            }
                        }
                        setValuesFromEnemy(npc) {
                            this.mAlwaysLookToPlayer = npc.toPlayer;
                            this.mDirectionRight = npc.toRight;
                            this.mDirectionUp = npc.toUp;
                            this.mCurrentDirectionY = this.mDirectionUp;
                            this.mDistance = npc.range;
                            this.mTimeToWaitMin = npc.timeWaitMin;
                            this.mTimeToWaitMax = npc.timeWaitMax;
                        }
                        checkY() {
                            return (Math.abs(this.mEnemyRef.y() - this.mPlayerRef.y()) <= 5);
                        }
                        /*override*/ setPaused(paused) {
                            super.setPaused(paused);
                            if (this.mIsPaused) {
                                this.mMotionLinear.cancelMotion();
                            }
                            else {
                                if (this.mStateAction == enemies.BaseEnemyAction.ST_ACTION_ATTACK) {
                                    if (this.checkY()) {
                                        this.goWait();
                                        return;
                                    }
                                    else {
                                        this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_MOVE_PATROL;
                                        this.goPatrolY();
                                    }
                                }
                                else {
                                    this.mCurrentDirectionY = this.mDirectionUp;
                                    this.goToNextBorderPoint();
                                }
                            }
                        }
                        onMovementCompleted(movement) {
                            this.mMotionLinear.setAwaitingToDelete(true);
                        }
                        /*override*/ onActionStarted() {
                            if (!this.mIsPaused) {
                                this.mEnemyRef.setLookAtLeft((this.mAlwaysLookToPlayer) ? (this.mEnemyRef.x() > this.mPlayerRef.x()) : !this.mDirectionRight);
                                this.goPatrolY();
                            }
                        }
                        goWait() {
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_WAITING;
                            this.mEnemyRef.onActionStand();
                            this.mTimer = Common.random(this.mTimeToWaitMin, this.mTimeToWaitMax);
                        }
                        goToAttack() {
                            this.mDirectionRight = (this.mEnemyRef.x() < this.mPlayerRef.x());
                            if (this.mAlwaysLookToPlayer) {
                                this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                            }
                            else {
                                this.mEnemyRef.setLookAtLeft(!this.mDirectionRight);
                            }
                            this.mEnemyRef.onActionAttack();
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_ATTACK;
                        }
                        goPatrolY() {
                            this.mMotionLinear.setAwaitingToDelete(false);
                            this.mMotionLinear.resetPosition(this.mEnemyRef.x(), this.mEnemyRef.y());
                            if (this.mAlwaysLookToPlayer) {
                                this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                                this.mDirectionRight = this.mEnemyRef.x() < this.mPlayerRef.x();
                            }
                            if (this.mCurrentDirectionY) {
                                this.mMotionLinear.gotoPosition(this.mX2, this.mY2);
                            }
                            else {
                                this.mMotionLinear.gotoPosition(this.mX1, this.mY1);
                            }
                            this.mTimerPatrol = 1000;
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_MOVE_PATROL;
                            this.mEnemyRef.onActionMove();
                        }
                        updatePatrolMove(dt) {
                            if (this.mMotionLinear.isAwaitingDelete()) {
                                if (this.mTimer <= 0) {
                                    this.mEnemyRef.onActionStand();
                                    this.mTimer = Common.random(500, 1000);
                                }
                                this.mTimer -= dt;
                                if (this.mTimer <= 0) {
                                    this.mCurrentDirectionY = !this.mCurrentDirectionY;
                                    this.goPatrolY();
                                }
                            }
                            else {
                                this.mMotionLinear.update(dt);
                                if (this.IsOkPosition(this.mMotionLinear.x(), this.mMotionLinear.y())) {
                                    if (this.mAlwaysLookToPlayer) {
                                        this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                                    }
                                    this.mEnemyRef.setX(this.mMotionLinear.x());
                                    this.mEnemyRef.setY(this.mMotionLinear.y());
                                }
                                else {
                                    this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_NONE;
                                    this.mMotionLinear.cancelMotion();
                                    this.goPathFinding();
                                }
                            }
                        }
                        findRandomPositionForTeleport() {
                            var x = this.mPlayerRef.x();
                            var y = this.mPlayerRef.y();
                            var count = 0;
                            while (true) {
                                var dx = Common.random(0, 200);
                                dx -= 100;
                                var dy = Common.random(0, 200);
                                dy -= 100;
                                if (this.IsOkPosition(x + dx, y + dy)) {
                                    this.mEnemyRef.onActionTeleport(x + dx, y + dy);
                                    return;
                                }
                                count++;
                                if (count > 100) {
                                    this.goWait();
                                    return;
                                }
                            }
                        }
                        goPathFinding() {
                            if (!this.IsOkPosition(this.mEnemyRef.x(), this.mEnemyRef.y())) {
                                this.findRandomPositionForTeleport();
                                return;
                            }
                            var tileWidth = this.mEnemyRef.world().tileWidth();
                            var tileHeight = this.mEnemyRef.world().tileHeight();
                            var xEnemy = this.mEnemyRef.x() / tileWidth;
                            var yEnemy = this.mEnemyRef.y() / tileHeight;
                            var xPlayer = ~~(this.mX1 / tileWidth);
                            var yPlayer = ~~((this.mY1 / tileHeight) - 0.5);
                            var xPlayerBorderMin = xPlayer - 5;
                            var xPlayerBorderMax = xPlayer + 5;
                            var xEnemyBorderMin = xEnemy - 5;
                            var xEnemyBorderMax = xEnemy + 5;
                            var yPlayerBorderMin = yPlayer - 5;
                            var yPlayerBorderMax = yPlayer + 5;
                            var yEnemyBorderMin = yEnemy - 5;
                            var yEnemyBorderMax = yEnemy + 5;
                            this.mXmapMin = Math.min(xPlayerBorderMin, xEnemyBorderMin);
                            var xMapMax = Math.max(xPlayerBorderMax, xEnemyBorderMax);
                            this.mYmapMin = Math.max(0, Math.min(yPlayerBorderMin, yEnemyBorderMin));
                            var yMapMax = Math.max(yPlayerBorderMax, yEnemyBorderMax);
                            var widthMap = xMapMax - this.mXmapMin + 1;
                            var heightMap = yMapMax - this.mYmapMin + 1;
                            var map = Array(widthMap).fill(0);
                            var i;
                            var j;
                            for (i = 0; i < widthMap; ++i) {
                                map[i] = Array(heightMap).fill(0);
                                for (j = 0; j < heightMap; ++j) {
                                    map[i][j] = this.mEnemyRef.world().getCellInPosition((i + this.mXmapMin) * tileWidth, (j + this.mYmapMin) * tileHeight);
                                }
                            }
                            this.mPath = enemies.PathFindingEnemy.getPath(map, xEnemy - this.mXmapMin, yEnemy - this.mYmapMin, xPlayer - this.mXmapMin, yPlayer - this.mYmapMin, 0);
                            if (this.mPath == null) {
                                this.goWait();
                            }
                            else {
                                this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_MOVE_PATHFINDING;
                                this.mIndexOnPath = 0;
                                this.goToNextPoint();
                            }
                        }
                        goToNextPoint() {
                            if (this.mIndexOnPath == this.mPath.length) {
                                this.mMotionLinear.cancelMotion();
                                this.goPatrolY();
                                return;
                            }
                            var tileWidth = this.mEnemyRef.world().tileWidth();
                            var tileHeight = this.mEnemyRef.world().tileHeight();
                            this.mMotionLinear.setAwaitingToDelete(false);
                            this.mMotionLinear.resetPosition(this.mEnemyRef.x(), this.mEnemyRef.y());
                            this.mEnemyRef.setLookAtLeft((this.mEnemyRef.x() > (this.mXmapMin + this.mPath[this.mIndexOnPath].i) * tileWidth));
                            this.mMotionLinear.gotoPosition((this.mXmapMin + this.mPath[this.mIndexOnPath].i) * tileWidth, (this.mYmapMin + this.mPath[this.mIndexOnPath].j) * tileHeight);
                            this.mEnemyRef.onActionMove();
                            this.mIndexOnPath++;
                        }
                        updatePathFinding(dt) {
                            if (this.mMotionLinear.isAwaitingDelete()) {
                                this.goToNextPoint();
                            }
                            else {
                                this.mMotionLinear.update(dt);
                                this.mEnemyRef.setX(this.mMotionLinear.x());
                                this.mEnemyRef.setY(this.mMotionLinear.y());
                            }
                        }
                        goToNextBorderPoint() {
                            this.mMotionLinear.resetPosition(this.mEnemyRef.x(), this.mEnemyRef.y());
                            this.mMotionLinear.setAwaitingToDelete(false);
                            this.mMotionLinear.gotoPosition((this.mCurrentDirectionY) ? this.mX2 : this.mX1, (this.mCurrentDirectionY) ? this.mY2 : this.mY1);
                            this.mStateAction = enemies.BaseEnemyAction.ST_ACTION_MOVE_LINEAR;
                            this.mEnemyRef.onActionMove();
                        }
                        updateLinearMove(dt) {
                            if (this.mMotionLinear.isAwaitingDelete()) {
                                this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                                this.mCurrentDirectionY = !this.mCurrentDirectionY;
                                this.goPatrolY();
                                return;
                            }
                            this.mMotionLinear.update(dt);
                            if (this.IsOkPosition(this.mMotionLinear.x(), this.mMotionLinear.y())) {
                                this.mEnemyRef.setX(this.mMotionLinear.x());
                                this.mEnemyRef.setY(this.mMotionLinear.y());
                            }
                            else {
                                this.mMotionLinear.cancelMotion();
                                this.goPathFinding();
                            }
                        }
                        IsOkPosition(x, y) {
                            return (this.mEnemyRef.world().getCellInPosition(x, y) == BRW_WorldCollisionLayer.CELL_EMPTY);
                        }
                        /*override*/ update(dt) {
                            if (this.mIsPaused) {
                                return;
                            }
                            if (this.mStateAction != enemies.BaseEnemyAction.ST_ACTION_ATTACK && this.checkY()) {
                                this.goToAttack();
                                return;
                            }
                            switch (this.mStateAction) {
                                case enemies.BaseEnemyAction.ST_ACTION_INIT:
                                    break;
                                case enemies.BaseEnemyAction.ST_ACTION_WAITING:
                                    this.mTimer -= dt;
                                    if (this.mTimer <= 0) {
                                        if (this.checkY()) {
                                            this.goToAttack();
                                        }
                                        else {
                                            this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                                            this.goPatrolY();
                                        }
                                    }
                                    break;
                                case enemies.BaseEnemyAction.ST_ACTION_MOVE_LINEAR:
                                    this.updateLinearMove(dt);
                                    break;
                                case enemies.BaseEnemyAction.ST_ACTION_MOVE_PATROL:
                                    this.updatePatrolMove(dt);
                                    this.mTimerPatrol -= dt;
                                    if (this.mTimerPatrol < 0 &&
                                        this.checkY() &&
                                        this.mEnemyRef.isInCamera(this.mEnemyRef.world().camera())) {
                                        this.mMotionLinear.cancelMotion();
                                        this.goWait();
                                    }
                                    break;
                                case enemies.BaseEnemyAction.ST_ACTION_MOVE_PATHFINDING:
                                    this.updatePathFinding(dt);
                                    break;
                            }
                        }
                        /*override*/ free() {
                            this.mMotionLinear.free();
                            this.mMotionLinear = null;
                            super.free();
                        }
                    }
                    enemies.EnemyActionRanger = EnemyActionRanger;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyActionRanger = com.bamtang.project.gameBrawler.enemies.EnemyActionRanger;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyActionRusher extends enemies.EnemyActionFighter {
                        constructor(enemy) {
                            super(enemy);
                            this.mIsRunning = true;
                            this.mSpeed = 0.4;
                            this.mTotalDistance = this.mEnemyRef.world().camera().width * 2 / 3;
                        }
                        /*override*/ setPaused(paused) {
                            this.mIsRunning = false;
                            super.setPaused(paused);
                        }
                        /*override*/ onActionStarted() {
                            this.mInitX = this.mEnemyRef.x();
                            this.mDirection = (this.mPlayerRef.x() > this.mEnemyRef.x());
                            this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                            this.mEnemyRef.onActionRush();
                        }
                        stop() {
                            this.mIsRunning = false;
                            if (!this.mIsPaused) {
                                this.mEnemyRef.setLookAtLeft(this.mEnemyRef.x() > this.mPlayerRef.x());
                                this.decideAction();
                            }
                        }
                        /*override*/ update(dt) {
                            if (this.mIsRunning) {
                                if (this.mDirection) {
                                    this.mEnemyRef.setX(this.mEnemyRef.x() + this.mSpeed * dt);
                                }
                                else {
                                    this.mEnemyRef.setX(this.mEnemyRef.x() - this.mSpeed * dt);
                                }
                                if (Math.abs(this.mEnemyRef.x() - this.mInitX) > this.mTotalDistance) {
                                    this.stop();
                                }
                            }
                            else {
                                super.update(dt);
                            }
                        }
                    }
                    enemies.EnemyActionRusher = EnemyActionRusher;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyActionRusher = com.bamtang.project.gameBrawler.enemies.EnemyActionRusher;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyActionSoldier extends enemies.EnemyAction {
                        constructor(enemy, timeInit, timeWait, timeWalk, appear = 0) {
                            super(enemy, timeInit, timeWait, timeWalk, appear);
                            this.m_rangeWalkingOption = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 3, 2, 2, 2, 2];
                        }
                        /*override*/ effectAttack() {
                        }
                        /*override*/ update(dt) {
                            super.update(dt);
                            this.checkDisplaceDie(dt);
                        }
                        checkDisplaceDie(dt) {
                            if (this.m_state == enemies.EnemyAction.ST_DIE) {
                                this.m_enemy.displaceFallingKnock(dt);
                            }
                        }
                        /*override*/ effectHit() {
                        }
                        /*override*/ onWalk() {
                            if (super.onWalk()) {
                                this.executeCommad("onWait", this.m_timeWalk);
                                this.m_walkingOption = Common.getRandomList(this.m_rangeWalkingOption);
                                this.m_enemy.toBack = false;
                                if (this.m_walkingOption == 3) {
                                    this.m_enemy.toBack = true;
                                    this.executeCommad("onWait", this.m_timeWalk * 0.5);
                                    this.m_enemy.backDir = ((this.m_enemy.clip().scale.x > 0) ? -1 : 1);
                                }
                            }
                            return false;
                        }
                        /*override*/ onWait() {
                            super.onWait();
                            if (this.m_enemy.x() < (this.m_enemy.world().camera().x() + this.m_offSettCam) ||
                                this.m_enemy.x() > (this.m_enemy.world().camera().x() + 600 - this.m_offSettCam)) {
                                this.onWalk();
                            }
                            else {
                                this.executeCommad("onCheckNearPlayer", this.m_timeWait);
                            }
                        }
                        /*override*/ onCheckNearPlayer() {
                            super.onCheckNearPlayer();
                            var dx = this.m_enemy.world().player().x() - this.m_enemy.x();
                            var dy = this.m_enemy.world().player().y() - this.m_enemy.y();
                            if (Math.abs(dx) < this.m_rangeX && Math.abs(dy) < this.m_rangeY) {
                                if (Common.random(0, 1) == 0) {
                                    this.onAttack();
                                }
                                else {
                                    this.onWait();
                                }
                            }
                            else {
                                this.onWalk();
                            }
                        }
                    }
                    enemies.EnemyActionSoldier = EnemyActionSoldier;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyActionSoldier = com.bamtang.project.gameBrawler.enemies.EnemyActionSoldier;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyActionSoldierShoot extends enemies.EnemyAction {
                        constructor(enemy, timeInit, timeWait, timeWalk, appear = 0) {
                            super(enemy, timeInit, timeWait, timeWalk, appear);
                            this.m_rangeWalkingOption = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 3, 2, 2, 2, 2];
                        }
                        /*override*/ effectAttack() {
                        }
                        /*override*/ update(dt) {
                            super.update(dt);
                            this.checkDisplaceDie(dt);
                        }
                        checkDisplaceDie(dt) {
                            if (this.m_state == enemies.EnemyAction.ST_DIE) {
                                this.m_enemy.displaceFallingKnock(dt);
                            }
                        }
                        /*override*/ effectHit() {
                        }
                        /*override*/ onWalk() {
                            if (super.onWalk()) {
                                this.executeCommad("onWait", this.m_timeWalk);
                                this.m_walkingOption = Common.getRandomList(this.m_rangeWalkingOption);
                                this.m_enemy.toBack = false;
                                if (this.m_walkingOption == 3) {
                                    this.m_enemy.toBack = true;
                                    this.executeCommad("onWait", this.m_timeWalk * 0.5);
                                    this.m_enemy.backDir = ((this.m_enemy.clip().scale.x > 0) ? -1 : 1);
                                }
                            }
                            return false;
                        }
                        /*override*/ onWait() {
                            super.onWait();
                            if (this.m_enemy.x() < (this.m_enemy.world().camera().x() + this.m_offSettCam) ||
                                this.m_enemy.x() > (this.m_enemy.world().camera().x() + 600 - this.m_offSettCam)) {
                                this.onWalk();
                            }
                            else {
                                this.executeCommad("onCheckNearPlayer", this.m_timeWait);
                            }
                        }
                        /*override*/ onCheckNearPlayer() {
                            super.onCheckNearPlayer();
                            var dx = this.m_enemy.world().player().x() - this.m_enemy.x();
                            var dy = this.m_enemy.world().player().y() - this.m_enemy.y();
                            if (Math.abs(dx) < this.m_rangeX && Math.abs(dy) < this.m_rangeY) {
                                if (Common.random(0, 1) == 0) {
                                    this.m_typeAttack = EnemyActionSoldierShoot.ATTACK_MELEE;
                                    this.onAttack();
                                }
                                else {
                                    this.onWait();
                                }
                            }
                            else {
                                if (Common.random(0, 1) == 0) {
                                    if (this.m_enemy.x() < (this.m_enemy.world().camera().x() + this.m_offSettCam) ||
                                        this.m_enemy.x() > (this.m_enemy.world().camera().x() + 600 - this.m_offSettCam)) {
                                        this.onWalk();
                                    }
                                    else {
                                        this.m_typeAttack = EnemyActionSoldierShoot.ATTACK_SHOOT;
                                        this.onAttack();
                                    }
                                }
                                else {
                                    this.onWalk();
                                }
                            }
                        }
                        /*override*/ onAttack() {
                            this.m_state = enemies.EnemyAction.ST_ATTACK;
                            this.m_enemy.autoFlip = false;
                            if (this.m_typeAttack != EnemyActionSoldierShoot.ATTACK_MELEE) {
                                this.m_enemy.gotoState(enemies.BaseEnemy.ST_SHOOT);
                            }
                            else {
                                this.m_enemy.gotoState(enemies.BaseEnemy.ST_ATTACK_1);
                            }
                            this.effectAttack();
                        }
                    }
                    EnemyActionSoldierShoot.ATTACK_MELEE = 1;
                    EnemyActionSoldierShoot.ATTACK_SHOOT = 2;
                    enemies.EnemyActionSoldierShoot = EnemyActionSoldierShoot;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyActionSoldierShoot = com.bamtang.project.gameBrawler.enemies.EnemyActionSoldierShoot;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyActionWaiting extends enemies.EnemyActionFighter {
                        constructor(enemy) {
                            super(enemy);
                            this.mPasedNearThePlayer = false;
                        }
                        /*override*/ isInSafeArea() {
                            if (super.isInSafeArea()) {
                                this.mPasedNearThePlayer = true;
                                return true;
                            }
                            else {
                                return false;
                            }
                        }
                        /*override*/ selectDecision() {
                            if (this.mPasedNearThePlayer) {
                                super.selectDecision();
                            }
                            else {
                                this.mCurrentDecision = this.INDEX_C_WAIT;
                            }
                        }
                        /*override*/ selectTypeOfDecision() {
                            if (this.mPasedNearThePlayer) {
                                super.selectTypeOfDecision();
                            }
                            else {
                                this.mCurrentType = this.INDEX_C_WAIT_1;
                            }
                        }
                    }
                    enemies.EnemyActionWaiting = EnemyActionWaiting;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyActionWaiting = com.bamtang.project.gameBrawler.enemies.EnemyActionWaiting;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyBullet extends BRW_WorldActorExt {
                        constructor(clipName, world, x, y, speed, damage = 0, dir = 1, distance = 600) {
                            super(world.objectsCanvas(), world, x, y, -1);
                            this.m_offsetPlayerY = 15;
                            this.m_damage = damage;
                            this.m_move = new LinearMovement(x, y, speed);
                            this.m_move.gotoPosition(x + distance * dir, y);
                            this.m_move.endCallback = this.onEndMove.bind(this);
                            this.setRangeControlled(false);
                            this.updateBoundsAttack();
                            this.m_clip.play();
                        }
                        onEndMove(linearMovemente) {
                            this.m_isAwaitingDelete = true;
                        }
                        /*override*/ update(dt) {
                            this.m_move.update(dt);
                            this.m_x = this.m_move.x();
                            this.m_y = this.m_move.y();
                            if (this.m_world.player().y() >= this.m_y - this.m_offsetPlayerY &&
                                this.m_world.player().y() <= this.m_y + this.m_offsetPlayerY) {
                                if (this.m_world.player().hitTestReceivedAttack(this)) {
                                    this.m_world.player().onEnemyCollision(this, this.m_damage);
                                    this.m_isAwaitingDelete = true;
                                }
                            }
                            super.update(dt);
                        }
                        /*override*/ createCorners() {
                        }
                        /*override*/ free() {
                            super.free();
                            this.m_move = null;
                        }
                    }
                    enemies.EnemyBullet = EnemyBullet;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyBullet = com.bamtang.project.gameBrawler.enemies.EnemyBullet;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyFighter extends enemies.BaseEnemy {
                        constructor(canvas, world, x, y, npc) {
                            super(canvas, world, x, y, npc);
                            this.boss = null;
                            this.mSuccessfulHit = false;
                            var xmlConfig = xml2js(project.Global.app.getXMLData(gameBrawler.GameBrawler.instance.getGeneralFileName()), { compact: true, spaces: 4 }).xmlData;
                            for (var xd in xmlConfig[npc.typeAction]) {
                                xmlConfig[npc.typeAction][xd] = xmlConfig[npc.typeAction][xd]._text;
                            }
                            this.mData = new dtEnemy(xmlConfig[npc.typeAction]);
                            if (npc.initAction == EnemyFighter.ACTION_FIGHTER) {
                                this.mBaseAction = new enemies.EnemyActionFighter(this);
                            }
                            else if (npc.initAction == EnemyFighter.ACTION_RUSHER) {
                                this.mBaseAction = new enemies.EnemyActionRusher(this);
                            }
                            else if (npc.initAction == EnemyFighter.ACTION_STATIC) {
                                this.mBaseAction = new enemies.EnemyActionWaiting(this);
                            }
                            else {
                                Application.error("Unknown init action: '" + npc.initAction + "'" +
                                    "EnemyFighter::EnemyFighter()" +
                                    "Solved using the default action: 'EnemyActionFighter'.");
                                this.mBaseAction = new enemies.EnemyActionFighter(this);
                            }
                        }
                        /*override*/ initCharacterStates() {
                            this.m_character.addState(String(enemies.BaseEnemy.ST_STAND), this.mSkin + "_stand");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_WALK), this.mSkin + "_run");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_HIT), this.mSkin + "_hit");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_ATTACK_1), this.mSkin + "_melee01");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_ATTACK_2), this.mSkin + "_melee01");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_ATTACK_1_MISTAKE), this.mSkin + "_melee01_mistake");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_KNOCK), this.mSkin + "_fall");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_STAND_UP), this.mSkin + "_recover");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_DIE), this.mSkin + "_fall");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_END_DIE), this.mSkin + "_fall_end");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_END_KNOCK), this.mSkin + "_knock_end");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_DASH), this.mSkin + "_melee01");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_TELEPORT_OUT), this.mSkin + "_disappear");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_TELEPORT_IN), this.mSkin + "_appear");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_APPEAR), this.mSkin + "_appear", [this.playAppear2, 21], [this.playAppear2, 31]);
                            this.m_character.addState(String(enemies.BaseEnemy.ST_HIT_AIR), this.mSkin + "_hit_air");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_HIT_AIRDOWN), this.mSkin + "_hit_airdown");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_RUSH), this.mSkin + "_rush");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_COVER), this.mSkin + "_cover");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_COVER_BREAKING), this.mSkin + "_cover_break");
                            this.mDefaultViewLeft = true;
                        }
                        playSoundAttack() {
                            if (this.mSkin == "mc_enemy_01") {
                                project.Global.app.playSound("snd_atb_player_attack2");
                            }
                        }
                        /*override*/ onActionAttack() {
                            var r = 1;
                            this.mDamage = this.m_NpcDmg;
                            var sumRand = Common.random(1, 100);
                            var total = 100;
                            for (var i = this.m_probAttacks.length - 1; i >= 0; --i) {
                                total -= this.m_probAttacks[i];
                                if (sumRand > total) {
                                    r = i + 1;
                                    this.mDamage = this.m_dmgAttacks[i];
                                    break;
                                }
                            }
                            this.m_character.addState(String(enemies.BaseEnemy.ST_ATTACK_1), this.mSkin + "_melee0" + r);
                            this.gotoState(enemies.BaseEnemy.ST_ATTACK_1);
                            this.mBaseAction.setPaused(true);
                            this.mSuccessfulHit = false;
                            this.playSoundAttack();
                        }
                        /*override*/ onActionMove() {
                            this.gotoState(enemies.BaseEnemy.ST_WALK);
                        }
                        /*override*/ onActionStand() {
                            this.gotoState(enemies.BaseEnemy.ST_STAND);
                        }
                        /*override*/ onActionRush() {
                            this.gotoState(enemies.BaseEnemy.ST_RUSH);
                        }
                        /*override*/ onActionTeleport(px, py) {
                            this.gotoState(enemies.BaseEnemy.ST_TELEPORT_OUT);
                            this.mTargetX = px;
                            this.mTargetY = py;
                            this.mBaseAction.setPaused(true);
                        }
                        /*override*/ onEndAnimation(state) {
                            super.onEndAnimation(state);
                            switch (parseInt(state)) {
                                case enemies.BaseEnemy.ST_COVER:
                                case enemies.BaseEnemy.ST_HIT:
                                    if (this.m_enableCover && this.m_isCoverDown) {
                                        this.gotoState(enemies.BaseEnemy.ST_STAND);
                                        break;
                                    }
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case enemies.BaseEnemy.ST_ATTACK_1:
                                case enemies.BaseEnemy.ST_ATTACK_2:
                                    if (this.mSuccessfulHit) {
                                        this.mBaseAction.setPaused(false);
                                    }
                                    else {
                                        this.gotoState(enemies.BaseEnemy.ST_ATTACK_1_MISTAKE);
                                    }
                                    break;
                                case enemies.BaseEnemy.ST_ATTACK_1_MISTAKE:
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case enemies.BaseEnemy.ST_TELEPORT_IN:
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case enemies.BaseEnemy.ST_DIE:
                                    if (this.boss != null) {
                                        this.boss.enemyDie();
                                        this.boss = null;
                                    }
                                    break;
                            }
                        }
                        /*override*/ onProcessAttackToPlayer() {
                            if ((this.m_state == enemies.BaseEnemy.ST_ATTACK_1) || (this.m_state == enemies.BaseEnemy.ST_ATTACK_2) || (this.m_state == enemies.BaseEnemy.ST_RUSH)) {
                                if (this.m_world.player().hitTestReceivedAttack(this)) {
                                    if (this.m_state == enemies.BaseEnemy.ST_RUSH) {
                                        this.m_world.player().onEnemyCollision(this, this.mDamage, true);
                                    }
                                    else {
                                        this.m_world.player().onEnemyCollision(this, this.mDamage);
                                    }
                                    this.mSuccessfulHit = true;
                                }
                            }
                        }
                        /*override*/ gotoState(state) {
                            super.gotoState(state);
                            if (this.m_state == enemies.BaseEnemy.ST_APPEAR && (this.mSkin == "mc_enemy_04" || this.mSkin == "mc_enemy_03")) {
                                project.Global.app.playSound("snd_atb_worm_wowowow");
                            }
                            if (state == enemies.BaseEnemy.ST_STAND_UP) {
                                project.Global.app.playSound("snd_atb_enemies_getup");
                            }
                            if (state == enemies.BaseEnemy.ST_KNOCK || state == enemies.BaseEnemy.ST_END_DIE) {
                                project.Global.app.playSound("snd_atb_enemies_fall");
                            }
                        }
                        setScaleFromGunter() {
                            this.setScale(1.2);
                            this.update(0);
                        }
                        /*override*/ free() {
                            this.mBaseAction.free();
                            this.mBaseAction = null;
                            this.mData.free();
                            this.mData = null;
                            super.free();
                        }
                    }
                    EnemyFighter.ACTION_FIGHTER = "fighter";
                    EnemyFighter.ACTION_STATIC = "static";
                    EnemyFighter.ACTION_RUSHER = "rusher";
                    enemies.EnemyFighter = EnemyFighter;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyFighter = com.bamtang.project.gameBrawler.enemies.EnemyFighter;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyIntelligent extends enemies.BaseEnemy {
                        constructor(canvas, world, x, y, npc) {
                            super(canvas, world, x, y, npc);
                            this.mBulletSpeed = npc.bulletSpeed;
                            this.mBulletDamage = npc.bulletDamage;
                            var xmlConfig = xml2js(project.Global.app.getXMLData(gameBrawler.GameBrawler.instance.getGeneralFileName()), { compact: true, spaces: 4 }).xmlData;
                            for (var xd in xmlConfig[npc.typeAction]) {
                                xmlConfig[npc.typeAction][xd] = xmlConfig[npc.typeAction][xd]._text;
                            }
                            this.mData = new dtEnemy(xmlConfig[npc.typeAction]);
                            this.mBaseAction = new enemies.EnemyActionIntelligent(this);
                            this.m_type = npc.type;
                            this.group = npc.groupInit;
                        }
                        setRefX(value) {
                            this.mBaseAction.setRefX(value);
                        }
                        setRefY(value) {
                            this.mBaseAction.setRefY(value);
                        }
                        get type() {
                            return this.m_type;
                        }
                        set type(value) {
                            this.m_type = value;
                        }
                        /*override*/ initCharacterStates() {
                            this.m_character.addState(String(enemies.BaseEnemy.ST_STAND), this.mSkin + "_stand");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_WALK), this.mSkin + "_run");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_HIT), this.mSkin + "_hit");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_ATTACK_1), this.mSkin + "_melee01");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_ATTACK_2), this.mSkin + "_melee01");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_SHOOT), this.mSkin + "_range", [this.createBullet, 7]);
                            this.m_character.addState(String(enemies.BaseEnemy.ST_ATTACK_1_MISTAKE), this.mSkin + "_melee01_mistake");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_KNOCK), this.mSkin + "_fall");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_STAND_UP), this.mSkin + "_recover");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_DIE), this.mSkin + "_fall");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_END_DIE), this.mSkin + "_fall_end");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_END_KNOCK), this.mSkin + "_fall_end");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_DASH), this.mSkin + "_melee01");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_TELEPORT_OUT), this.mSkin + "_disappear");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_TELEPORT_IN), this.mSkin + "_appear");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_APPEAR), this.mSkin + "_appear");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_HIT_AIR), this.mSkin + "_hit_air");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_HIT_AIRDOWN), this.mSkin + "_hit_airdown");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_RUSH), this.mSkin + "_rush");
                            this.mDefaultViewLeft = true;
                        }
                        createBullet() {
                            if (this.mSkin == "mc_enemy_01" || this.mSkin == "mc_enemy_02") {
                                project.Global.app.playSound("snd_atb_enemies_penguinshoot");
                            }
                            else if (this.mSkin == "mc_enemy_03" || this.mSkin == "mc_enemy_04") {
                                project.Global.app.playSound("snd_atb_enemies_wormshoot");
                            }
                            var fdist = (this.flipX() ? 1 : -1);
                            this.mBulletOffset_X = 60 + 30;
                            this.mBulletOffset_Y = 0;
                            var bullet = new gameBrawler.BulletBrawler(this.mSkin + "_projectile", this.m_world, this, this.m_x + fdist * this.mBulletOffset_X, this.m_y + this.mBulletOffset_Y, this.mBulletSpeed, this.mBulletDamage, fdist);
                            bullet.setTarget(gameBrawler.BulletBrawler.TARGET_PLAYER | gameBrawler.BulletBrawler.TARGET_BREAKABLES | gameBrawler.BulletBrawler.TARGET_ENEMY);
                            this.m_world.actorManager().add(bullet);
                            bullet.setFlipX(this.m_x < this.m_world.player().x());
                            bullet.setFlipX(this.flipX());
                        }
                        /*override*/ onActionAttack() {
                            (this.m_type == EnemyIntelligent.TYPE_MELEE) ? this.gotoState(enemies.BaseEnemy.ST_ATTACK_1) : this.gotoState(enemies.BaseEnemy.ST_SHOOT);
                            this.mBaseAction.setPaused(true);
                            this.mSuccessfulHit = false;
                        }
                        /*override*/ onActionMove() {
                            this.gotoState(enemies.BaseEnemy.ST_WALK);
                        }
                        /*override*/ onActionStand() {
                            this.gotoState(enemies.BaseEnemy.ST_STAND);
                        }
                        /*override*/ onActionRush() {
                            this.gotoState(enemies.BaseEnemy.ST_RUSH);
                        }
                        /*override*/ onActionTeleport(px, py) {
                            this.gotoState(enemies.BaseEnemy.ST_TELEPORT_OUT);
                            this.mTargetX = px;
                            this.mTargetY = py;
                            this.mBaseAction.setPaused(true);
                        }
                        /*override*/ onEndAnimation(state) {
                            super.onEndAnimation(state);
                            switch (parseInt(state)) {
                                case enemies.BaseEnemy.ST_APPEAR:
                                    gameBrawler.GameBrawler.instance.ai.addEnemy(this);
                                    this.mBaseAction.decideAction();
                                    break;
                                case enemies.BaseEnemy.ST_HIT:
                                    this.mBaseAction.setPaused(false);
                                    this.gotoState(enemies.BaseEnemy.ST_STAND);
                                    this.mBaseAction.decideAction();
                                    break;
                                case enemies.BaseEnemy.ST_ATTACK_1:
                                case enemies.BaseEnemy.ST_ATTACK_2:
                                case enemies.BaseEnemy.ST_SHOOT:
                                    if (this.mSuccessfulHit) {
                                        this.mBaseAction.setPaused(false);
                                    }
                                    else {
                                        this.gotoState(enemies.BaseEnemy.ST_ATTACK_1_MISTAKE);
                                    }
                                    this.mBaseAction.decideAction();
                                    break;
                                case enemies.BaseEnemy.ST_ATTACK_1_MISTAKE:
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case enemies.BaseEnemy.ST_TELEPORT_IN:
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case enemies.BaseEnemy.ST_WALK:
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case enemies.BaseEnemy.ST_DIE:
                                    gameBrawler.GameBrawler.instance.ai.removeEnemy(this);
                                    break;
                                case enemies.BaseEnemy.ST_STAND_UP:
                                    this.mBaseAction.decideAction();
                                    break;
                            }
                        }
                        /*override*/ onProcessAttackToPlayer() {
                            if ((this.m_state == enemies.BaseEnemy.ST_ATTACK_1) || (this.m_state == enemies.BaseEnemy.ST_ATTACK_2) || (this.m_state == enemies.BaseEnemy.ST_RUSH)) {
                                if (this.m_world.player().hitTestReceivedAttack(this)) {
                                    this.m_world.player().onEnemyCollision(this, this.mDamage);
                                    this.mSuccessfulHit = true;
                                }
                            }
                        }
                        /*override*/ free() {
                            this.mBaseAction.free();
                            this.mBaseAction = null;
                            this.mData.free();
                            this.mData = null;
                            super.free();
                        }
                    }
                    EnemyIntelligent.TYPE_MELEE = 1;
                    EnemyIntelligent.TYPE_RANGE = 2;
                    enemies.EnemyIntelligent = EnemyIntelligent;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyIntelligent = com.bamtang.project.gameBrawler.enemies.EnemyIntelligent;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyRangeFighter extends enemies.BaseEnemy {
                        constructor(canvas, world, x, y, npc) {
                            super(canvas, world, x, y, npc);
                            this.mBulletSpeed = npc.bulletSpeed;
                            this.mBulletDamage = npc.bulletDamage;
                            this.mSuccessfulHit = false;
                            var xmlConfig = xml2js(project.Global.app.getXMLData(gameBrawler.GameBrawler.instance.getGeneralFileName()), { compact: true, spaces: 4 }).xmlData;
                            for (var xd in xmlConfig[npc.typeAction]) {
                                xmlConfig[npc.typeAction][xd] = xmlConfig[npc.typeAction][xd]._text;
                            }
                            this.mData = new dtEnemy(xmlConfig[npc.typeAction]);
                            this.mBaseAction = new enemies.EnemyActionRangeFighter(this, npc);
                        }
                        /*override*/ initCharacterStates() {
                            this.m_character.addState(String(enemies.BaseEnemy.ST_STAND), this.mSkin + "_stand");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_WALK), this.mSkin + "_run");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_SHOOT), this.mSkin + "_range", [this.createBullet, 19]);
                            this.m_character.addState(String(enemies.BaseEnemy.ST_HIT), this.mSkin + "_hit");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_ATTACK_1), this.mSkin + "_melee01");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_ATTACK_2), this.mSkin + "_melee01");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_ATTACK_1_MISTAKE), this.mSkin + "_melee01_mistake");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_KNOCK), this.mSkin + "_fall");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_STAND_UP), this.mSkin + "_recover");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_DIE), this.mSkin + "_fall");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_END_DIE), this.mSkin + "_fall_end");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_END_KNOCK), this.mSkin + "_knock_end");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_DASH), this.mSkin + "_melee01");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_TELEPORT_OUT), this.mSkin + "_disappear");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_TELEPORT_IN), this.mSkin + "_appear");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_APPEAR), this.mSkin + "_appear");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_HIT_AIR), this.mSkin + "_hit_air");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_HIT_AIRDOWN), this.mSkin + "_hit_airdown");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_COVER), this.mSkin + "_cover");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_COVER_BREAKING), this.mSkin + "_cover_break");
                            this.mDefaultViewLeft = true;
                        }
                        createBullet() {
                            if (this.mSkin == "mc_enemy_01" || this.mSkin == "mc_enemy_02") {
                                project.Global.app.playSound("snd_atb_enemies_penguinshoot");
                            }
                            else if (this.mSkin == "mc_enemy_03" || this.mSkin == "mc_enemy_04") {
                                project.Global.app.playSound("snd_atb_enemies_wormshoot");
                            }
                            var fdist = (this.m_x < this.m_world.player().x() ? 1 : -1);
                            this.mBulletOffset_X = 60;
                            this.mBulletOffset_Y = 0;
                            var bullet = new gameBrawler.BulletBrawler("mc_sword_bullet", this.m_world, this, this.m_x + fdist * this.mBulletOffset_X, this.m_y + this.mBulletOffset_Y, this.mBulletSpeed, this.mBulletDamage, fdist);
                            bullet.setTarget(gameBrawler.BulletBrawler.TARGET_PLAYER | gameBrawler.BulletBrawler.TARGET_BREAKABLES | gameBrawler.BulletBrawler.TARGET_ENEMY);
                            this.m_world.actorManager().add(bullet);
                            bullet.setFlipX(this.m_x < this.m_world.player().x());
                        }
                        playSoundAttack() {
                            if (this.mSkin == "mc_enemy_01") {
                                project.Global.app.playSound("snd_atb_player_attack2");
                            }
                        }
                        /*override*/ onActionAttack() {
                            this.mDamage = this.m_NpcDmg;
                            if (this.mBaseAction.isOnFightZone()) {
                                var r = 1;
                                var sumRand = Common.random(1, 100);
                                var total = 100;
                                for (var i = this.m_probAttacks.length - 1; i >= 0; --i) {
                                    total -= this.m_probAttacks[i];
                                    if (sumRand > total) {
                                        r = i + 1;
                                        this.mDamage = this.m_dmgAttacks[i];
                                        break;
                                    }
                                }
                                this.m_character.addState(String(enemies.BaseEnemy.ST_ATTACK_1), this.mSkin + "_melee0" + r);
                                this.gotoState(enemies.BaseEnemy.ST_ATTACK_1);
                                this.mSuccessfulHit = false;
                                this.playSoundAttack();
                            }
                            else {
                                this.gotoState(enemies.BaseEnemy.ST_SHOOT);
                            }
                            this.mBaseAction.setPaused(true);
                        }
                        /*override*/ onActionMove() {
                            this.gotoState(enemies.BaseEnemy.ST_WALK);
                        }
                        /*override*/ onActionStand() {
                            this.gotoState(enemies.BaseEnemy.ST_STAND);
                        }
                        /*override*/ onActionTeleport(px, py) {
                            this.gotoState(enemies.BaseEnemy.ST_TELEPORT_OUT);
                            this.mTargetX = px;
                            this.mTargetY = py;
                            this.mBaseAction.setPaused(true);
                        }
                        /*override*/ onEndAnimation(state) {
                            super.onEndAnimation(state);
                            switch (parseInt(state)) {
                                case enemies.BaseEnemy.ST_COVER:
                                case enemies.BaseEnemy.ST_HIT:
                                    if (this.m_enableCover && this.m_isCoverDown) {
                                        this.gotoState(enemies.BaseEnemy.ST_STAND);
                                        break;
                                    }
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case enemies.BaseEnemy.ST_ATTACK_1:
                                    if (this.mSuccessfulHit) {
                                        this.mBaseAction.setPaused(false);
                                    }
                                    else {
                                        this.gotoState(enemies.BaseEnemy.ST_ATTACK_1_MISTAKE);
                                    }
                                    break;
                                case enemies.BaseEnemy.ST_ATTACK_1_MISTAKE:
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case enemies.BaseEnemy.ST_SHOOT:
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case enemies.BaseEnemy.ST_TELEPORT_OUT:
                                    this.setPosition(this.mTargetX, this.mTargetY);
                                    this.gotoState(enemies.BaseEnemy.ST_TELEPORT_IN);
                                    break;
                                case enemies.BaseEnemy.ST_TELEPORT_IN:
                                    this.mBaseAction.setPaused(false);
                                    break;
                            }
                        }
                        /*override*/ gotoState(state) {
                            super.gotoState(state);
                            if (this.m_state == enemies.BaseEnemy.ST_APPEAR && (this.mSkin == "mc_enemy_04" || this.mSkin == "mc_enemy_03")) {
                                project.Global.app.playSound("snd_atb_worm_wowowow");
                            }
                            if (state == enemies.BaseEnemy.ST_STAND_UP) {
                                project.Global.app.playSound("snd_atb_enemies_getup");
                            }
                            if (state == enemies.BaseEnemy.ST_KNOCK || state == enemies.BaseEnemy.ST_END_DIE) {
                                project.Global.app.playSound("snd_atb_enemies_fall");
                            }
                        }
                        /*override*/ onProcessAttackToPlayer() {
                            if (this.m_world.player().hitTestReceivedAttack(this)) {
                                this.m_world.player().onEnemyCollision(this, this.mDamage);
                                this.mSuccessfulHit = true;
                            }
                        }
                        /*override*/ free() {
                            this.mBaseAction.free();
                            this.mBaseAction = null;
                            super.free();
                        }
                    }
                    enemies.EnemyRangeFighter = EnemyRangeFighter;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyRangeFighter = com.bamtang.project.gameBrawler.enemies.EnemyRangeFighter;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyRanger extends enemies.BaseEnemy {
                        constructor(canvas, world, x, y, npc, typeAction) {
                            super(canvas, world, x, y, npc);
                            this.mBulletSpeed = npc.bulletSpeed;
                            this.mBulletDamage = npc.bulletDamage;
                            if (typeAction == EnemyRanger.ACTION_COWARD) {
                                this.mBaseAction = new enemies.EnemyActionCoward(this, npc);
                            }
                            else if (typeAction == EnemyRanger.ACTION_RANGER) {
                                this.mBaseAction = new enemies.EnemyActionRanger(this, npc);
                            }
                            else {
                                Application.error("Unknown action: '" + typeAction + "'" +
                                    "EnemyRanger::EnemyRanger()" +
                                    "Solved using action: 'EnemyActionRanger'.");
                                this.mBaseAction = new enemies.EnemyActionRanger(this, npc);
                            }
                            this.mDefaultViewLeft = true;
                        }
                        /*override*/ initCharacterStates() {
                            this.m_character.addState(String(enemies.BaseEnemy.ST_STAND), this.mSkin + "_stand");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_WALK), this.mSkin + "_run");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_SHOOT), this.mSkin + "_range", [this.createBullet.bind(this), 19]);
                            this.m_character.addState(String(enemies.BaseEnemy.ST_HIT), this.mSkin + "_hit");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_KNOCK), this.mSkin + "_fall");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_STAND_UP), this.mSkin + "_recover");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_DIE), this.mSkin + "_fall");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_END_DIE), this.mSkin + "_fall_end");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_END_KNOCK), this.mSkin + "_knock_end");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_DASH), this.mSkin + "_melee01");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_TELEPORT_OUT), this.mSkin + "_disappear");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_TELEPORT_IN), this.mSkin + "_appear");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_APPEAR), this.mSkin + "_appear");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_HIT_AIR), this.mSkin + "_hit_air");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_HIT_AIRDOWN), this.mSkin + "_hit_airdown");
                            this.mDefaultViewLeft = false;
                        }
                        createBullet() {
                            if (this.mSkin == "mc_enemy_01" || this.mSkin == "mc_enemy_02") {
                                project.Global.app.playSound("snd_atb_enemies_penguinshoot");
                            }
                            else if (this.mSkin == "mc_enemy_03" || this.mSkin == "mc_enemy_04") {
                                project.Global.app.playSound("snd_atb_enemies_wormshoot");
                            }
                            var fdist = (this.flipX() ? 1 : -1);
                            this.mBulletOffset_X = 60 + 30;
                            this.mBulletOffset_Y = 0;
                            var bullet = new gameBrawler.BulletBrawler(this.mSkin + "_projectile", this.m_world, this, this.m_x + fdist * this.mBulletOffset_X, this.m_y + this.mBulletOffset_Y, this.mBulletSpeed, this.mBulletDamage, fdist);
                            bullet.setTarget(gameBrawler.BulletBrawler.TARGET_PLAYER | gameBrawler.BulletBrawler.TARGET_BREAKABLES | gameBrawler.BulletBrawler.TARGET_ENEMY);
                            this.m_world.actorManager().add(bullet);
                            bullet.setFlipX(this.m_x < this.m_world.player().x());
                            bullet.setFlipX(this.flipX());
                        }
                        /*override*/ onActionAttack() {
                            this.gotoState(enemies.BaseEnemy.ST_SHOOT);
                            this.mBaseAction.setPaused(true);
                        }
                        /*override*/ onActionMove() {
                            this.gotoState(enemies.BaseEnemy.ST_WALK);
                        }
                        /*override*/ onActionStand() {
                            this.gotoState(enemies.BaseEnemy.ST_STAND);
                        }
                        /*override*/ onActionTeleport(px, py) {
                            this.gotoState(enemies.BaseEnemy.ST_TELEPORT_OUT);
                            this.mTargetX = px;
                            this.mTargetY = py;
                            this.mBaseAction.setPaused(true);
                        }
                        /*override*/ gotoState(state) {
                            super.gotoState(state);
                            if (this.m_state == enemies.BaseEnemy.ST_APPEAR && (this.mSkin == "mc_enemy_04" || this.mSkin == "mc_enemy_03")) {
                                project.Global.app.playSound("snd_atb_worm_wowowow");
                            }
                            if (state == enemies.BaseEnemy.ST_STAND_UP) {
                                project.Global.app.playSound("snd_atb_enemies_getup");
                            }
                            if (state == enemies.BaseEnemy.ST_KNOCK || state == enemies.BaseEnemy.ST_END_DIE) {
                                project.Global.app.playSound("snd_atb_enemies_fall");
                            }
                        }
                        /*override*/ onEndAnimation(state) {
                            super.onEndAnimation(state);
                            switch (parseInt(state)) {
                                case enemies.BaseEnemy.ST_HIT:
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case enemies.BaseEnemy.ST_SHOOT:
                                    this.mBaseAction.setPaused(false);
                                    break;
                                case enemies.BaseEnemy.ST_TELEPORT_OUT:
                                    this.setPosition(this.mTargetX, this.mTargetY);
                                    this.gotoState(enemies.BaseEnemy.ST_TELEPORT_IN);
                                    break;
                                case enemies.BaseEnemy.ST_TELEPORT_IN:
                                    this.mBaseAction.setPaused(false);
                                    break;
                            }
                        }
                        /*override*/ free() {
                            this.mBaseAction.free();
                            this.mBaseAction = null;
                            super.free();
                        }
                    }
                    EnemyRanger.ACTION_RANGER = 1;
                    EnemyRanger.ACTION_COWARD = 2;
                    enemies.EnemyRanger = EnemyRanger;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyRanger = com.bamtang.project.gameBrawler.enemies.EnemyRanger;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemyRoot extends enemies.BaseEnemy {
                        constructor(canvas, world, x, y, params, npc, defaultAction = null) {
                            super(canvas, world, x, y + Math.random(), npc);
                            this.autoFlip = true;
                            this.m_damage = 0;
                            this.m_dx = 0;
                            this.m_dy = 0;
                            this.m_angle = 0;
                            this.m_rangeX = 60;
                            this.m_rangeY = 10;
                            this.m_classAction = "EnemyAction";
                            this.m_enable = false;
                            this.m_nextPosY = 0;
                            this.m_nextPosX = 0;
                            this.m_offsetPlayerYSpecial = 40;
                            this.m_stopId = 0;
                            this.m_group = 0;
                            this.m_points = 0;
                            this.m_speedMove = 0;
                            this.m_bonus = "";
                            this.m_shootEnable = 0;
                            this.m_bulletSpeed = 0;
                            this.m_bulletDamage = 0;
                            this.m_skin = "";
                            this.m_bulletSkin = "";
                            this.m_teleportEnable = 0;
                            this.m_dirDash = 1;
                            this.m_dashCombo = 0;
                            this.m_healthBase = 0;
                            this.m_enableCatch = true;
                            this.m_isCatchMode = false;
                            this.m_packageDummies = "com.bamtang.project.gameBrawler.enemies.";
                            this.dummyEnemyAction = null;
                            this.dummyEnemyActionSoldier = null;
                            this.dummyEnemyActionSoldierShoot = null;
                            this.m_stopId = npc.stopId;
                            this.m_group = npc.group;
                            this.m_points = npc.points;
                            this.m_speedMove = npc.speed + (Math.random() * 0.01);
                            this.m_bonus = npc.item;
                            this.m_shootEnable = npc.shootEnable;
                            this.m_bulletSpeed = npc.bulletSpeed;
                            this.m_bulletDamage = npc.bulletDamage;
                            this.m_skin = npc.skin;
                            this.m_teleportEnable = npc.teleport;
                            this.m_healthBase = this.m_health;
                            this.m_params = Common.getParams(npc.params);
                            this.m_name = this.m_params.name;
                            this.m_enableCatch = Boolean(parseInt(this.m_params.enableCatch));
                            this.m_flagDisappear = false;
                            if (this.m_shootEnable == 0) {
                                this.m_classAction = "EnemyActionSoldier";
                            }
                            else if (this.m_shootEnable == 1) {
                                this.m_classAction = "EnemyActionSoldierShoot";
                            }
                            if (defaultAction != null) {
                                this.m_classAction = defaultAction;
                            }
                            this.settings();
                            this.m_classAction = this.m_packageDummies + this.m_classAction;
                            if (npc.forcePattern != "") {
                                this.m_action.setPatternWalkingOption(npc.forcePattern.split(","));
                            }
                            if (npc.appear == 0) {
                                this.setShadowClip("mcBaseShadow");
                            }
                            this.m_state = EnemyRoot.ST_WAIT_FOR_STOP_SIGN;
                        }
                        countHitCatch() {
                            return this.m_countHitCatch;
                        }
                        direction() {
                            return 1;
                            //return (this.m_toLeft) ? -1 : 1; nope
                        }
                        bulletDamage() {
                            return this.m_bulletDamage;
                        }
                        bulletSpeed() {
                            return this.m_bulletSpeed;
                        }
                        shootEnable() {
                            return this.m_shootEnable;
                        }
                        character() {
                            return this.m_character;
                        }
                        skin() {
                            return this.m_skin;
                        }
                        isCatchMode() {
                            return this.m_isCatchMode;
                        }
                        name() {
                            return this.m_name;
                        }
                        healthPercent() {
                            return (100 * this.m_health / this.m_healthBase);
                        }
                        setBulletSkin(value) {
                            this.m_bulletSkin = value;
                        }
                        settings() {
                            this.m_character = new Character(this.m_x, this.m_y, this.m_canvas);
                            this.m_character.addState(String(enemies.BaseEnemy.ST_STAND), this.m_skin + "_stand");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_WALK), this.m_skin + "_walk");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_SHOOT), this.m_skin + "_attack");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_HIT), this.m_skin + "_hit");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_ATTACK_1), this.m_skin + "_attack");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_ATTACK_2), this.m_skin + "_attack");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_KNOCK), this.m_skin + "_knock");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_STAND_UP), this.m_skin + "_standup");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_DIE), this.m_skin + "_die");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_END_KNOCK), this.m_skin + "_knock_end");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_DASH), this.m_skin + "_attack");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_TELEPORT_OUT), this.m_skin + "_teleport_out");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_TELEPORT_IN), this.m_skin + "_teleport_in");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_APPEAR), this.m_skin + "_appear");
                            this.m_character.addState(String(enemies.BaseEnemy.ST_END_APPEAR), this.m_skin + "_appear_end");
                            this.m_character.onEndAnimation = this.onEndAnimation.bind(this);
                        }
                        markToDisappear() {
                            if (!this.m_enable || this.m_isIdle) {
                                return;
                            }
                            this.m_flagDisappear = true;
                            if (this.m_isCatchMode) {
                                return;
                            }
                            if ((this.m_state == enemies.BaseEnemy.ST_STAND) || (this.m_state == enemies.BaseEnemy.ST_WALK)) {
                                this.gotoState(enemies.BaseEnemy.ST_TELEPORT_OUT);
                                this.m_action.onTeleport();
                            }
                        }
                        /*override*/ gotoState(state) {
                            super.gotoState(state);
                            switch (state) {
                                case enemies.BaseEnemy.ST_END_KNOCK:
                                    this.m_character.loop = false;
                                    break;
                                case enemies.BaseEnemy.ST_DIE:
                                    this.m_character.loop = false;
                                    break;
                                case enemies.BaseEnemy.ST_DASH:
                                    this.m_dirDash = (this.m_x < this.m_world.player().x()) ? 1 : -1;
                                    this.m_dashCombo = 0;
                                    break;
                                case enemies.BaseEnemy.ST_STAND:
                                    if (this.m_flagDisappear) {
                                        this.markToDisappear();
                                    }
                                    break;
                                case enemies.BaseEnemy.ST_WALK:
                                    this.autoFlip = true;
                                    if (this.m_flagDisappear) {
                                        this.markToDisappear();
                                    }
                                    break;
                            }
                        }
                        onEndAnimation(state) {
                            switch (parseInt(state)) {
                                case enemies.BaseEnemy.ST_ATTACK_1:
                                case enemies.BaseEnemy.ST_ATTACK_2:
                                case enemies.BaseEnemy.ST_SHOOT:
                                    this.m_action.endAttack();
                                    break;
                                case enemies.BaseEnemy.ST_HIT:
                                    if (this.m_flagDisappear) {
                                        this.gotoState(enemies.BaseEnemy.ST_TELEPORT_OUT);
                                        this.m_action.onTeleport();
                                    }
                                    else {
                                        this.m_action.endHit();
                                    }
                                    break;
                                case enemies.BaseEnemy.ST_KNOCK:
                                    this.gotoState(enemies.BaseEnemy.ST_END_KNOCK);
                                    this.m_action.endKnock();
                                    break;
                                case enemies.BaseEnemy.ST_STAND_UP:
                                    if (this.m_flagDisappear) {
                                        this.gotoState(enemies.BaseEnemy.ST_TELEPORT_OUT);
                                        this.m_action.onTeleport();
                                    }
                                    else if (this.m_teleportEnable == 1) {
                                        this.gotoState(enemies.BaseEnemy.ST_TELEPORT_OUT);
                                        this.m_action.onTeleport();
                                    }
                                    else {
                                        this.m_action.endStandUp();
                                    }
                                    break;
                                case enemies.BaseEnemy.ST_DIE:
                                    this.m_action.endDie();
                                    this.onEndDie();
                                    break;
                                case enemies.BaseEnemy.ST_APPEAR:
                                    this.m_action.endAppear();
                                    break;
                                case enemies.BaseEnemy.ST_END_APPEAR:
                                    this.setShadowClip("mcBaseShadow");
                                    this.m_action.endWaitAppear();
                                    break;
                                case enemies.BaseEnemy.ST_TELEPORT_OUT:
                                    if (this.m_flagDisappear) {
                                        this.remove();
                                    }
                                    else {
                                        this.gotoState(enemies.BaseEnemy.ST_TELEPORT_IN);
                                        var posX = this.m_world.camera().x() + this.m_world.camera().width / 2;
                                        var posY = this.m_world.camera().y() + this.m_world.camera().height / 2;
                                        this.m_x = Common.random(posX - this.m_world.camera().width / 4, posX + this.m_world.camera().width / 4);
                                        this.m_y = Common.random(posY - this.m_world.camera().height / 4, posY + this.m_world.camera().height / 4);
                                    }
                                    break;
                                case enemies.BaseEnemy.ST_TELEPORT_IN:
                                    this.m_action.endStandUp();
                                    break;
                            }
                        }
                        /*override*/ update(dt) {
                            if (this.m_state == EnemyRoot.ST_WAIT_FOR_STOP_SIGN) {
                                if (this.m_world.player().currentStop == this.m_stopId && this.m_world.player().currentStopGroup == this.m_group) {
                                    if (this.m_group == 1) {
                                        if (this.m_world.player().x() + 350 >= this.m_x) {
                                            this.m_action.onStart();
                                            this.m_enable = true;
                                        }
                                    }
                                    else {
                                        if (this.m_world.player().getCurrentStop().isLockedScreen()) {
                                            this.m_action.onStart();
                                            this.m_enable = true;
                                        }
                                    }
                                }
                                return;
                            }
                            if (this.m_isCatchMode) {
                                return;
                            }
                            this.m_action.update(dt);
                            this.m_character.update(dt);
                            if (this.toDie) {
                                super.update(dt);
                                return;
                            }
                            this.updateBoundsAttack();
                            if (this.hitTestCollisionDepth(this.m_world.player())) {
                                if (this.m_enableCatch &&
                                    this.m_world.player().hitTestProximity(this) &&
                                    !this.m_isCatchMode) {
                                    this.onCatch(true);
                                }
                                if (this.hitTestReceivedAttack(this.m_world.player())) {
                                    if (this.m_world.player().control().isJumping() && this.m_world.player().control().isInAction()) {
                                        this.onKnock(this.m_world.player().getCurrentDamage());
                                    }
                                    else if (this.m_world.player().getCurrentCombo() == gameBrawler.PlayerBrawler.COMBO_1 &&
                                        this.m_world.player().control().isInAction()) {
                                        this.onKnock(this.m_world.player().getCurrentDamage());
                                    }
                                    else {
                                        this.onHit(this.m_world.player().getCurrentDamage());
                                    }
                                }
                                else if (this.m_world.player().hitTestReceivedAttack(this)) {
                                    if (this.m_state == enemies.BaseEnemy.ST_DASH && this.m_dashCombo < 2) {
                                        this.m_dashCombo++;
                                        this.m_world.player().onEnemyCollision(this, this.m_damage);
                                    }
                                    if (this.m_state != enemies.BaseEnemy.ST_DASH) {
                                        this.m_world.player().onEnemyCollision(this, this.m_damage);
                                    }
                                }
                            }
                            super.update(dt);
                            if (this.toBack) {
                                this.setLookAtLeft(this.backDir == -1);
                                return;
                            }
                            if (this.autoFlip) {
                                this.setLookAtLeft(this.m_x > this.m_world.player().x());
                            }
                        }
                        walkToPlayer(dir, dt) {
                            if (this.toHit || this.toDie)
                                return;
                            switch (dir) {
                                case 0:
                                    this.walkToPlayerIn_XY(dt);
                                    break;
                                case 1:
                                    this.walkToPlayerIn_X(dt);
                                    break;
                                case 2:
                                    this.walkToPlayerIn_Y(dt);
                                    break;
                                case 3:
                                    this.walkToBack(dt);
                                    break;
                            }
                        }
                        walkToPlayerIn_X_forDash(dt) {
                            if ((this.m_clip.scale.x < 0 && this.m_dirDash > 0) ||
                                (this.m_clip.scale.x > 0 && this.m_dirDash < 0)) {
                                this.m_action.onWalk();
                                return;
                            }
                            this.m_nextPosX = this.m_x + (this.m_speedMove * this.m_dirDash * dt * 1.3);
                            this.checkCollisionObjects();
                            if (!this.m_collisionX) {
                                this.m_x = this.m_nextPosX;
                            }
                            if (this.m_x < this.m_world.camera().x() - 50 ||
                                this.m_x > this.m_world.camera().x() + 550) {
                                this.onRangeToPlayer();
                            }
                        }
                        walkToPlayerIn_X(dt, factor = 1, enableRange = true) {
                            this.m_dx = this.m_world.player().x() - this.m_x;
                            this.m_dy = 0;
                            this.m_angle = Math.atan2(this.m_dy, this.m_dx);
                            this.m_nextPosY = this.m_y;
                            this.m_nextPosX = this.m_x + (this.m_speedMove * Math.cos(this.m_angle) * dt * factor);
                            this.checkCollisionObjects();
                            if (this.m_collisionX) {
                                var fSpeed = ((this.m_world.player().y() - this.m_y > 0) ? -1 : 1);
                                this.m_nextPosX = this.m_x;
                                this.m_nextPosY = this.m_y + (fSpeed * this.m_speedMove * dt);
                                this.checkCollisionObjects();
                                if (this.m_collisionY) {
                                    this.onRangeToPlayer();
                                }
                                else {
                                    this.m_y = this.m_nextPosY;
                                }
                            }
                            else {
                                this.m_x = this.m_nextPosX;
                                if (enableRange) {
                                    if (Math.abs(this.m_dx) < this.m_rangeX) {
                                        this.onRangeToPlayer();
                                    }
                                }
                            }
                        }
                        walkToPlayerIn_Y(dt) {
                            this.m_dx = 0;
                            this.m_dy = this.m_world.player().y() - this.m_y;
                            this.m_angle = Math.atan2(this.m_dy, this.m_dx);
                            this.m_nextPosX = this.m_x;
                            this.m_nextPosY = this.m_y + (this.m_speedMove * 0.5 * Math.sin(this.m_angle) * dt);
                            this.checkCollisionObjects();
                            if (this.m_collisionY) {
                                this.onRangeToPlayer();
                            }
                            else {
                                this.m_y = this.m_nextPosY;
                                if (Math.abs(this.m_dy) < this.m_rangeY) {
                                    this.onRangeToPlayer();
                                }
                            }
                        }
                        walkToPlayerIn_XY(dt) {
                            this.m_dx = this.m_world.player().x() - this.m_x;
                            this.m_dy = this.m_world.player().y() - this.m_y;
                            this.m_angle = Math.atan2(this.m_dy, this.m_dx);
                            this.m_nextPosX = this.m_x + (this.m_speedMove * 0.7 * Math.cos(this.m_angle) * dt);
                            this.m_nextPosY = this.m_y + (this.m_speedMove * 0.5 * Math.sin(this.m_angle) * dt);
                            this.checkCollisionObjects();
                            if (this.m_collisionX || this.m_collisionY) {
                                if (this.m_collisionX) {
                                    this.walkToPlayerIn_Y(dt);
                                }
                                else {
                                    this.walkToPlayerIn_X(dt);
                                }
                            }
                            else {
                                if (!this.m_collisionX) {
                                    this.m_x = this.m_nextPosX;
                                }
                                if (!this.m_collisionY) {
                                    this.m_y = this.m_nextPosY;
                                }
                            }
                            if (Math.abs(this.m_dx) < this.m_rangeX && Math.abs(this.m_dy) < this.m_rangeY) {
                                this.onRangeToPlayer();
                            }
                        }
                        walkToBack(dt) {
                            this.m_nextPosX = this.m_x + this.m_speedMove * 0.4 * dt * this.backDir;
                            this.checkCollisionObjects();
                            if (!this.m_collisionX) {
                                this.m_x = this.m_nextPosX;
                            }
                        }
                        displaceFallingKnock(dt) {
                            this.m_nextPosX = this.m_x + (-1 * this.m_clip.scale.x * 0.2) * dt;
                            this.checkCollisionObjects();
                            if (!this.m_collisionX) {
                                this.m_x = this.m_nextPosX;
                            }
                            this.checkThrowObjects();
                        }
                        checkThrowObjects() {
                            var actors = this.m_world.actorManager().actors;
                            for (var i = 0; i < actors.length; i++) {
                                if ((actors[i] instanceof EnemyRoot) &&
                                    !actors[i].isIdle() &&
                                    this.hitTestCollisionDepth(actors[i]) &&
                                    actors[i].hitTestReceivedAttack(this)) {
                                    actors[i].onKnock(this.m_damage);
                                }
                                if ((actors[i] instanceof Breakable) &&
                                    !actors[i].isIdle() &&
                                    this.hitTestCollisionDepth(actors[i]) &&
                                    actors[i].hitTestReceivedAttack(this)) {
                                    actors[i].onHit(this.m_damage);
                                }
                            }
                        }
                        displaceInX(dir, dt) {
                            this.m_nextPosX = this.m_x + (this.m_speedMove * dt * dir);
                            this.checkCollisionObjects();
                            if (!this.m_collisionX) {
                                this.m_x = this.m_nextPosX;
                                return true;
                            }
                            return false;
                        }
                        displaceInY(dir, dt) {
                            this.m_nextPosY = this.m_y + (this.m_speedMove * dt * dir * 0.5);
                            this.checkCollisionObjects();
                            if (!this.m_collisionY) {
                                this.m_y = this.m_nextPosY;
                                return true;
                            }
                            return false;
                        }
                        checkCollisionObjects() {
                            if (this.m_clip.mcBounds == null) {
                                return;
                            }
                            var currentX = this.m_x;
                            var currentY = this.m_y;
                            var actors = this.m_world.actorManager().actors;
                            for (var k = actors.length - 1; k >= 0; --k) {
                                if (!(actors[k] instanceof EnemyRoot)) {
                                    continue;
                                }
                                if (!(actors[k].m_enable)) {
                                    continue;
                                }
                                if (actors[k] == this) {
                                    continue;
                                }
                                this.m_collisionX = false;
                                this.m_collisionY = false;
                                if (this.hitTestBaseCollision(actors[k])) {
                                    return;
                                }
                                this.m_x = this.m_nextPosX;
                                this.m_collisionX = this.hitTestBaseCollision(actors[k]);
                                this.m_y = this.m_nextPosY;
                                this.m_collisionY = this.hitTestBaseCollision(actors[k]);
                                this.m_x = currentX;
                                this.m_y = currentY;
                                if (this.m_collisionX || this.m_collisionY) {
                                    return;
                                }
                            }
                        }
                        onRangeToPlayer() {
                            this.m_action.onWait();
                        }
                        /*override*/
                        onHit(damage, abusive = null) {
                            if (super.onHit(damage, abusive)) //check fix
                             {
                                if (this.m_health == 0) {
                                    this.onDie();
                                }
                                else {
                                    this.toHit = true;
                                    this.m_action.onHit();
                                    this.gotoState(enemies.BaseEnemy.ST_HIT);
                                }
                                gameBrawler.HudBrawler.instance.setEnemyEnergy(this.healthPercent(), this.m_skin, this.m_name);
                                this.m_world.game().onEnemyKicked(this, abusive);
                                return true;
                            }
                            return false;
                        }
                        onKnock(damage, abusive = null, isPlayer = true, isThrow = false, lastHit = false) {
                            if (!this.m_enable)
                                return;
                            if (this.toHit || this.toDie)
                                return;
                            if (this.m_flagDisappear) {
                                return;
                            }
                            this.m_health -= damage;
                            if (this.m_health < 0) {
                                this.m_health = 0;
                            }
                            if (this.m_health == 0) {
                                if (isThrow) {
                                    this.m_character.addState(String(enemies.BaseEnemy.ST_DIE), this.m_skin + "_throw");
                                }
                                else {
                                    this.m_character.addState(String(enemies.BaseEnemy.ST_DIE), this.m_skin + "_die");
                                }
                                this.onDie();
                            }
                            else {
                                if (isThrow) {
                                    this.m_character.addState(String(enemies.BaseEnemy.ST_KNOCK), this.m_skin + "_throw");
                                }
                                else {
                                    this.m_character.addState(String(enemies.BaseEnemy.ST_KNOCK), this.m_skin + "_knock");
                                }
                                this.gotoState(enemies.BaseEnemy.ST_KNOCK);
                                this.m_action.onKnock();
                            }
                            gameBrawler.HudBrawler.instance.setEnemyEnergy(this.healthPercent(), this.m_skin, this.m_name);
                            this.m_world.game().onEnemyKicked(this, this);
                        }
                        onCatch(value) {
                            this.m_isCatchMode = value;
                            this.m_canvas.visible = !value;
                            this.m_countHitCatch = 0;
                            if (value) {
                                this.m_world.player().onCatchEnemy(this);
                            }
                            else {
                                this.m_world.player().onCatchEnemy(null);
                                var offsetX = this.m_world.player().flipX() ? -50 : 50;
                                this.setPosition(this.m_world.player().x() + offsetX, this.m_world.player().y());
                                super.update(0);
                                this.m_action.onWalk();
                            }
                        }
                        onHitInCatch(damage) {
                            this.m_countHitCatch++;
                            this.m_health -= damage;
                            if (this.m_health < 0) {
                                this.m_health = 0;
                            }
                            if (this.m_health == 0) {
                                this.onCatch(false);
                                this.onDie();
                                this.fixSideClip();
                            }
                            gameBrawler.HudBrawler.instance.setEnemyEnergy(this.healthPercent(), this.m_skin, this.m_name);
                            this.m_world.game().onEnemyKicked(this, this);
                        }
                        fixSideClip() {
                            var apply = !this.m_world.player().flipX();
                            this.setLookAtLeft(apply);
                        }
                        onDie() {
                            this.toDie = true;
                            this.m_action.onDie();
                            this.gotoState(enemies.BaseEnemy.ST_DIE);
                        }
                        onEndDie() {
                            Common.fxFadeOut(this.m_clip, 2000, 0, this, "remove");
                            this.m_clipShadow.visible = false;
                        }
                        remove() {
                            this.m_isAwaitingDelete = true;
                            if (this.m_world) {
                                this.m_world.player().evaluateCurrentStop(this.m_stopId, this.m_group, Stop.OBJ_ENEMY);
                            }
                        }
                        createBullet() {
                            this.m_world.actorManager().add(new enemies.EnemyBullet("mc_sword_bullet", this.m_world, this.m_x, this.m_y, this.m_bulletSpeed, this.m_bulletDamage, this.direction()));
                        }
                        /*override*/ free() {
                            super.free();
                            if (this.m_action) {
                                this.m_action.free();
                                this.m_action = null;
                            }
                        }
                    }
                    EnemyRoot.ST_WAIT_FOR_STOP_SIGN = 1000;
                    enemies.EnemyRoot = EnemyRoot;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemyRoot = com.bamtang.project.gameBrawler.enemies.EnemyRoot;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class EnemySoldier extends enemies.EnemyRoot {
                        constructor(canvas, world, x, y, params, npc, defaultAction = null) {
                            super(canvas, world, x, y, params, npc, defaultAction);
                        }
                        /*override*/ settings() {
                            super.settings();
                            this.m_character.addState(String(enemies.EnemyRoot.ST_SHOOT), this.m_skin + "_attack", [this.createBullet.bind(this), 5]);
                        }
                    }
                    enemies.EnemySoldier = EnemySoldier;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EnemySoldier = com.bamtang.project.gameBrawler.enemies.EnemySoldier;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var enemies;
                (function (enemies) {
                    class PathFindingEnemy {
                        constructor() {
                            this.mListOpen = new Array();
                            this.mListClose = new Array();
                            this.mMapOpen = new Array();
                        }
                        addOpenList(node) {
                            node.isOpen = true;
                            this.mListOpen.push(node);
                            if (this.mMapOpen[node.i]) {
                                this.mMapOpen[node.i][node.j] = node;
                            }
                            else {
                                this.mMapOpen[node.i] = new Array();
                                this.mMapOpen[node.i][node.j] = node;
                            }
                        }
                        removeOpenList(node) {
                            var i = this.mListOpen.findIndex(x => x.g == node.g
                                && x.h == node.h
                                && x.f == node.f
                                && x.i == node.i
                                && x.j == node.j
                                && x.isOpen == node.isOpen
                                && x.isClose == node.isClose
                                && x.parent == node.parent);
                            if (i == -1)
                                i = this.mListOpen.findIndex(x => x.g == node.parent.g
                                    && x.h == node.parent.h
                                    && x.f == node.parent.f
                                    && x.i == node.parent.i
                                    && x.j == node.parent.j
                                    && x.isOpen == node.parent.isOpen
                                    && x.isClose == node.parent.isClose
                                    && x.parent == node.parent.parent);
                            if (i > -1) {
                                this.mListOpen.splice(i, 1);
                            }
                            node.isOpen = false;
                        }
                        isInOpenList(i, j) {
                            if (this.mMapOpen[i]) {
                                if (this.mMapOpen[i][j]) {
                                    return this.mMapOpen[i][j];
                                }
                            }
                            return null;
                        }
                        addCloseList(node) {
                            node.isClose = true;
                            this.mListClose.push(node);
                        }
                        isInCloseList(node) {
                            return node.isClose;
                        }
                        isInCloseListById(i, j) {
                            if (this.mMapOpen[i]) {
                                if (this.mMapOpen[i][j]) {
                                    return this.mMapOpen[i][j].isClose;
                                }
                            }
                            return false;
                        }
                        getSelectOpen(startI, startJ) {
                            var minor = null;
                            var size = this.mListOpen.length;
                            if (size > 0) {
                                minor = new clsNode(this.mListOpen[size - 1]);
                                var node;
                                for (var k = 0; k < size; k++) {
                                    node = this.mListOpen[k];
                                    if (node.f < minor.f) {
                                        minor = node;
                                    }
                                }
                            }
                            else {
                                minor = new clsNode(null, startI, startJ);
                            }
                            return minor;
                        }
                        getPathPrivate(map, startI, startJ, endI, endJ, idWalk) {
                            var parent = this.getSelectOpen(startI, startJ);
                            this.addOpenList(parent);
                            var wMap = map[0].length;
                            var hMap = map.length;
                            var g, gF, h, f, a, b, aMin, aMax, bMin, bMax;
                            var node, findOpen;
                            while (this.mListOpen.length > 0 && !this.isInCloseListById(endI, endJ)) {
                                aMin = parent.i - 1;
                                aMax = parent.i + 2;
                                bMin = parent.j - 1;
                                bMax = parent.j + 2;
                                for (a = aMin; a < aMax; a++) {
                                    for (b = bMin; b < bMax; b++) {
                                        if (a < hMap && a > -1 && b < wMap && b > -1 && !this.isInCloseListById(a, b) && (PathFindingEnemy.ALLOW_DIAGONAL || a == parent.i || b == parent.j)
                                            && (PathFindingEnemy.ALLOW_DIAGONAL_CORNERING || a == parent.i || b == parent.j || (map[a][parent.j] == idWalk && map[parent.i][b] == idWalk))) {
                                            if (map[a][b] == idWalk) {
                                                findOpen = this.isInOpenList(a, b);
                                                gF = (a == parent.i || b == parent.j) ? 10 : 14;
                                                g = parent.g + gF;
                                                if (findOpen == null) {
                                                    node = new clsNode(parent, a, b);
                                                    h = (Math.abs(a - endI) + Math.abs(b - endJ)) * 10;
                                                    node.g = g;
                                                    node.h = h;
                                                    node.f = g + h;
                                                    this.addOpenList(node);
                                                }
                                                else {
                                                    if (g < findOpen.g) {
                                                        findOpen.g = g;
                                                        findOpen.f = findOpen.h + findOpen.g;
                                                        findOpen.parent = parent;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                this.removeOpenList(parent);
                                this.addCloseList(parent);
                                parent = this.getSelectOpen(startI, startJ);
                            }
                            var result = null;
                            if (this.isInCloseListById(endI, endJ)) {
                                result = new Array();
                                var tempNode = null;
                                tempNode = this.mListClose[this.mListClose.length - 1];
                                while (tempNode != null) {
                                    result.push(tempNode);
                                    tempNode = tempNode.parent;
                                }
                                result = result.reverse();
                            }
                            return result;
                        }
                        static getPath(map, startI, startJ, endI, endJ, idWalk) {
                            var objClass = new PathFindingEnemy();
                            var r = objClass.getPathPrivate(map, startI, startJ, endI, endJ, idWalk);
                            objClass = null;
                            return r;
                        }
                    }
                    PathFindingEnemy.ALLOW_DIAGONAL = true;
                    PathFindingEnemy.ALLOW_DIAGONAL_CORNERING = false;
                    enemies.PathFindingEnemy = PathFindingEnemy;
                })(enemies = gameBrawler.enemies || (gameBrawler.enemies = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
class clsNode {
    constructor(iParent, I = 0, J = 0) {
        this.g = 0;
        this.h = 0;
        this.f = 0;
        this.i = -1;
        this.j = -1;
        this.isOpen = false;
        this.isClose = false;
        this.parent = undefined;
        this.parent = iParent;
        this.i = I;
        this.j = J;
    }
}
var PathFindingEnemy = com.bamtang.project.gameBrawler.enemies.PathFindingEnemy;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var object;
                (function (object) {
                    class FallenBlocker extends Breakable {
                        constructor(canvas, world, x, y, npc = null, type = FallenBlocker.BREAKABLE_TYPE_1) {
                            super(canvas, world, x, y, npc, type);
                        }
                        /*override*/ initStates() {
                            switch (project.Global.level) {
                                case 1:
                                    this.setPosition(this.m_x - 3, this.m_y + 53);
                                    this.m_boundsBodyDepth.x = -50;
                                    this.m_boundsBodyDepth.y = -20;
                                    this.m_boundsBodyDepth.width = 100;
                                    this.m_boundsBodyDepth.height = 40;
                                    this.m_character.addState(String(Breakable.ST_STAND_AIR), "mcBreakable1_stand");
                                    this.m_character.addState(String(Breakable.ST_SHAKE), "mcBreakable1_hit");
                                    this.m_character.addState(String(Breakable.ST_BREAK), "mcBreakable1_explode", [this.dropItem.bind(this), 6]);
                                    this.m_character.addState(String(Breakable.ST_ON_FLOOR), "mcBreakable1_stand");
                                    this.m_character.addState(String(Breakable.ST_FALL), "mcBreakable1_stand");
                                    break;
                                case 2:
                                    this.setPosition(this.m_x, this.m_y + 32);
                                    this.m_boundsBodyDepth = new PIXI.Rectangle(-50, -22, 100, 44);
                                    this.m_character.addState(String(Breakable.ST_STAND_AIR), "mcBreakable2_stand");
                                    this.m_character.addState(String(Breakable.ST_SHAKE), "mcBreakable2_hit");
                                    this.m_character.addState(String(Breakable.ST_BREAK), "mcBreakable2_explode", [this.dropItem.bind(this), 6]);
                                    this.m_character.addState(String(Breakable.ST_ON_FLOOR), "mcBreakable2_stand");
                                    this.m_character.addState(String(Breakable.ST_FALL), "mcBreakable2_stand");
                                    break;
                                case 3:
                                    this.setPosition(this.m_x, this.m_y + 32);
                                    this.m_boundsBodyDepth = new PIXI.Rectangle(-50, -22, 100, 44);
                                    this.m_character.addState(String(Breakable.ST_STAND_AIR), "mcBreakable3_stand");
                                    this.m_character.addState(String(Breakable.ST_SHAKE), "mcBreakable3_hit");
                                    this.m_character.addState(String(Breakable.ST_BREAK), "mcBreakable3_explode", [this.dropItem.bind(this), 6]);
                                    this.m_character.addState(String(Breakable.ST_ON_FLOOR), "mcBreakable3_stand");
                                    this.m_character.addState(String(Breakable.ST_FALL), "mcBreakable3_stand");
                                    break;
                            }
                            this.gotoState(Breakable.ST_STAND_AIR);
                        }
                        /*override*/ onHit(damage) {
                            return super.onHit(damage);
                        }
                        /*override*/ gotoState(state) {
                            super.gotoState(state);
                            if (this.m_state == Breakable.ST_BREAK) {
                                project.Global.app.playSound("snd_atb_scenario_crates");
                            }
                        }
                        /*override*/ onEndAnimation(state) {
                            super.onEndAnimation(state);
                        }
                        /*override*/ dropItem() {
                            var lenght = this.m_world.kipuItemsData.length;
                            if (this.mBonusItem == "none" || lenght < 1) {
                                return;
                            }
                            if (lenght >= 1) {
                                var index = -1;
                                if (this.mBonusItem == "random") {
                                    index = Common.random(0, lenght - 1);
                                }
                                else {
                                    for (var i = 0; i < lenght; i++) {
                                        if (this.m_world.kipuItemsData[i].name == this.mBonusItem) {
                                            index = i;
                                            break;
                                        }
                                    }
                                }
                                if (index != -1) {
                                    if (!project.StatsMain.enableSpecial1 &&
                                        !project.StatsMain.enableSpecial2 &&
                                        !project.StatsMain.enableSpecial3 &&
                                        (this.m_world.kipuItemsData[index].name == "MPA" || this.m_world.kipuItemsData[index].name == "MPB")) {
                                        return;
                                    }
                                    var tmpOffSetX = 30;
                                    if (this.m_world.player().isLookingToLeft() == true) {
                                        tmpOffSetX *= -1;
                                    }
                                    var entityObjectExt = new BRW_EntityObjectExt(this.m_world.objectsCanvas(), this.m_x + tmpOffSetX, this.m_y, this.m_world, this.m_world.kipuItemsData[index]);
                                    this.m_world.actorManager().add(entityObjectExt);
                                }
                            }
                        }
                    }
                    FallenBlocker.BREAKABLE_TYPE_1 = 1;
                    FallenBlocker.BREAKABLE_TYPE_2 = 2;
                    FallenBlocker.BREAKABLE_TYPE_3 = 3;
                    FallenBlocker.BREAKABLE_TYPE_4 = 4;
                    object.FallenBlocker = FallenBlocker;
                })(object = gameBrawler.object || (gameBrawler.object = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var FallenBlocker = com.bamtang.project.gameBrawler.object.FallenBlocker;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class BigBox extends FallenBlocker {
                        constructor(canvas, world, x, y, npc = null, type = FallenBlocker.BREAKABLE_TYPE_1) {
                            super(canvas, world, x, y, npc, type);
                            this.m_isLocked = true;
                            this.m_initHealth = this.mHealth;
                        }
                        /*override*/ onEndAnimation(state) {
                            if (state == String(FallenBlocker.ST_BREAK)) {
                                if (this.m_isLocked) {
                                    this.m_character.addState(String(FallenBlocker.ST_STAND_AIR), "mcBreakable4_stand02");
                                    this.m_character.addState(String(FallenBlocker.ST_STAND), "mcBreakable4_stand02");
                                    this.m_character.addState(String(FallenBlocker.ST_SHAKE), "mcBreakable4_stand02");
                                    this.m_character.addState(String(FallenBlocker.ST_BREAK), "mcBreakable4_explode02", [this.dropItem.bind(this), 6]);
                                    this.m_character.addState(String(FallenBlocker.ST_ON_FLOOR), "mcBreakable4_stand02");
                                    this.m_character.addState(String(FallenBlocker.ST_FALL), "mcBreakable4_stand02");
                                    this.gotoState(FallenBlocker.ST_ON_FLOOR);
                                    this.m_isLocked = false;
                                    this.mHealth = this.m_initHealth;
                                }
                            }
                        }
                        callbackEffect0(e) {
                            if (this.m_move != null) {
                                return;
                            }
                            this.m_effect = gameBrawler.HudBrawler.instance.addEffect("mc_powerup_stand_0" + project.Global.level, this.m_x - this.m_world.camera().x() - 20, this.m_y - this.m_world.camera().y() - 10, 1, this.callbackEffect.bind(this), false);
                            var _x = gameBrawler.HudBrawler.instance.getControl("mcSpecial" + project.Global.level).canvas.x;
                            var _y = gameBrawler.HudBrawler.instance.getControl("mcSpecial" + project.Global.level).canvas.y;
                            this.m_move = new ParametricParabolicMovement(this.m_x - 20, this.m_y - 10, _x + this.m_world.camera().x(), _y + this.m_world.camera().y(), 0.05, 0.05);
                            this.m_move.endCallback = this.onEndMove.bind(this);
                        }
                        callbackEffect(e) {
                            e.pause = true;
                        }
                        onEndMove(m) {
                            if (this.m_effect.actor().clip().alpha == 0) {
                                return;
                            }
                            this.m_effect.actor().clip().alpha = 0;
                            if (project.Global.level == 1 && !project.StatsMain.enableSpecial1) {
                                project.Global.app.playSound("snd_atb_player_sharkfullactivate");
                                this.m_world.player().forceSelectesSpecial(gameBrawler.PlayerBrawler.SELECTED_SPECIAL_ATTACK_SHARK_SWORD);
                                gameBrawler.HudBrawler.instance.enableSpecial(gameBrawler.PlayerBrawler.SELECTED_SPECIAL_ATTACK_SHARK_SWORD);
                            }
                            else if (project.Global.level == 2 && !project.StatsMain.enableSpecial2) {
                                project.Global.app.playSound("snd_atb_player_bigfeetactivate");
                                this.m_world.player().forceSelectesSpecial(gameBrawler.PlayerBrawler.SELECTED_SPECIAL_ATTACK_BIG_FEET);
                                gameBrawler.HudBrawler.instance.enableSpecial(gameBrawler.PlayerBrawler.SELECTED_SPECIAL_ATTACK_BIG_FEET);
                            }
                            else if (project.Global.level == 3 && !project.StatsMain.enableSpecial3) {
                                project.Global.app.playSound("snd_atb_player_fearactivate");
                                this.m_world.player().forceSelectesSpecial(gameBrawler.PlayerBrawler.SELECTED_SPECIAL_ATTACK_FEAR_FEASTER);
                                gameBrawler.HudBrawler.instance.enableSpecial(gameBrawler.PlayerBrawler.SELECTED_SPECIAL_ATTACK_FEAR_FEASTER);
                            }
                            gameBrawler.HudBrawler.instance.addEffect("gui_screens_hud_fx", m.x() - this.m_world.camera().x(), m.y() - this.m_world.camera().y(), 1, this.callbackEffectPopup.bind(this));
                        }
                        callbackEffectPopup(e) {
                            if ((project.Global.level == 1 && !project.StatsMain.enableSpecial1) ||
                                (project.Global.level == 2 && !project.StatsMain.enableSpecial2) ||
                                (project.Global.level == 3 && !project.StatsMain.enableSpecial3)) {
                                this.m_world.pauseEnemies(false);
                                this.m_world.player().setCanPlayerInput(true);
                                gameBrawler.HudBrawler.instance.showFakePopupSpecial(false);
                                this.setAwaitingDelete(true);
                                if (this.m_world) {
                                    this.m_world.player().evaluateCurrentStop(this.mStopId, this.mStopGroup, objects.Stop.OBJ_ENEMY);
                                }
                                switch (project.Global.level) {
                                    case 1:
                                        project.StatsMain.enableSpecial1 = true;
                                        break;
                                    case 2:
                                        project.StatsMain.enableSpecial2 = true;
                                        break;
                                    case 3:
                                        project.StatsMain.enableSpecial3 = true;
                                        break;
                                }
                            }
                        }
                        /*override*/ update(dt) {
                            super.update(dt);
                            if (this.m_move != null) {
                                this.m_move.update(dt);
                                if (this.m_move != null && this.m_effect != null) {
                                    this.m_effect.actor().setX(this.m_move.x() - this.m_world.camera().x());
                                    this.m_effect.actor().setY(this.m_move.y() - this.m_world.camera().y());
                                }
                            }
                        }
                        /*override*/ gotoState(state) {
                            super.gotoState(state);
                            if (state == FallenBlocker.ST_BREAK) {
                                this.m_character.loop = false;
                                if (!this.m_isLocked) {
                                    if ((project.Global.level == 1 && !project.StatsMain.enableSpecial1) ||
                                        (project.Global.level == 2 && !project.StatsMain.enableSpecial2) ||
                                        (project.Global.level == 3 && !project.StatsMain.enableSpecial3)) {
                                        this.m_world.pauseEnemies(true);
                                        this.m_world.player().setCanPlayerInput(false);
                                        this.m_world.player().onBreakingBigBox();
                                        this.m_effect = gameBrawler.HudBrawler.instance.addEffect("mc_powerup_appear_0" + project.Global.level, this.m_x - this.m_world.camera().x() - 20, this.m_y - this.m_world.camera().y() - 10, 1, this.callbackEffect0.bind(this), true);
                                    }
                                }
                            }
                        }
                        /*override*/ initStates() {
                            this.m_character.addState(String(FallenBlocker.ST_STAND_AIR), "mcBreakable4_stand");
                            this.m_character.addState(String(FallenBlocker.ST_STAND), "mcBreakable4_stand");
                            this.m_character.addState(String(FallenBlocker.ST_SHAKE), "mcBreakable4_stand");
                            this.m_character.addState(String(FallenBlocker.ST_BREAK), "mcBreakable4_explode", [this.dropItem.bind(this), 6]);
                            this.m_character.addState(String(FallenBlocker.ST_ON_FLOOR), "mcBreakable4_stand");
                            this.m_character.addState(String(FallenBlocker.ST_FALL), "mcBreakable4_stand");
                            this.gotoState(FallenBlocker.ST_STAND_AIR);
                        }
                    }
                    objects.BigBox = BigBox;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BigBox = com.bamtang.project.gameBrawler.objects.BigBox;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class BigWorm extends FallenBlocker {
                        constructor(canvas, world, x, y, npc, type = FallenBlocker.BREAKABLE_TYPE_4) {
                            super(canvas, world, x, y, npc, type);
                            this.m_npc = npc;
                            this.m_npc.timeInit = 0;
                        }
                        /*override*/ initStates() {
                            this.setPosition(this.m_x, this.m_y + 32);
                            this.m_boundsBodyDepth = new PIXI.Rectangle(-50, -22, 100, 44);
                            this.m_character.addState(String(BigWorm.ST_NONE), "mc_npc04_stand");
                            this.m_character.addState(String(FallenBlocker.ST_STAND_AIR), "mc_npc04_stand");
                            this.m_character.addState(String(FallenBlocker.ST_STAND), "mc_npc04_stand");
                            this.m_character.addState(String(FallenBlocker.ST_SHAKE), "mc_npc04_hit");
                            if (project.Global.level == 3) {
                                this.m_character.addState(String(FallenBlocker.ST_BREAK), "mc_npc04_defeat", [this.dropItem.bind(this), 6]);
                            }
                            else {
                                this.m_character.addState(String(FallenBlocker.ST_BREAK), "mc_npc04_break", [this.dropItem.bind(this), 6]);
                            }
                            this.m_character.addState(String(FallenBlocker.ST_ON_FLOOR), "mc_npc04_stand");
                            this.m_character.addState(String(FallenBlocker.ST_FALL), "mc_npc04_stand");
                            this.m_character.addState(String(BigWorm.ST_LITTLE_WORM), "mc_npc04_outro");
                            this.m_character.addState(String(BigWorm.ST_APPEAR), "mc_npc04_appear");
                            this.gotoState(BigWorm.ST_NONE);
                            if (project.Global.level == 3) {
                                this.m_clip.visible = false;
                            }
                            else {
                                this.m_clip.alpha = 0;
                            }
                        }
                        /*override*/ defineInitState() {
                        }
                        /*override*/ onHit(damage) {
                            if (!this.m_clip.visible || this.m_clip.alpha < 1) {
                                return false;
                            }
                            if (super.onHit(damage)) {
                                project.Global.app.playSound("snd_atb_enemies_gethit");
                                return true;
                            }
                            return false;
                        }
                        /*override*/ gotoState(state) {
                            super.gotoState(state);
                            if (this.m_state == FallenBlocker.ST_BREAK || this.m_state == BigWorm.ST_LITTLE_WORM) {
                                this.m_world.player().setCanPlayerInput(false);
                                this.m_character.loop = false;
                            }
                            if (this.m_state == FallenBlocker.ST_BREAK) {
                                this.m_clipShadow.visible = true;
                                if (project.Global.level == 3) {
                                    project.Global.app.playSound("snd_atb_scenario_wormdehydratate");
                                }
                                else {
                                    project.Global.app.playSound("snd_atb_scenario_wormdestroy");
                                }
                                this.m_world.player().placePlayerInFrontBigWorm(this.m_x - 150, this.m_y + 25);
                            }
                        }
                        secondaryCallBack() {
                            this.scapeLittleWorm();
                        }
                        /*override*/ onEndAnimation(state) {
                            if (state == String(FallenBlocker.ST_BREAK)) {
                                this.m_clipShadow.visible = true;
                                if (project.Global.level == 3) {
                                    this.m_world.player().gotoState(BRW_Player.ST_PLAYER_WIN);
                                    if (this.m_x < this.m_world.player().x() && this.m_world.player().flipX()) {
                                        this.m_world.player().setFlipX(false);
                                    }
                                    return;
                                }
                                this.m_npc.gui_messages = this.m_npc.gui_messages2;
                                this.m_msg = new objects.ItemMessage(this.m_world.objectsCanvas(), this.m_world, this.m_x, this.m_y, this.m_npc);
                                this.m_msg.secondaryCallBack = this.secondaryCallBack.bind(this);
                                this.m_world.actorManager().add(this.m_msg);
                                this.m_msg.remoteEnable();
                                project.Global.app.playSound("snd_atb_worm_wowowow_2");
                            }
                            else if (state == String(BigWorm.ST_APPEAR)) {
                                project.Global.app.stopSound("snd_atb_worm_wowowow_2");
                                this.m_msg = new objects.ItemMessage(this.m_world.objectsCanvas(), this.m_world, this.m_x, this.m_y, this.m_npc);
                                this.m_world.actorManager().add(this.m_msg);
                                this.setShadowClip("mcBaseShadow");
                                this.gotoState(FallenBlocker.ST_ON_FLOOR);
                                this.m_world.player().isWatchinBigWormDecoy = true;
                                this.m_msg.remoteEnable();
                            }
                        }
                        onEndMove(m) {
                            if (this.m_effect.actor().clip().alpha == 0) {
                                return;
                            }
                            this.m_effect.actor().clip().alpha = 0;
                            if (project.Global.level == 1 && !project.StatsMain.enableSpecial1) {
                                gameBrawler.HudBrawler.instance.enableSpecial(gameBrawler.PlayerBrawler.SELECTED_SPECIAL_ATTACK_SHARK_SWORD);
                            }
                            else if (project.Global.level == 2 && !project.StatsMain.enableSpecial2) {
                                gameBrawler.HudBrawler.instance.enableSpecial(gameBrawler.PlayerBrawler.SELECTED_SPECIAL_ATTACK_BIG_FEET);
                            }
                            gameBrawler.HudBrawler.instance.addEffect("gui_screens_hud_fx", m.x() - this.m_world.camera().x(), m.y() - this.m_world.camera().y(), 1, this.callbackEffectPopup.bind(this));
                        }
                        callbackEffectPopup(e) {
                            this.m_world.player().gotoState(BRW_Player.ST_PLAYER_WIN);
                            if (this.m_x < this.m_world.player().x() && this.m_world.player().flipX()) {
                                this.m_world.player().setFlipX(false);
                            }
                            if ((project.Global.level == 1 && !project.StatsMain.enableSpecial1) || (project.Global.level == 2 && !project.StatsMain.enableSpecial2)) {
                                gameBrawler.HudBrawler.instance.showFakePopupSpecial();
                            }
                            gameBrawler.GameBrawler.instance.onGameEnd(true);
                        }
                        callbackEffect(e) {
                            e.pause = true;
                        }
                        callbackEffect0(e) {
                            if (this.m_move != null) {
                                return;
                            }
                            this.m_effect = gameBrawler.HudBrawler.instance.addEffect("mc_powerup_stand_0" + project.Global.level, this.m_x - this.m_world.camera().x() - 20, this.m_y - this.m_world.camera().y() - 100, 1, this.callbackEffect.bind(this), false);
                            var _x = gameBrawler.HudBrawler.instance.getControl("mcSpecial" + project.Global.level).canvas.x;
                            var _y = gameBrawler.HudBrawler.instance.getControl("mcSpecial" + project.Global.level).canvas.y;
                            this.m_move = new ParametricParabolicMovement(this.m_x - 20, this.m_y - 100, _x + this.m_world.camera().x(), _y + this.m_world.camera().y(), 0.05, 0.05);
                            this.m_move.endCallback = this.onEndMove.bind(this);
                        }
                        scapeLittleWorm() {
                            this.m_world.player().gotoState(BRW_Player.ST_PLAYER_WIN);
                            if (this.m_x < this.m_world.player().x() && this.m_world.player().flipX()) {
                                this.m_world.player().setFlipX(false);
                            }
                            project.Global.app.stopSound("snd_atb_worm_wowowow_2");
                            this.gotoState(BigWorm.ST_LITTLE_WORM);
                        }
                        /*override*/ update(dt) {
                            super.update(dt);
                            if (project.Global.level == 3) {
                                return;
                            }
                            if (this.m_state == BigWorm.ST_NONE && this.m_clip.alpha == 0 && Math.abs(this.m_x - this.m_world.player().x()) <= 100) {
                                this.m_world.player().setCanPlayerInput(false);
                                this.gotoState(BigWorm.ST_APPEAR);
                                project.Global.app.playSound("snd_atb_worm_wowowow_2");
                                if (project.Global.level == 3) {
                                    this.m_clip.visible = true;
                                }
                                else {
                                    this.m_clip.alpha = 1;
                                }
                            }
                            if (this.m_move != null) {
                                this.m_move.update(dt);
                                if (this.m_move != null && this.m_effect != null) {
                                    this.m_effect.actor().setX(this.m_move.x() - this.m_world.camera().x());
                                    this.m_effect.actor().setY(this.m_move.y() - this.m_world.camera().y());
                                }
                            }
                        }
                        forceAppear() {
                            this.m_world.player().isWatchinBigWormDecoy = true;
                            this.m_world.player().setCanPlayerInput(false);
                            project.Global.app.playSound("snd_atb_worm_wowowow_2");
                            this.gotoState(BigWorm.ST_APPEAR);
                            if (project.Global.level == 3) {
                                this.m_clip.visible = true;
                            }
                            else {
                                this.m_clip.alpha = 1;
                            }
                        }
                    }
                    BigWorm.ST_LITTLE_WORM = 1111;
                    BigWorm.ST_APPEAR = 2222;
                    BigWorm.ST_NONE = 3333;
                    objects.BigWorm = BigWorm;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var BigWorm = com.bamtang.project.gameBrawler.objects.BigWorm;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class Box extends Breakable {
                        constructor(canvas, world, x, y, npc, type = Box.TYPE_BOX_A) {
                            super(canvas, world, x, y, npc);
                            this.m_typeBox = Box.TYPE_BOX_A;
                            this.m_typeBox = type;
                        }
                        /*override*/ initStates() {
                            switch (this.m_typeBox) {
                                case Box.TYPE_BOX_A:
                                    this.m_character.addState(String(Breakable.ST_ON_FLOOR), "ua_crate5_normal");
                                    this.m_character.addState(String(Breakable.ST_SHAKE), "ua_crate5_normal");
                                    this.m_character.addState(String(Breakable.ST_BREAK), "ua_crate5_break", [this.dropItem.bind(this), 7]);
                                    break;
                                case Box.TYPE_BOX_B:
                                    this.m_character.addState(String(Breakable.ST_ON_FLOOR), "ua_crate1_normal");
                                    this.m_character.addState(String(Breakable.ST_SHAKE), "ua_crate1_normal");
                                    this.m_character.addState(String(Breakable.ST_BREAK), "ua_crate1_break", [this.dropItem.bind(this), 7]);
                                    break;
                                case Box.TYPE_BOX_C:
                                    this.m_character.addState(String(Breakable.ST_ON_FLOOR), "ua_crate4_normal");
                                    this.m_character.addState(String(Breakable.ST_SHAKE), "ua_crate4_normal");
                                    this.m_character.addState(String(Breakable.ST_BREAK), "ua_crate4_break", [this.dropItem.bind(this), 11]);
                                    break;
                            }
                            this.gotoState(Breakable.ST_ON_FLOOR);
                            this.setShadowClip("mcBaseShadow");
                        }
                    }
                    Box.TYPE_BOX_A = 800;
                    Box.TYPE_BOX_B = 801;
                    Box.TYPE_BOX_C = 802;
                    objects.Box = Box;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Box = com.bamtang.project.gameBrawler.objects.Box;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class Bridge extends BRW_WorldActorExt {
                        constructor(canvas, world, x, y, params, npc) {
                            super(canvas, world, x, y);
                            this.bridgeId = -1;
                            this.m_character = new Character(x, y, this.m_canvas);
                            this.m_character.addState(String(Bridge.ST_STAND_OFF), "mcBridgeStan");
                            this.m_character.addState(String(Bridge.ST_STAND), "mcBridgeStan");
                            this.m_character.addState(String(Bridge.ST_APPEAR), "mcBridgeAppear");
                            this.m_character.onEndAnimation = this.onEndAnimation.bind(this);
                            this.gotoState(Bridge.ST_STAND_OFF);
                            this.m_clip.alpha = 0;
                            this.createCorners();
                            var p = Common.getParams(npc.params);
                            this.bridgeId = p.hasOwnProperty("bridgeId") ? parseInt(p.bridgeId) : -1;
                        }
                        activeBridge() {
                            this.gotoState(Bridge.ST_APPEAR);
                        }
                        onEndAnimation(state) {
                            if (parseInt(state) == Bridge.ST_APPEAR) {
                                this.gotoState(Bridge.ST_STAND);
                                this.m_clip.alpha = 1;
                            }
                        }
                        isStand() {
                            return this.m_state == Bridge.ST_STAND;
                        }
                        /*override*/ update(dt) {
                            this.m_character.update(dt);
                            super.update(dt);
                        }
                    }
                    Bridge.ST_STAND_OFF = 1;
                    Bridge.ST_STAND = 2;
                    Bridge.ST_APPEAR = 3;
                    objects.Bridge = Bridge;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Bridge = com.bamtang.project.gameBrawler.objects.Bridge;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class CameraZone extends BRW_WorldActorExt {
                        constructor(canvas, world, x, y, sx, sy, params) {
                            super(canvas, world, x, y);
                            this.m_clip = Application.instance.getClip("mcCameraZone");
                            this.m_canvas.addChild(this.m_clip);
                            this.m_clip.scale.x = sx;
                            this.m_clip.scale.y = sy;
                            this.m_scaleX = sx;
                            this.m_scaleY = sy;
                            this.updateBounds();
                            this.mIsActivated = false;
                            this.setRangeControlled(false);
                            this.mZone = new PIXI.Rectangle(params.xmin * this.m_world.cameraWidth, params.ymin * this.m_world.cameraHeight);
                            this.mZone.width = params.xmax * this.m_world.cameraWidth - this.mZone.x;
                            this.mZone.height = params.ymax * this.m_world.cameraHeight - this.mZone.y;
                            this.m_boundsBodyDepth.x = this.m_clip.x - this.m_clip.width * 0.5;
                            this.m_boundsBodyDepth.y = this.m_clip.y - this.m_clip.height * 0.5;
                            this.m_boundsBodyDepth.width = this.m_clip.width;
                            this.m_boundsBodyDepth.height = this.m_clip.height;
                            this.m_clip.alpha = 0;
                            this.m_clip.gotoAndStop("off");
                        }
                        getZone() { return this.mZone; }
                        onActivated(active) {
                            this.mIsActivated = active;
                            this.m_clip.gotoAndStop(this.mIsActivated ? "on" : "off");
                        }
                        /*override*/ update(dt) {
                            if (!this.mIsActivated) {
                                if (this.hitTestBaseCollision(this.m_world.player())) {
                                    this.m_world.game().onZoneCamera(this);
                                }
                            }
                            super.update(dt);
                        }
                        /*override*/ free() {
                            this.mZone = null;
                            super.free();
                        }
                    }
                    objects.CameraZone = CameraZone;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var CameraZone = com.bamtang.project.gameBrawler.objects.CameraZone;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class GameEnd extends BRW_WorldActorExt {
                        constructor(canvas, world, x, y, sx, sy) {
                            super(canvas, world, x, y);
                            this.mAlreadyEnd = false;
                            this.m_clip = Application.instance.getClip("mcNextLevel");
                            this.m_canvas.addChild(this.m_clip);
                            this.m_clip.scale.x = sx;
                            this.m_clip.scale.y = sy;
                            this.m_scaleX = sx;
                            this.m_scaleY = sy;
                            this.updateBounds();
                            this.mIsEnabled = true;
                            this.m_clip.alpha = 0;
                        }
                        /*override*/ update(dt) {
                            super.update(dt);
                        }
                    }
                    objects.GameEnd = GameEnd;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GameEnd = com.bamtang.project.gameBrawler.objects.GameEnd;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class ItemMessage extends BRW_WorldActorExt {
                        constructor(canvas, world, x, y, npc) {
                            super(canvas, world, x, y);
                            this.mIsTeleport = 0;
                            this.mTargetX = 0;
                            this.mTargetY = 0;
                            this.mIsEnabled = false;
                            this.mClipFadeOut = null;
                            this.mInitDelay = 0;
                            this.secondaryCallBack = null;
                            this.setActorClip("mcIconMessage");
                            this.m_clip.visible = false;
                            this.mIsTeleport = npc.teleport;
                            this.mTargetX = npc.targetX;
                            this.mTargetY = npc.targetY;
                            this.mInitDelay = 0;
                            this.m_messages = npc.gui_messages.split(";");
                            this.mIsEnabled = true;
                            this.setRangeControlled(false);
                        }
                        remoteEnable() {
                            this.mIsEnabled = false;
                        }
                        onMessageCompleted() {
                            if (this.mIsTeleport == 0) {
                                this.m_world.player().setCanPlayerInput(true);
                                gameBrawler.HudBrawler.instance.toggleHud(true);
                                this.m_isAwaitingDelete = true;
                                if (this.secondaryCallBack != null) {
                                    this.secondaryCallBack();
                                }
                            }
                            else {
                                this.mClipFadeOut = project.Global.app.getClip("mcGuiDialogueFading");
                                project.Global.app.guiManager.currentScreen.clip.addChild(this.mClipFadeOut);
                            }
                        }
                        /*override*/ update(dt) {
                            super.update(dt);
                            if (!this.mIsEnabled && (this.mInitDelay >= 0)) {
                                this.mInitDelay -= dt;
                                if (this.mInitDelay < 0) {
                                    if (this.m_messages.length == 1 && (this.m_messages[0] == "" || this.m_messages[0] == " ")) {
                                        this.onMessageCompleted();
                                        return;
                                    }
                                    for (var j = 0; j < this.m_messages.length; j++) {
                                        gameBrawler.HudBrawler.instance.toggleHud(false);
                                        this.m_world.game().hud().addQueue(String(this.m_messages[j]), (j == this.m_messages.length - 1) ? this.onMessageCompleted.bind(this) : null);
                                    }
                                }
                            }
                            if (this.mClipFadeOut != null) {
                                if (this.mClipFadeOut.currentFrame >= 20) {
                                    this.m_world.player().setTeleportTarget(this.mTargetX, this.mTargetY);
                                    this.m_world.player().doTeleport();
                                }
                                else if (this.mClipFadeOut.currentFrame >= this.mClipFadeOut.totalFrames) {
                                    project.Global.app.guiManager.currentScreen.clip.removeChild(this.mClipFadeOut);
                                    try {
                                        this.mClipFadeOut.destroy();
                                    }
                                    catch (e) { }
                                    this.mClipFadeOut = null;
                                    this.m_isAwaitingDelete = true;
                                }
                            }
                        }
                    }
                    objects.ItemMessage = ItemMessage;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var ItemMessage = com.bamtang.project.gameBrawler.objects.ItemMessage;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class Laser extends BRW_WorldActorExt {
                        constructor(canvas, world, x, y, params = "") {
                            super(canvas, world, x, y);
                            this.mPlayerRef = world.player();
                            this.mParams = Common.getParams(params);
                            this.setDataObject();
                            this.m_character = new Character(x, y, this.m_canvas);
                            this.m_character.addState(String(Laser.ST_OFF), this.mSkin + "_off");
                            this.m_character.addState(String(Laser.ST_ON), this.mSkin + "_on");
                            this.m_character.addState(String(Laser.ST_INIT), this.mSkin + "_off");
                            this.m_character.addState(String(Laser.ST_ALERT), this.mSkin + "_alert");
                            this.m_character.onEndAnimation = this.onEndAnimation.bind(this);
                            this.gotoState(Laser.ST_INIT);
                            this.setPosition(this.m_x, this.m_y + 97);
                            this.mOX = this.x();
                            this.mOY = this.y();
                            this.mInterDesactice = new Interval(this.deactivateLaser.bind(this), this.mTimerON, 1, null, true);
                            this.mInterActive = new Interval(this.activateLaser.bind(this), this.mTimerOFF, 1, null, true);
                            this.m_isRangeControlled = false;
                            this.m_boundsAttackDepth.width = 40;
                            this.m_boundsAttackDepth.height = 180;
                            this.m_boundsAttackDepth.x = -20;
                            this.m_boundsAttackDepth.y = -180;
                        }
                        activateLaser() {
                            this.mInterDesactice.reset();
                            this.gotoState(Laser.ST_ALERT);
                        }
                        deactivateLaser() {
                            this.gotoState(Laser.ST_OFF);
                            this.mInterActive.reset();
                        }
                        setDataObject() {
                            this.mTimerOFF = Number(this.mParams.timerOff);
                            this.mTimerON = Number(this.mParams.timerOn);
                            this.mDamage = parseInt(this.mParams.damage);
                            this.mSkin = String(this.mParams.skin);
                            this.mInitDelay = parseInt(this.mParams.delay);
                        }
                        /*override*/ gotoState(state) {
                            super.gotoState(state);
                            switch (state) {
                                case Laser.ST_ALERT:
                                    break;
                                case Laser.ST_INIT:
                                case Laser.ST_OFF:
                                    this.m_character.loop = false;
                                    break;
                            }
                        }
                        onEndAnimation(state) {
                            switch (parseInt(state)) {
                                case Laser.ST_ALERT:
                                    this.gotoState(Laser.ST_ON);
                                    this.m_character.loop = false;
                                    break;
                            }
                        }
                        /*override*/ update(dt) {
                            this.m_character.update(dt);
                            this.mInterActive.update(dt);
                            this.mInterDesactice.update(dt);
                            super.update(dt);
                            this.updateBoundsAttack();
                            switch (this.m_state) {
                                case Laser.ST_INIT:
                                    this.mInitDelay -= dt;
                                    if (this.mInitDelay <= 0) {
                                        this.gotoState(Laser.ST_ALERT);
                                        this.mInterDesactice.resume();
                                    }
                                    break;
                                case Laser.ST_ON:
                                    if (!this.mPlayerRef.isJumping() && this.checkCollisionAttackDepth(this.mPlayerRef)) {
                                        if (this.m_clip["mcBoundsAttack"].hitTestPoint(this.mPlayerRef.clip().x, this.mPlayerRef.clip().y, true)) {
                                            this.mPlayerRef.onEnemyCollision(this, this.mDamage, true);
                                        }
                                    }
                            }
                        }
                        /*override*/ free() {
                            this.mInterActive.free();
                            this.mInterActive = null;
                            this.mInterDesactice.free();
                            this.mInterDesactice = null;
                            super.free();
                        }
                    }
                    Laser.ST_INIT = 100;
                    Laser.ST_ON = 101;
                    Laser.ST_OFF = 102;
                    Laser.ST_ALERT = 103;
                    objects.Laser = Laser;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Laser = com.bamtang.project.gameBrawler.objects.Laser;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class NpcChar extends BRW_WorldActorExt {
                        constructor(canvas, world, x, y) {
                            super(canvas, world, x, y);
                            this.m_character = new Character(this.m_x, this.m_y, this.m_canvas);
                            this.m_character.addState(String(NpcChar.ST_STAND), "mc_finalboss_stand");
                            this.m_character.addState(String(NpcChar.ST_WAIT), "mc_finalboss_stand");
                            this.m_character.addState(String(NpcChar.ST_POINT), "mc_finalboss_laugh");
                            this.m_character.addState(String(NpcChar.ST_FLEE), "mc_finalboss_walk");
                            this.m_character.onEndAnimation = this.onEndAnimation.bind(this);
                            this.m_isRangeControlled = false;
                            this.gotoState(NpcChar.ST_STAND);
                            this.setShadowClip("mcBaseShadow_large");
                            this.setScale(1.2);
                        }
                        onEndAnimation(state) {
                            switch (parseInt(state)) {
                                case NpcChar.ST_POINT:
                                    this.m_timeLaugh = NpcChar.TIME_LAUGH;
                                    this.m_movement = new LinearMovement(this.m_x, this.m_y, 0.5);
                                    this.m_movement.gotoPosition(this.m_x + 1500, this.m_y);
                                    this.gotoState(NpcChar.ST_FLEE);
                                    break;
                            }
                        }
                        /*override*/ gotoState(state) {
                            super.gotoState(state);
                            this.m_clip.scale.x = -1;
                            switch (state) {
                                case NpcChar.ST_FLEE:
                                    this.m_clip.scale.x = 1;
                                    break;
                            }
                        }
                        /*override*/ update(dt) {
                            this.m_character.update(dt);
                            switch (this.m_state) {
                                case NpcChar.ST_STAND:
                                    if (this.m_world.camera().x() + this.m_world.camera().width - 75 > this.m_x) {
                                        this.m_timeWait = NpcChar.TIME_WAIT;
                                        this.gotoState(NpcChar.ST_WAIT);
                                        this.m_world.pauseEnemies(true);
                                    }
                                    break;
                                case NpcChar.ST_WAIT:
                                    this.m_timeWait -= dt;
                                    if (this.m_timeWait < 0) {
                                        this.gotoState(NpcChar.ST_POINT);
                                    }
                                    break;
                                case NpcChar.ST_FLEE:
                                    this.m_movement.update(dt);
                                    this.m_x = this.m_movement.x();
                                    this.m_y = this.m_movement.y();
                                    if (this.m_x > this.m_world.camera().x() + this.m_world.camera().width + 200) {
                                        this.m_world.pauseEnemies(false);
                                        this.m_isAwaitingDelete = true;
                                        this.m_state = -1;
                                    }
                                    break;
                            }
                            super.update(dt);
                        }
                    }
                    NpcChar.ST_STAND = 1;
                    NpcChar.ST_WAIT = 2;
                    NpcChar.ST_POINT = 3;
                    NpcChar.ST_LAUGH = 4;
                    NpcChar.ST_FLEE = 5;
                    NpcChar.TIME_WAIT = 1000;
                    NpcChar.TIME_LAUGH = 2500;
                    objects.NpcChar = NpcChar;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var NpcChar = com.bamtang.project.gameBrawler.objects.NpcChar;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class NpcItemMessage extends BRW_WorldActorExt {
                        constructor(canvas, world, x, y, npc) {
                            super(canvas, world, x, y);
                            this.mInitDelay = 0;
                            this.m_npc = npc;
                            this.m_character = new Character(x, y, this.m_canvas);
                            this.m_character.addState(String(NpcItemMessage.ST_STAND), npc.skin + "_stand");
                            this.m_character.addState(String(NpcItemMessage.ST_TALKING), npc.skin + "_talk2");
                            this.m_character.onEndAnimation = this.onEndAnimation.bind(this);
                            this.gotoState(NpcItemMessage.ST_STAND);
                            this.setShadowClip("mcBaseShadow");
                            this.createCorners();
                            this.mIsTeleport = 0;
                            this.mTargetX = npc.targetX;
                            this.mTargetY = npc.targetY;
                            this.mInitDelay = 0;
                            this.m_messages = npc.gui_messages.split(";");
                            this.mIsEnabled = true;
                            this.setRangeControlled(false);
                            this.setScale(1.2);
                            if (npc.skin == "mc_npc01") {
                                this.m_clipShadow.scale.x = 1.5;
                                this.m_clipShadow.scale.y = 1.5;
                            }
                            else {
                                this.m_clipShadow.scale.x = 0.75;
                                this.m_clipShadow.scale.y = 0.75;
                            }
                        }
                        recreateMsg() {
                            this.gotoState(NpcItemMessage.ST_TALKING);
                            this.mInitDelay = this.m_npc.timeInit;
                            this.m_messages = this.m_npc.gui_messages2.split(";");
                            this.mIsEnabled = false;
                            this.m_world.player().setCanPlayerInput(false);
                        }
                        onEndAnimation(state) {
                            this.setFlipX(this.m_world.player().x() < this.m_x);
                        }
                        onMessageCompleted() {
                            if (this.mIsTeleport == 0) {
                                this.m_world.player().setCanPlayerInput(true);
                                this.gotoState(NpcItemMessage.ST_STAND);
                                gameBrawler.HudBrawler.instance.toggleHud(true);
                            }
                            else {
                                this.mClipFadeOut = project.Global.app.getClip("mcGuiDialogueFading");
                                project.Global.app.guiManager.currentScreen.clip.addChild(this.mClipFadeOut);
                            }
                        }
                        /*override*/ update(dt) {
                            this.m_character.update(dt);
                            super.update(dt);
                            if (this.mIsEnabled) {
                                if (this.m_world.player().x() > this.m_x - 50) {
                                    this.mIsEnabled = false;
                                    this.m_world.player().setCanPlayerInput(false);
                                }
                            }
                            if (!this.mIsEnabled && (this.mInitDelay >= 0)) {
                                this.mInitDelay -= dt;
                                if (this.mInitDelay < 0) {
                                    for (var j = 0; j < this.m_messages.length; j++) {
                                        gameBrawler.HudBrawler.instance.toggleHud(false);
                                        this.m_world.game().hud().addQueue(String(this.m_messages[j]), (j == this.m_messages.length - 1) ? this.onMessageCompleted.bind(this) : null);
                                    }
                                }
                            }
                            if (this.mClipFadeOut != null) {
                                if (this.mClipFadeOut.currentFrame >= 20) {
                                    this.m_world.player().setTeleportTarget(this.mTargetX, this.mTargetY);
                                    this.m_world.player().doTeleport();
                                }
                                else if (this.mClipFadeOut.currentFrame >= this.mClipFadeOut.totalFrames) {
                                    project.Global.app.guiManager.currentScreen.clip.removeChild(this.mClipFadeOut);
                                    try {
                                        this.mClipFadeOut.destroy();
                                    }
                                    catch (e) { }
                                    this.mClipFadeOut = null;
                                    this.m_isAwaitingDelete = true;
                                }
                            }
                        }
                    }
                    NpcItemMessage.ST_STAND = 1;
                    NpcItemMessage.ST_TALKING = 2;
                    objects.NpcItemMessage = NpcItemMessage;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var NpcItemMessage = com.bamtang.project.gameBrawler.objects.NpcItemMessage;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class NpcMessage extends BRW_WorldActorExt {
                        constructor(canvas, world, x, y, npc, params) {
                            super(canvas, world, x, y);
                            this.mEnableTalk2 = false;
                            this.mOldCollisionPlayer = false;
                            this.mTxt1Id = "TXT_TOOLTIP_NO";
                            this.mTxt2Id = "TXT_TOOLTIP_YES";
                            this.m_character = new Character(x, y, this.m_canvas);
                            this.m_character.addState(String(NpcMessage.ST_STAND), npc.skin + "_stand");
                            if (npc.skin == "mc_npc04" || npc.skin == "mc_npc05") {
                                this.m_character.addState(String(NpcMessage.ST_TALKING_1), npc.skin + "_talk1");
                                this.m_character.addState(String(NpcMessage.ST_TALKING_2), npc.skin + "_talk2");
                                this.m_character.addState(String(NpcMessage.ST_DEFEAT), npc.skin + "_defeat");
                            }
                            else {
                                this.m_character.addState(String(NpcMessage.ST_TALKING_1), npc.skin + "_stand");
                                this.m_character.addState(String(NpcMessage.ST_TALKING_2), npc.skin + "_talk2");
                            }
                            this.m_character.onEndAnimation = this.onEndAnimation.bind(this);
                            this.gotoState(NpcMessage.ST_STAND);
                            this.createCorners();
                            this.mSkin = npc.skin;
                            this.mInitDelay = npc.timeInit;
                            this.m_messages = npc.gui_messages.split(";");
                            this.setRangeControlled(false);
                            var _p = Common.getParams(params);
                            this.mTxt1Id = _p.hasOwnProperty("txt1") ? String(_p.txt1) : "TXT_TOOLTIP_NO";
                            this.mTxt2Id = _p.hasOwnProperty("txt2") ? String(_p.txt2) : "TXT_TOOLTIP_YES";
                            this.setScale(1.2);
                        }
                        onMessageCompleted(e) {
                            gameBrawler.HudBrawler.instance.toggleHud(true);
                            if (this.mSkin == "mc_npc04" || this.mSkin == "mc_npc05") {
                                this.gotoState(NpcMessage.ST_DEFEAT);
                                this.m_character.loop = false;
                                return;
                            }
                            this.gotoState(NpcMessage.ST_STAND);
                            this.mInitDelay = 0;
                        }
                        enableTalk2() {
                            if (this.mSkin == "mc_npc04" || this.mSkin == "mc_npc05") {
                                return;
                            }
                            this.mEnableTalk2 = true;
                            this.mInitDelay = 0;
                            this.gotoState(NpcMessage.ST_TALKING_2);
                            var fx = gameBrawler.HudBrawler.instance.addEffectGui(this.m_messages[0], this.onMessageCompleted.bind(this));
                            fx.gui.getControl("mcInfoDialogue").setText(this.mTxt2Id);
                        }
                        onEndAnimation(state) {
                            if (this.mSkin != "mc_npc04" && this.mSkin != "mc_npc05") {
                                this.setFlipX(this.m_world.player().x() < this.m_x);
                            }
                            else {
                                this.setFlipX(this.m_world.player().x() >= this.m_x);
                            }
                        }
                        /*override*/ update(dt) {
                            this.m_character.update(dt);
                            super.update(dt);
                            var collisionPlayer = this.mOldCollisionPlayer;
                            switch (this.m_state) {
                                case NpcMessage.ST_STAND:
                                    if (this.m_world.player().hitTest(this)) {
                                        collisionPlayer = true;
                                        if (this.mEnableTalk2) {
                                            if (this.mOldCollisionPlayer == false) {
                                                this.gotoState(NpcMessage.ST_TALKING_2);
                                            }
                                        }
                                    }
                                    else {
                                        collisionPlayer = false;
                                    }
                                    break;
                                case NpcMessage.ST_TALKING_1:
                                    if (this.mInitDelay >= 0) {
                                        this.mInitDelay -= dt;
                                        if (this.mInitDelay < 0) {
                                            gameBrawler.HudBrawler.instance.toggleHud(false);
                                            var fx = gameBrawler.HudBrawler.instance.addEffectGui(this.m_messages[0], this.onMessageCompleted.bind(this));
                                            fx.gui.getControl("mcInfoDialogue").setText(this.mTxt1Id);
                                        }
                                    }
                                    break;
                                case NpcMessage.ST_TALKING_2:
                                    if (this.mInitDelay >= 0) {
                                        this.mInitDelay -= dt;
                                        if (this.mInitDelay < 0) {
                                            fx = gameBrawler.HudBrawler.instance.addEffectGui(this.m_messages[0], this.onMessageCompleted.bind(this));
                                            fx.gui.getControl("mcInfoDialogue").setText(this.mTxt2Id);
                                        }
                                    }
                                    break;
                            }
                            this.mOldCollisionPlayer = collisionPlayer;
                        }
                    }
                    NpcMessage.ST_STAND = 1;
                    NpcMessage.ST_TALKING_1 = 2;
                    NpcMessage.ST_TALKING_2 = 3;
                    NpcMessage.ST_DEFEAT = 4;
                    objects.NpcMessage = NpcMessage;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var NpcMessage = com.bamtang.project.gameBrawler.objects.NpcItemMessage;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class ObjectGunfire extends Breakable {
                        constructor(canvas, world, x, y, npc = null, type = ObjectGunfire.GUNFIRE_TYPE_1) {
                            super(canvas, world, x, y, npc, type);
                            this.mBulletSpeed = npc.bulletSpeed;
                            this.mBulletDamage = npc.bulletDamage;
                            this.mBulletOffset_Y = 10;
                            this.mTimeToWaitMin = npc.timeWaitMin;
                            this.mTimeToWaitMax = npc.timeWaitMax;
                            this.mCurrentFrequency = Common.random(this.mTimeToWaitMin, this.mTimeToWaitMax);
                            this.setRangeControlled(false);
                            this.setShadowClip("mcBaseShadow");
                        }
                        isLookingToLeft() { return this.mIsLookingToLeft; }
                        /*override*/ initStates() {
                            this.setPosition(this.m_x + 2, this.m_y + 49);
                            switch (this.mType) {
                                case ObjectGunfire.GUNFIRE_TYPE_1:
                                    this.mBulletOffset_X = 70;
                                    this.m_character.addState(String(Breakable.ST_STAND_AIR), "mc_cannon2_stand");
                                    this.m_character.addState(String(Breakable.ST_SHAKE), "mc_cannon2_hit");
                                    this.m_character.addState(String(Breakable.ST_BREAK), "mc_cannon2_explote", [this.dropItem.bind(this), 14]);
                                    this.m_character.addState(String(Breakable.ST_ON_FLOOR), "mc_cannon2_stand");
                                    this.m_character.addState(String(Breakable.ST_FALL), "mc_cannon2_stand");
                                    this.m_character.addState(String(ObjectGunfire.ST_SHOOTING), "mc_cannon2_shoot", [this.createBullet.bind(this), 5]);
                                    break;
                                case ObjectGunfire.GUNFIRE_TYPE_2:
                                    this.mBulletOffset_X = 100;
                                    this.m_character.addState(String(Breakable.ST_STAND_AIR), "mc_cannon1_stand");
                                    this.m_character.addState(String(Breakable.ST_SHAKE), "mc_cannon1_hit");
                                    this.m_character.addState(String(Breakable.ST_BREAK), "mc_cannon1_explote", [this.dropItem.bind(this), 14]);
                                    this.m_character.addState(String(Breakable.ST_ON_FLOOR), "mc_cannon1_stand");
                                    this.m_character.addState(String(Breakable.ST_FALL), "mc_cannon1_stand");
                                    this.m_character.addState(String(ObjectGunfire.ST_SHOOTING), "mc_cannon1_shoot", [this.createBullet.bind(this), 5]);
                                    break;
                                case ObjectGunfire.GUNFIRE_TYPE_3:
                                    this.mBulletOffset_X = 100;
                                    this.m_character.addState(String(Breakable.ST_STAND_AIR), "mc_cannon3_stand");
                                    this.m_character.addState(String(Breakable.ST_SHAKE), "mc_cannon3_hit");
                                    this.m_character.addState(String(Breakable.ST_BREAK), "mc_cannon3_explote", [this.dropItem.bind(this), 14]);
                                    this.m_character.addState(String(Breakable.ST_ON_FLOOR), "mc_cannon3_stand");
                                    this.m_character.addState(String(Breakable.ST_FALL), "mc_cannon3_stand");
                                    this.m_character.addState(String(ObjectGunfire.ST_SHOOTING), "mc_cannon3_shoot", [this.createBullet.bind(this), 5]);
                                    break;
                            }
                            this.setFlipX(true);
                            this.gotoState(Breakable.ST_ON_FLOOR);
                            //this.m_clip.scale.x *= 2;
                            //this.m_clip.scale.y *= 2;
                            if (this.m_clip.mcBody) {
                                //this.m_clip.mcBody.y = this.mInitBodyY;
                            }
                        }
                        createBullet() {
                            project.Global.app.playSound("snd_atb_scenario_cannons");
                            var fdist = (this.isLookingToLeft() ? 1 : -1);
                            var bullet = new gameBrawler.BulletBrawler("mc_bullet_" + project.Global.level, this.m_world, this, this.m_x + fdist * this.mBulletOffset_X, this.m_y + this.mBulletOffset_Y, this.mBulletSpeed, this.mBulletDamage, fdist);
                            bullet.setFlipX(true);
                            bullet.setReceivePlayerAttack(false);
                            bullet.setTarget(gameBrawler.BulletBrawler.TARGET_PLAYER | gameBrawler.BulletBrawler.TARGET_BREAKABLES | gameBrawler.BulletBrawler.TARGET_ENEMY);
                            this.m_world.actorManager().add(bullet);
                        }
                        /*override*/ onEndAnimation(state) {
                            if (parseInt(state) == ObjectGunfire.ST_SHOOTING) {
                                this.gotoState(Breakable.ST_ON_FLOOR);
                                this.mCurrentFrequency = Common.random(this.mTimeToWaitMin, this.mTimeToWaitMax);
                            }
                            else {
                                super.onEndAnimation(state);
                            }
                        }
                        /*override*/ update(dt) {
                            if (this.m_state == Breakable.ST_ON_FLOOR) {
                                this.mCurrentFrequency -= dt;
                                if ((this.mCurrentFrequency <= 0) && this.isInCamera(this.m_world.camera())) {
                                    this.gotoState(ObjectGunfire.ST_SHOOTING);
                                }
                            }
                            super.update(dt);
                        }
                        /*override*/ onHit(damage) {
                            if (super.onHit(damage) == true) {
                                project.Global.app.playSound("snd_atb_enemies_gethit");
                                return true;
                            }
                            else {
                                return false;
                            }
                        }
                    }
                    ObjectGunfire.ST_SHOOTING = 1000;
                    ObjectGunfire.GUNFIRE_TYPE_1 = 1;
                    ObjectGunfire.GUNFIRE_TYPE_2 = 2;
                    ObjectGunfire.GUNFIRE_TYPE_3 = 3;
                    objects.ObjectGunfire = ObjectGunfire;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var ObjectGunfire = com.bamtang.project.gameBrawler.objects.ObjectGunfire;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class Stop extends BRW_WorldActorExt {
                        constructor(canvas, world, x, y, params, npc) {
                            super(canvas, world, x, y);
                            this.m_character = new Character(x, y, this.m_canvas);
                            this.m_character.addState(String(Stop.ST_ANIM_STAND), "mcStop");
                            this.gotoState(Stop.ST_ANIM_STAND);
                            this.updateBounds();
                            this.mGroupList = npc.groups.split(",");
                            this.mCurrentGroup = 0;
                            this.mCountObjects = 0;
                            this.mTotalObjects = 0;
                            for (var k = this.mGroupList.length - 1; k >= 0; --k) {
                                this.mTotalObjects += parseInt(this.mGroupList[k]);
                            }
                            this.mStopId = npc.stopId;
                            this.mRangeToEnable = npc.range;
                            var objParams = Common.getParams(params);
                            this.mTypeObjectControlled = String(objParams.object);
                            if (this.mTypeObjectControlled == "undefined") {
                                this.mTypeObjectControlled = Stop.OBJ_ENEMY;
                            }
                            else {
                                this.mTypeObjectControlled = this.mTypeObjectControlled.toLowerCase();
                            }
                            this.m_timer = objParams.hasOwnProperty("timerSeg") ? parseInt(objParams.timerSeg) * 1000 : -1;
                            this.m_wavesRequired = objParams.hasOwnProperty("wavesReq") ? parseInt(objParams.wavesReq) : -1;
                            this.mOldCameraMode = -1;
                            this.mInitDialog = null;
                            this.mEndDialog = null;
                            this.mIsPaused = false;
                            if (String(npc.messageInit).length > 0) {
                                this.mInitDialog = npc.messageInit.split(";");
                            }
                            if (String(npc.messageEnd).length > 0) {
                                this.mEndDialog = npc.messageEnd.split(";");
                            }
                            this.mStopState = Stop.ST_STOP_INITIAL;
                            this.m_clip.alpha = 0;
                        }
                        getTypeObjectControlled() { return this.mTypeObjectControlled; }
                        getId() { return this.mStopId; }
                        getTotalObjectsControlled() { return this.mTotalObjects; }
                        getGroups() { return this.mGroupList; }
                        isLockedScreen() { return (this.mOldCameraMode >= 0); }
                        isPaused() { return this.mIsPaused; }
                        getTimer() {
                            return this.m_timer;
                        }
                        getWavesRequired() {
                            return this.m_wavesRequired;
                        }
                        setStateStop(state) {
                            if (this.mStopState == state) {
                                return;
                            }
                            this.mStopState = state;
                            switch (state) {
                                case Stop.ST_STOP_ENABLED:
                                    if (this.mInitDialog != null) {
                                        for (var i = 0; i < this.mInitDialog.length; i++) {
                                            this.m_world.game().hud().addQueue(String(this.mInitDialog[i]));
                                        }
                                        this.mInitDialog = null;
                                    }
                                    break;
                                case Stop.ST_STOP_SOLVED:
                                    if (this.mOldCameraMode >= 0) {
                                        this.m_world.camera().setMode(this.mOldCameraMode);
                                    }
                                    break;
                                case Stop.ST_STOP_DIALOG:
                                    for (var j = 0; j < this.mEndDialog.length; j++) {
                                        this.m_world.game().hud().addQueue(String(this.mEndDialog[j]), (j == this.mEndDialog.length - 1) ? this.onFinishPopupMessage.bind(this) : null);
                                    }
                            }
                        }
                        setPaused(pause) {
                            if (this.mStopState == Stop.ST_STOP_ENABLED) {
                                this.mIsPaused = pause;
                                this.m_world.player().countKills(0);
                            }
                        }
                        onFinishPopupMessage() {
                            this.setStateStop(Stop.ST_STOP_SOLVED);
                            this.m_world.game().onStopResolved(this);
                        }
                        /*override*/ update(dt) {
                            this.m_character.setX(this.m_clip.x);
                            this.m_character.setY(this.m_clip.y);
                            this.m_character.update(dt);
                            super.update(dt);
                            if (this.mIsPaused) {
                                return;
                            }
                            var camera = this.m_world.camera();
                            if (this.mStopState != Stop.ST_STOP_SOLVED) {
                                if ((camera.x() + camera.width) >= (this.x() + this.m_clip.width / 2)) {
                                    this.setAwaitingDelete(true);
                                    return;
                                }
                                if ((camera.getMode() != BRW_CameraExt.MODE_VERTICAL) &&
                                    (camera.x() + camera.width >= this.x())) {
                                    this.mOldCameraMode = camera.getMode();
                                    camera.setX(this.x() - camera.width);
                                    camera.setMode(BRW_CameraExt.MODE_VERTICAL);
                                    camera.setWorldLimitLeft(camera.x());
                                }
                            }
                            switch (this.mStopState) {
                                case Stop.ST_STOP_INITIAL:
                                    if ((this.x() - this.m_world.player().x()) <= this.mRangeToEnable) {
                                        if (this.m_world.player().setCurrentStop(this)) {
                                            this.setStateStop(Stop.ST_STOP_ENABLED);
                                        }
                                    }
                                    break;
                                case Stop.ST_STOP_ENABLED:
                                    if (this.mTotalObjects > 0 && !this.m_world.player().isBlockedCurrentStop) {
                                        if (this.mEndDialog == null) {
                                            this.setStateStop(Stop.ST_STOP_SOLVED);
                                            this.m_world.game().onStopResolved(this);
                                        }
                                        else {
                                            this.setStateStop(Stop.ST_STOP_DIALOG);
                                        }
                                    }
                                    break;
                                case Stop.ST_STOP_SOLVED:
                                    this.m_isAwaitingDelete = true;
                                    break;
                            }
                        }
                        /*override*/ free() {
                            this.mInitDialog = null;
                            this.mEndDialog = null;
                            super.free();
                        }
                    }
                    Stop.ST_ANIM_STAND = 100;
                    Stop.ST_STOP_INITIAL = 200;
                    Stop.ST_STOP_ENABLED = 201;
                    Stop.ST_STOP_SOLVED = 202;
                    Stop.ST_STOP_DIALOG = 203;
                    Stop.OBJ_ENEMY = "enemy";
                    objects.Stop = Stop;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Stop = com.bamtang.project.gameBrawler.objects.Stop;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class Switcher extends BRW_WorldActorExt {
                        constructor(canvas, world, x, y, params, npc) {
                            super(canvas, world, x, y);
                            this.m_character = new Character(x, y, this.m_canvas);
                            this.m_character.addState(String(Switcher.ST_STAND_OFF), "mcSwitchActiveOff");
                            this.m_character.addState(String(Switcher.ST_STAND_ON), "mcSwitchActiveOn");
                            this.gotoState(Switcher.ST_STAND_OFF);
                            this.createCorners();
                            var objParams = Common.getParams(npc.params);
                            this.mLinkId = objParams.hasOwnProperty("link") ? parseInt(objParams.link) : -1;
                            this.mBridgeId = objParams.hasOwnProperty("bridgeId") ? parseInt(objParams.bridgeId) : -1;
                            this.mInitXCell = parseInt(objParams.cellXi);
                            this.mInitYCell = parseInt(objParams.cellYi);
                            this.mFinalXCell = parseInt(objParams.cellXf);
                            this.mFinalYCell = parseInt(objParams.cellYf);
                        }
                        /*override*/ gotoState(state) {
                            super.gotoState(state);
                            switch (this.m_state) {
                                case Switcher.ST_STAND_OFF:
                                    this.m_character.loop = false;
                                    break;
                                case Switcher.ST_STAND_ON:
                                    this.m_character.loop = false;
                                    break;
                            }
                        }
                        setDynamicCollision(visible) {
                            this.m_world.setRangeCollisionCell(this.mInitXCell, this.mInitYCell, this.mFinalXCell, this.mFinalYCell, visible ? BRW_WorldCollisionLayer.CELL_FULL : BRW_WorldCollisionLayer.CELL_EMPTY);
                            this.m_world.refreshCollision();
                        }
                        /*override*/ update(dt) {
                            this.m_character.update(dt);
                            super.update(dt);
                            switch (this.m_state) {
                                case Switcher.ST_STAND_OFF:
                                    if (this.hitTestReceivedAttack(this.m_world.player())) {
                                        project.Global.app.playSound("snd_atb_scenario_switch");
                                        this.gotoState(Switcher.ST_STAND_ON);
                                        var actors = this.m_world.actorManager().actors;
                                        var i;
                                        if (this.mBridgeId != -1 && this.mInitXCell != 0 && this.mInitYCell != 0) {
                                            this.setDynamicCollision(false);
                                            for (i = 0; i < actors.length; i++) {
                                                if (actors[i] != null &&
                                                    actors[i] instanceof objects.Bridge &&
                                                    this.mBridgeId == actors[i].bridgeId) {
                                                    actors[i].activeBridge();
                                                    return;
                                                }
                                            }
                                            return;
                                        }
                                        for (i = 0; i < actors.length; i++) {
                                            if (actors[i] != null &&
                                                actors[i] instanceof objects.Teleporter &&
                                                this.mLinkId != -1 &&
                                                this.mLinkId == actors[i].linkId()) {
                                                actors[i].open();
                                                return;
                                            }
                                        }
                                    }
                                    break;
                                case Switcher.ST_STAND_ON:
                                    break;
                            }
                        }
                    }
                    Switcher.ST_STAND_OFF = 1;
                    Switcher.ST_STAND_ON = 2;
                    objects.Switcher = Switcher;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Switcher = com.bamtang.project.gameBrawler.objects.Switcher;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class Teleporter extends objects.BaseObject {
                        constructor(canvas, world, x, y, npc, type = -1) {
                            super(canvas, world, x, y, npc, type);
                            this.mTargetX = 0;
                            this.mTargetY = 0;
                            this.mIsActivated = false;
                            this.mClipFadeOut = null;
                            this.mIsActivated = false;
                            var objParams = Common.getParams(npc.params);
                            this.mTargetX = Number(objParams.targetX);
                            this.mTargetY = Number(objParams.targetY);
                            this.mIsInput = Boolean(parseInt(objParams.input));
                            this.m_character = new Character(x, y, this.m_canvas);
                            this.initStates();
                            this.m_character.onEndAnimation = this.onEndAnimation.bind(this);
                            this.setPosition(this.m_x + 1, this.m_y + 94);
                            if (parseInt(objParams.opened) == 1) {
                                this.gotoState(Teleporter.ST_STAND_ON);
                            }
                            this.mLinkId = objParams.hasOwnProperty("link") ? parseInt(objParams.link) : -1;
                            this.m_isRangeControlled = false;
                            this.m_boundsBodyDepth.x = -50;
                            this.m_boundsBodyDepth.y = -5;
                            this.m_boundsBodyDepth.width = 100;
                            this.m_boundsBodyDepth.height = 22;
                            this.setScale(1.2);
                        }
                        get targetX() { return this.mTargetX; }
                        get targetY() { return this.mTargetY; }
                        initStates() {
                            this.mSkin = "mc_portal_in";
                            this.m_character.addState(String(Teleporter.ST_STAND_OFF), this.mSkin + "_stand");
                            this.m_character.addState(String(Teleporter.ST_STAND_ON), this.mSkin + "_open_stand");
                            this.m_character.addState(String(Teleporter.ST_OPEN), this.mSkin + "_open");
                            this.m_character.addState(String(Teleporter.ST_TELEPORTING), this.mSkin + "_open_stand");
                            this.m_character.addState(String(Teleporter.ST_TELEPORT_END), this.mSkin + "_open_stand");
                            this.gotoState(Teleporter.ST_STAND_OFF);
                            this.setDynamicCollision(true);
                        }
                        onCompleteMessageWarning() {
                            this.m_state = Teleporter.ST_STAND_OFF;
                        }
                        onEndAnimation(state) {
                            if (parseInt(state) == Teleporter.ST_OPEN) {
                                this.setDynamicCollision(false);
                                this.gotoState(Teleporter.ST_STAND_ON);
                            }
                        }
                        open() {
                            if (this.m_state == Teleporter.ST_STAND_OFF) {
                                this.gotoState(Teleporter.ST_OPEN);
                            }
                        }
                        linkId() {
                            return this.mLinkId;
                        }
                        onEndPlayerTeleportInAnimation() {
                            if (this.mIsActivated) {
                                this.mClipFadeOut = project.Global.app.getClip("mcGuiDialogueFading");
                                project.Global.app.guiManager.currentScreen.clip.addChild(this.mClipFadeOut);
                                this.gotoState(Teleporter.ST_TELEPORTING);
                            }
                        }
                        /*override*/ update(dt) {
                            this.m_character.setX(this.m_clip.x);
                            this.m_character.setY(this.m_clip.y);
                            this.m_character.update(dt);
                            switch (this.m_state) {
                                case Teleporter.ST_STAND_OFF:
                                    break;
                                case Teleporter.ST_STAND_ON:
                                    if (this.mPlayerBrawler.getAttackMode() == gameBrawler.PlayerBrawler.MODE_ATTACK_NORMAL &&
                                        !this.mPlayerBrawler.control().isInDashAttack() &&
                                        !this.mPlayerBrawler.control().isJumping() &&
                                        !this.mPlayerBrawler.control().isJumpingDown() &&
                                        !this.mPlayerBrawler.control().isJumpingUp() &&
                                        this.hitTestBaseCollision(this.mPlayerBrawler)) {
                                        project.Global.app.playSound("snd_atb_scenario_portalin");
                                        this.mIsActivated = this.mPlayerBrawler.initTeleport(this.onEndPlayerTeleportInAnimation.bind(this), this.m_x, this.m_y);
                                        this.m_state = -1;
                                    }
                                    break;
                                case Teleporter.ST_TELEPORTING:
                                    if (this.mClipFadeOut.currentFrame >= 25) {
                                        this.mPlayerBrawler.setTeleportTarget(this.mTargetX, this.mTargetY);
                                        this.mPlayerBrawler.doTeleport();
                                        project.Global.app.playSound("snd_atb_scenario_portalout");
                                        this.gotoState(Teleporter.ST_TELEPORT_END);
                                    }
                                    break;
                                case Teleporter.ST_TELEPORT_END:
                                    if (this.mClipFadeOut.currentFrame >= this.mClipFadeOut.totalFrames) {
                                        project.Global.app.guiManager.currentScreen.clip.removeChild(this.mClipFadeOut);
                                        try {
                                            this.mClipFadeOut.destroy();
                                        }
                                        catch (e) { }
                                        this.mClipFadeOut = null;
                                        this.mPlayerBrawler.endTeleport();
                                        this.gotoState(Teleporter.ST_STAND_ON);
                                    }
                                    break;
                            }
                            super.update(dt);
                        }
                    }
                    Teleporter.ST_STAND_OFF = 11;
                    Teleporter.ST_STAND_ON = 12;
                    Teleporter.ST_OPEN = 13;
                    Teleporter.ST_TELEPORTING = 14;
                    Teleporter.ST_TELEPORT_END = 15;
                    objects.Teleporter = Teleporter;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Teleporter = com.bamtang.project.gameBrawler.objects.Teleporter;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class TimerTrap extends objects.BaseObject {
                        constructor(canvas, world, x, y, npc, type) {
                            super(canvas, world, x, y, null, type);
                            this.m_boundsAttackDepth = new PIXI.Rectangle(-25, -15, 50, 30);
                            this.mTimeOn = npc.timeOn;
                            this.mTimeOff = npc.timeOff;
                            this.mWeapon = null;
                            this.m_character = new Character(x, y, this.m_canvas);
                            this.initStates(npc);
                            this.setRangeControlled(true);
                            this.mAction = TimerTrap.ACT_DEACTIVATED;
                            this.mTimer = npc.timeInit;
                        }
                        initStates(npc) {
                            switch (project.Global.level) {
                                case 1:
                                    this.m_character.addState(String(objects.BaseObject.ST_STAND), "mc_trap_1_base_stand");
                                    this.mWeapon = new objects.WeaponTrap(this.m_world.objectsCanvas(), this.m_world, this.m_x, this.m_y, npc, objects.WeaponTrap.TYPE_A);
                                    this.m_world.actorManager().add(this.mWeapon);
                                    break;
                                case 2:
                                    this.m_character.addState(String(objects.BaseObject.ST_STAND), "mc_trap_2_base_stand");
                                    this.mWeapon = new objects.WeaponTrap(this.m_world.objectsCanvas(), this.m_world, this.m_x, this.m_y, npc, objects.WeaponTrap.TYPE_B);
                                    this.m_world.actorManager().add(this.mWeapon);
                                    break;
                                case 3:
                                    this.m_character.addState(String(objects.BaseObject.ST_STAND), "mc_trap_3_base_stand");
                                    this.mWeapon = new objects.WeaponTrap(this.m_world.objectsCanvas(), this.m_world, this.m_x, this.m_y, npc, objects.WeaponTrap.TYPE_C);
                                    this.m_world.actorManager().add(this.mWeapon);
                                    break;
                            }
                            this.gotoState(objects.BaseObject.ST_STAND);
                        }
                        /*override*/ update(dt) {
                            this.m_character.setX(this.m_clip.x);
                            this.m_character.setY(this.m_clip.y);
                            this.m_character.update(dt);
                            if (this.isInCamera(this.m_world.camera())) {
                                switch (this.mAction) {
                                    case TimerTrap.ACT_DEACTIVATED:
                                        this.mTimer -= dt;
                                        if (this.mTimer <= 0) {
                                            this.mWeapon.setActive(true);
                                            this.m_clip.alpha = 0;
                                            this.mTimer = this.mTimeOn;
                                            this.mAction = TimerTrap.ACT_ACTIVATED;
                                        }
                                        break;
                                    case TimerTrap.ACT_ACTIVATED:
                                        this.mTimer -= dt;
                                        if (this.mTimer <= 0) {
                                            this.mWeapon.setActive(false);
                                            this.mTimer = this.mTimeOff;
                                            this.mAction = TimerTrap.ACT_DEACTIVATED;
                                        }
                                        break;
                                }
                            }
                            super.update(dt);
                        }
                        /*override*/ free() {
                            this.mWeapon = null;
                            super.free();
                        }
                    }
                    TimerTrap.TYPE_A = 1;
                    TimerTrap.TYPE_B = 2;
                    TimerTrap.TYPE_C = 3;
                    TimerTrap.ACT_ACTIVATED = 1;
                    TimerTrap.ACT_DEACTIVATED = 2;
                    objects.TimerTrap = TimerTrap;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var TimerTrap = com.bamtang.project.gameBrawler.objects.TimerTrap;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class Tutorial extends BRW_WorldActorExt {
                        constructor(canvas, world, x, y, params) {
                            super(canvas, world, x, y);
                            var p = Common.getParams(params);
                            this.mType = parseInt(p.type);
                            this.setActorClip("mcGuiTutorial0" + this.mType);
                            var s;
                            switch (this.mType) {
                                case Tutorial.ID_TUTO_1:
                                    project.Global.app.localizeTextField(this.m_clip["mcInfoTutorial"]["txtInfo"], "MSG_HELP_INFO_1");
                                    s = project.Global.app.getText("MSG_HELP_KEY_1");
                                    if (s == "" || s == " " || s == "undefined") {
                                        this.m_clip["mcKey00"]["mcLetter"].visible = false;
                                    }
                                    else {
                                        this.m_clip["mcKey00"]["mcArrow"].visible = false;
                                        project.Global.app.localizeTextField(this.m_clip["mcKey00"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_1");
                                    }
                                    s = project.Global.app.getText("MSG_HELP_KEY_2");
                                    if (s == "" || s == " " || s == "undefined") {
                                        this.m_clip["mcKey01"]["mcLetter"].visible = false;
                                    }
                                    else {
                                        this.m_clip["mcKey01"]["mcArrow"].visible = false;
                                        project.Global.app.localizeTextField(this.m_clip["mcKey01"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_2");
                                    }
                                    s = project.Global.app.getText("MSG_HELP_KEY_3");
                                    if (s == "" || s == " " || s == "undefined") {
                                        this.m_clip["mcKey02"]["mcLetter"].visible = false;
                                    }
                                    else {
                                        this.m_clip["mcKey02"]["mcArrow"].visible = false;
                                        project.Global.app.localizeTextField(this.m_clip["mcKey02"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_3");
                                    }
                                    s = project.Global.app.getText("MSG_HELP_KEY_4");
                                    if (s == "" || s == " " || s == "undefined") {
                                        this.m_clip["mcKey03"]["mcLetter"].visible = false;
                                    }
                                    else {
                                        this.m_clip["mcKey03"]["mcArrow"].visible = false;
                                        project.Global.app.localizeTextField(this.m_clip["mcKey03"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_4");
                                    }
                                    break;
                                case Tutorial.ID_TUTO_2:
                                    project.Global.app.localizeTextField(this.m_clip["mcInfoTutorial"]["txtInfo"], "MSG_HELP_INFO_2");
                                    s = project.Global.app.getText("MSG_HELP_KEY_5");
                                    if (s == "" || s == " " || s == "undefined") {
                                        this.m_clip["mcKey04"]["mcLetter"].visible = false;
                                    }
                                    else {
                                        this.m_clip["mcKey04"]["mcArrow"].visible = false;
                                        project.Global.app.localizeTextField(this.m_clip["mcKey04"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_5");
                                    }
                                    break;
                                case Tutorial.ID_TUTO_3:
                                    project.Global.app.localizeTextField(this.m_clip["mcInfoTutorial"]["txtInfo"], "MSG_HELP_INFO_3");
                                    s = project.Global.app.getText("MSG_HELP_KEY_6");
                                    if (s == "" || s == " " || s == "undefined") {
                                        this.m_clip["mcKey05"]["mcLetter"].visible = false;
                                    }
                                    else {
                                        this.m_clip["mcKey05"]["mcArrow"].visible = false;
                                        project.Global.app.localizeTextField(this.m_clip["mcKey05"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_6");
                                    }
                                    break;
                                case Tutorial.ID_TUTO_4:
                                    project.Global.app.localizeTextField(this.m_clip["mcInfoTutorial"]["txtInfo"], "MSG_HELP_INFO_4");
                                    s = project.Global.app.getText("MSG_HELP_KEY_7");
                                    if (s == "" || s == " " || s == "undefined") {
                                        this.m_clip["mcKey06"]["mcLetter"].visible = false;
                                    }
                                    else {
                                        this.m_clip["mcKey06"]["mcArrow"].visible = false;
                                        project.Global.app.localizeTextField(this.m_clip["mcKey06"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_7");
                                    }
                                    break;
                                case Tutorial.ID_TUTO_5:
                                    project.Global.app.localizeTextField(this.m_clip["mcInfoTutorial"]["txtInfo"], "MSG_HELP_INFO_5");
                                    s = project.Global.app.getText("MSG_HELP_KEY_8");
                                    if (s == "" || s == " " || s == "undefined") {
                                        this.m_clip["mcKey07"]["mcLetter"].visible = false;
                                    }
                                    else {
                                        project.Global.app.localizeTextField(this.m_clip["mcKey07"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_8");
                                    }
                                    break;
                                case Tutorial.ID_TUTO_6:
                                    project.Global.app.localizeTextField(this.m_clip["mcInfoTutorial"]["txtInfo"], "MSG_HELP_INFO_6_B");
                                    s = project.Global.app.getText("MSG_HELP_KEY_8_B");
                                    if (s == "" || s == " " || s == "undefined") {
                                        this.m_clip["mcKey08"]["mcLetter"].visible = false;
                                    }
                                    else {
                                        this.m_clip["mcKey08"]["mcArrow"].visible = false;
                                        project.Global.app.localizeTextField(this.m_clip["mcKey08"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_8_B");
                                    }
                                    s = project.Global.app.getText("MSG_HELP_KEY_9");
                                    if (s == "" || s == " " || s == "undefined") {
                                        this.m_clip["mcKey09"]["mcLetter"].visible = false;
                                    }
                                    else {
                                        this.m_clip["mcKey09"]["mcArrow"].visible = false;
                                        project.Global.app.localizeTextField(this.m_clip["mcKey09"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_9");
                                    }
                                    break;
                                case Tutorial.ID_TUTO_7:
                                    project.Global.app.localizeTextField(this.m_clip["mcInfoTutorial"]["txtInfo"], "MSG_HELP_INFO_7_B");
                                    s = project.Global.app.getText("MSG_HELP_KEY_10");
                                    if (s == "" || s == " " || s == "undefined") {
                                        this.m_clip["mcKey10"]["mcLetter"].visible = false;
                                    }
                                    else {
                                        this.m_clip["mcKey10"]["mcArrow"].visible = false;
                                        project.Global.app.localizeTextField(this.m_clip["mcKey10"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_10");
                                    }
                                    s = project.Global.app.getText("MSG_HELP_KEY_11");
                                    if (s == "" || s == " " || s == "undefined") {
                                        this.m_clip["mcKey11"]["mcLetter"].visible = false;
                                    }
                                    else {
                                        this.m_clip["mcKey11"]["mcArrow"].visible = false;
                                        project.Global.app.localizeTextField(this.m_clip["mcKey11"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_11");
                                    }
                                    s = project.Global.app.getText("MSG_HELP_KEY_12");
                                    if (s == "" || s == " " || s == "undefined") {
                                        this.m_clip["mcKey12"]["mcLetter"].visible = false;
                                    }
                                    else {
                                        this.m_clip["mcKey12"]["mcArrow"].visible = false;
                                        project.Global.app.localizeTextField(this.m_clip["mcKey12"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_12");
                                    }
                                    break;
                                case Tutorial.ID_TUTO_8:
                                    project.Global.app.localizeTextField(this.m_clip["mcInfoTutorial"]["txtInfo"], "MSG_HELP_INFO_8_B");
                                    break;
                                case Tutorial.ID_TUTO_9:
                                    s = project.Global.app.getText("MSG_HELP_KEY_13");
                                    if (s == "" || s == " " || s == "undefined") {
                                        this.m_clip["mcKey13"]["mcLetter"].visible = false;
                                    }
                                    else {
                                        this.m_clip["mcKey13"]["mcArrow"].visible = false;
                                        project.Global.app.localizeTextField(this.m_clip["mcKey13"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_13");
                                    }
                                    project.Global.app.localizeTextField(this.m_clip["mcInfoTutorial"]["txtInfo"], "MSG_HELP_INFO_9");
                                    break;
                            }
                        }
                        setVisible(value) {
                            this.m_clip.visible = value;
                        }
                    }
                    Tutorial.ID_TUTO_1 = 1;
                    Tutorial.ID_TUTO_2 = 2;
                    Tutorial.ID_TUTO_3 = 3;
                    Tutorial.ID_TUTO_4 = 4;
                    Tutorial.ID_TUTO_5 = 5;
                    Tutorial.ID_TUTO_6 = 6;
                    Tutorial.ID_TUTO_7 = 7;
                    Tutorial.ID_TUTO_8 = 8;
                    Tutorial.ID_TUTO_9 = 9;
                    objects.Tutorial = Tutorial;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Tutorial = com.bamtang.project.gameBrawler.objects.Tutorial;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class WeaponTrap extends objects.BaseObject {
                        constructor(canvas, world, x, y, npc, type) {
                            super(canvas, world, x, y, null, type);
                            this.mDamage = npc.damage;
                            this.m_boundsAttackDepth = new PIXI.Rectangle(-25, -6, 50, 18);
                            this.m_character = new Character(x, y, this.m_canvas);
                            this.initStates();
                            this.m_character.onEndAnimation = this.onEndAnimation.bind(this);
                            this.setRangeControlled(true);
                        }
                        initStates() {
                            switch (project.Global.level) {
                                case 1:
                                    this.m_character.addState(String(WeaponTrap.ST_APPEAR), "mc_trap_1_appear");
                                    this.m_character.addState(String(objects.BaseObject.ST_STAND), "mc_trap_1_stand");
                                    this.m_character.addState(String(WeaponTrap.ST_DISSAPEAR), "mc_trap_1_disappear");
                                    this.m_character.addState(String(WeaponTrap.ST_DEACTIVATED), "mc_trap_1_deactivated");
                                    break;
                                case 2:
                                    this.m_character.addState(String(WeaponTrap.ST_APPEAR), "mc_trap_2_appear");
                                    this.m_character.addState(String(objects.BaseObject.ST_STAND), "mc_trap_2_stand");
                                    this.m_character.addState(String(WeaponTrap.ST_DISSAPEAR), "mc_trap_2_disappear");
                                    this.m_character.addState(String(WeaponTrap.ST_DEACTIVATED), "mc_trap_2_deactivated");
                                    break;
                                case 3:
                                    this.m_character.addState(String(WeaponTrap.ST_APPEAR), "mc_trap_3_appear");
                                    this.m_character.addState(String(objects.BaseObject.ST_STAND), "mc_trap_3_stand");
                                    this.m_character.addState(String(WeaponTrap.ST_DISSAPEAR), "mc_trap_3_disappear");
                                    this.m_character.addState(String(WeaponTrap.ST_DEACTIVATED), "mc_trap_3_deactivated");
                                    break;
                            }
                            this.gotoState(WeaponTrap.ST_DEACTIVATED);
                        }
                        setActive(active) {
                            if (active) {
                                if ((this.m_state != WeaponTrap.ST_APPEAR) && (this.m_state != objects.BaseObject.ST_STAND)) {
                                    this.gotoState(WeaponTrap.ST_APPEAR);
                                }
                            }
                            else {
                                if ((this.m_state != WeaponTrap.ST_DISSAPEAR) && (this.m_state != WeaponTrap.ST_DEACTIVATED)) {
                                    this.gotoState(WeaponTrap.ST_DISSAPEAR);
                                }
                            }
                        }
                        /*override*/ gotoState(state) {
                            super.gotoState(state);
                            this.updateBoundsAttack();
                        }
                        onEndAnimation(state) {
                            switch (parseInt(state)) {
                                case WeaponTrap.ST_APPEAR:
                                    this.gotoState(objects.BaseObject.ST_STAND);
                                    break;
                                case WeaponTrap.ST_DISSAPEAR:
                                    this.gotoState(WeaponTrap.ST_DEACTIVATED);
                                    break;
                            }
                        }
                        /*override*/ update(dt) {
                            this.m_character.setX(this.m_clip.x);
                            this.m_character.setY(this.m_clip.y);
                            this.m_character.update(dt);
                            if (this.m_state != WeaponTrap.ST_DEACTIVATED) {
                                if (this.mPlayerBrawler.hitTestReceivedAttack(this)) {
                                    this.mPlayerBrawler.onEnemyCollision(this, this.mDamage, true);
                                }
                                var actorsGroup = this.m_world.actorManager().actors;
                                var actor = null;
                                for (var k = actorsGroup.length - 1; (k >= 0) && !this.m_isAwaitingDelete; --k) {
                                    actor = actorsGroup[k];
                                    if (actor.isIdle()) {
                                        continue;
                                    }
                                    if (actor instanceof BaseEnemy && actor.isEnabled()) {
                                        if (actor.hitTestReceivedAttack(this)) {
                                            actor.onHit(this.mDamage, this);
                                        }
                                    }
                                }
                            }
                            super.update(dt);
                        }
                    }
                    WeaponTrap.TYPE_A = 1;
                    WeaponTrap.TYPE_B = 2;
                    WeaponTrap.TYPE_C = 3;
                    WeaponTrap.ST_APPEAR = 11;
                    WeaponTrap.ST_DISSAPEAR = 12;
                    WeaponTrap.ST_DEACTIVATED = 13;
                    objects.WeaponTrap = WeaponTrap;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var WeaponTrap = com.bamtang.project.gameBrawler.objects.WeaponTrap;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gameBrawler;
            (function (gameBrawler) {
                var objects;
                (function (objects) {
                    class Xplosive extends Breakable {
                        constructor(canvas, world, x, y, npc) {
                            super(canvas, world, x, y, npc, -1);
                            this.mTimeWick = Common.random(npc.timeWaitMin, npc.timeWaitMax);
                            this.mEnablePlayerDamage = true;
                        }
                        /*override*/ initStates() {
                            this.setPosition(this.m_x, this.m_y + 48);
                            this.m_character.addState(String(Breakable.ST_STAND_AIR), "mc_object_explosivebox_stand");
                            this.m_character.addState(String(Breakable.ST_ON_FLOOR), "mc_object_explosivebox_stand");
                            this.m_character.addState(String(Breakable.ST_FALL), "mc_object_explosivebox_stand");
                            this.m_character.addState(String(Xplosive.ST_ON), "mc_object_explosivebox_on");
                            this.m_character.addState(String(Breakable.ST_SHAKE), "mc_object_explosivebox_stand");
                            this.m_character.addState(String(Breakable.ST_BREAK), "mc_object_explosivebox_explode", [this.dropItem.bind(this), 17]);
                            this.gotoState(Breakable.ST_ON_FLOOR);
                            this.setShadowClip("mcBaseShadow");
                        }
                        /*override*/ gotoState(state) {
                            super.gotoState(state);
                            if (this.m_state == Breakable.ST_BREAK) {
                                this.m_boundsAttackDepth = new PIXI.Rectangle(-200, -150, 400, 300);
                                this.m_character.loop = false;
                            }
                        }
                        /*override*/ onHit(damage) {
                            if (this.m_state != Breakable.ST_ON_FLOOR) {
                                return false;
                            }
                            this.mHealth -= damage;
                            if (this.mHealth <= 0) {
                                this.mHealth = 0;
                                this.gotoState(Xplosive.ST_ON);
                            }
                            else {
                                this.gotoState(Breakable.ST_SHAKE);
                                this.mTotalShakeTime = 300;
                            }
                            this.mHitTint.start(200, 100);
                            return true;
                        }
                        /*override*/ onStopShaking() {
                            if (this.m_state == Xplosive.ST_ON) {
                                return;
                            }
                            if (this.m_state == Breakable.ST_SHAKE) {
                                this.gotoState(Breakable.ST_ON_FLOOR);
                            }
                            else {
                                super.onStopShaking();
                            }
                        }
                        /*override*/ update(dt) {
                            this.m_character.setX(this.m_clip.x);
                            this.m_character.setY(this.m_clip.y);
                            this.m_character.update(dt);
                            this.updateBoundsAttack();
                            switch (this.m_state) {
                                case Xplosive.ST_ON:
                                    this.mTimeWick -= dt;
                                    if (this.mTimeWick <= 0) {
                                        this.forceDestroy();
                                    }
                                    else {
                                        this.updateShake(dt);
                                    }
                                    break;
                                case Breakable.ST_BREAK:
                                    if (this.boundsAttack() != null) {
                                        if (this.mEnablePlayerDamage && this.mPlayerBrawler.hitTestReceivedAttack(this)) {
                                            this.mPlayerBrawler.onEnemyCollision(this, this.mDamage);
                                            this.mEnablePlayerDamage = false;
                                        }
                                        var actors = this.m_world.actorManager().actors;
                                        for (var k = actors.length - 1; k >= 0; --k) {
                                            if (actors[k].isIdle()) {
                                                continue;
                                            }
                                            if (actors[k].isAwaitingDelete()) {
                                                continue;
                                            }
                                            if ((actors[k] instanceof BaseEnemy) && actors[k].hitTestReceivedAttack(this)) {
                                                actors[k].onKnock(this.mDamage, this);
                                            }
                                            else if ((actors[k] instanceof Xplosive) && (actors[k] != this) &&
                                                (actors[k].m_state == Breakable.ST_ON_FLOOR) &&
                                                actors[k].hitTestReceivedAttack(this)) {
                                                actors[k].gotoState(Xplosive.ST_ON);
                                            }
                                            else if ((actors[k] instanceof Breakable) && actors[k].hitTestReceivedAttack(this)) {
                                                actors[k].onHit(this.mDamage);
                                            }
                                        }
                                    }
                                    break;
                            }
                            super.update(dt);
                            this.mHitTint.update(dt);
                        }
                    }
                    Xplosive.ST_ON = 700;
                    objects.Xplosive = Xplosive;
                })(objects = gameBrawler.objects || (gameBrawler.objects = {}));
            })(gameBrawler = project.gameBrawler || (project.gameBrawler = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Xplosive = com.bamtang.project.gameBrawler.objects.Xplosive;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiCutscene extends ScreenExt {
                    constructor(idGuiData = "", x = 0, y = 0, appInstance = null) {
                        super(idGuiData, x, y, appInstance);
                        this.m_bubbles = [[1, 2, 3, 4],
                            [5, 6, 7],
                            [8, 9, 10, 11],
                            [12, 13],
                            [14, 15, 16],
                            [17, 18, 19],
                            [20, 21, 22],
                            [23, 24, 25, 26, 27]];
                        this.m_init_counter = GuiCutscene.counter;
                        this.m_init_numScene = GuiCutscene.numScene;
                        GuiCutscene.numScene = GuiCutscene.counter + GuiCutscene.numScene - 1;
                        this.getControl("mcGuiBackground").changeClip("gui_screens_cutscene_image0" + GuiCutscene.counter);
                        for (var i = 0; i < this.m_bubbles[GuiCutscene.counter - 1].length; i++) {
                            var n = this.m_bubbles[GuiCutscene.counter - 1][i];
                            project.Global.app.localizeTextField(this.getControl("mcGuiBackground").child["mcCutsceneInfo" + n]["txtInfo"], "TXT_CUTSCENE_BUBBLE_" + n);
                        }
                        if (GuiCutscene.counter != 1) {
                            this.getControl("mcGuiBtnBack").visible = false;
                        }
                        if (this.m_init_numScene == 1) {
                            this.getControl("mcGuiBtnCancel").visible = false;
                        }
                        if (project.Global.app.guiManager.lastScreenId == gui.GuiManager.SC_GAME) {
                            project.Global.app.stopAllSound();
                            project.Global.app.playSound("ATB_Titlecard");
                        }
                    }
                    passScene(forward) {
                        (forward) ? GuiCutscene.counter++ : GuiCutscene.counter--;
                        if (GuiCutscene.counter > this.m_init_counter && this.m_init_numScene > 1) {
                            this.getControl("mcGuiBtnBack").visible = true;
                        }
                        else {
                            this.getControl("mcGuiBtnBack").visible = false;
                        }
                        if (GuiCutscene.counter >= this.m_init_counter && GuiCutscene.counter <= GuiCutscene.numScene) {
                            this.getControl("mcGuiBackground").changeClip("gui_screens_cutscene_image0" + GuiCutscene.counter);
                            for (var i = 0; i < this.m_bubbles[GuiCutscene.counter - 1].length; i++) {
                                var n = this.m_bubbles[GuiCutscene.counter - 1][i];
                                project.Global.app.localizeTextField(this.getControl("mcGuiBackground").child["mcCutsceneInfo" + n]["txtInfo"], "TXT_CUTSCENE_BUBBLE_" + n);
                            }
                            return;
                        }
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                    /*override*/ onMouseOverControl(control) {
                        super.onMouseOverControl(control);
                        project.Global.app.playSound("snd_atb_interface_over");
                        switch (control.name) {
                            case "mcGuiBtnNext":
                                this.createTooltips(control.canvas.x - 130, control.canvas.y - 95, this.m_clip, "TXT_TOOLTIP_NEXT", ToolTips.POINT_TO_DOWN);
                                break;
                            case "mcGuiBtnBack":
                                this.createTooltips(control.canvas.x - 30, control.canvas.y - 80, this.m_clip, "TXT_TOOLTIP_BACK", ToolTips.POINT_TO_DOWN);
                                break;
                            case "mcGuiBtnCancel":
                                this.createTooltips(control.canvas.x - 130, control.canvas.y + 70, this.m_clip, "TXT_TOOLTIP_SKIP", ToolTips.POINT_TO_UP);
                                break;
                        }
                    }
                    /*override*/ onMouseOutControl(control) {
                        super.onMouseOutControl(control);
                        this.destroyToolTips();
                    }
                    /*override*/ onClickControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        project.Global.app.playSound("snd_atb_interface_button");
                        super.onClickControl(control);
                        this.destroyToolTips();
                        switch (control.name) {
                            case "mcGuiBtnNext":
                                this.passScene(true);
                                return;
                            case "mcGuiBtnBack":
                                this.passScene(false);
                                return;
                        }
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                    /*override*/ onLastFrame() {
                        switch (this.m_lastControlClicked) {
                            case "mcGuiBtnCancel":
                            case "mcGuiBtnNext":
                                if (this.m_init_counter == 3 && this.m_init_numScene == 1) {
                                    this.createTransition("mc_transition_out", 0, 0, { screen: gui.GuiManager.SC_END_LEVEL });
                                }
                                else if (this.m_init_counter == 5 && this.m_init_numScene == 1) {
                                    this.createTransition("mc_transition_out", 0, 0, { screen: gui.GuiManager.SC_END_LEVEL });
                                }
                                else if (this.m_init_counter == 7 && this.m_init_numScene == 2) {
                                    this.createTransition("mc_transition_out", 0, 0, { screen: gui.GuiManager.SC_END_LEVEL });
                                }
                                else {
                                    this.createTransition("mcGuiTransitionFadein", 0, 0, { screen: gui.GuiManager.SC_GAME });
                                }
                                break;
                            case "mcGuiBtnBack":
                                if (this.m_init_counter == 3 && this.m_init_numScene == 1) {
                                    this.createTransition("mc_transition_out", 0, 0, { screen: gui.GuiManager.SC_END_LEVEL });
                                }
                                else if (this.m_init_counter == 5 && this.m_init_numScene == 1) {
                                    this.createTransition("mc_transition_out", 0, 0, { screen: gui.GuiManager.SC_END_LEVEL });
                                }
                                else if (this.m_init_counter == 7 && this.m_init_numScene == 2) {
                                    this.createTransition("mc_transition_out", 0, 0, { screen: gui.GuiManager.SC_END_LEVEL });
                                }
                                else {
                                    this.createTransition("mc_transition_out", 0, 0, { screen: gui.GuiManager.SC_METAMAP });
                                }
                                break;
                        }
                    }
                    /*override*/ onEndTransition(fx) {
                        super.onEndTransition(fx);
                        if (fx.params != null) {
                            project.Global.app.guiManager.gotoScreen(fx.params.screen);
                        }
                    }
                    /*override*/ onPressSpaceBar() {
                        this.destroyToolTips();
                        if (!this.m_isInStop) {
                            return;
                        }
                        this.m_lastControlClicked = "mcGuiBtnNext";
                        if (GuiCutscene.counter < GuiCutscene.numScene) {
                            this.passScene(true);
                            return;
                        }
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                }
                GuiCutscene.counter = 1;
                GuiCutscene.numScene = 2;
                gui.GuiCutscene = GuiCutscene;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiCutscene = com.bamtang.project.gui.GuiCutscene;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiEndGame extends ScreenExt {
                    constructor(idGuiData = "", x = 0, y = 0, app = null) {
                        super(idGuiData, x, y, app);
                        project.Global.app.stopAllSound();
                        if (project.StatsMain.isUnlockedHardMode) {
                            project.Global.app.playSound("ATB_WinGame");
                            var txt2 = this.getControl("mcInfoEndgame01");
                            var txt3 = this.getControl("mcInfoEndgame02");
                            if (project.Global.isInHardMode) {
                                txt2.setText("TXT_END_GAME_INFO_1_C");
                                txt3.setText("TXT_END_GAME_INFO_2_C");
                            }
                            else {
                                txt2.setText("TXT_END_GAME_INFO_1_B");
                                txt3.setText("TXT_END_GAME_INFO_2_B");
                            }
                        }
                        else {
                            project.Global.app.playSound("snd_atb_scenario_nightmare");
                            Common.execCommand(this.playRegularSong.bind(this), 7000);
                        }
                        project.StatsMain.isUnlockedHardMode = true;
                        project.Global.app.storage.saveBooleanFunc(project.StatsMain.ID_UNLOCKED_HARD, project.StatsMain.isUnlockedHardMode);
                    }
                    playRegularSong() {
                        project.Global.app.playSound("ATB_WinGame");
                    }
                    /*override*/ onPressSpaceBar() {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onPressSpaceBar();
                        project.Global.app.playSound("snd_atb_interface_button");
                        this.destroyToolTips();
                        this.m_lastControlClicked = "mcGuiBtnNext";
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                    /*override*/ onEndTransition(fx) {
                        super.onEndTransition(fx);
                        if (fx.params != null) {
                            gui.GuiManager.instance.gotoScreen(fx.params.screen);
                        }
                    }
                    /*override*/ onClickControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onClickControl(control);
                        project.Global.app.playSound("snd_atb_interface_button");
                        this.destroyToolTips();
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                    /*override*/ onMouseOverControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onMouseOverControl(control);
                        switch (control.name) {
                            case "mcGuiBtnNext":
                                project.Global.app.playSound("snd_atb_interface_over");
                                this.createTooltips(this.getControl(control.name).canvas.x - 140, this.getControl(control.name).canvas.y - 100, this.m_clip, "TXT_TOOLTIP_NEXT", 2);
                                break;
                        }
                    }
                    /*override*/ onMouseOutControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        this.destroyToolTips();
                    }
                    /*override*/ onLastFrame() {
                        this.createTransition("mcGuiTransitionFadein", 0, 0, { screen: gui.GuiManager.SC_MAIN_MENU });
                    }
                }
                gui.GuiEndGame = GuiEndGame;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiEndGame = com.bamtang.project.gui.GuiEndGame;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiEndLevel extends ScreenExt {
                    constructor(idGuiData = "", x = 0, y = 0, app = null) {
                        super(idGuiData, x, y, app);
                        project.Global.app.storage.saveIntFunc(project.StatsMain.ID_PLAYER_LIFES, project.StatsMain.playerLifes);
                        project.Global.app.storage.saveIntFunc(project.StatsMain.ID_PLAYER_MAGIC, project.StatsMain.playerMagic);
                        project.StatsMain.levelsDone[project.Global.level - 1] = 1;
                        project.Global.app.storage.saveArrayFunc(project.StatsMain.ID_LEVELS_DONE, project.StatsMain.levelsDone);
                        project.StatsMain.lastLevelDone = project.Global.level;
                        project.Global.app.storage.saveIntFunc(project.StatsMain.ID_LAST_LEVEL_DONE, project.StatsMain.lastLevelDone);
                        if (project.Global.level == 1) {
                            project.StatsMain.enableSpecial1 = true;
                        }
                        else if (project.Global.level == 2) {
                            project.StatsMain.enableSpecial2 = true;
                        }
                        project.Global.app.storage.saveBooleanFunc(project.StatsMain.ID_SPECIAL_1_DONE, project.StatsMain.enableSpecial1);
                        project.Global.app.storage.saveBooleanFunc(project.StatsMain.ID_SPECIAL_2_DONE, project.StatsMain.enableSpecial2);
                        project.Global.app.storage.saveBooleanFunc(project.StatsMain.ID_SPECIAL_3_DONE, project.StatsMain.enableSpecial3);
                        this.getControl("mcGuiBackground").changeClip("gui_screens_endlevel_background0" + project.Global.level);
                        project.Global.app.stopAllSound();
                        project.Global.app.playSound("ATB_Win");
                        this.createTransition("mc_transition_in", 0, 0);
                        var comboRange = project.StatsMain.comboRange;
                        this.getControl("mcInfoNumber03").setText("TXT_NUMBER", "" + comboRange);
                        var phraseText = "TXT_COMBO_A";
                        this.m_numStars = 1;
                        if (comboRange >= project.Global.comboRangeC) {
                            phraseText = "TXT_COMBO_B";
                            this.m_numStars = 2;
                        }
                        if (comboRange >= project.Global.comboRangeB) {
                            phraseText = "TXT_COMBO_C";
                            this.m_numStars = 3;
                        }
                        if (comboRange >= project.Global.comboRangeA) {
                            phraseText = "TXT_COMBO_D";
                            this.m_numStars = 4;
                        }
                        if (comboRange >= project.Global.comboRangeS) {
                            phraseText = "TXT_COMBO_E";
                            this.m_numStars = 5;
                        }
                        (this.getControl("mcEndlevelStart01").child).gotoAndStop(2);
                        this.getControl("mcEndlevelStart02").child.gotoAndStop(2);
                        this.getControl("mcEndlevelStart03").child.gotoAndStop(2);
                        this.getControl("mcEndlevelStart04").child.gotoAndStop(2);
                        this.getControl("mcEndlevelStart05").child.gotoAndStop(2);
                        this.getControl("mcInfoPhrase").setText(phraseText, "", phraseText);
                        this.getControl("mcEndlevelEmemy").changeClip("gui_screens_endlevel_enemy0" + project.Global.level);
                        this.getControl("mcInfoNumber02").setText("TXT_NUMBER", "" + project.StatsMain.killedEnemies);
                        this.getControl("mcEndlevelDioamond").child.gotoAndStop(1);
                        this.getControl("mcInfoNumber04").setText("TXT_NUMBER", "" + project.StatsMain.jewels);
                    }
                    /*override*/ onPressSpaceBar() {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onPressSpaceBar();
                        project.Global.app.playSound("snd_atb_interface_button");
                        this.destroyToolTips();
                        this.m_lastControlClicked = "mcGuiBtnNext";
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                    /*override*/ onEndTransition(fx) {
                        super.onEndTransition(fx);
                        if (fx.params != null) {
                            gui.GuiManager.instance.gotoScreen(fx.params.screen);
                        }
                    }
                    /*override*/ onClickControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onClickControl(control);
                        project.Global.app.playSound("snd_atb_interface_button");
                        this.destroyToolTips();
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                    /*override*/ onMouseOverControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onMouseOverControl(control);
                        switch (control.name) {
                            case "mcGuiBtnNext":
                                project.Global.app.playSound("snd_atb_interface_over");
                                this.createTooltips(this.getControl(control.name).canvas.x - 100, this.getControl(control.name).canvas.y - 85, this.m_clip, "TXT_TOOLTIP_NEXT", 2);
                                break;
                        }
                    }
                    /*override*/ onMouseOutControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        this.destroyToolTips();
                    }
                    /*override*/ onStopFrame() {
                        super.onStopFrame();
                        for (var i = 1; i <= this.m_numStars; i++) {
                            this.getControl("mcEndlevelStart0" + i).child.gotoAndStop(1);
                        }
                    }
                    /*override*/ onLastFrame() {
                        if (project.Global.level == 3) {
                            this.createTransition("mcGuiTransitionFadein", 0, 0, { screen: gui.GuiManager.SC_END_GAME });
                        }
                        else {
                            this.createTransition("mc_transition_out", 0, 0, { screen: gui.GuiManager.SC_METAMAP });
                        }
                    }
                }
                gui.GuiEndLevel = GuiEndLevel;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiEndLevel = com.bamtang.project.gui.GuiEndLevel;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiGame extends ScreenGame {
                    constructor(idGuiData = "", x = 0, y = 0, app = null) {
                        super(idGuiData, x, y, app);
                        GuiGame.instance = this;
                        project.Global.comboRangeD = parseInt(project.Global.settings.xml.combos.range1.value);
                        project.Global.comboRangeC = parseInt(project.Global.settings.xml.combos.range2.value);
                        project.Global.comboRangeB = parseInt(project.Global.settings.xml.combos.range3.value);
                        project.Global.comboRangeA = parseInt(project.Global.settings.xml.combos.range4.value);
                        project.Global.comboRangeS = parseInt(project.Global.settings.xml.combos.range5.value);
                        this.createGame();
                        //this.createTransition("mcGuiTransitionFadeout", 0, 0, { action:0 } );
                        // this.m_canvasEffects.mouseChildren = false;
                        //this.m_canvasEffects.mouseEnabled = false;
                        if (project.Global.level == 3 || project.Global.level == 4) {
                            // this.m_canvasGame.mouseChildren = true;
                            // this.m_canvasGame.mouseEnabled = true;
                        }
                        else {
                            // this.m_canvasGame.mouseChildren = false;
                            // this.m_canvasGame.mouseEnabled = false;
                        }
                    }
                    createGame() {
                        var hard = project.Global.isInHardMode ? "_hard" : "";
                        // Global.level = 1;
                        switch (project.Global.level) {
                            case 1:
                                this.m_game = new GameBrawler(this.m_canvasGame, this.m_canvasHud, "brw_dataWorld_1" + hard, "brw_dataGeneral_1" + hard);
                                project.Global.app.stopAllSound();
                                project.Global.app.playSound("snd_atb_logo_sword");
                                project.Global.app.playSound("ATB_Gameplay1");
                                break;
                            case 2:
                                this.m_game = new GameBrawler(this.m_canvasGame, this.m_canvasHud, "brw_dataWorld_2" + hard, "brw_dataGeneral_2" + hard);
                                project.Global.app.stopAllSound();
                                project.Global.app.playSound("snd_atb_logo_sword");
                                project.Global.app.playSound("ATB_Gameplay2");
                                break;
                            case 3:
                                this.m_game = new GameBrawler(this.m_canvasGame, this.m_canvasHud, "brw_dataWorld_3" + hard, "brw_dataGeneral_3" + hard);
                                project.Global.app.stopAllSound();
                                project.Global.app.playSound("snd_atb_logo_sword");
                                project.Global.app.playSound("ATB_Gameplay3");
                                break;
                            case 4:
                                break;
                            case 5:
                                break;
                            case 6:
                                break;
                        }
                    }
                    /*override*/ onEndTransition(fx) {
                        super.onEndTransition(fx);
                        if (fx.params != null) {
                            if (fx.params.action > 0) {
                                this.m_game.free();
                                this.m_game = null;
                                project.Global.app.guiManager.gotoScreen(fx.params.action);
                            }
                        }
                    }
                    removeGame(nextScreen = 1) {
                        if (!this.m_deleteGame) {
                            this.m_deleteGame = true;
                            this.createTransition("mc_transition_out", 0, 0, { action: nextScreen });
                        }
                    }
                    addActors() {
                    }
                    quitActors() {
                    }
                    addHippos() {
                    }
                    quitHippos() {
                    }
                }
                GuiGame.TX_INIT_GAME = 1;
                GuiGame.TX_REMOVE_GAME = 100;
                gui.GuiGame = GuiGame;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiGame = com.bamtang.project.gui.GuiGame;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiGeneric extends ScreenExt {
                    constructor(idGuiData = "") {
                        super(idGuiData, 0, 0, null);
                        this.m_selectedControl = null;
                        this.m_handler = new ControlHandler(this.m_clip);
                        this.m_isDraggingControl = false;
                        var control;
                        for (var c in this.m_controls) {
                            control = this.m_controls[c];
                            if (control instanceof GuiText) {
                                control.textField.mouseEnabled = true;
                            }
                            //control.canvas.mouseChildren = true;
                            //control.canvas.mouseEnabled = true;
                            control.onClick = this.onClickControl.bind(this);
                            control.onMouseDown = this.onMouseDownControl.bind(this);
                            control.onMouseUp = this.onMouseUpControl.bind(this);
                            control.addEditingEvents();
                        }
                        this.m_clip.on(CustomMouseEvent.MOUSE_MOVE, this.onMouseMoveMainClip);
                        this.m_clip.on(CustomMouseEvent.MOUSE_UP, this.onMouseUpMainClip);
                    }
                    /*override*/ onKeyDown(keyCode) {
                        super.onKeyDown(keyCode);
                        if (this.m_selectedControl != null) {
                            switch (keyCode) {
                                case Application.KEY_RIGHT:
                                    this.m_selectedControl.ox++;
                                    break;
                                case Application.KEY_LEFT:
                                    this.m_selectedControl.ox--;
                                    break;
                                case Application.KEY_DOWN:
                                    this.m_selectedControl.oy++;
                                    break;
                                case Application.KEY_UP:
                                    this.m_selectedControl.oy--;
                                    break;
                            }
                            this.m_handler.relocate();
                        }
                    }
                    /*override*/ onClickControl(control) {
                        super.onClickControl(control);
                        this.m_selectedControl = control;
                        this.m_handler.selectedControl = this.m_selectedControl;
                        this.m_handler.relocate();
                    }
                    onMouseDownControl(control) {
                        this.m_selectedControl = control;
                        //this.m_selectedControl.clip.startDrag();
                        this.m_handler.selectedControl = this.m_selectedControl;
                        this.m_handler.relocate();
                        this.m_isDraggingControl = true;
                    }
                    onMouseUpControl(control) {
                        //control.clip.stopDrag();
                        this.m_isDraggingControl = false;
                    }
                    onMouseMoveMainClip(e) {
                        if (this.m_isDraggingControl) {
                            this.m_handler.relocate();
                        }
                        else if (this.m_handler.selectedPoint != null) {
                            switch (this.m_handler.selectedPoint.type) {
                                case HandlerPoint.TYPE_SCALE:
                                    this.m_handler.scale();
                                    break;
                                case HandlerPoint.TYPE_ROTATION:
                                    this.m_handler.rotate();
                                    break;
                            }
                        }
                    }
                    onMouseUpMainClip(e) {
                        this.m_isDraggingControl = false;
                        this.m_handler.selectedPoint = null;
                    }
                }
                gui.GuiGeneric = GuiGeneric;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiGeneric = com.bamtang.project.gui.GuiGeneric;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiHelp extends ScreenExt {
                    constructor(idGuiData = "", x = 0, y = 0, appInstance = null) {
                        super(idGuiData, x, y, appInstance);
                        this.m_state = GuiHelp.PAGE_1;
                        this.m_speed = 2;
                        this.m_oy = 0;
                        this.getControl("mcGuiBtnCancel").visible = false;
                        this.m_char = this.getControl("mcGuiHelpCharacter");
                        this.m_base1 = this.getControl("mcGuiBase01");
                        this.m_base2 = this.getControl("mcGuiBase02");
                        this.m_baseTitle1 = this.getControl("mcGuiBaseTitle01");
                        this.m_baseTitle2 = this.getControl("mcGuiBaseTitle02");
                        this.m_title1 = this.getControl("mcTitle01");
                        this.m_title2 = this.getControl("mcTitle02");
                        this.m_help1 = this.getControl("mcContentHelp01");
                        this.m_help2 = this.getControl("mcContentHelp02");
                        this.m_help3 = this.getControl("mcContentHelp03");
                        this.m_help4 = this.getControl("mcContentHelp04");
                        this.m_help5 = this.getControl("mcContentHelp05");
                        this.m_help6 = this.getControl("mcContentHelp06");
                        project.Global.app.localizeTextField(this.m_help1.child["info"]["txtInfo"], "MSG_HELP_INFO_1");
                        project.Global.app.localizeTextField(this.m_help2.child["info"]["txtInfo"], "MSG_HELP_INFO_2");
                        project.Global.app.localizeTextField(this.m_help3.child["info"]["txtInfo"], "MSG_HELP_INFO_3");
                        project.Global.app.localizeTextField(this.m_help4.child["info"]["txtInfo"], "MSG_HELP_INFO_4");
                        project.Global.app.localizeTextField(this.m_help5.child["info"]["txtInfo"], "MSG_HELP_INFO_5");
                        project.Global.app.localizeTextField(this.m_help6.child["mcInfoHp"]["txtInfo"], "MSG_HELP_INFO_6");
                        project.Global.app.localizeTextField(this.m_help6.child["mcInfoMp"]["txtInfo"], "MSG_HELP_INFO_7");
                        project.Global.app.localizeTextField(this.m_help6.child["mcInfoLife"]["txtInfo"], "MSG_HELP_INFO_8");
                        var s;
                        s = project.Global.app.getText("MSG_HELP_KEY_1");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help1.child["mcKey00"]["mcLetter"].visible = false;
                        }
                        else {
                            this.m_help1.child["mcKey00"]["mcArrow"].visible = false;
                            project.Global.app.localizeTextField(this.m_help1.child["mcKey00"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_1");
                        }
                        s = project.Global.app.getText("MSG_HELP_KEY_2");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help1.child["mcKey01"]["mcLetter"].visible = false;
                        }
                        else {
                            this.m_help1.child["mcKey01"]["mcArrow"].visible = false;
                            project.Global.app.localizeTextField(this.m_help1.child["mcKey01"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_2");
                        }
                        s = project.Global.app.getText("MSG_HELP_KEY_3");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help1.child["mcKey02"]["mcLetter"].visible = false;
                        }
                        else {
                            this.m_help1.child["mcKey02"]["mcArrow"].visible = false;
                            project.Global.app.localizeTextField(this.m_help1.child["mcKey02"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_3");
                        }
                        s = project.Global.app.getText("MSG_HELP_KEY_4");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help1.child["mcKey03"]["mcLetter"].visible = false;
                        }
                        else {
                            this.m_help1.child["mcKey03"]["mcArrow"].visible = false;
                            project.Global.app.localizeTextField(this.m_help1.child["mcKey03"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_4");
                        }
                        s = project.Global.app.getText("MSG_HELP_KEY_5");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help2.child["mcKey04"]["mcLetter"].visible = false;
                        }
                        else {
                            this.m_help2.child["mcKey04"]["mcArrow"].visible = false;
                            project.Global.app.localizeTextField(this.m_help2.child["mcKey04"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_5");
                        }
                        s = project.Global.app.getText("MSG_HELP_KEY_6");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help3.child["mcKey05"]["mcLetter"].visible = false;
                        }
                        else {
                            this.m_help3.child["mcKey05"]["mcArrow"].visible = false;
                            project.Global.app.localizeTextField(this.m_help3.child["mcKey05"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_6");
                        }
                        s = project.Global.app.getText("MSG_HELP_KEY_7");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help4.child["mcKey06"]["mcLetter"].visible = false;
                        }
                        else {
                            this.m_help4.child["mcKey06"]["mcArrow"].visible = false;
                            project.Global.app.localizeTextField(this.m_help4.child["mcKey06"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_7");
                        }
                        s = project.Global.app.getText("MSG_HELP_KEY_8");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help5.child["mcKey07"]["mcLetter"].visible = false;
                        }
                        else {
                            project.Global.app.localizeTextField(this.m_help5.child["mcKey07"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_8");
                        }
                    }
                    /*override*/ onMouseOverControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onMouseOverControl(control);
                        project.Global.app.playSound("snd_atb_interface_over");
                        switch (control.name) {
                            case "mcGuiBtnBack":
                                this.createTooltips(control.canvas.x - 30, control.canvas.y - 85, this.m_clip, "TXT_TOOLTIP_BACK", ToolTips.POINT_TO_DOWN);
                                break;
                            case "mcGuiBtnNext":
                                this.createTooltips(control.canvas.x - 100, control.canvas.y - 85, this.m_clip, "TXT_TOOLTIP_NEXT", ToolTips.POINT_TO_DOWN);
                                break;
                        }
                    }
                    /*override*/ onMouseOutControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onMouseOutControl(control);
                        this.destroyToolTips();
                    }
                    /*override*/ onClickControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onClickControl(control);
                        this.destroyToolTips();
                        project.Global.app.playSound("snd_atb_interface_button");
                        switch (control.name) {
                            case "mcGuiBtnNext":
                                switch (this.m_state) {
                                    case GuiHelp.PAGE_1:
                                        this.m_state = GuiHelp.PAGE_1_TO_2;
                                        break;
                                    case GuiHelp.PAGE_2:
                                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                                        break;
                                }
                                break;
                            case "mcGuiBtnBack":
                                switch (this.m_state) {
                                    case GuiHelp.PAGE_1:
                                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                                        break;
                                    case GuiHelp.PAGE_2:
                                        this.m_state = GuiHelp.PAGE_2_TO_1;
                                        break;
                                }
                                break;
                        }
                    }
                    /*override*/ onLastFrame() {
                        switch (this.m_lastControlClicked) {
                            case "mcGuiBtnNext":
                                gui.GuiCutscene.counter = 1;
                                gui.GuiCutscene.numScene = 2;
                                this.createTransition("mc_transition_out", 0, 0, { screen: gui.GuiManager.SC_CUTSCENE });
                                break;
                            case "mcGuiBtnBack":
                                this.createTransition("mc_transition_out", 0, 0, { screen: gui.GuiManager.SC_METAMAP });
                                break;
                        }
                    }
                    /*override*/ onEndTransition(fx) {
                        super.onEndTransition(fx);
                        if (fx.params != null) {
                            gui.GuiManager.instance.gotoScreen(fx.params.screen);
                        }
                    }
                    /*override*/ update(dt) {
                        super.update(dt);
                        switch (this.m_state) {
                            case GuiHelp.PAGE_1:
                                break;
                            case GuiHelp.PAGE_1_TO_2:
                                this.m_oy -= this.m_speed * dt;
                                if (this.m_oy <= -400 * project.Global.WORLD_SCALE) {
                                    this.m_oy = -400 * project.Global.WORLD_SCALE;
                                    this.m_state = GuiHelp.PAGE_2;
                                    this.getControl("mcGuiBtnBack").visible = true;
                                }
                                this.setControlsPosition();
                                break;
                            case GuiHelp.PAGE_2:
                                break;
                            case GuiHelp.PAGE_2_TO_1:
                                this.m_oy += this.m_speed * dt;
                                if (this.m_oy >= 0) {
                                    this.m_oy = 0;
                                    this.m_state = GuiHelp.PAGE_1;
                                    this.getControl("mcGuiBtnNext").visible = true;
                                }
                                this.setControlsPosition();
                                break;
                        }
                    }
                    setControlsPosition() {
                        this.m_char.oy = this.m_oy;
                        this.m_title1.oy = this.m_oy;
                        this.m_title2.oy = this.m_oy;
                        this.m_baseTitle1.oy = this.m_oy;
                        this.m_baseTitle2.oy = this.m_oy;
                        this.m_base1.oy = this.m_oy;
                        this.m_base2.oy = this.m_oy;
                        this.m_help1.oy = this.m_oy;
                        this.m_help2.oy = this.m_oy;
                        this.m_help3.oy = this.m_oy;
                        this.m_help4.oy = this.m_oy;
                        this.m_help5.oy = this.m_oy;
                        this.m_help6.oy = this.m_oy;
                    }
                    /*override*/ onPressSpaceBar() {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onPressSpaceBar();
                        this.destroyToolTips();
                        project.Global.app.playSound("snd_atb_interface_button");
                        switch (this.m_state) {
                            case GuiHelp.PAGE_1:
                                this.m_lastControlClicked = "mcGuiBtnNext";
                                this.m_state = GuiHelp.PAGE_1_TO_2;
                                this.m_spaceBarEnable = true;
                                break;
                            case GuiHelp.PAGE_2:
                                this.m_lastControlClicked = "mcGuiBtnNext";
                                this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                                break;
                        }
                    }
                }
                GuiHelp.PAGE_1 = 1;
                GuiHelp.PAGE_1_TO_2 = 2;
                GuiHelp.PAGE_2 = 3;
                GuiHelp.PAGE_2_TO_1 = 4;
                gui.GuiHelp = GuiHelp;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiHelp = com.bamtang.project.gui.GuiHelp;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiInstructions extends ScreenExt {
                    constructor(idGuiData, x = 0, y = 0, appInstance = null) {
                        super("", x, y, appInstance);
                        this.m_clip["txtInstructions"].mouseEnabled = false;
                        this.m_clip["txtInstructions"].text = project.Global.app.getText("TXT_POPUP_HELP_INSTRUCTIONS");
                        this.m_clip["txtBack"].mouseEnabled = false;
                        this.m_clip["txtBack"].text = project.Global.app.getText("TXT_POPUP_BTN_BACK");
                        this.m_clip["btnBack"].addEventListener(CustomMouseEvent.CLICK, this.onClick, false, 0, true);
                    }
                    onClick(e) {
                        switch (e.currentTarget.name) {
                            case "btnBack":
                                project.Global.app.guiManager.gotoScreen(gui.GuiManager.SC_MAIN_MENU);
                                break;
                        }
                    }
                }
                gui.GuiInstructions = GuiInstructions;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiInstructions = com.bamtang.project.gui.GuiInstructions;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiMainMenu extends ScreenExt {
                    constructor(idGuiData, x = 0, y = 0, appInstance = null) {
                        super(idGuiData, x, y, appInstance);
                        this.mSoundEnable = project.Global.app.muteFx;
                        this.m_dataSaved = project.StatsMain.levelsDone[0] == 1 || project.StatsMain.levelsDone[1] == 1 || project.StatsMain.levelsDone[2] == 1;
                        if (project.Global.OPENED_ALL_LEVELS)
                            this.m_dataSaved = true;
                        if (this.m_dataSaved) {
                            this.getControl("mcGuiBtnNewgame").visible = true;
                            this.getControl("mcGuiBtnContinue").visible = true;
                            this.getControl("mcInfoNewgame").visible = true;
                            this.getControl("mcInfoContinue").visible = true;
                            this.getControl("mcGuiBtnPlay").visible = false;
                            this.getControl("mcInfoPlay").visible = false;
                            if (project.StatsMain.levelsDone[2] == 1) {
                                this.getControl("mcInfoHardmode").visible = true;
                                this.getControl("mcGuiBtnHardmode").visible = true;
                            }
                            else {
                                this.getControl("mcInfoHardmode").visible = false;
                                this.getControl("mcGuiBtnHardmode").visible = false;
                                if (project.Global.OPENED_ALL_LEVELS) {
                                    this.getControl("mcInfoHardmode").visible = true;
                                    this.getControl("mcGuiBtnHardmode").visible = true;
                                }
                            }
                        }
                        else {
                            this.getControl("mcGuiBtnNewgame").visible = false;
                            this.getControl("mcGuiBtnContinue").visible = false;
                            this.getControl("mcInfoNewgame").visible = false;
                            this.getControl("mcInfoContinue").visible = false;
                            this.getControl("mcInfoContinue").visible = false;
                            this.getControl("mcGuiBtnPlay").visible = true;
                            this.getControl("mcInfoPlay").visible = true;
                            this.getControl("mcInfoHardmode").visible = false;
                            this.getControl("mcGuiBtnHardmode").visible = false;
                        }
                        this.getControl("mcGuiBtnSound").onTurnOn = this.onTurnOnSound;
                        this.getControl("mcGuiBtnSound").onTurnOff = this.onTurnOffSound;
                        this.getControl("mcGuiBtnSound").gotoState((this.mSoundEnable == false) ? GuiOnOffSwitch.ST_ON : GuiOnOffSwitch.ST_OFF);
                        if (project.Global.app.guiManager.lastScreenId != gui.GuiManager.SC_METAMAP) {
                            project.Global.app.stopAllSound();
                            project.Global.app.playSound("ATB_Titlecard");
                        }
                    }
                    /*override*/ onMouseOverControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onMouseOverControl(control);
                        project.Global.app.playSound("snd_atb_interface_over");
                    }
                    onTurnOnSound() {
                        project.Global.app.muteFx = false;
                        project.Global.app.muteBg = false;
                        project.Global.app.setMasterVolume(1);
                        project.Global.app.playSound("ATB_Titlecard");
                    }
                    onTurnOffSound() {
                        project.Global.app.setMasterVolume(0);
                        project.Global.app.muteFx = true;
                        project.Global.app.muteBg = true;
                    }
                    /*override*/ onClickControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onClickControl(control);
                        project.Global.app.playSound("snd_atb_interface_play");
                        switch (control.name) {
                            case "mcGuiBtnContinue":
                            case "mcGuiBtnPlay":
                            case "mcGuiBtnHardmode":
                                this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                                break;
                            case "mcGuiBtnNewgame":
                                this.addPopup(gui.GuiPopupYesNo, "gui_yes_no");
                                break;
                        }
                    }
                    /*override*/ onLastFrame() {
                        super.onLastFrame();
                        switch (this.m_lastControlClicked) {
                            case "mcGuiBtnContinue":
                            case "mcGuiBtnPlay":
                            case "mcGuiBtnHardmode":
                                project.Global.isInHardMode = (this.m_lastControlClicked == "mcGuiBtnHardmode");
                                this.createTransition("mc_transition_out", 0, 0, { screen: gui.GuiManager.SC_METAMAP });
                                break;
                        }
                    }
                    /*override*/ onEndTransition(fx) {
                        super.onEndTransition(fx);
                        if (fx.params != null) {
                            gui.GuiManager.instance.gotoScreen(fx.params.screen);
                        }
                    }
                    /*override*/ onPressSpaceBar() {
                        if (!this.m_isInStop) {
                            return;
                        }
                        if (this.m_transition != null) {
                            return;
                        }
                        super.onPressSpaceBar();
                        project.Global.app.playSound("snd_atb_interface_button");
                        this.m_lastControlClicked = this.m_dataSaved ? "mcGuiBtnContinue" : "mcGuiBtnPlay";
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                }
                gui.GuiMainMenu = GuiMainMenu;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiMainMenu = com.bamtang.project.gui.GuiMainMenu;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiManager extends ScreenManager {
                    constructor(canvas) {
                        super(canvas);
                        GuiManager.instance = this;
                        canvas.addChild(new PIXI.Container());
                        this.popupQuenu = new gui.GuiQueueMain(project.Global.app.canvasTop);
                        project.StatsMain.init();
                    }
                    /*override*/ gotoScreen(idScreen, params = null) {
                        if (this.m_currentScreen != null && this.m_currentScreen.id != GuiManager.SC_IN_GAME_LOADER) {
                            this.m_lastIdScreen = this.m_currentScreen.id;
                        }
                        super.gotoScreen(idScreen);
                        //debug
                        //if (idScreen == GuiManager.SC_MAIN_MENU)       idScreen = GuiManager.SC_GAME;
                        switch (idScreen) {
                            case GuiManager.SC_GENERIC:
                                if (params == null) {
                                    return;
                                }
                                this.m_currentScreen = new gui.GuiGeneric(params._idGui);
                                break;
                            case GuiManager.SC_MAIN_MENU:
                                this.m_currentScreen = new gui.GuiMainMenu("gui_main_menu");
                                break;
                            case GuiManager.SC_METAMAP:
                                this.m_currentScreen = new gui.GuiMetamap("gui_metamap");
                                break;
                            case GuiManager.SC_GAME:
                                this.m_currentScreen = new gui.GuiGame();
                                break;
                            case GuiManager.SC_SELECT_CHARACTER:
                                this.m_currentScreen = new gui.GuiSelectCharacter("gui_select_character");
                                break;
                            case GuiManager.SC_CUTSCENE:
                                this.m_currentScreen = new gui.GuiCutscene("gui_cutscene");
                                break;
                            case GuiManager.SC_TRY_AGAIN:
                                this.m_currentScreen = new gui.GuiTryAgain("gui_tryagain");
                                break;
                            case GuiManager.SC_END_LEVEL:
                                this.m_currentScreen = new gui.GuiEndLevel("gui_endlevel");
                                break;
                            case GuiManager.SC_END_GAME:
                                this.m_currentScreen = new gui.GuiEndGame("gui_endgame");
                                break;
                            case GuiManager.SC_HELP:
                                this.m_currentScreen = new gui.GuiHelp("gui_help");
                                break;
                        }
                        this.m_currentScreen.id = idScreen;
                        this.m_canvas.addChild(this.m_currentScreen.clip);
                    }
                    /*override*/ update(dt) {
                        super.update(dt);
                        this.popupQuenu.update(dt);
                    }
                    /*override*/ onKeyDown(keyCode) {
                        super.onKeyDown(keyCode);
                    }
                    /*override*/ onActivate(activate) {
                        if (this.m_currentScreen) {
                            this.m_currentScreen.onActivate(activate);
                        }
                    }
                    /*override*/ free() {
                        GuiManager.instance = null;
                        super.free();
                    }
                }
                GuiManager.SC_MAIN_MENU = 1;
                GuiManager.SC_GAME = 2;
                GuiManager.SC_IN_GAME_LOADER = 3;
                GuiManager.SC_METAMAP = 4;
                GuiManager.SC_SELECT_CHARACTER = 5;
                GuiManager.SC_GENERIC = 6;
                GuiManager.SC_CUTSCENE = 7;
                GuiManager.SC_MAIN_MENU_DEMO = 8;
                GuiManager.SC_TRY_AGAIN = 9;
                GuiManager.SC_END_LEVEL = 10;
                GuiManager.SC_END_GAME = 11;
                GuiManager.SC_HELP = 12;
                gui.GuiManager = GuiManager;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiManager = com.bamtang.project.gui.GuiManager;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiMetamap extends ScreenExt {
                    constructor(idGuiData, x = 0, y = 0, appInstance = null) {
                        super(idGuiData, x, y, appInstance);
                        if (project.Global.isInHardMode) {
                            var i;
                            for (i = 1; i <= 3; i++) {
                                this.getControl("mcNumberLevel0" + i).setText("TXT_META_LV_" + i + "_HARD");
                            }
                        }
                        this.m_levelToPlay = project.StatsMain.lastLevelDone + 1;
                        if (this.m_levelToPlay > 3) {
                            this.m_levelToPlay = 1;
                        }
                        this.getControl("mcGuiLevel0" + this.m_levelToPlay).changeClip("gui_buttons_level0" + this.m_levelToPlay + "_b");
                        this.m_groupLevels = new ControlGroup();
                        this.m_groupLevels.addControl(this.getControl("mcGuiLevel01"));
                        this.m_groupLevels.addControl(this.getControl("mcGuiLevel02"));
                        this.m_groupLevels.addControl(this.getControl("mcGuiLevel03"));
                        if (project.StatsMain.levelsDone[0] == 0) {
                            if (project.Global.OPENED_ALL_LEVELS) {
                                this.getControl("mcGuiLevel02").enabled = true;
                            }
                            else {
                                this.getControl("mcGuiLevel02").enabled = false;
                            }
                        }
                        if (project.StatsMain.levelsDone[1] == 0) {
                            if (project.Global.OPENED_ALL_LEVELS) {
                                this.getControl("mcGuiLevel03").enabled = true;
                            }
                            else {
                                this.getControl("mcGuiLevel03").enabled = false;
                            }
                        }
                        if (project.Global.app.guiManager.lastScreenId != gui.GuiManager.SC_MAIN_MENU) {
                            project.Global.app.stopAllSound();
                            project.Global.app.playSound("ATB_Titlecard");
                        }
                    }
                    /*override*/ onClickControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onClickControl(control);
                        project.Global.app.playSound("snd_atb_interface_button");
                        this.destroyToolTips();
                        switch (control.name) {
                            case "mcGuiLevel01":
                                project.Global.level = 1;
                                this.m_groupLevels.selectControl("mcGuiLevel01");
                                break;
                            case "mcGuiLevel02":
                                project.Global.level = 2;
                                this.m_groupLevels.selectControl("mcGuiLevel02");
                                break;
                            case "mcGuiLevel03":
                                project.Global.level = 3;
                                this.m_groupLevels.selectControl("mcGuiLevel03");
                                break;
                        }
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                    /*override*/ onMouseOverControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onMouseOverControl(control);
                        project.Global.app.playSound("snd_atb_interface_over");
                        switch (control.name) {
                            case "mcGuiBtnBack":
                                this.createTooltips(control.canvas.x - 30, control.canvas.y - 90, this.m_clip, "TXT_TOOLTIP_BACK", ToolTips.POINT_TO_DOWN);
                                break;
                        }
                    }
                    /*override*/ onMouseOutControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onMouseOutControl(control);
                        this.destroyToolTips();
                    }
                    /*override*/ onLastFrame() {
                        super.onLastFrame();
                        switch (this.m_lastControlClicked) {
                            case "mcGuiLevel01":
                                this.createTransition("mcGuiTransitionFadein", 0, 0, { screen: gui.GuiManager.SC_HELP });
                                break;
                            case "mcGuiBtnBack":
                                this.createTransition("mcGuiTransitionFadein", 0, 0, { screen: gui.GuiManager.SC_MAIN_MENU });
                                break;
                            case "mcGuiLevel02":
                            case "mcGuiLevel03":
                                if (this.m_lastControlClicked == "mcGuiLevel02") {
                                    gui.GuiCutscene.counter = 4;
                                    gui.GuiCutscene.numScene = 1;
                                }
                                else if (this.m_lastControlClicked == "mcGuiLevel03") {
                                    gui.GuiCutscene.counter = 6;
                                    gui.GuiCutscene.numScene = 1;
                                }
                                this.createTransition("mcGuiTransitionFadein", 0, 0, { screen: gui.GuiManager.SC_CUTSCENE });
                                break;
                        }
                    }
                    /*override*/ onEndTransition(fx) {
                        super.onEndTransition(fx);
                        if (fx.params != null) {
                            gui.GuiManager.instance.gotoScreen(fx.params.screen);
                        }
                    }
                    /*override*/ onPressSpaceBar() {
                        if (!this.m_isInStop) {
                            return;
                        }
                        this.destroyToolTips();
                        project.Global.app.playSound("snd_atb_interface_button");
                        project.Global.level = this.m_levelToPlay;
                        this.m_groupLevels.selectControl("mcGuiLevel0" + this.m_levelToPlay);
                        this.m_lastControlClicked = "mcGuiLevel0" + this.m_levelToPlay;
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                }
                gui.GuiMetamap = GuiMetamap;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiMetamap = com.bamtang.project.gui.GuiMetamap;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiPopupHelp extends ScreenExt {
                    constructor(idGuiData = "", x = 0, y = 0, appInstance = null) {
                        super(idGuiData, x, y, appInstance);
                        this.m_state = GuiPopupHelp.PAGE_1;
                        this.m_speed = 2;
                        this.m_oy = 0;
                        this.getControl("mcGuiBtnCancel").visible = false;
                        this.m_char = this.getControl("mcGuiHelpCharacter");
                        this.m_base1 = this.getControl("mcGuiBase01");
                        this.m_base2 = this.getControl("mcGuiBase02");
                        this.m_baseTitle1 = this.getControl("mcGuiBaseTitle01");
                        this.m_baseTitle2 = this.getControl("mcGuiBaseTitle02");
                        this.m_title1 = this.getControl("mcTitle01");
                        this.m_title2 = this.getControl("mcTitle02");
                        this.m_help1 = this.getControl("mcContentHelp01");
                        this.m_help2 = this.getControl("mcContentHelp02");
                        this.m_help3 = this.getControl("mcContentHelp03");
                        this.m_help4 = this.getControl("mcContentHelp04");
                        this.m_help5 = this.getControl("mcContentHelp05");
                        this.m_help6 = this.getControl("mcContentHelp06");
                        project.Global.app.localizeTextField(this.m_help1.child["info"]["txtInfo"], "MSG_HELP_INFO_1");
                        project.Global.app.localizeTextField(this.m_help2.child["info"]["txtInfo"], "MSG_HELP_INFO_2");
                        project.Global.app.localizeTextField(this.m_help3.child["info"]["txtInfo"], "MSG_HELP_INFO_3");
                        project.Global.app.localizeTextField(this.m_help4.child["info"]["txtInfo"], "MSG_HELP_INFO_4");
                        project.Global.app.localizeTextField(this.m_help5.child["info"]["txtInfo"], "MSG_HELP_INFO_5");
                        project.Global.app.localizeTextField(this.m_help6.child["mcInfoHp"]["txtInfo"], "MSG_HELP_INFO_6");
                        project.Global.app.localizeTextField(this.m_help6.child["mcInfoMp"]["txtInfo"], "MSG_HELP_INFO_7");
                        project.Global.app.localizeTextField(this.m_help6.child["mcInfoLife"]["txtInfo"], "MSG_HELP_INFO_8");
                        var s;
                        s = project.Global.app.getText("MSG_HELP_KEY_1");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help1.child["mcKey00"]["mcLetter"].visible = false;
                        }
                        else {
                            this.m_help1.child["mcKey00"]["mcArrow"].visible = false;
                            project.Global.app.localizeTextField(this.m_help1.child["mcKey00"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_1");
                        }
                        s = project.Global.app.getText("MSG_HELP_KEY_2");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help1.child["mcKey01"]["mcLetter"].visible = false;
                        }
                        else {
                            this.m_help1.child["mcKey01"]["mcArrow"].visible = false;
                            project.Global.app.localizeTextField(this.m_help1.child["mcKey01"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_2");
                        }
                        s = project.Global.app.getText("MSG_HELP_KEY_3");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help1.child["mcKey02"]["mcLetter"].visible = false;
                        }
                        else {
                            this.m_help1.child["mcKey02"]["mcArrow"].visible = false;
                            project.Global.app.localizeTextField(this.m_help1.child["mcKey02"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_3");
                        }
                        s = project.Global.app.getText("MSG_HELP_KEY_4");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help1.child["mcKey03"]["mcLetter"].visible = false;
                        }
                        else {
                            this.m_help1.child["mcKey03"]["mcArrow"].visible = false;
                            project.Global.app.localizeTextField(this.m_help1.child["mcKey03"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_4");
                        }
                        s = project.Global.app.getText("MSG_HELP_KEY_5");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help2.child["mcKey04"]["mcLetter"].visible = false;
                        }
                        else {
                            this.m_help2.child["mcKey04"]["mcArrow"].visible = false;
                            project.Global.app.localizeTextField(this.m_help2.child["mcKey04"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_5");
                        }
                        s = project.Global.app.getText("MSG_HELP_KEY_6");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help3.child["mcKey05"]["mcLetter"].visible = false;
                        }
                        else {
                            this.m_help3.child["mcKey05"]["mcArrow"].visible = false;
                            project.Global.app.localizeTextField(this.m_help3.child["mcKey05"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_6");
                        }
                        s = project.Global.app.getText("MSG_HELP_KEY_7");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help4.child["mcKey06"]["mcLetter"].visible = false;
                        }
                        else {
                            this.m_help4.child["mcKey06"]["mcArrow"].visible = false;
                            project.Global.app.localizeTextField(this.m_help4.child["mcKey06"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_7");
                        }
                        s = project.Global.app.getText("MSG_HELP_KEY_8");
                        if (s == "" || s == " " || s == "undefined") {
                            this.m_help5.child["mcKey07"]["mcLetter"].visible = false;
                        }
                        else {
                            project.Global.app.localizeTextField(this.m_help5.child["mcKey07"]["mcLetter"]["txtInfo"], "MSG_HELP_KEY_8");
                        }
                    }
                    /*override*/ onMouseOverControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onMouseOverControl(control);
                        project.Global.app.playSound("snd_atb_interface_over");
                        switch (control.name) {
                            case "mcGuiBtnBack":
                                this.createTooltips(control.canvas.x - 30, control.canvas.y - 85, this.m_clip, "TXT_TOOLTIP_BACK", ToolTips.POINT_TO_DOWN);
                                break;
                            case "mcGuiBtnNext":
                                this.createTooltips(control.canvas.x - 100, control.canvas.y - 85, this.m_clip, "TXT_TOOLTIP_NEXT", ToolTips.POINT_TO_DOWN);
                                break;
                        }
                    }
                    /*override*/ onMouseOutControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onMouseOutControl(control);
                        this.destroyToolTips();
                    }
                    /*override*/ onClickControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onClickControl(control);
                        this.destroyToolTips();
                        project.Global.app.playSound("snd_atb_interface_button");
                        switch (control.name) {
                            case "mcGuiBtnNext":
                                switch (this.m_state) {
                                    case GuiPopupHelp.PAGE_1:
                                        this.m_state = GuiPopupHelp.PAGE_1_TO_2;
                                        break;
                                    case GuiPopupHelp.PAGE_2:
                                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                                        break;
                                }
                                break;
                            case "mcGuiBtnBack":
                                switch (this.m_state) {
                                    case GuiPopupHelp.PAGE_1:
                                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                                        break;
                                    case GuiPopupHelp.PAGE_2:
                                        this.m_state = GuiPopupHelp.PAGE_2_TO_1;
                                        break;
                                }
                                break;
                        }
                    }
                    /*override*/ onLastFrame() {
                        gui.GuiGame.instance.addPopup(gui.GuiPopupPause, "gui_pause");
                    }
                    /*override*/ onEndTransition(fx) {
                        super.onEndTransition(fx);
                        if (fx.params != null) {
                            project.Global.app.guiManager.gotoScreen(fx.params.screen);
                        }
                    }
                    /*override*/ update(dt) {
                        super.update(dt);
                        switch (this.m_state) {
                            case GuiPopupHelp.PAGE_1:
                                break;
                            case GuiPopupHelp.PAGE_1_TO_2:
                                this.m_oy -= this.m_speed * dt;
                                if (this.m_oy <= -400 * project.Global.WORLD_SCALE) {
                                    this.m_oy = -400 * project.Global.WORLD_SCALE;
                                    this.m_state = GuiPopupHelp.PAGE_2;
                                    this.getControl("mcGuiBtnBack").visible = true;
                                }
                                this.setControlsPosition();
                                break;
                            case GuiPopupHelp.PAGE_2:
                                break;
                            case GuiPopupHelp.PAGE_2_TO_1:
                                this.m_oy += this.m_speed * dt;
                                if (this.m_oy >= 0) {
                                    this.m_oy = 0;
                                    this.m_state = GuiPopupHelp.PAGE_1;
                                    this.getControl("mcGuiBtnNext").visible = true;
                                }
                                this.setControlsPosition();
                                break;
                        }
                    }
                    setControlsPosition() {
                        this.m_char.oy = this.m_oy;
                        this.m_title1.oy = this.m_oy;
                        this.m_title2.oy = this.m_oy;
                        this.m_baseTitle1.oy = this.m_oy;
                        this.m_baseTitle2.oy = this.m_oy;
                        this.m_base1.oy = this.m_oy;
                        this.m_base2.oy = this.m_oy;
                        this.m_help1.oy = this.m_oy;
                        this.m_help2.oy = this.m_oy;
                        this.m_help3.oy = this.m_oy;
                        this.m_help4.oy = this.m_oy;
                        this.m_help5.oy = this.m_oy;
                        this.m_help6.oy = this.m_oy;
                    }
                    /*override*/ onPressSpaceBar() {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onPressSpaceBar();
                        this.destroyToolTips();
                        project.Global.app.playSound("snd_atb_interface_button");
                        switch (this.m_state) {
                            case GuiPopupHelp.PAGE_1:
                                this.m_lastControlClicked = "mcGuiBtnNext";
                                this.m_state = GuiPopupHelp.PAGE_1_TO_2;
                                this.m_spaceBarEnable = true;
                                break;
                            case GuiPopupHelp.PAGE_2:
                                this.m_lastControlClicked = "mcGuiBtnNext";
                                this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                                break;
                        }
                    }
                }
                GuiPopupHelp.PAGE_1 = 1;
                GuiPopupHelp.PAGE_1_TO_2 = 2;
                GuiPopupHelp.PAGE_2 = 3;
                GuiPopupHelp.PAGE_2_TO_1 = 4;
                gui.GuiPopupHelp = GuiPopupHelp;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiPopupHelp = com.bamtang.project.gui.GuiPopupHelp;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiPopupInventory extends ScreenExt {
                    constructor(idGuiData = "", x = 0, y = 0, appInstance = null) {
                        super(idGuiData, x, y, appInstance);
                        var inventory = GameBrawler.instance.world().player().getInventory();
                        var baseY = 0;
                        this.clip["mcInfoItems"].removeChildAt(0);
                        this.m_infoControls = new Array();
                        for (var i = 0; i < inventory.getItems().length; i++) {
                            var info = new GuiItemControl(this.clip["mcInfoItems"], inventory.getItems()[i], GameBrawler.instance.world().player(), "mc_info_inventary");
                            info.oy = baseY;
                            baseY += 110;
                            this.m_infoControls.push(info);
                        }
                    }
                    /*override*/ onMouseOverControl(control) {
                        super.onMouseOverControl(control);
                        switch (control.name) {
                            case "mcGuiBtnYes":
                                this.createTooltips(control.canvas.x - 80, control.canvas.y + 70, this.m_clip, "TXT_TOOLTIP_YES", ToolTips.POINT_TO_UP);
                                break;
                            case "mcGuiBtnNo":
                                this.createTooltips(control.canvas.x - 80, control.canvas.y + 70, this.m_clip, "TXT_TOOLTIP_NO", ToolTips.POINT_TO_UP);
                                break;
                        }
                    }
                    /*override*/ onMouseOutControl(control) {
                        super.onMouseOutControl(control);
                        this.destroyToolTips();
                    }
                    /*override*/ onClickControl(control) {
                        super.onClickControl(control);
                        var i;
                        if (control.name == "mcGuiBtnUp") {
                            for (i = 0; i < this.m_infoControls.length; i++) {
                                this.m_infoControls[i].moveUp(true);
                            }
                            return;
                        }
                        else if (control.name == "mcGuiBtnDown") {
                            for (i = 0; i < this.m_infoControls.length; i++) {
                                this.m_infoControls[i].moveUp(false);
                            }
                            return;
                        }
                        if (this.m_lastControlClicked == "mcGuiBtnYes") {
                            this.createTransition("mc_transition_out", 0, 0, { screen: gui.GuiManager.SC_MAIN_MENU });
                            return;
                        }
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                    /*override*/ onLastFrame() {
                        this.screenParent.addPopup(gui.GuiPopupPause, "gui_pause");
                    }
                    /*override*/ onEndTransition(fx) {
                        super.onEndTransition(fx);
                        if (fx.params != null) {
                            project.Global.app.guiManager.gotoScreen(fx.params.screen);
                        }
                    }
                    /*override*/ onPressSpaceBar() {
                        super.onPressSpaceBar();
                        this.destroyToolTips();
                        this.m_lastControlClicked = "mcGuiBtnNo";
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                }
                gui.GuiPopupInventory = GuiPopupInventory;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiPopupInventory = com.bamtang.project.gui.GuiPopupInventory;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiPopupPause extends ScreenExt {
                    constructor(idGuiData = "", x = 0, y = 0, appInstance = null) {
                        super(idGuiData, x, y, appInstance);
                        this.mSoundEnable = project.Global.app.muteFx;
                        this.m_title = this.getControl("mcInfoTitle");
                        Application.warn(project.Global.isInHardMode ? "HARD MODE" : "NORMAL MODE");
                        this.showYesNoPanel(false);
                        this.getControl("mcGuiBtnSound").onTurnOn = this.onTurnOnSound;
                        this.getControl("mcGuiBtnSound").onTurnOff = this.onTurnOffSound;
                        this.getControl("mcGuiBtnSound").gotoState((this.mSoundEnable == false) ? GuiOnOffSwitch.ST_ON : GuiOnOffSwitch.ST_OFF);
                        project.Global.app.stopSound("snd_atb_boss_weg_shield");
                    }
                    /*override*/ onMouseOverControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onMouseOverControl(control);
                        project.Global.app.playSound("snd_atb_interface_over");
                        switch (control.name) {
                            case "mcGuiBtnResume":
                                this.createTooltips(control.canvas.x - 83, control.canvas.y + 70, this.m_clip, "TXT_TOOLTIP_RESUME", ToolTips.POINT_TO_UP);
                                break;
                            case "mcGuiBtnHelp":
                                this.createTooltips(control.canvas.x - 83, control.canvas.y + 70, this.m_clip, "TXT_TOOLTIP_HELP", ToolTips.POINT_TO_UP);
                                break;
                            case "mcGuiBtnQuit":
                                this.createTooltips(control.canvas.x - 83, control.canvas.y + 70, this.m_clip, "TXT_TOOLTIP_QUIT", ToolTips.POINT_TO_UP);
                                break;
                            case "mcGuiBtnSound":
                                this.createTooltips(control.canvas.x - 83, control.canvas.y + 70, this.m_clip, "TXT_TOOLTIP_SOUND", ToolTips.POINT_TO_UP);
                                break;
                            case "mcGuiBtnRestart":
                                this.createTooltips(control.canvas.x - 83, control.canvas.y + 70, this.m_clip, "TXT_TOOLTIP_RESET", ToolTips.POINT_TO_UP);
                                break;
                            case "mcGuiBtnNo":
                                this.createTooltips(control.canvas.x - 83, control.canvas.y + 70, this.m_clip, "TXT_TOOLTIP_NO", ToolTips.POINT_TO_UP);
                                break;
                            case "mcGuiBtnYes":
                                this.createTooltips(control.canvas.x - 83, control.canvas.y + 70, this.m_clip, "TXT_TOOLTIP_YES", ToolTips.POINT_TO_UP);
                                break;
                        }
                    }
                    /*override*/ onMouseOutControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onMouseOutControl(control);
                        this.destroyToolTips();
                    }
                    /*override*/ onClickControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onClickControl(control);
                        project.Global.app.playSound("snd_atb_interface_button");
                        this.destroyToolTips();
                        switch (this.m_lastControlClicked) {
                            case "mcGuiBtnSound":
                                return;
                            case "mcGuiBtnRestart":
                            case "mcGuiBtnQuit":
                                this.showYesNoPanel(true);
                                break;
                            case "mcGuiBtnNo":
                                this.showYesNoPanel(false);
                                break;
                            default:
                                this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                        }
                    }
                    onTurnOnSound() {
                        project.Global.app.muteFx = false;
                        project.Global.app.muteBg = false;
                        project.Global.app.setMasterVolume(1);
                        project.Global.app.playSound("ATB_Gameplay" + project.Global.level);
                    }
                    onTurnOffSound() {
                        project.Global.app.setMasterVolume(0);
                        project.Global.app.muteFx = true;
                        project.Global.app.muteBg = true;
                    }
                    /*override*/ onLastFrame() {
                        super.onLastFrame();
                        switch (this.m_lastControlClicked) {
                            case "mcGuiBtnResume":
                                this.screenParent.dropPopup();
                                break;
                            case "mcGuiBtnYes":
                                project.StatsMain.resetLevelStats();
                                switch (this.m_title.textId) {
                                    case "TXT_RESTART":
                                        this.createTransition("mcGuiTransitionFadein", 0, 0, { screen: gui.GuiManager.SC_GAME });
                                        break;
                                    case "TXT_YES_NO":
                                        this.createTransition("mcGuiTransitionFadein", 0, 0, { screen: gui.GuiManager.SC_MAIN_MENU });
                                        break;
                                }
                                break;
                            case "mcGuiBtnHelp":
                                gui.GuiGame.instance.addPopup(gui.GuiPopupHelp, "gui_help");
                                break;
                        }
                    }
                    /*override*/ onEndTransition(fx) {
                        super.onEndTransition(fx);
                        if (fx.params != null) {
                            project.Global.app.guiManager.gotoScreen(fx.params.screen);
                        }
                    }
                    /*override*/ onPressSpaceBar() {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onPressSpaceBar();
                        this.destroyToolTips();
                        this.m_lastControlClicked = "mcGuiBtnResume";
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                    showYesNoPanel(val) {
                        this.getControl("mcGuiBtnYes").visible = val;
                        this.getControl("mcGuiBtnNo").visible = val;
                        this.getControl("mcGuiBtnResume").visible = !val;
                        this.getControl("mcGuiBtnHelp").visible = !val;
                        this.getControl("mcGuiBtnQuit").visible = !val;
                        this.getControl("mcGuiBtnSound").visible = !val;
                        this.getControl("mcGuiBtnRestart").visible = !val;
                        if (!val) {
                            this.m_title.setText("TXT_PAUSE_TITLE");
                        }
                        else {
                            switch (this.m_lastControlClicked) {
                                case "mcGuiBtnQuit":
                                    this.m_title.setText("TXT_YES_NO");
                                    break;
                                case "mcGuiBtnRestart":
                                    this.m_title.setText("TXT_RESTART");
                                    break;
                            }
                        }
                    }
                }
                gui.GuiPopupPause = GuiPopupPause;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiPopupPause = com.bamtang.project.gui.GuiPopupPause;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiPopupSpecial extends ScreenExt {
                    constructor(idGuiData = "", x = 0, y = 0, appInstance = null) {
                        super(idGuiData, x, y, appInstance);
                        this.getControl("mcGuiUnlockedPower").changeClip("gui_popups_powerunlocked_power03");
                        this.getControl("mcInfoNewItem").setText("TXT_GET_SPECIAL_3");
                    }
                    /*override*/ onLastFrame() {
                        this.screenParent.dropPopup();
                    }
                }
                gui.GuiPopupSpecial = GuiPopupSpecial;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiPopupSpecial = com.bamtang.project.gui.GuiPopupSpecial;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiPopupYesNo extends ScreenExt {
                    constructor(idGuiData = "", x = 0, y = 0, appInstance = null) {
                        super(idGuiData, x, y, appInstance);
                        this.getControl("mcGuiBtnResume").visible = false;
                        this.getControl("mcGuiBtnRestart").visible = false;
                        this.getControl("mcGuiBtnHelp").visible = false;
                        this.getControl("mcGuiBtnSound").visible = false;
                        this.getControl("mcGuiBtnQuit").visible = false;
                    }
                    /*override*/ onMouseOverControl(control) {
                        super.onMouseOverControl(control);
                        project.Global.app.playSound("snd_atb_interface_over");
                        switch (control.name) {
                            case "mcGuiBtnYes":
                                this.createTooltips(control.canvas.x - 80, control.canvas.y + 70, this.m_clip, "TXT_TOOLTIP_YES", ToolTips.POINT_TO_UP);
                                break;
                            case "mcGuiBtnNo":
                                this.createTooltips(control.canvas.x - 80, control.canvas.y + 70, this.m_clip, "TXT_TOOLTIP_NO", ToolTips.POINT_TO_UP);
                                break;
                        }
                    }
                    /*override*/ onMouseOutControl(control) {
                        super.onMouseOutControl(control);
                        this.destroyToolTips();
                    }
                    /*override*/ onClickControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onClickControl(control);
                        project.Global.app.playSound("snd_atb_interface_button");
                        this.destroyToolTips();
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                    /*override*/ onLastFrame() {
                        super.onLastFrame();
                        switch (this.m_lastControlClicked) {
                            case "mcGuiBtnYes":
                                project.StatsMain.resetSavedData();
                                this.createTransition("mc_transition_out", 0, 0, { screen: gui.GuiManager.SC_METAMAP });
                                break;
                            case "mcGuiBtnNo":
                                this.screenParent.dropPopup();
                                break;
                        }
                    }
                    /*override*/ onEndTransition(fx) {
                        super.onEndTransition(fx);
                        if (fx.params != null) {
                            gui.GuiManager.instance.gotoScreen(fx.params.screen);
                        }
                    }
                    /*override*/ onPressSpaceBar() {
                        super.onPressSpaceBar();
                        this.destroyToolTips();
                        this.m_lastControlClicked = "mcGuiBtnNo";
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                }
                gui.GuiPopupYesNo = GuiPopupYesNo;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiPopupYesNo = com.bamtang.project.gui.GuiPopupYesNo;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiQueueHud extends PopupQueueExt {
                    constructor(canvas, hud) {
                        super(canvas);
                        this.m_hud = hud;
                    }
                    /*override*/ onCreatePopup(fx) {
                        super.onCreatePopup(fx);
                    }
                    /*override*/ onDestroyPopup(fx) {
                        super.onDestroyPopup(fx);
                    }
                }
                gui.GuiQueueHud = GuiQueueHud;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiQueueHud = com.bamtang.project.gui.GuiQueueHud;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiQueueMain extends PopupQueueExt {
                    constructor(canvas) {
                        super(canvas);
                    }
                    /*override*/ onCreatePopup(fx) {
                        super.onCreatePopup(fx);
                    }
                    /*override*/ onDestroyPopup(fx) {
                        super.onDestroyPopup(fx);
                    }
                }
                gui.GuiQueueMain = GuiQueueMain;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiQueueMain = com.bamtang.project.gui.GuiQueueMain;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiSelectCharacter extends ScreenExt {
                    constructor(idGuiData, x = 0, y = 0, appInstance = null) {
                        super(idGuiData, x, y, appInstance);
                        this.m_groupCharacters = new ControlGroup();
                        this.m_groupCharacters.addControl(this.getControl("mcGuiPlayer01"));
                        this.m_groupCharacters.addControl(this.getControl("mcGuiPlayer02"));
                    }
                    /*override*/ onMouseOverControl(control) {
                        super.onMouseOverControl(control);
                        switch (control.name) {
                            case "mcGuiBtnNext":
                                this.createTooltips(control.canvas.x - 120, control.canvas.y - 95, this.m_clip, "TXT_TOOLTIP_NEXT", ToolTips.POINT_TO_DOWN);
                                break;
                        }
                    }
                    /*override*/ onMouseOutControl(control) {
                        super.onMouseOutControl(control);
                        this.destroyToolTips();
                    }
                    /*override*/ onClickControl(control) {
                        super.onClickControl(control);
                        this.destroyToolTips();
                        switch (control.name) {
                            case "mcGuiPlayer01":
                                this.m_groupCharacters.selectControl("mcGuiPlayer01");
                                break;
                            case "mcGuiPlayer02":
                                this.m_groupCharacters.selectControl("mcGuiPlayer02");
                                break;
                            case "mcGuiBtnNext":
                                if (this.m_groupCharacters.controlSelected != null) {
                                    this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                                }
                                break;
                        }
                    }
                    /*override*/ onLastFrame() {
                        super.onLastFrame();
                        switch (this.m_lastControlClicked) {
                            case "mcGuiBtnNext":
                                this.createTransition("mc_transition_out", 0, 0, { screen: gui.GuiManager.SC_CUTSCENE });
                                break;
                        }
                    }
                    /*override*/ onEndTransition(fx) {
                        super.onEndTransition(fx);
                        if (fx.params != null) {
                            gui.GuiManager.instance.gotoScreen(fx.params.screen);
                        }
                    }
                    /*override*/ onPressSpaceBar() {
                        this.destroyToolTips();
                        this.m_groupCharacters.selectControl("mcGuiPlayer01");
                        this.m_lastControlClicked = "mcGuiBtnNext";
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                }
                gui.GuiSelectCharacter = GuiSelectCharacter;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiSelectCharacter = com.bamtang.project.gui.GuiSelectCharacter;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                class GuiTryAgain extends ScreenExt {
                    constructor(idGuiData = "", x = 0, y = 0, app = null) {
                        super(idGuiData, x, y, app);
                        project.Global.app.stopAllSound();
                        project.Global.app.playSound("ATB_Lose");
                        project.StatsMain.playerLifes = parseInt(project.Global.settings.xml.player.lifes.value);
                        project.StatsMain.playerLifes = 3;
                        project.Global.app.storage.saveIntFunc(project.StatsMain.ID_PLAYER_LIFES, project.StatsMain.playerLifes);
                        project.StatsMain.playerMagic = 0;
                        project.Global.app.storage.saveIntFunc(project.StatsMain.ID_PLAYER_MAGIC, project.StatsMain.playerMagic);
                        project.StatsMain.resetLevelStats();
                    }
                    /*override*/ onClickControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onClickControl(control);
                        project.Global.app.playSound("snd_atb_interface_button");
                        this.destroyToolTips();
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                    /*override*/ onMouseOverControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onMouseOverControl(control);
                        project.Global.app.playSound("snd_atb_interface_over");
                        switch (control.name) {
                            case "mcGuiBtnTryagain":
                                this.createTooltips(this.getControl(control.name).canvas.x - 100, this.getControl(control.name).canvas.y - 100, this.m_clip, "TXT_TOOLTIP_YES", 2);
                                break;
                            case "mcGuiBtnMainmenu":
                                this.createTooltips(this.getControl(control.name).canvas.x - 60, this.getControl(control.name).canvas.y - 100, this.m_clip, "TXT_TOOLTIP_NO", 2);
                                break;
                        }
                    }
                    /*override*/ onMouseOutControl(control) {
                        if (!this.m_isInStop) {
                            return;
                        }
                        this.destroyToolTips();
                    }
                    /*override*/ onLastFrame() {
                        switch (this.m_lastControlClicked) {
                            case "mcGuiBtnTryagain":
                                this.createTransition("mcGuiTransitionFadein", 0, 0, { screen: gui.GuiManager.SC_GAME });
                                break;
                            case "mcGuiBtnMainmenu":
                                this.createTransition("mcGuiTransitionFadein", 0, 0, { screen: gui.GuiManager.SC_MAIN_MENU });
                                break;
                        }
                    }
                    /*override*/ onEndTransition(fx) {
                        super.onEndTransition(fx);
                        if (fx.params != null) {
                            gui.GuiManager.instance.gotoScreen(fx.params.screen);
                        }
                    }
                    /*override*/ onPressSpaceBar() {
                        if (!this.m_isInStop) {
                            return;
                        }
                        super.onPressSpaceBar();
                        project.Global.app.playSound("snd_atb_interface_button");
                        this.destroyToolTips();
                        this.m_lastControlClicked = "mcGuiBtnTryagain";
                        this.m_clip.gotoAndPlay(this.m_clip.currentFrame + 1);
                    }
                }
                gui.GuiTryAgain = GuiTryAgain;
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiTryAgain = com.bamtang.project.gui.GuiTryAgain;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var gui;
            (function (gui) {
                var controls;
                (function (controls) {
                    class GuiItemControl extends GuiClip {
                        constructor(canvas, item, owner, link = "") {
                            super(canvas, link);
                            this.m_item = item;
                            this.m_owner = owner;
                            this.m_height = this.child.height;
                            this.child["btnUse"].addEventListener(CustomMouseEvent.CLICK, this.onItemAction);
                            this.child["txtInfo"] = Application.instance.localizeTextField(this.child["txtInfo"], "TXT_INVENTARY_ITEMS", "" + this.m_item.data.string);
                            this.child["txtInfoCounter"] = Application.instance.localizeTextField(this.child["txtInfoCounter"], "TXT_INVENTARY_ITEMS", "" + this.m_item.quantity);
                        }
                        moveUp(up) {
                            up ? (this.oy -= this.m_height) : (this.oy += this.m_height);
                        }
                        onItemAction(e) {
                            switch (e.target.name) {
                                case "btnUse":
                                    this.m_owner.useEntityObject(this.m_item.data);
                                    this.m_item.quantity--;
                                    this.child["txtInfoCounter"] = Application.instance.localizeTextField(this.child["txtInfoCounter"], "TXT_INVENTARY_ITEMS", "" + this.m_item.quantity);
                                    break;
                            }
                        }
                    }
                    controls.GuiItemControl = GuiItemControl;
                })(controls = gui.controls || (gui.controls = {}));
            })(gui = project.gui || (project.gui = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiItemControl = com.bamtang.project.gui.controls.GuiItemControl;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var core;
                (function (core) {
                    class ApplicationExt extends Application {
                        constructor(canvas, path = "") {
                            super(canvas, path);
                            this.loadComplete();
                        }
                        /*override*/ loadComplete() {
                            super.loadComplete();
                            var tmpxmldata = xml2js(this.getXMLData("settings"), { compact: true, spaces: 4 }).xmlData;
                            for (var xd in tmpxmldata) {
                                for (var xd1 in tmpxmldata[xd]) {
                                    for (var xd2 in tmpxmldata[xd][xd1]) {
                                        if (tmpxmldata[xd][xd1][xd2]["value"] != undefined) {
                                            tmpxmldata[xd][xd1]["value"] = tmpxmldata[xd][xd1][xd2]["value"];
                                            delete tmpxmldata[xd][xd1]["_attributes"];
                                        }
                                    }
                                }
                            }
                            project.Global.settings = new project.Settings(tmpxmldata);
                            this.initializeMouseListeners();
                        }
                        initializeMouseListeners() {
                            bamtang.Main.stage.on(CustomMouseEvent.MOUSE_UP, this.onMouseUp);
                            bamtang.Main.stage.on(CustomMouseEvent.MOUSE_MOVE, this.onMouseMove);
                            bamtang.Main.stage.on(CustomMouseEvent.MOUSE_DOWN, this.onMouseDown);
                        }
                        onMouseUp(e) {
                            if (this.m_guiManager != null) {
                                this.m_guiManager.onMouseUp(e);
                            }
                        }
                        onMouseDown(e) {
                            if (this.m_guiManager != null) {
                                this.m_guiManager.onMouseDown(e);
                            }
                        }
                        onMouseMove(e) {
                            if (this.m_guiManager != null) {
                                this.m_guiManager.onMouseMove(e);
                            }
                        }
                    }
                    core.ApplicationExt = ApplicationExt;
                })(core = soulExtends.core || (soulExtends.core = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var ApplicationExt = com.bamtang.project.soulExtends.core.ApplicationExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var project;
        (function (project) {
            var soulExtends;
            (function (soulExtends) {
                var core;
                (function (core) {
                    class EffectGuiExt extends EffectGui {
                        constructor(idGuiData, canvas) {
                            super(idGuiData, canvas);
                        }
                    }
                    core.EffectGuiExt = EffectGuiExt;
                })(core = soulExtends.core || (soulExtends.core = {}));
            })(soulExtends = project.soulExtends || (project.soulExtends = {}));
        })(project = bamtang.project || (bamtang.project = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var EffectGuiExt = com.bamtang.project.soulExtends.core.EffectGuiExt;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var data;
            (function (data) {
                class DataQueue {
                }
                data.DataQueue = DataQueue;
            })(data = soul.data || (soul.data = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var DataQueue = com.bamtang.soul.data.DataQueue;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var gui;
            (function (gui) {
                class ControlGroup {
                    constructor() {
                        this.m_controls = new Array();
                    }
                    get controlSelected() {
                        return this.m_controlSelected;
                    }
                    addControl(control) {
                        this.m_controls.push(control);
                    }
                    selectControl(name) {
                        for (var k = 0; k < this.m_controls.length; k++) {
                            if (this.m_controls[k].name == name) {
                                this.m_controls[k].gotoState(gui.Control.ST_SELECTED);
                                this.m_controlSelected = this.m_controls[k];
                            }
                            else {
                                this.m_controls[k].gotoState(gui.Control.ST_ENABLE);
                            }
                        }
                    }
                }
                gui.ControlGroup = ControlGroup;
            })(gui = soul.gui || (soul.gui = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var ControlGroup = com.bamtang.soul.gui.ControlGroup;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var gui;
            (function (gui) {
                class GuiButton extends gui.Control {
                    constructor(canvas, linkedSimbol) {
                        super(canvas);
                        this.m_child = Application.instance.getButton(linkedSimbol);
                        this.m_clip.addChild(this.m_child);
                        this.m_child.stop();
                    }
                    activeListeners() {
                        if (this.onClick != null) {
                            this.m_child.interactive = true;
                            this.m_child.buttonMode = true;
                            this.m_child.on(soul.CustomMouseEvent.CLICK, this._onClick.bind(this));
                            this.m_child.on(soul.CustomMouseEvent.MOUSE_OVER, this._onMouseOver_.bind(this));
                            this.m_child.on(soul.CustomMouseEvent.MOUSE_OUT, this._onMouseOut_.bind(this));
                            this.m_child.on(soul.CustomMouseEvent.MOUSE_DOWN, this._onMouseOut_.bind(this));
                        }
                        if (this.onMouseOut != null) {
                            //this.m_child.on(CustomMouseEvent.MOUSE_OUT, this._onMouseOut.bind(this));
                        }
                        if (this.onMouseOver != null) {
                            //this.m_child.on(CustomMouseEvent.MOUSE_OVER, this._onMouseOver.bind(this));
                        }
                    }
                    _onMouseOver_(binded) {
                        this.m_child.gotoAndStop(2);
                    }
                    _onMouseOut_(binded) {
                        this.m_child.gotoAndStop(1);
                    }
                }
                gui.GuiButton = GuiButton;
            })(gui = soul.gui || (soul.gui = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiButton = com.bamtang.soul.gui.GuiButton;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var gui;
            (function (gui) {
                class GuiClipExternal extends gui.GuiClip {
                    constructor(canvas, link = "") {
                        super(canvas, link);
                    }
                    /*override*/ changeClip(clipName) {
                        if (clipName != "") {
                            this.m_clipName = clipName;
                            this.m_child = Application.instance.getClip(this.m_clipName);
                            this.m_clip.addChild(this.m_child);
                            if (this.m_enabled) {
                                if (this.onClick == null) {
                                    //Object(this.m_child).useHandCursor = false;
                                }
                                else {
                                    this.m_child.addEventListener(soul.CustomMouseEvent.CLICK, this._onClick);
                                }
                            }
                            this.activeListeners(this.m_child);
                        }
                    }
                    /*override*/ get clip() {
                        return this.m_clip;
                    }
                }
                gui.GuiClipExternal = GuiClipExternal;
            })(gui = soul.gui || (soul.gui = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiClipExternal = com.bamtang.soul.gui.GuiClipExternal;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var gui;
            (function (gui) {
                class GuiOnOffSwitch extends gui.Control {
                    constructor(canvas, on, off) {
                        super(canvas);
                        this.m_onLink = on;
                        this.m_offLink = off;
                    }
                    get onLink() {
                        return this.m_onLink;
                    }
                    get offLink() {
                        return this.m_offLink;
                    }
                    /*override*/ gotoState(state) {
                        this.m_state = state;
                        this.changeChild((this.m_state == GuiOnOffSwitch.ST_ON) ? this.m_onLink : this.m_offLink);
                        this.m_clip.addChild(this.m_child);
                        if (this.onClick != null) {
                            this.m_child.interactive = true;
                            this.m_child.buttonMode = true;
                            this.m_child.on(soul.CustomMouseEvent.CLICK, this._onClick.bind(this));
                            this.m_child.on(soul.CustomMouseEvent.MOUSE_OVER, this._onMouseOver_.bind(this));
                            this.m_child.on(soul.CustomMouseEvent.MOUSE_OUT, this._onMouseOut_.bind(this));
                            this.m_child.on(soul.CustomMouseEvent.MOUSE_DOWN, this._onMouseOut_.bind(this));
                        }
                    }
                    /*override*/ _onClick(e) {
                        super._onClick(e);
                        if (this.m_state == GuiOnOffSwitch.ST_OFF) {
                            this.gotoState(GuiOnOffSwitch.ST_ON);
                            if (this.onTurnOn != null) {
                                this.onTurnOn();
                            }
                        }
                        else if (this.m_state == GuiOnOffSwitch.ST_ON) {
                            this.gotoState(GuiOnOffSwitch.ST_OFF);
                            if (this.onTurnOff != null) {
                                this.onTurnOff();
                            }
                        }
                    }
                    _onMouseOver_(binded) {
                        this.m_child.gotoAndStop(2);
                    }
                    _onMouseOut_(binded) {
                        this.m_child.gotoAndStop(1);
                    }
                }
                GuiOnOffSwitch.ST_ON = 100;
                GuiOnOffSwitch.ST_OFF = 101;
                gui.GuiOnOffSwitch = GuiOnOffSwitch;
            })(gui = soul.gui || (soul.gui = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiOnOffSwitch = com.bamtang.soul.gui.GuiOnOffSwitch;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var gui;
            (function (gui) {
                class GuiProgress extends gui.Control {
                    constructor(canvas, linkedSimbol) {
                        super(canvas);
                        this.m_clipProgress = Application.instance.getClip(linkedSimbol);
                        this.m_clip.addChild(this.m_clipProgress);
                        this.m_clipProgress.stop();
                        this.m_maxValue = this.m_clipProgress.totalFrames;
                    }
                    set value(val) {
                        this.m_value = (val > this.m_maxValue) ? this.m_maxValue : val;
                        if (this.m_clipProgress != null) {
                            var frame = ~~((this.m_clipProgress.totalFrames * this.m_value) / this.m_maxValue);
                            this.m_clipProgress.gotoAndStop(frame);
                        }
                        if (this.m_clipProgress["bump"] != undefined) {
                            this.m_clipProgress["bump"].visible = this.m_value == this.m_maxValue;
                            this.m_clipProgress["bump"].play();
                        }
                    }
                    get value() {
                        return this.m_value;
                    }
                    get maxValue() {
                        return this.m_maxValue;
                    }
                    set maxValue(val) {
                        this.m_maxValue = val;
                    }
                    /*override*/ get clip() {
                        return this.m_clipProgress;
                    }
                    /*override*/ get child() {
                        return this.m_clipProgress;
                    }
                }
                gui.GuiProgress = GuiProgress;
            })(gui = soul.gui || (soul.gui = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiProgress = com.bamtang.soul.gui.GuiProgress;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var gui;
            (function (gui) {
                class GuiText extends gui.Control {
                    constructor(canvas, linkedSimbol, textId) {
                        super(canvas);
                        this.m_clipText = Application.instance.getClip(linkedSimbol);
                        this.m_clip.addChild(this.m_clipText);
                        this.textId = textId;
                        this.textField = this.m_clipText["txtInfo"];
                        this.textField = Application.instance.localizeTextField(this.textField, textId);
                    }
                    /*override*/ get child() {
                        return this.m_clipText;
                    }
                    setText(textId, addText = "", replacedText = "") {
                        this.textId = String(textId);
                        this.textField = Application.instance.localizeTextField(this.textField, textId.toString(), addText.toString());
                    }
                }
                gui.GuiText = GuiText;
            })(gui = soul.gui || (soul.gui = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiText = com.bamtang.soul.gui.GuiText;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var gui;
            (function (gui) {
                class GuiThumbs4State extends gui.Control {
                    constructor(canvas, enable, disable = "", selected = "", soon = "") {
                        super(canvas);
                        this.m_enableLink = enable;
                        this.m_disableLink = disable;
                        this.m_selectedLink = selected;
                        this.m_commingSoonLink = soon;
                        this.gotoState(gui.Control.ST_ENABLE);
                    }
                    set enableLinkSymbol(value) {
                        this.m_enableLink = value;
                    }
                    set selectedLinkSymbol(value) {
                        this.m_selectedLink = value;
                    }
                    set disableLinkSymbol(value) {
                        this.m_disableLink = value;
                    }
                    set commingSoonLinkSymbol(value) {
                        this.m_commingSoonLink = value;
                    }
                    get enableLinkSymbol() {
                        return this.m_enableLink;
                    }
                    get selectedLinkSymbol() {
                        return this.m_selectedLink;
                    }
                    get disableLinkSymbol() {
                        return this.m_disableLink;
                    }
                    get commingSoonLinkSymbol() {
                        return this.m_commingSoonLink;
                    }
                    /*override*/ set enabled(value) {
                        this.gotoState(gui.Control.ST_DISABLE);
                        super.enabled = value;
                    }
                    /*override*/ gotoState(state) {
                        if (!this.m_enabled) {
                            return;
                        }
                        switch (state) {
                            case gui.Control.ST_ENABLE:
                                if (this.m_enableLink != "") {
                                    this.changeChild(this.m_enableLink);
                                    if (this.onClick != null) {
                                        this.m_child.interactive = true;
                                        this.m_child.buttonMode = true;
                                        this.m_child.on(soul.CustomMouseEvent.CLICK, this._onClick.bind(this));
                                    }
                                    this.activeListeners(this.m_child);
                                    this.m_state = state;
                                }
                                break;
                            case gui.Control.ST_DISABLE:
                                if (this.m_disableLink != "") {
                                    this.changeChild(this.m_disableLink);
                                    this.activeListeners(this.m_child);
                                    this.m_state = state;
                                }
                                break;
                            case gui.Control.ST_SELECTED:
                                if (this.m_selectedLink != "") {
                                    this.changeChild(this.m_selectedLink);
                                    //this.activeListeners(this.m_child);
                                    this.m_state = state;
                                }
                                break;
                        }
                    }
                    changeClip(clipName) {
                        this.changeChild(clipName);
                        if (this.m_child == null) {
                            return;
                        }
                        if (this.m_enabled) {
                            if (this.onClick != null) {
                                this.m_child.interactive = true;
                                this.m_child.on(soul.CustomMouseEvent.CLICK, this._onClick.bind(this));
                                this.m_child.on(soul.CustomMouseEvent.MOUSE_OVER, this._onMouseOver_.bind(this));
                                this.m_child.on(soul.CustomMouseEvent.MOUSE_OUT, this._onMouseOut_.bind(this));
                                this.m_child.on(soul.CustomMouseEvent.MOUSE_DOWN, this._onMouseOut_.bind(this));
                                try {
                                    this.m_child.anim.play();
                                }
                                catch (e) { }
                                ;
                            }
                        }
                        this.activeListeners(this.m_child);
                    }
                    _onMouseOver_(binded) {
                        this.m_child.gotoAndStop(2);
                    }
                    _onMouseOut_(binded) {
                        this.m_child.gotoAndStop(1);
                    }
                    activeListeners(object) {
                        if (this.onMouseOut != null) {
                            //object.on(CustomMouseEvent.MOUSE_OUT, this._onMouseOut.bind(this));
                        }
                        if (this.onMouseOver != null) {
                            //object.on(CustomMouseEvent.MOUSE_OVER, this._onMouseOver.bind(this));
                        }
                    }
                }
                gui.GuiThumbs4State = GuiThumbs4State;
            })(gui = soul.gui || (soul.gui = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiThumbs4State = com.bamtang.soul.gui.GuiThumbs4State;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var gui;
            (function (gui) {
                class GuiTimer extends gui.Control {
                    constructor(canvas, linkedSimbol) {
                        super(canvas);
                        this.m_clipTimer = Application.instance.getClip(linkedSimbol);
                        this.m_clip.addChild(this.m_clipTimer);
                        this.m_maxTime = this.m_clipTimer.totalFrames;
                    }
                    set time(value) {
                        this.m_time = (value > this.m_maxTime) ? this.m_maxTime : value;
                        if (this.m_clipTimer != null) {
                            var frame = (this.m_clipTimer.totalFrames * this.m_time) / this.m_maxTime;
                            this.m_clipTimer.gotoAndStop(frame);
                        }
                    }
                    set maxTime(value) {
                        this.m_maxTime = value;
                    }
                    get time() {
                        return this.m_time;
                    }
                    /*override*/ get clip() {
                        return this.m_clipTimer;
                    }
                    get maxTime() {
                        return this.m_maxTime;
                    }
                    /*override*/ get child() {
                        return this.m_clipTimer;
                    }
                    add(dtTime) {
                        this.m_time -= dtTime;
                        if (this.m_time < 0) {
                            this.m_time = 0;
                        }
                    }
                    reset() {
                        this.m_stop = false;
                        this.time = 0;
                    }
                    /*override*/ changeChild(idChild) {
                        if (this.m_clipTimer != null) {
                            this.m_clip.removeChild(this.m_clipTimer);
                            try {
                                this.m_clipTimer.destroy();
                            }
                            catch (e) { }
                        }
                        this.m_clipTimer = Application.instance.getClip(idChild);
                        this.m_clip.addChild(this.m_clipTimer);
                    }
                    update(dt) {
                        if (!this.m_stop) {
                            this.m_time += dt;
                            this.time = this.m_time;
                            if (this.m_time >= this.m_maxTime) {
                                if (this.onCompleteTime != null) {
                                    this.onCompleteTime();
                                }
                                this.m_stop = true;
                            }
                        }
                    }
                }
                gui.GuiTimer = GuiTimer;
            })(gui = soul.gui || (soul.gui = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var GuiTimer = com.bamtang.soul.gui.GuiTimer;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var gui;
            (function (gui) {
                class ToolTips {
                    constructor(canvas, idClip, autosize = "") {
                        this.m_canvas = canvas;
                        this.m_clip = Global.app.getClip(idClip);
                        this.m_canvas.addChild(this.m_clip);
                        this.m_clip.x = 0;
                        this.m_clip.y = 0;
                        this.m_autosize = autosize;
                    }
                    setInformation(x, y, idText, extra = "") {
                        this.m_clip["mcInfoTooltip"]["txtInfo"].autoSize = this.m_autosize;
                        this.m_clip["mcInfoTooltip"]["txtInfo"] = Global.app.localizeTextField(this.m_clip["mcInfoTooltip"]["txtInfo"], idText, extra);
                        this.m_clip["mcContemp"].height = this.m_clip["mcInfoTooltip"]["txtInfo"].height + 10;
                        var halfW1 = this.m_clip["mcContemp"].width * 0.5;
                        var halfW2 = this.m_clip["mcInfoTooltip"]["txtInfo"].width * 0.5;
                        this.m_clip["mcInfoTooltip"]["txtInfo"].x += halfW1 - halfW2;
                        this.m_clip["mcBound"].y = this.m_clip["mcContemp"].height - 1;
                        this.m_clip.x = x;
                        this.m_clip.y = y;
                    }
                    free() {
                        try {
                            this.m_canvas.removeChild(this.m_clip);
                            try {
                                this.m_clip.destroy();
                            }
                            catch (e) { }
                            this.m_clip = null;
                        }
                        catch (e) {
                        }
                    }
                }
                ToolTips.POINT_TO_UP = 1;
                ToolTips.POINT_TO_DOWN = 2;
                gui.ToolTips = ToolTips;
            })(gui = soul.gui || (soul.gui = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var ToolTips = com.bamtang.soul.gui.ToolTips;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var gui;
            (function (gui) {
                var handler;
                (function (handler) {
                    class ControlHandler {
                        constructor(clip) {
                            this.m_clip = clip;
                            this.m_pointsScale = new Array();
                            this.m_pointsRotation = new Array();
                            for (var i = 0; i < ControlHandler.NUM_POINTS_SCALE; i++) {
                                this.m_pointsScale.push(new handler.HandlerPointScale(this.m_clip, i, this));
                                if (i < ControlHandler.NUM_POINTS_ROTATION) {
                                    this.m_pointsRotation.push(new handler.HandlerPointRotation(this.m_clip, i, this));
                                }
                            }
                            this.m_selectedControl = null;
                            this.m_selectedPoint = null;
                        }
                        set selectedControl(val) {
                            this.m_selectedControl = val;
                        }
                        get selectedControl() {
                            return this.m_selectedControl;
                        }
                        set selectedPoint(val) {
                            this.m_selectedPoint = val;
                        }
                        get selectedPoint() {
                            return this.m_selectedPoint;
                        }
                        relocate() {
                            /*var r:PIXI.Rectangle = this.m_selectedControl.child.getRect(this.m_clip);
                    
                            for (var i:number = 0; i < ControlHandler.NUM_POINTS_SCALE; i++)
                            {
                                this.m_pointsScale[i].relocate(r);
                                if (i < ControlHandler.NUM_POINTS_ROTATION)
                                {
                                    this.m_pointsRotation[i].relocate(r);
                                }
                            }*/
                        }
                        rotate() {
                            if (this.m_selectedPoint != null) {
                                this.m_selectedPoint.doLogicalMove(this.m_selectedControl.canvas.x + this.m_selectedControl.ox, this.m_selectedControl.canvas.y + this.m_selectedControl.oy);
                                this.m_selectedControl.rotation += this.m_selectedPoint.angle;
                                for (var i = 0; i < ControlHandler.NUM_POINTS_SCALE; i++) {
                                    //this.m_pointsScale[i].relocate(this.m_selectedControl.child.getRect(this.m_clip));
                                    if (i < ControlHandler.NUM_POINTS_ROTATION) {
                                        //this.m_pointsRotation[i].relocate(this.m_selectedControl.child.getRect(this.m_clip));
                                    }
                                }
                            }
                        }
                        scale() {
                            if (this.m_selectedPoint != null) {
                                this.m_selectedPoint.doLogicalMove();
                                var indexes;
                                switch (this.m_selectedPoint.index) {
                                    case 0:
                                        indexes = [0, 0, 4, 4];
                                        break;
                                    case 1:
                                        indexes = [0, 1, 4, 4];
                                        break;
                                    case 2:
                                        indexes = [0, 2, 2, 4];
                                        break;
                                    case 3:
                                        indexes = [0, 0, 3, 4];
                                        break;
                                    case 4:
                                        indexes = [0, 0, 4, 4];
                                        break;
                                    case 5:
                                        indexes = [0, 0, 4, 5];
                                        break;
                                    case 6:
                                        indexes = [6, 0, 4, 6];
                                        break;
                                    case 7:
                                        indexes = [7, 0, 4, 4];
                                        break;
                                    default:
                                        indexes = [0, 0, 0, 0];
                                }
                                var r = new PIXI.Rectangle(this.m_pointsScale[indexes[0]].x, this.m_pointsScale[indexes[1]].y, this.m_pointsScale[indexes[2]].x - this.m_pointsScale[indexes[0]].x, this.m_pointsScale[indexes[3]].y - this.m_pointsScale[indexes[1]].y);
                                var factor = (this.m_selectedControl instanceof gui.GuiClipExternal) ? 0 : 0.5;
                                this.m_selectedControl.ox = r.x + r.width * factor - this.m_selectedControl.canvas.x;
                                this.m_selectedControl.oy = r.y + r.height * factor - this.m_selectedControl.canvas.y;
                                this.m_selectedControl.scaleX = r.width / this.m_selectedControl.widthOriginal;
                                this.m_selectedControl.scaleY = r.height / this.m_selectedControl.heightOriginal;
                                for (var i = 0; i < ControlHandler.NUM_POINTS_SCALE; i++) {
                                    this.m_pointsScale[i].relocate(r);
                                    if (i < ControlHandler.NUM_POINTS_ROTATION) {
                                        this.m_pointsRotation[i].relocate(r);
                                    }
                                }
                            }
                        }
                    }
                    ControlHandler.NUM_POINTS_SCALE = 8;
                    ControlHandler.NUM_POINTS_ROTATION = 4;
                    handler.ControlHandler = ControlHandler;
                })(handler = gui.handler || (gui.handler = {}));
            })(gui = soul.gui || (soul.gui = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var ControlHandler = com.bamtang.soul.gui.handler.ControlHandler;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var gui;
            (function (gui) {
                var handler;
                (function (handler_1) {
                    class HandlerPoint {
                        constructor(clip, index, clipID, handler) {
                            this.m_clip = clip;
                            this.m_dot = Global.app.getClip(clipID);
                            this.m_clip.addChild(this.m_dot);
                            this.m_dot.addEventListener(soul.CustomMouseEvent.MOUSE_DOWN, this.onMouseDown);
                            this.m_dot.addEventListener(soul.CustomMouseEvent.MOUSE_UP, this.onMouseUp);
                            this.m_index = index;
                            this.m_oldX = 0;
                            this.m_dX = 0;
                            this.m_x = 0;
                            this.m_y = 0;
                            this.m_angle = 0;
                            this.m_handler = handler;
                        }
                        get type() {
                            return this.m_type;
                        }
                        get index() {
                            return this.m_index;
                        }
                        get x() {
                            return this.m_x;
                        }
                        get y() {
                            return this.m_y;
                        }
                        get angle() {
                            return this.m_angle;
                        }
                        onMouseDown(e) {
                            this.m_handler.selectedPoint = this;
                        }
                        onMouseUp(e) {
                            this.m_handler.selectedPoint = null;
                        }
                        doLogicalMove(cX = 0, cY = 0) {
                        }
                        getBoundPointAxis(r, axisX) {
                            return 0;
                        }
                        relocate(r) {
                            this.m_dot.x = this.getBoundPointAxis(r, true);
                            this.m_dot.y = this.getBoundPointAxis(r, false);
                            this.m_x = this.m_dot.x;
                            this.m_y = this.m_dot.y;
                        }
                    }
                    HandlerPoint.TYPE_SCALE = 0;
                    HandlerPoint.TYPE_ROTATION = 1;
                    handler_1.HandlerPoint = HandlerPoint;
                })(handler = gui.handler || (gui.handler = {}));
            })(gui = soul.gui || (soul.gui = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var HandlerPoint = com.bamtang.soul.gui.handler.HandlerPoint;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var gui;
            (function (gui) {
                var handler;
                (function (handler_2) {
                    class HandlerPointRotation extends handler_2.HandlerPoint {
                        constructor(clip, index, handler) {
                            super(clip, index, "mcPointHandlerRotation" + index, handler);
                            this.m_type = handler_2.HandlerPoint.TYPE_ROTATION;
                        }
                        /*override*/ onMouseDown(e) {
                            super.onMouseDown(e);
                            //this.m_oldX = this.m_clip.stage.mouseX;
                            this.m_dX = 0;
                            //this.m_oldY = this.m_clip.stage.mouseY;
                            this.m_dY = 0;
                        }
                        /*override*/ doLogicalMove(cX = 0, cY = 0) {
                            var ang1 = Math.atan2(this.m_oldY - cY, this.m_oldX - cX);
                            //this.m_oldX = this.m_clip.stage.mouseX;
                            //this.m_oldY = this.m_clip.stage.mouseY;
                            //var ang2:number = Math.atan2(this.m_clip.stage.mouseY - cY, this.m_clip.stage.mouseX - cX);
                            //this.m_angle = ang2 - ang1;
                            //this.m_angle *= (180 / Math.PI);
                        }
                        /*override*/ getBoundPointAxis(r, axisX) {
                            switch (this.m_index) {
                                case 0:
                                    return axisX ? r.x - 5 : r.y - 5;
                                case 1:
                                    return axisX ? r.x + r.width + 5 : r.y - 5;
                                case 2:
                                    return axisX ? r.x + r.width + 5 : r.y + r.height + 5;
                                case 3:
                                    return axisX ? r.x - 5 : r.y + r.height + 5;
                                default:
                                    return 0;
                            }
                        }
                    }
                    handler_2.HandlerPointRotation = HandlerPointRotation;
                })(handler = gui.handler || (gui.handler = {}));
            })(gui = soul.gui || (soul.gui = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var HandlerPointRotation = com.bamtang.soul.gui.handler.HandlerPointRotation;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var gui;
            (function (gui) {
                var handler;
                (function (handler_3) {
                    class HandlerPointScale extends handler_3.HandlerPoint {
                        constructor(clip, index, handler) {
                            super(clip, index, "mcPointHandlerScale", handler);
                            this.m_type = handler_3.HandlerPoint.TYPE_SCALE;
                        }
                        /*override*/ onMouseDown(e) {
                            super.onMouseDown(e);
                            if (this.m_index != 1 && this.m_index != 5) {
                                //this.m_oldX = this.m_clip.stage.mouseX;
                                this.m_dX = 0;
                            }
                            if (this.m_index != 3 && this.m_index != 7) {
                                //this.m_oldY = this.m_clip.stage.mouseY;
                                this.m_dY = 0;
                            }
                        }
                        /*override*/ doLogicalMove(cX = 0, cY = 0) {
                            if (this.m_index != 1 && this.m_index != 5) {
                                //this.m_dX = this.m_clip.stage.mouseX - this.m_oldX;
                                this.m_x += this.m_dX;
                                //this.m_oldX = this.m_clip.stage.mouseX;
                            }
                            if (this.m_index != 3 && this.m_index != 7) {
                                //this.m_dY = this.m_clip.stage.mouseY - this.m_oldY;
                                this.m_y += this.m_dY;
                                //this.m_oldY = this.m_clip.stage.mouseY;
                            }
                        }
                        /*override*/ getBoundPointAxis(r, axisX) {
                            switch (this.m_index) {
                                case 0:
                                    return axisX ? r.x : r.y;
                                case 1:
                                    return axisX ? r.x + r.width * 0.5 : r.y;
                                case 2:
                                    return axisX ? r.x + r.width : r.y;
                                case 3:
                                    return axisX ? r.x + r.width : r.y + r.height * 0.5;
                                case 4:
                                    return axisX ? r.x + r.width : r.y + r.height;
                                case 5:
                                    return axisX ? r.x + r.width * 0.5 : r.y + r.height;
                                case 6:
                                    return axisX ? r.x : r.y + r.height;
                                case 7:
                                    return axisX ? r.x : r.y + r.height * 0.5;
                                default:
                                    return 0;
                            }
                        }
                    }
                    handler_3.HandlerPointScale = HandlerPointScale;
                })(handler = gui.handler || (gui.handler = {}));
            })(gui = soul.gui || (soul.gui = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var HandlerPointScale = com.bamtang.soul.gui.handler.HandlerPointScale;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var math;
            (function (math) {
                class Circle {
                    constructor(xc = 0, yc = 0, rc = 0) {
                        this.x = xc;
                        this.y = yc;
                        this.r = rc;
                    }
                    hitTest(px, py) {
                        return (((this.x - px) * (this.x - px) + (this.y - py) * (this.y - py)) <= this.r * this.r);
                    }
                    toString() {
                        return "circle x:" + this.x + " y:" + this.y + " r:" + this.r;
                    }
                }
                math.Circle = Circle;
            })(math = soul.math || (soul.math = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Circle = com.bamtang.soul.math.Circle;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var math;
            (function (math) {
                class Path {
                    constructor(pathXml_) {
                        this.m_sections = new Array();
                        this.m_length = 0;
                        var pathXml = pathXml_;
                        var sections = pathXml.point.length;
                        for (var k = 0; k < sections; ++k) {
                            var order = pathXml.point[k].n;
                            var points = new Array();
                            for (var i = 0; i < order; ++i) {
                                points.push(new math.Vector2D(Number(pathXml.point[k].attribute("x" + i)), Number(pathXml.point[k].attribute("y" + i))));
                            }
                            points.push(new math.Vector2D(Number(pathXml.point[(k + 1) % sections].x0), Number(pathXml.point[(k + 1) % sections].y0)));
                            var section = new math.PathSection(points, this.m_length);
                            this.m_length += section.length();
                            this.m_sections.push(section);
                        }
                    }
                    free() {
                        this.m_sections = null;
                    }
                    update(distance, actor) {
                        this.m_sections[actor.pathPosition.section].update(distance, actor);
                        if (actor.pathPosition.point) {
                            actor.setPosition(actor.pathPosition.point.x, actor.pathPosition.point.y);
                        }
                        else {
                            if (actor.pathPosition.section < this.m_sections.length - 1) {
                                actor.pathPosition.section++;
                            }
                            else {
                                actor.pathPosition.section = 0;
                                actor.pathPosition.distance = 0;
                            }
                            this.m_sections[actor.pathPosition.section].update(distance, actor);
                            if (actor.pathPosition.point) {
                                actor.setPosition(actor.pathPosition.point.x, actor.pathPosition.point.y);
                            }
                        }
                    }
                    toString() {
                        var ret = "Path:";
                        for (var k = 0; k < this.m_sections.length; ++k) {
                            ret += "\n" + this.m_sections[k];
                        }
                        return ret;
                    }
                }
                math.Path = Path;
            })(math = soul.math || (soul.math = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Path = com.bamtang.soul.math.Path;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var math;
            (function (math) {
                class PathPoint {
                    constructor(pointPath = null, tangentAngle = 0) {
                        this.point = pointPath;
                        this.tangent = tangentAngle;
                        this.distance = 0;
                        this.section = 0;
                    }
                    toString() {
                        return "[PATH] " + this.point + " t: " + this.tangent + " d: " + this.distance;
                    }
                }
                math.PathPoint = PathPoint;
            })(math = soul.math || (soul.math = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var PathPoint = com.bamtang.soul.math.PathPoint;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var math;
            (function (math) {
                class PathSection {
                    constructor(basePoints, startLength) {
                        this.m_order = basePoints.length - 1;
                        this.m_points = basePoints;
                        this.m_initLength = startLength;
                        this.m_length = 0;
                        this.m_oldPos = null;
                        switch (this.m_order) {
                            case PathSection.CONIC:
                            case PathSection.CUBIC:
                            case PathSection.LINE:
                                this.m_dir = new math.Vector2D(this.m_points[this.m_order].x - this.m_points[0].x, this.m_points[this.m_order].y - this.m_points[0].y);
                                this.m_length = this.m_dir.length();
                                this.m_angle = this.m_dir.angle();
                                this.m_dir.normalize();
                                break;
                            default:
                                Application.error("Invalid path section order: " + this.m_order);
                        }
                    }
                    free() {
                        this.m_points = null;
                    }
                    length() {
                        return this.m_length;
                    }
                    update(deltaDistance, actor) {
                        var dist = actor.pathPosition.distance + deltaDistance;
                        var t;
                        if (dist <= this.m_initLength + this.m_length) {
                            switch (this.m_order) {
                                case PathSection.LINE:
                                    actor.pathPosition.point = this.m_dir.clone();
                                    actor.pathPosition.point.scale(dist - this.m_initLength);
                                    actor.pathPosition.point.add(this.m_points[0]);
                                    actor.pathPosition.tangent = this.m_angle;
                                    break;
                                case PathSection.CONIC:
                                    actor.pathPosition.point = new math.Vector2D(0, 0);
                                    t = (dist - this.m_initLength) / this.m_length;
                                    actor.pathPosition.point.x = (1 - t) * (1 - t) * this.m_points[0].x +
                                        2 * (1 - t) * t * this.m_points[1].x +
                                        t * t * this.m_points[2].x;
                                    actor.pathPosition.point.y = (1 - t) * (1 - t) * this.m_points[0].y +
                                        2 * (1 - t) * t * this.m_points[1].y +
                                        t * t * this.m_points[2].y;
                                    if (this.m_oldPos) {
                                        this.m_oldPos.subtract(actor.pathPosition.point);
                                        this.m_oldPos.scale(-1);
                                        actor.pathPosition.tangent = this.m_oldPos.angle();
                                    }
                                    this.m_oldPos = actor.pathPosition.point;
                                    break;
                                case PathSection.CUBIC:
                                    actor.pathPosition.point = new math.Vector2D(0, 0);
                                    t = (dist - this.m_initLength) / this.m_length;
                                    actor.pathPosition.point.x = (1 - t) * (1 - t) * (1 - t) * this.m_points[0].x +
                                        3 * (1 - t) * (1 - t) * t * this.m_points[1].x +
                                        3 * (1 - t) * t * t * this.m_points[2].x +
                                        t * t * t * this.m_points[3].x;
                                    actor.pathPosition.point.y = (1 - t) * (1 - t) * (1 - t) * this.m_points[0].y +
                                        3 * (1 - t) * (1 - t) * t * this.m_points[1].y +
                                        3 * (1 - t) * t * t * this.m_points[2].y +
                                        t * t * t * this.m_points[3].y;
                                    if (this.m_oldPos) {
                                        this.m_oldPos.subtract(actor.pathPosition.point);
                                        this.m_oldPos.scale(-1);
                                        actor.pathPosition.tangent = this.m_oldPos.angle();
                                    }
                                    this.m_oldPos = actor.pathPosition.point;
                                    break;
                                default:
                                    Application.error("Invalid path section order: " + this.m_order);
                            }
                            actor.pathPosition.distance = dist;
                        }
                        else {
                            actor.pathPosition.point = null;
                            this.m_oldPos = null;
                        }
                    }
                    toString() {
                        var ret = "section: ";
                        for (var k = 0; k < this.m_points.length; ++k) {
                            ret += this.m_points[k] + " ";
                        }
                        return ret;
                    }
                }
                PathSection.SECTIONS = 3;
                PathSection.LINE = 1;
                PathSection.CONIC = 2;
                PathSection.CUBIC = 3;
                math.PathSection = PathSection;
            })(math = soul.math || (soul.math = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var PathSection = com.bamtang.soul.math.PathSection;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var math;
            (function (math) {
                class Vector2D {
                    constructor(xc, yc = undefined) {
                        this.x = 0;
                        this.y = 0;
                        var xxx = 0;
                        var yyy = 0;
                        if (yc == undefined && xc.x != undefined && xc.y != undefined) {
                            xxx = xc.x;
                            yyy = xc.y;
                        }
                        else if (yc == undefined) {
                            xxx = xc;
                        }
                        else {
                            xxx = xc;
                            yyy = yc;
                        }
                        this.x = xxx;
                        this.y = yyy;
                    }
                    clone() {
                        return new Vector2D(this.x, this.y);
                    }
                    plus(b) {
                        return new Vector2D(this.x + b.x, this.y + b.y);
                    }
                    minus(b) {
                        return new Vector2D(this.x - b.x, this.y - b.y);
                    }
                    orthogonal() {
                        return new Vector2D(-this.y, this.x);
                    }
                    udir() {
                        var ret = this.clone();
                        ret.normalize();
                        return ret;
                    }
                    projectionOn(b) {
                        var squareLength = b.dot(b);
                        if (squareLength == 0) {
                            return this.clone();
                        }
                        var ret = b.clone();
                        ret.scale(this.dot(b) / squareLength);
                        return ret;
                    }
                    componentOn(b) {
                        var val = b.dot(b);
                        if (val == 0) {
                            return 0;
                        }
                        val = this.dot(b) / val;
                        return (val < 0) ? -val : val;
                    }
                    dot(b) {
                        return ((this.x * b.x) + (this.y * b.y));
                    }
                    length() {
                        return Math.sqrt((this.x * this.x) + (this.y * this.y));
                    }
                    squaredLength() {
                        return ((this.x * this.x) + (this.y * this.y));
                    }
                    copy(b) {
                        this.x = b.x;
                        this.y = b.y;
                    }
                    scale(scale) {
                        this.x *= scale;
                        this.y *= scale;
                    }
                    normalize() {
                        var vectorLength = this.length();
                        if (vectorLength > 0) {
                            this.x /= vectorLength;
                            this.y /= vectorLength;
                        }
                    }
                    stretch(len) {
                        var vectorLength = this.length();
                        if (vectorLength > 0) {
                            this.x *= len / vectorLength;
                            this.y *= len / vectorLength;
                        }
                    }
                    silentNormalize() {
                        var vectorLength = this.length();
                        if (vectorLength > 0) {
                            this.x /= vectorLength;
                            this.y /= vectorLength;
                        }
                    }
                    add(b) {
                        this.x += b.x;
                        this.y += b.y;
                    }
                    subtract(b) {
                        this.x -= b.x;
                        this.y -= b.y;
                    }
                    angle() {
                        return Math.atan2(this.y, this.x);
                    }
                    toString() {
                        return "V2D x:" + this.x + " y:" + this.y;
                    }
                }
                math.Vector2D = Vector2D;
            })(math = soul.math || (soul.math = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Vector2D = com.bamtang.soul.math.Vector2D;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var modules;
            (function (modules) {
                class StorageMain {
                    constructor(val) {
                        this.m_sharedObject = {};
                        this.instance = this;
                        this.m_sharedObject = val;
                    }
                    flush() {
                        bamtang.Main.saveGameProcess();
                    }
                    saveIntFunc(key, value) {
                        this.m_sharedObject[key] = value;
                        this.flush();
                    }
                    loadIntFunc(key, defaultValue) {
                        if (this.m_sharedObject[key] == undefined) {
                            this.m_sharedObject[key] = defaultValue;
                            return defaultValue;
                        }
                        return parseInt(this.m_sharedObject[key]);
                    }
                    saveArrayFunc(key, value) {
                        this.m_sharedObject[key] = value;
                        this.flush();
                    }
                    loadArrayFunc(key, defaultValue) {
                        if (this.m_sharedObject[key] == undefined) {
                            this.m_sharedObject[key] = defaultValue;
                            return defaultValue;
                        }
                        return this.m_sharedObject[key];
                    }
                    saveBooleanFunc(key, value) {
                        this.m_sharedObject[key] = value;
                        this.flush();
                    }
                    loadBooleanFunc(key, defaultValue) {
                        if (this.m_sharedObject[key] == undefined) {
                            this.m_sharedObject[key] = defaultValue;
                            return defaultValue;
                        }
                        return Boolean(this.m_sharedObject[key]);
                    }
                }
                modules.StorageMain = StorageMain;
            })(modules = soul.modules || (soul.modules = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var StorageMain = com.bamtang.soul.modules.StorageMain;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var utils;
            (function (utils) {
                class CircularMovement extends Movement {
                    constructor(x, y, speed, isLoop = true, isReversible = true) {
                        super(x, y, speed, isLoop, isReversible);
                        this.mInitRandians = 0;
                        this.mRadiansToDisplace = 0;
                        this.mCurrentRadiansDisplaced = 0;
                        this.mFactorDirection = 1;
                        this.m_oldX = 0;
                        this.m_oldY = 0;
                        this.m_centroidX = 0;
                        this.m_centroidY = 0;
                        this.m_radio = 0;
                        this.m_angularSpeed = 0;
                        this.m_typeMovement = Movement.TYPE_CIRCLE;
                        this.m_oldX = this.m_x;
                        this.m_oldY = this.m_y;
                    }
                    startMovement(centroidX, centroidY, displacementDegrees) {
                        this.m_centroidX = centroidX;
                        this.m_centroidY = centroidY;
                        var dx = this.m_x - this.m_centroidX;
                        var dy = -this.m_y + this.m_centroidY;
                        this.m_radio = Math.sqrt(dx * dx + dy * dy);
                        if (this.m_radio <= 1) {
                            Application.error("CircularMovement::startMovement() - Radio very small: " + this.m_radio);
                            this.onEndMovement();
                            return;
                        }
                        this.mFactorDirection = ((displacementDegrees < 0) ? -1 : 1);
                        if (displacementDegrees == 0) {
                            this.onEndMovement();
                            return;
                        }
                        if (displacementDegrees < 0) {
                            displacementDegrees *= -1;
                        }
                        this.mInitRandians = Math.atan2(dy, dx);
                        this.mRadiansToDisplace = Math.PI * (displacementDegrees / 180);
                        this.mCurrentRadiansDisplaced = 0;
                        var distance = 2 * Math.PI * this.m_radio * (displacementDegrees / 360);
                        var totalTime = distance / this.m_speed;
                        this.m_angularSpeed = this.mRadiansToDisplace / totalTime;
                        var radians = this.mInitRandians + this.mRadiansToDisplace * this.mFactorDirection;
                        this.m_targetX = this.m_centroidX + this.m_radio * Math.cos(radians);
                        this.m_targetY = this.m_centroidY - this.m_radio * Math.sin(radians);
                        this.m_state = Movement.ST_MOVEMENT;
                    }
                    startMovement2(radio, initDegrees, displacementDegrees) {
                        this.m_radio = radio;
                        if (this.m_radio <= 1) {
                            Application.error("CircularMovement::startMovement2() - Radio very small: " + this.m_radio);
                            this.onEndMovement();
                            return;
                        }
                        this.mFactorDirection = ((displacementDegrees < 0) ? -1 : 1);
                        if (displacementDegrees == 0) {
                            this.onEndMovement();
                            return;
                        }
                        if (displacementDegrees < 0) {
                            displacementDegrees *= -1;
                        }
                        this.mRadiansToDisplace = Math.PI * (displacementDegrees / 180);
                        var distance = 2 * Math.PI * this.m_radio * (displacementDegrees / 360);
                        var totalTime = distance / this.m_speed;
                        this.m_angularSpeed = this.mRadiansToDisplace / totalTime;
                        this.mInitRandians = Math.PI * (initDegrees / 180);
                        this.mCurrentRadiansDisplaced = 0;
                        this.m_centroidX = this.m_x - this.m_radio * Math.cos(this.mInitRandians);
                        this.m_centroidY = this.m_y + this.m_radio * Math.sin(this.mInitRandians);
                        var radians = this.mInitRandians + this.mRadiansToDisplace * this.mFactorDirection;
                        this.m_targetX = this.m_centroidX + this.m_radio * Math.cos(radians);
                        this.m_targetY = this.m_centroidY - this.m_radio * Math.sin(radians);
                        this.m_state = Movement.ST_MOVEMENT;
                    }
                    /*override*/ update(dt) {
                        if (this.m_state != Movement.ST_MOVEMENT) {
                            return;
                        }
                        this.mCurrentRadiansDisplaced += this.m_angularSpeed * dt;
                        if (this.mCurrentRadiansDisplaced > this.mRadiansToDisplace) {
                            this.mCurrentRadiansDisplaced = this.mRadiansToDisplace;
                        }
                        var radians = this.mInitRandians + this.mCurrentRadiansDisplaced * this.mFactorDirection;
                        this.m_x = this.m_centroidX + this.m_radio * Math.cos(radians);
                        this.m_y = this.m_centroidY - this.m_radio * Math.sin(radians);
                        if (this.mCurrentRadiansDisplaced == this.mRadiansToDisplace) {
                            if (this.m_isLoop) {
                                this.mCurrentRadiansDisplaced = 0;
                                if (this.m_isReversible) {
                                    this.mFactorDirection *= -1;
                                    this.mInitRandians = radians;
                                }
                                this.onCycleEnd();
                            }
                            else {
                                this.onEndMovement();
                            }
                        }
                    }
                }
                utils.CircularMovement = CircularMovement;
            })(utils = soul.utils || (soul.utils = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var CircularMovement = com.bamtang.soul.utils.CircularMovement;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var utils;
            (function (utils) {
                class Common {
                    static tint(clip, r = 1, g = 1, b = 1, a = 1) {
                        var elements = [r, 0, 0, 0, 0, 0, g, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, a, 0];
                        //var NewColorMatrixFilter:PIXI.filters.ColorMatrixFilter = new PIXI.filters.ColorMatrixFilter(elements);
                        // clip.filters = [NewColorMatrixFilter];
                    }
                    static execCommand(callback, time = 0, params = null) {
                        var object = new Object();
                        object.callback = callback.bind(this);
                        object.interval = setInterval(internalAction, time, object);
                        object.params = params;
                        function internalAction() {
                            clearInterval(arguments[0].interval);
                            arguments[0].interval = null;
                            try {
                                if (arguments[0].callback != null) {
                                    if (arguments[0].params != null) {
                                        arguments[0].callback(arguments[0].params);
                                    }
                                    else {
                                        arguments[0].callback();
                                    }
                                }
                            }
                            catch (e) {
                                arguments[0] = null;
                            }
                            arguments[0] = null;
                        }
                        return object;
                    }
                    static cancelCommand(obj) {
                        if (obj.interval) {
                            clearInterval(obj.interval);
                            return true;
                        }
                        return false;
                    }
                    static shake(clip, time = 10, strong = 2, caller = null, nameFunction = null) {
                        var object = new Object();
                        object.clip = clip;
                        object.x = object.clip.x;
                        object.y = object.clip.y;
                        object.caller = caller;
                        object.nameFunction = nameFunction;
                        object.time = time;
                        object.baseTime = 0;
                        object.strong = strong;
                        object.interval = setInterval(internalAction, 50, object);
                        function internalAction() {
                            if (~~(parseInt(arguments[0].baseTime)) == ~~(parseInt(arguments[0].time))) {
                                clearInterval(arguments[0].interval);
                                if (arguments[0].caller != null) {
                                    arguments[0].caller[arguments[0].nameFunction]();
                                }
                                if (arguments[0].clip != null) {
                                    arguments[0].clip.x = arguments[0].x;
                                    arguments[0].clip.y = arguments[0].y;
                                }
                                arguments[0] = null;
                            }
                            else {
                                if (arguments[0].clip != null) {
                                    arguments[0].clip.x = arguments[0].x + (Common.random(0, arguments[0].strong) - arguments[0].strong * 0.5);
                                    arguments[0].clip.y = arguments[0].y + (Common.random(0, arguments[0].strong) - arguments[0].strong * 0.5);
                                }
                                arguments[0].baseTime++;
                            }
                        }
                    }
                    static random(min, max) {
                        return (~~(Math.random() * (max - min + 1)) + min);
                    }
                    static getRandomList(list) {
                        var index = Common.random(0, list.length - 1);
                        return list[index];
                    }
                    static getDigitsByValue(value, num_digits) {
                        var s = String(value);
                        var digits;
                        var offset = num_digits - s.length;
                        for (var i = 0; i < offset; i++) {
                            s = "0" + s;
                        }
                        digits = s.split("");
                        return digits;
                    }
                    static replaceIn(text, search, replaceWith, all = true) {
                        if (all) {
                            while (text.indexOf(search) != -1) {
                                text = text.replace(search, replaceWith);
                            }
                            return text;
                        }
                        return text.replace(search, replaceWith);
                    }
                    static round(num, decimals) {
                        var exp = Math.pow(10, decimals);
                        return (Math.round(num * exp) / exp);
                    }
                    static equals(total, ids) {
                        if (total <= ids.length) {
                            return ids.splice(0, total);
                        }
                        var temp = new Array().concat(ids);
                        return temp.concat(Common.equals((total - ids.length), ids));
                    }
                    static mixer(ids) {
                        var toMixer = ids.concat();
                        var pos = 0;
                        for (var i = 0; i < (toMixer.length); i++) {
                            pos = (Math.round(Math.random() * ((toMixer.length - 1) - i))) + i;
                            toMixer.splice(i, 0, toMixer[pos]);
                            toMixer.splice(pos + 1, 1);
                        }
                        return toMixer;
                    }
                    static getYPosition(y) {
                        var yTemp;
                        if (parseInt(y) == 0 && y.length > 1) {
                            switch (y.toUpperCase()) {
                                case "TOP":
                                    yTemp = Application.APP_HEIGHT / 6;
                                    break;
                                case "TOP-MIDDLE":
                                    yTemp = Application.APP_HEIGHT / 4;
                                    break;
                                case "MIDDLE":
                                    yTemp = Application.APP_HEIGHT / 2;
                                    break;
                                case "BOTTOM-MIDDLE":
                                    yTemp = Application.APP_HEIGHT - Application.APP_HEIGHT / 4;
                                    break;
                                case "BOTTOM":
                                    yTemp = Application.APP_HEIGHT - Application.APP_HEIGHT / 6;
                                    break;
                            }
                        }
                        else {
                            yTemp = ~~(parseInt(y));
                        }
                        return yTemp;
                    }
                    static getParams(stringParams) {
                        var i;
                        var z;
                        var params = new Object();
                        var array = stringParams.split(";");
                        for (i = 0; i < array.length; i++) {
                            var tempArray = array[i].split(":");
                            for (z = 0; z < tempArray.length; z++) {
                                params[String(tempArray[0]).concat()] = tempArray[1];
                            }
                        }
                        return params;
                    }
                    static getParamsArrayOfModifiers(stringParams) {
                        var i;
                        var z;
                        var params = new Array();
                        var array = stringParams.split(";");
                        for (i = 0; i < array.length; i++) {
                            var tempArray = array[i].split(":");
                            for (z = 0; z < tempArray.length; z++) {
                                params[i] = new Modifier(String(tempArray[0]).concat(), tempArray[1]);
                            }
                        }
                        return params;
                    }
                    static replaceDataObjects(oData, oToReplace) {
                        for (var prop in oToReplace) {
                            for (var p in oData) {
                                if (String(oToReplace[String(prop)]).substr(0, 1) == "%") {
                                    if (String(oToReplace[String(prop)]).indexOf(String(p)) != -1 && oData[p] != undefined) {
                                        oToReplace[prop] = oData[p];
                                    }
                                }
                            }
                        }
                    }
                    static mouseDisable(canvas) {
                        try {
                            canvas.mouseChildren = false;
                            canvas.mouseEnabled = false;
                        }
                        catch (e) {
                            return;
                        }
                        if (canvas.numChildren == 0) {
                            return;
                        }
                        for (var k = 0; k < canvas.numChildren; k++) {
                            Common.mouseDisable(canvas.getChildAt(k));
                        }
                    }
                    static removeAllChildren(parentChild) {
                        for (var i = 0; i < parentChild.numChildren; ++i) {
                            if (parentChild.getChildAt(i) instanceof PIXI.DisplayObject) {
                                Common.removeAllChildren(parentChild.getChildAt(i));
                            }
                            else {
                                var child = parentChild.getChildAt(i);
                                parentChild.removeChild(child);
                                try {
                                    child.destroy();
                                }
                                catch (e) { }
                                child = null;
                            }
                        }
                        if (parentChild.parent != null) {
                            parentChild.parent.removeChild(parentChild);
                        }
                        try {
                            parentChild.destroy();
                        }
                        catch (e) { }
                        parentChild = null;
                    }
                    static trim(str) {
                        return str.replace(/^\s*(.*?)\s*$/g, "$1");
                    }
                    static fxFadeOut(clip, time = 500, delay = 0, caller = null, nameFunction = null) {
                        var object = new Object();
                        object.clip = clip;
                        object.caller = caller;
                        object.nameFunction = nameFunction;
                        var execTime = Math.round(time / 20);
                        function delayer() {
                            clearInterval(object.intervalDelay);
                            object.interval = setInterval(this.internalAction, execTime, object);
                        }
                        if (delay == 0) {
                            delayer();
                        }
                        else {
                            object.intervalDelay = setInterval(delayer, delay);
                        }
                        function internalAction() {
                            if (arguments[0].clip != null) {
                                arguments[0].clip.alpha -= 0.05;
                                if (arguments[0].clip.alpha <= 0) {
                                    arguments[0].clip.alpha = 0;
                                    if (arguments[0].caller != null) {
                                        arguments[0].caller[arguments[0].nameFunction]();
                                    }
                                    clearInterval(arguments[0].interval);
                                    arguments[0] = null;
                                }
                            }
                            else {
                                clearInterval(arguments[0].interval);
                                arguments[0] = null;
                            }
                        }
                    }
                }
                utils.Common = Common;
            })(utils = soul.utils || (soul.utils = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Common = com.bamtang.soul.utils.Common;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var utils;
            (function (utils) {
                class Interval {
                    constructor(callback, milliseconds, loop = 1, params = null, stop = false) {
                        this.m_time = milliseconds;
                        this.m_callback = callback;
                        this.m_timeElapse = 0;
                        this.m_params = params;
                        this.m_loop = loop;
                        if (this.m_loop < 1) {
                            this.m_loop = 1;
                        }
                        this.m_iniLoop = this.m_loop;
                        this.m_stop = stop;
                    }
                    free() {
                        this.onFinish = null;
                        this.m_callback = null;
                        this.m_params = null;
                    }
                    time() {
                        return this.m_time;
                    }
                    timeElapse() {
                        return this.m_timeElapse;
                    }
                    setTimeElapse(value) {
                        this.m_timeElapse = value;
                    }
                    reset(newTime = 0, newLoop = 1, callback = null, params = null) {
                        if (newTime != 0) {
                            this.m_time = newTime;
                        }
                        if (newLoop != this.m_loop && newLoop > 0) {
                            this.m_loop = newLoop;
                        }
                        if (callback != null) {
                            this.m_callback = callback;
                        }
                        if (params != null) {
                            this.m_params = params;
                        }
                        this.m_timeElapse = 0;
                        this.m_loop = this.m_iniLoop;
                        this.m_isOver = false;
                        this.m_stop = false;
                    }
                    stop() {
                        this.m_stop = true;
                    }
                    resume() {
                        this.m_stop = false;
                    }
                    update(dt) {
                        if (this.m_stop) {
                            return;
                        }
                        if (this.m_isOver == true) {
                            return;
                        }
                        this.m_timeElapse += dt;
                        if (this.m_timeElapse >= this.m_time) {
                            this.m_timeElapse = 0;
                            this.m_loop--;
                            if (this.m_callback != null) {
                                if (this.m_params) {
                                    this.m_callback(this.m_params);
                                }
                                else {
                                    this.m_callback();
                                }
                            }
                            if (this.m_loop == 0) {
                                this.m_isOver = true;
                                if (this.onFinish != null) {
                                    this.onFinish();
                                }
                            }
                        }
                    }
                }
                utils.Interval = Interval;
            })(utils = soul.utils || (soul.utils = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Interval = com.bamtang.soul.utils.Interval;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var utils;
            (function (utils) {
                class JumpControl {
                    constructor(impluse = -45, g = 9.8) {
                        this.onCompleteJump = null;
                        this.onMaxHeightReached = null;
                        this.mVo = impluse;
                        this.mGravity = g;
                        this.mFactorGravity = 1;
                        this.mIsPaused = false;
                        this.mCheckMaxHeight = true;
                        this.mInitVelocity = this.mVo;
                        this.mInitPosition = 0;
                        this.mZ = 0;
                    }
                    get currentHeight() { return this.mZ; }
                    get elapseTime() { return this.mTime; }
                    get gravity() { return this.mGravity; }
                    set gravity(value) { this.mGravity = value; }
                    get isJump() { return this.mIsJump; }
                    set factorGravity(factor) { this.mFactorGravity = factor; }
                    get factorGravity() { return this.mFactorGravity; }
                    setPaused(value) { this.mIsPaused = value; }
                    isPaused() { return this.mIsPaused; }
                    init(initPosition = 0) {
                        this.mZ = 0;
                        this.mTime = 0;
                        this.mIsJump = true;
                        this.mCheckMaxHeight = true;
                        this.mInitPosition = initPosition;
                        this.mNextZ = initPosition;
                    }
                    getInitVelocity() {
                        return this.mVo;
                    }
                    setInitVelocity(vel) {
                        this.mVo = vel;
                        this.mInitVelocity = vel;
                    }
                    applyForceY(impulse) {
                        if (!this.mIsJump) {
                            return false;
                        }
                        this.mInitPosition = this.mNextZ;
                        this.mVo = impulse;
                        this.mTime = 0;
                        return true;
                    }
                    completeJump() {
                        this.mVo = this.mInitVelocity;
                        this.mInitPosition = 0;
                        this.mZ = 0;
                        this.mIsJump = false;
                        if (this.onCompleteJump != null) {
                            this.onCompleteJump();
                        }
                    }
                    update(dt) {
                        if (this.mIsPaused) {
                            return;
                        }
                        if (this.mIsJump) {
                            this.mTime += (dt * 0.011);
                            this.mNextZ = (this.mVo * this.mTime) + ((this.mGravity * this.mFactorGravity * this.mTime * this.mTime) * 0.5) + this.mInitPosition;
                            if (this.mNextZ <= 0) {
                                if (this.mCheckMaxHeight && (this.mNextZ > this.mZ)) {
                                    this.mCheckMaxHeight = false;
                                    if (this.onMaxHeightReached != null) {
                                        this.onMaxHeightReached();
                                    }
                                }
                                this.mZ = this.mNextZ;
                            }
                            else {
                                this.completeJump();
                            }
                        }
                    }
                    free() {
                        this.onCompleteJump = null;
                        this.onMaxHeightReached = null;
                    }
                }
                utils.JumpControl = JumpControl;
            })(utils = soul.utils || (soul.utils = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var JumpControl = com.bamtang.soul.utils.JumpControl;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var utils;
            (function (utils) {
                class LinearMovement extends Movement {
                    constructor(x, y, speed, isLoop = false, isReversible = false) {
                        super(x, y, speed, isLoop, isReversible);
                        this.mAngle = 0;
                        this.mVx = 0;
                        this.mVy = 0;
                        this.mInitX = 0;
                        this.mInitY = 0;
                        this.mEndPointX = 0;
                        this.mEndPointY = 0;
                        this.mToFront = true;
                        this.mMotionLimit = null;
                        this.mMotionLimit = new PIXI.Rectangle();
                        this.m_typeMovement = Movement.TYPE_LINEAR;
                        this.mInitX = this.m_x;
                        this.mInitY = this.m_y;
                    }
                    /*override*/ free() {
                        super.free();
                        this.mMotionLimit = null;
                    }
                    angle() {
                        return this.mAngle;
                    }
                    getLinearVelocityX() {
                        return this.mVx;
                    }
                    getLinearVelocityY() {
                        return this.mVy;
                    }
                    gotoPosition(x, y, newSpeed = 0) {
                        this.mEndPointX = this.m_targetX = x;
                        this.mEndPointY = this.m_targetY = y;
                        var dx = x - this.m_x;
                        var dy = y - this.m_y;
                        if ((dx == 0) && (dy == 0)) {
                            this.onEndMovement();
                            return;
                        }
                        this.settingMotionLimit(this.m_x, this.m_y, dx, dy);
                        if (newSpeed > 0) {
                            this.m_speed = newSpeed;
                        }
                        var distance = Math.sqrt(dx * dx + dy * dy);
                        this.mVx = this.m_speed * (dx / distance);
                        this.mVy = this.m_speed * (dy / distance);
                        this.mAngle = Math.atan2(dy, dx);
                        this.m_state = Movement.ST_MOVEMENT;
                    }
                    gotoRadialPoint(distance, angle, speed = 0) {
                        var targetX = 0;
                        var targetY = 0;
                        if (distance < 0) {
                            Application.error("gotoPosition2: dist " + distance);
                            distance *= -1;
                        }
                        if (distance == 0) {
                            this.onEndMovement();
                            return;
                        }
                        this.mAngle = angle;
                        var dx = distance * Math.cos(this.mAngle);
                        var dy = distance * Math.sin(this.mAngle);
                        this.settingMotionLimit(this.m_x, this.m_y, dx, dy);
                        if (speed > 0) {
                            this.m_speed = speed;
                        }
                        this.mVx = this.m_speed * (dx / distance);
                        this.mVy = this.m_speed * (dy / distance);
                        this.mEndPointX = this.m_targetX = this.m_x + dx;
                        this.mEndPointY = this.m_targetY = this.m_y + dy;
                        this.m_state = Movement.ST_MOVEMENT;
                    }
                    /*override*/ update(dt) {
                        if (this.m_state != Movement.ST_MOVEMENT) {
                            return;
                        }
                        this.m_x += this.mVx * dt;
                        this.m_y += this.mVy * dt;
                        if ((this.m_x < this.mMotionLimit.left) ||
                            (this.m_x > this.mMotionLimit.right) ||
                            ((this.m_y < this.mMotionLimit.top) ||
                                (this.m_y > this.mMotionLimit.bottom))) {
                            this.m_x = this.mEndPointX;
                            this.m_y = this.mEndPointY;
                            if (this.m_isLoop) {
                                if (this.m_isReversible) {
                                    if (this.mToFront) {
                                        this.mEndPointX = this.mInitX;
                                        this.mEndPointY = this.mInitY;
                                    }
                                    else {
                                        this.mEndPointX = this.m_targetX;
                                        this.mEndPointY = this.m_targetY;
                                    }
                                    this.mToFront = !this.mToFront;
                                    this.mVx *= -1;
                                    this.mVy *= -1;
                                }
                                else {
                                    this.m_x = this.mInitX;
                                    this.m_y = this.mInitY;
                                }
                                this.onCycleEnd();
                            }
                            else {
                                this.onEndMovement();
                            }
                        }
                    }
                    settingMotionLimit(x, y, dx, dy) {
                        var dxi = ~~(dx);
                        var dyi = ~~(dy);
                        this.mMotionLimit.x = ((dx >= 0) ? x : x + dx);
                        this.mMotionLimit.y = ((dy >= 0) ? y : y + dy);
                        this.mMotionLimit.width = ((dx >= 0) ? dx : -dx);
                        this.mMotionLimit.height = ((dy >= 0) ? dy : -dy);
                    }
                }
                utils.LinearMovement = LinearMovement;
            })(utils = soul.utils || (soul.utils = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var LinearMovement = com.bamtang.soul.utils.LinearMovement;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var utils;
            (function (utils) {
                class Localizer {
                    static localizeTextField(targetTextField, textConfig, addText = "", addi = "") {

                        if (textConfig != undefined && textConfig != null && textConfig.length > 0) {
                            textConfig = utils.Common.replaceIn(textConfig, "<br/>", "\n");
                            textConfig = utils.Common.replaceIn(textConfig, "<br>", "\n");
                        }
                        if (textConfig == "undefined" || textConfig == undefined) textConfig = "";
                        
                        if (targetTextField.textField != undefined) {
                            //console.log("localiza", textConfig, "add", addText, "type", addi, targetTextField.textField);
                            targetTextField.textField.style.fontFamily = "Fred Fredburger W04 Regular";
                            targetTextField.textField.text = textConfig.toString() + addText;
                            if (Number.isFinite(targetTextField.textField.style.fontSize)) {
                                var fontres = targetTextField.textField.style.fontSize;
                                if (targetTextField.textField.style.fontSize_ == undefined) {
                                    targetTextField.textField.style.fontSize_ = fontres;
                                }
                                targetTextField.textField.style.fontSize = targetTextField.textField.style.fontSize_ * 2;
                                targetTextField.textField.scale.x = 0.5;
                                targetTextField.textField.scale.y = 0.5;
                            }
                            var ignr = ["TXT_MM", "MSG_HELP_KEY"];
                            if (targetTextField.textField.style.fill != "#000000") {
                                targetTextField.textField.style.strokeThickness = 2 * 2;
                            }
                            for (var i in ignr)
                                if (addi.indexOf(ignr[i]) > -1) {
                                    targetTextField.textField.style.strokeThickness = 0;
                                }
                            if (addi.indexOf("TXT_MM") > -1 || addi.indexOf("TXT_MODE") > -1) {
                                if (textConfig != "PLAY")
                                    targetTextField.textField.y += 10;
                            }
                            if (addi.indexOf("MSG_HELP") > -1) {
                                targetTextField.textField.y += 5;
                            }
                            if (addi.indexOf("TXT_HUD_NUMBER") > -1) {
                                targetTextField.textField.style.stroke = "#ffffff";
                                targetTextField.textField.style.strokeThickness = 6;
                            }
                            if (addi.indexOf("TXT_NAME_ENEMY") > -1) {
                                targetTextField.textField.style.stroke = "#b10000";
                                targetTextField.textField.style.strokeThickness = 6;
                            }
                            if (addi.indexOf("TXT_HUD_NUMBER_COMBO") > -1 || addi.indexOf("TXT_HUD_COMBO") > -1) {
                                targetTextField.textField.style.stroke = "#013220";
                                targetTextField.textField.style.strokeThickness = 12;
                            }
                            if (addi.indexOf("TXT_COMBO") > -1) {
                                targetTextField.textField.style.stroke = "#ffffff";
                                targetTextField.textField.style.strokeThickness = 12;
                            }
                        }
                        return targetTextField;
                    }
                }
                utils.Localizer = Localizer;
            })(utils = soul.utils || (soul.utils = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var Localizer = com.bamtang.soul.utils.Localizer;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var utils;
            (function (utils) {
                class ParametricParabolicMovement {
                    constructor(initX = 0, initY = 0, finalX = 0, finalY = 0, gravity = ParametricParabolicMovement.STD_GRAVITY, speed = ParametricParabolicMovement.STD_SPEED) {
                        this.m_initX = 0;
                        this.m_initY = 0;
                        this.m_finalX = 0;
                        this.m_finalY = 0;
                        this.m_gravity = 0;
                        this.m_currentTime = 0;
                        this.m_finalTime = 0;
                        this.m_dx = 0;
                        this.m_vx = 0;
                        this.m_dy = 0;
                        this.m_vy = 0;
                        this.m_speed = 0;
                        this.m_rx = 0;
                        this.m_ry = 0;
                        this.m_finish = false;
                        this.m_endCallback = null;
                        this.m_currentTime = 0;
                        this.m_finish = false;
                        this.m_speed = speed;
                        this.m_gravity = gravity;
                        this.m_initX = initX;
                        this.m_initY = initY;
                        this.m_finalX = finalX;
                        this.m_finalY = finalY;
                        this.m_dx = this.m_finalX - this.m_initX;
                        this.m_dy = this.m_finalY - this.m_initY;
                        this.m_finalTime = ParametricParabolicMovement.STD_FINAL_TIME;
                        this.m_vx = this.m_dx / this.m_finalTime;
                        this.m_vy = (this.m_dy - this.m_gravity * this.m_finalTime * (this.m_finalTime >> 1)) / this.m_finalTime;
                        this.m_rx = this.m_initX;
                        this.m_ry = this.m_initY;
                    }
                    free() {
                        this.m_endCallback = null;
                    }
                    x() {
                        return this.m_rx;
                    }
                    y() {
                        return this.m_ry;
                    }
                    set endCallback(func) {
                        this.m_endCallback = func.bind(this);
                    }
                    update(dt) {
                        if (!this.m_finish) {
                            this.m_rx = this.m_initX + this.m_currentTime * this.m_vx;
                            this.m_ry = this.m_initY + this.m_currentTime * this.m_vy + this.m_gravity * this.m_currentTime * this.m_currentTime / 2;
                        }
                        if (this.m_currentTime >= this.m_finalTime) {
                            this.m_currentTime = this.m_finalTime;
                            this.m_finish = true;
                            this.m_rx = this.m_finalX;
                            this.m_ry = this.m_finalY;
                            if (this.m_endCallback != null) {
                                this.m_endCallback(this);
                            }
                        }
                        else {
                            this.m_currentTime += this.m_speed * (dt << 1);
                        }
                    }
                }
                ParametricParabolicMovement.STD_SPEED = 0.3;
                ParametricParabolicMovement.STD_GRAVITY = 0.05;
                ParametricParabolicMovement.STD_FINAL_TIME = 100;
                utils.ParametricParabolicMovement = ParametricParabolicMovement;
            })(utils = soul.utils || (soul.utils = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var ParametricParabolicMovement = com.bamtang.soul.utils.ParametricParabolicMovement;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var utils;
            (function (utils) {
                class TintColor {
                    constructor(r = 1, g = 1, b = 1, a = 1) {
                        this.r = 1;
                        this.g = 1;
                        this.b = 1;
                        this.a = 1;
                        this.r = r;
                        this.g = g;
                        this.b = b;
                        this.a = a;
                    }
                }
                utils.TintColor = TintColor;
            })(utils = soul.utils || (soul.utils = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var TintColor = com.bamtang.soul.utils.TintColor;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var utils;
            (function (utils) {
                class TintInterval {
                    constructor(clip, duration, frecuency, ...colors) {
                        this.m_clip = clip;
                        this.m_timeDuration = duration;
                        this.m_timeFrecuency = frecuency;
                        this.m_colors = colors;
                        this.m_matrixToChange = new Array();
                        this.m_matrixToChange = [1, 0, 0, 0, 0,
                            0, 1, 0, 0, 0,
                            0, 0, 1, 0, 0,
                            0, 0, 0, 1, 0];
                    }
                    free() {
                        this.onFinish = null;
                        this.m_clip = null;
                        this.m_newColorMatrixFilter = null;
                        this.m_colors = null;
                        this.m_matrixToChange = null;
                    }
                    start(duration = 0, frecuency = 0) {
                        if (duration != 0) {
                            this.m_timeDuration = duration;
                        }
                        if (frecuency != 0) {
                            this.m_timeFrecuency = frecuency;
                        }
                        this.m_start = true;
                        this.m_timeElapse = 0;
                        this.m_timeFrecuencyElapse = 0;
                        this.change();
                    }
                    setColors(...colors) {
                        this.m_colors = colors;
                    }
                    setClip(clip) {
                        this.m_clip = clip;
                    }
                    update(dt) {
                        if (!this.m_start) {
                            return;
                        }
                        this.m_timeElapse += dt;
                        this.m_timeFrecuencyElapse += dt;
                        if (this.m_timeFrecuencyElapse >= this.m_timeFrecuency) {
                            this.change();
                            this.m_timeFrecuencyElapse = 0;
                        }
                        if (this.m_timeElapse >= this.m_timeDuration) {
                            this.m_start = false;
                            this.m_indexColor = 0;
                            this.change();
                            if (this.onFinish != null) {
                                this.onFinish();
                            }
                        }
                    }
                    change() {
                        if (this.m_clip) { /*
                            this.m_matrixToChange[0]  = this.TintColor(this.m_colors[this.m_indexColor]).r;
                            this.m_matrixToChange[6]  = this.TintColor(this.m_colors[this.m_indexColor]).g;
                            this.m_matrixToChange[12] = this.TintColor(this.m_colors[this.m_indexColor]).b;
                            this.m_matrixToChange[18] = this.TintColor(this.m_colors[this.m_indexColor]).a;
                            this.m_newColorMatrixFilter = new PIXI.filters.ColorMatrixFilter(this.m_matrixToChange);*/
                            //this.m_clip.filters = [this.m_newColorMatrixFilter];
                        }
                        this.m_indexColor++;
                        if (this.m_indexColor >= this.m_colors.length) {
                            this.m_indexColor = 0;
                        }
                    }
                }
                utils.TintInterval = TintInterval;
            })(utils = soul.utils || (soul.utils = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var TintInterval = com.bamtang.soul.utils.TintInterval;
var com;
(function (com) {
    var bamtang;
    (function (bamtang) {
        var soul;
        (function (soul) {
            var utils;
            (function (utils) {
                class TouchControl {
                    constructor() {
                        this.m_maxTouch = 2;
                        this.m_timeReset = 300;
                    }
                    sense(id = 0) {
                        if (this.m_lock) {
                            return;
                        }
                        this.m_counterTouch++;
                        this.m_lock = true;
                        this.m_currentTime = 0;
                        if (this.m_counterTouch >= this.m_maxTouch) {
                            if (this.m_lastId == id) {
                                if (this.onActiveAction != null) {
                                    this.onActiveAction();
                                }
                                this.m_counterTouch = 0;
                            }
                            else {
                                this.m_counterTouch = 1;
                            }
                        }
                        this.m_lastId = id;
                    }
                    unlock() {
                        this.m_lock = false;
                    }
                    reset() {
                        this.m_currentTime = 0;
                        this.m_counterTouch = 0;
                    }
                    update(dt) {
                        this.m_currentTime += dt;
                        if (this.m_currentTime > this.m_timeReset) {
                            this.m_currentTime = 0;
                            this.m_counterTouch = 0;
                        }
                    }
                }
                utils.TouchControl = TouchControl;
            })(utils = soul.utils || (soul.utils = {}));
        })(soul = bamtang.soul || (bamtang.soul = {}));
    })(bamtang = com.bamtang || (com.bamtang = {}));
})(com || (com = {}));
var TouchControl = com.bamtang.soul.utils.TouchControl;
