(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var AudioParams       = require("./audio/AudioParams");
var BackgroundScreen  = require('./screens/BackgroundScreen');
var Common            = require('./Common');
var DressupScreen     = require('./screens/DressupScreen');
var PauseOverlay      = require('./overlays/PauseOverlay');
var PhotoScreen       = require('./screens/PhotoScreen');
var TitleScreen       = require('./screens/TitleScreen');


function Application()
{
    this._currentMusic = null;
}
module.exports = Application;

Application.prototype.init = function()
{
    this._generateTextures();
    this.createTitleScreen();

    var params = new AudioParams();
    params.loop = true;
    Common.audio.playSound('sfx_ambient_birdsong_01', params);
};

Application.prototype.createTitleScreen = function()
{
    var screen = new TitleScreen();
    Common.sceneManager.add(screen, this._getTransition());

    screen.signals.requestedMusicPlay.add(this._playMusic, this);
    
    screen.signals.next.addOnce(function(id)
    {
        Common.audio.playSound('sfx_btn_play_start_doorbell_00');
        this.createDressupScreen();
    }, this);

    screen.signals.previous.addOnce(function(id)
    {
        
    }, this);

    screen.signals.guiClick.add(function(id)
    {
        if(id == 'pause')
        {
            this.createPauseOverlay(screen);
        }
    }, this);
    
    Common.currentScreen = screen;
    
    return screen;  
};

Application.prototype.createDressupScreen = function(character)
{
    var screen = new DressupScreen(character);
    Common.sceneManager.add(screen, this._getTransition());

    screen.signals.requestedMusicPlay.add(this._playMusic, this);
    
    screen.signals.next.addOnce(function(id)
    {
        var character = screen.getCharacter();
        this.createBackgroundScreen(character);
    }, this);

    screen.signals.previous.addOnce(function(id)
    {
        
    }, this);

    screen.signals.guiClick.add(function(id)
    {
        if(id == 'pause')
        {
            this.createPauseOverlay(screen);
        }
    }, this);
    
    Common.currentScreen = screen;
    
    return screen; 
};

Application.prototype.createBackgroundScreen = function(character, background)
{
    var screen = new BackgroundScreen(character, background);
    Common.sceneManager.add(screen, this._getTransition());

    screen.signals.requestedMusicPlay.add(this._playMusic, this);
    
    screen.signals.next.addOnce(function(newBackground)
    {
        Common.audio.playSound('sfx_btn_accept_00');
        this.createPhotoScreen(character, newBackground);
    }, this);

    screen.signals.previous.addOnce(function(id)
    {
        Common.audio.playSound('music_restart_00');
        this.createDressupScreen(character);
    }, this);

    screen.signals.guiClick.add(function(id)
    {
        if(id == 'pause')
        {
            this.createPauseOverlay(screen);
        }
        else if(id == 'home')
        {
            this.createTitleScreen();
        }
    }, this);
    
    Common.currentScreen = screen;
    
    return screen;
};

Application.prototype.createPhotoScreen = function(character, background)
{
    var screen = new PhotoScreen(character, background);
    Common.sceneManager.add(screen, this._getTransition());

    screen.signals.requestedMusicPlay.add(this._playMusic, this);
    
    screen.signals.next.addOnce(function(id)
    {
        Common.audio.playSound('sfx_btn_reset_01');
        this.createDressupScreen();
    }, this);

    screen.signals.previous.addOnce(function(state)
    {
        Common.audio.playSound('music_restart_00');
        p3.log(state);
        if(state == 'photo')
            this.createBackgroundScreen(character, background);
        else
            this.createPhotoScreen(character, background);
    }, this);

    screen.signals.guiClick.add(function(id)
    {
        if(id == 'pause')
        {
            this.createPauseOverlay(screen);
        }
        else if(id == 'home')
        {
            this.createTitleScreen();
        }
        else if(id == 'restart')
        {
            this.createBackgroundScreen(character);
        }
    }, this);
    
    Common.currentScreen = screen;
    
    return screen;
};

Application.prototype.createPauseOverlay = function(parentScreen)
{
    if(parentScreen)
    {
        parentScreen.hideGUI();
    }

    var prevMusic = this._currentMusic;

    var screen = new PauseOverlay();
    Common.sceneManager.add(screen, this._getBlankTransition());

    screen.signals.requestedMusicPlay.add(this._playMusic, this);

    screen.signals.guiClick.add(function(id)
    {
        if(id == 'help')
        {
            this.createHelpOverlay(screen);
        }
        else if(id == 'home')
        {
            this.createTitleScreen();
        }
    }, this);
    
    screen.signals.next.addOnce(function(id)
    {
        Common.sceneManager.remove();
        if(parentScreen)
        {
            parentScreen.showGUI();
            this._playMusic(prevMusic);
        }
    }, this);

    screen.signals.previous.addOnce(function(id)
    {

    }, this);

    return screen;
};

Application.prototype._getTransition = function()
{
    var transition = new p3.Transition();
    transition.wait    = false;
    transition.push    = false;
    transition.replace = true;
    
    return transition;
};

Application.prototype._getBlankTransition = function()
{
    var t = new p3.Transition();
    t.replace = false;
    t.push = true;

    return t;
};

Application.prototype._generateTextures = function()
{
    for(var i in Common.colourHexes)
    {
        var g = new PIXI.Graphics();
        g.beginFill(Common.colourHexes[i], 1);
        g.drawRect(0, 0, 2, 2);
        var tmp = Common.renderer.generateTexture(g);
        g.destroy();
        g = null;
        Common.colours[i] = tmp;
    }

    var graphic = new PIXI.Graphics();
    graphic.beginFill(0xFFFFFF);
    graphic.drawRect(0, 0, 200, 100);
    Common.placeHolderButtonBox = Common.renderer.generateTexture(graphic);
};

Application.prototype._playMusic = function(track)
{
    var params = new AudioParams();
    params.loop = true;
    params.fadeIn = 0.5;
    Common.audio.playMusic(track, params);
    this._currentMusic = track;
}

},{"./Common":2,"./audio/AudioParams":7,"./overlays/PauseOverlay":21,"./screens/BackgroundScreen":22,"./screens/DressupScreen":23,"./screens/PhotoScreen":24,"./screens/TitleScreen":27}],2:[function(require,module,exports){

function Common()
{
}
module.exports = Common;

//Stage dimensions
Common.STAGE_WIDTH = 1900;
Common.STAGE_HEIGHT = 768;

//PIXI
Common.view = null;
Common.stage = null;
Common.renderer = null;
Common.isWebGL = false;

//Paths
Common.gameDir = '';
Common.paths = {
	scripts   	: 'scripts/',
	data      	: 'assets/data/',
	images    	: 'assets/images/',
	fonts     	: 'assets/fonts/',
	audio     	: 'assets/audio/',
	particles 	: 'assets/particles/',
	system    	: 'assets/images/system/',
	localisation : 'assets/images/localisation/'
},

//Scene
Common.sceneManager = null;
Common.currentScreen = null;

//Config
Common.config = null;

//Assets
Common.assets = null;

//Audio
Common.audio = null;

//Localisation
Common.language = "en";

//Interaction
Common.input = null;
Common.touch = new PIXI.Point(0, 0);
Common.touching = false;

//Time
Common.delta = null;
Common.fpsMeter = null;
Common.FPS = 60;
Common.frameCount = 0;
Common.paused = false;

//Animation
Common.animator = null;

//Particles
Common.emitter = null;

//Colours
Common.colourHexes = {
	black:0x000000,
	white:0xFFFFFF
}
Common.colours = {};

//Placeholder button
Common.placeHolderButtonBox = null;
Common.placeHolderButtonIcons = {};

//Performance
Common.lowPerformance = true;



/* ___GAME SPECIFIC___ */

Common.tutorialStatesPassed = {clothes:false, scroll:false, categories:false};

Common.savedData = null;




},{}],3:[function(require,module,exports){
var Application      = require("./Application");
var AudioManager     = require("./audio/AudioManager");
var Common           = require('./Common');
var Emitter          = require('./common/Emitter');
var FontLoader       = require('./common/FontLoader');
var Input            = require('./common/Input');
var QueueCalls       = require('./common/QueueCalls');
var PreloaderScreen  = require("./screens/PreloaderScreen");
var SavedData        = require("./SavedData");
    
function Main(width, height, language)
{
    this._width  = width;
    this._height = height;

    this._game   = null;
    this._preloader  = null;
    this._fontLoader = null;

    this._scale = "1x";

    Common.language = language;
}

Main.prototype.init = function()
{
    var params              = new p3.ViewParams();
    params.width            = this._width;
    params.height           = this._height;
    params.holderId         = 'game';
    params.rotateImageUrl   = Common.gameDir + Common.paths.localisation + Common.language + '/rotate_screen_' + Common.language + '.jpg';
    params.rotateImageColor = '#000000';

    PIXI.settings.RETINA_PREFIX = /\_(?=[^_]*$)(.+)x/;

    p3.Device.init(window.bowser);

    if(p3.Device.isMobile)
    {
        p3.log = function(){};
    }
    var isIpad2 = (p3.Device.isIOS && p3.Device.isIpad && window.devicePixelRatio === 1);

    if(p3.Device.isIpadMini || p3.Device.isIpod || isIpad2 || 
       /Android 4/i.test(navigator.userAgent))
    {
        this._scale = '0.5x';
        Common.lowPerformance = true;
    }

    TweenMax.defaultOverwrite = 'none';
    TweenMax.ticker.fps(Common.FPS);
    
    Common.view = new p3.View(params);
    Common.view.signals.ready.addOnce(this.onViewReady, this);

    Common.view.signals.resize.add(this.onCanvasResize, this);
};

Main.prototype.onViewReady = function(canvas)
{
    var isKindle = navigator.userAgent.match(/Kindle|Silk|KFA/) !== null;
    
    var options = {
        view                  : canvas,
        transparent           : isKindle,
        antialias             : false,
        preserveDrawingBuffer : false,
        resolution            : 1
    };
    
    Common.stage = new PIXI.Container();

    if(this._shouldForceCanvas())
    {
        Common.renderer = new PIXI.CanvasRenderer(window.innerWidth, window.innerHeight, options);
    }
    else
    {
        Common.renderer = !p3.Device.isCocoonJS ? 
                            PIXI.autoDetectRenderer(this._width, this._height, options)
                      : 
                            new PIXI.WebGLRenderer(window.innerWidth, window.innerHeight, options);
    }         
    
    Common.isWebGL  = (Common.renderer instanceof PIXI.WebGLRenderer);
    
    if (p3.Device.isCocoonJS)
    {
        Common.stage.scale.x = window.innerHeight / this._height;
        Common.stage.scale.y = window.innerHeight / this._height;
    }

    Common.sceneManager = new p3.SceneManager();
    Common.sceneManager.updateAll = true;
    Common.stage.addChild(Common.sceneManager.view);

    Common.assets   = p3.AssetManager.instance;
    Common.audio    = p3.Button.audio   = new AudioManager();

    Common.input = new Input();
    Common.input.init(Common.stage, canvas);

    Common.animator = new p3.Animator();
    Common.animator.init();

    Common.queueCalls = new QueueCalls();

    Common.emitter = Emitter;

    Common.savedData = new SavedData();

    if(Common.savedData.allTutorialsViewed)
    {
        for(var i in Common.tutorialStatesPassed)
        {
            Common.tutorialStatesPassed[i] = true;
        }
    }

    PIXI.ticker.shared.add(this.update, this);
    
    this.loadPreloader();

    window.delay = function(callback, delay, scope)
    {
        return Common.animator.setTimeout(callback, delay, scope);
    };
    window.delayarg = function(callback, args, delay, scope)
    {
        Common.animator.setTimeout(function() {
            callback.call(scope, args);
        }, delay, this);
    };
}

Main.prototype.onLoadingProgress = function(event)
{
    this._preloader.loaded = event.progress;
};

Main.prototype.onLoadingCompleted = function()
{
    this._preloader.loadedPercentage = 100;
    this._preloader.animateOut(null, this);
    this._preloader = null;

    Common.assets.signals.progress.removeAll();
    Common.assets.signals.complete.removeAll();

    console.log('onLoadingCompleted', this._fontLoader.hasLoaded);
    if(this._fontLoader.hasLoaded)
    {
        this.startGame();
    } 
};

Main.prototype.onFontLoaded = function()
{
    console.log('onFontLoaded');
    if(this._preloader.loadedPercentage == 100)
    {
        this.startGame();
    }
}

Main.prototype.loadPreloader = function()
{
    var files = [
        { name: 'preloader',        url: Common.gameDir + Common.paths.images + '1x/preloader_1x.json' },
        { name: 'clothes_config',   url: Common.gameDir + Common.paths.data + 'clothes.json' },
        { name: 'strings_config',    url: Common.gameDir + Common.paths.data + 'strings.json' },
        { name: 'strings_formatting_config',    url: Common.gameDir + Common.paths.data + 'strings_formatting.json' }
    ];
    
    if(files.length > 0)
    {
        Common.assets.addFiles(files);
        Common.assets.signals.complete.addOnce(this.loadAssets, this);
        Common.assets.load();
    }
    else
    {
        this.loadAssets();
    }

    this._fontLoader = new FontLoader('Windsor Elongated');
    this._fontLoader.signals.loaded.addOnce(this.onFontLoaded, this);
    this._fontLoader.init();
};

Main.prototype.loadAssets = function()
{
    var files = [
        { name: 'dorothy_anim',     url: Common.gameDir + Common.paths.images + 'spine/dorothy.json' },
        { name: 'bg_game_001',      url: Common.gameDir + Common.paths.images + this._scale + '/bg_game_001_' + this._scale + '.jpg' },
        { name: 'bg_game_002',      url: Common.gameDir + Common.paths.images + this._scale + '/bg_game_002_' + this._scale + '.jpg' },
        { name: 'bg_game_003',      url: Common.gameDir + Common.paths.images + this._scale + '/bg_game_003_' + this._scale + '.jpg' },
        { name: 'bg_game_004',      url: Common.gameDir + Common.paths.images + this._scale + '/bg_game_004_' + this._scale + '.jpg' },
        { name: 'bg_game_005',      url: Common.gameDir + Common.paths.images + this._scale + '/bg_game_005_' + this._scale + '.jpg' },
        { name: 'bg_game_006',      url: Common.gameDir + Common.paths.images + this._scale + '/bg_game_006_' + this._scale + '.jpg' },
        { name: 'bg_game_007',      url: Common.gameDir + Common.paths.images + this._scale + '/bg_game_007_' + this._scale + '.jpg' },
        { name: 'bg_game_008',      url: Common.gameDir + Common.paths.images + this._scale + '/bg_game_008_' + this._scale + '.jpg' },
        { name: 'bg_game_009',      url: Common.gameDir + Common.paths.images + this._scale + '/bg_game_009_' + this._scale + '.jpg' },
        { name: 'bg_game_010',      url: Common.gameDir + Common.paths.images + this._scale + '/bg_game_010_' + this._scale + '.jpg' },
        { name: 'bg_game_011',      url: Common.gameDir + Common.paths.images + this._scale + '/bg_game_011_' + this._scale + '.jpg' },
        { name: 'bg_game_012',      url: Common.gameDir + Common.paths.images + this._scale + '/bg_game_012_' + this._scale + '.jpg' },
        { name: 'bg_game_013',      url: Common.gameDir + Common.paths.images + this._scale + '/bg_game_013_' + this._scale + '.jpg' },
        { name: 'bg_splash',        url: Common.gameDir + Common.paths.images + this._scale + '/bg_splash_' + this._scale + '.jpg' },
        { name: 'bg_photo',         url: Common.gameDir + Common.paths.images + this._scale + '/bg_photo_' + this._scale + '.jpg' },
        { name: 'buttons',          url: Common.gameDir + Common.paths.images + this._scale + '/buttons_' + this._scale + '.json' },
        { name: 'clothes',          url: Common.gameDir + Common.paths.images + this._scale + '/clothes_' + this._scale + '.json' },
        { name: 'pose',             url: Common.gameDir + Common.paths.images + this._scale + '/pose_' + this._scale + '.json' },
        { name: 'ui',               url: Common.gameDir + Common.paths.images + this._scale + '/ui_' + this._scale + '.json' },

        { name: 'title',            url: Common.gameDir + Common.paths.images + 'localisation/' + Common.language + '/title_' + Common.language + '.png' },
        { name: 'paused',           url: Common.gameDir + Common.paths.images + 'localisation/' + Common.language + '/paused_' + Common.language + '.png' },
        { name: 'areyousure',       url: Common.gameDir + Common.paths.images + 'localisation/' + Common.language + '/areyousure_' + Common.language + '.png' },
        { name: 'windsor_font',     url: Common.gameDir + Common.paths.fonts + 'windsor_45.xml' },
        { name: 'windsor_ar_font',  url: Common.gameDir + Common.paths.fonts + 'windsor_ar.xml' },
        
        { name: 'particle_emitter_starburst_orange_00', url: Common.gameDir + Common.paths.particles + 'particle_emitter_starburst_orange_00.json' },
        { name: 'particle_emitter_starburst_pink_00', url: Common.gameDir + Common.paths.particles + 'particle_emitter_starburst_pink_00.json' },
        { name: 'particle_emitter_starburst_yellow_00', url: Common.gameDir + Common.paths.particles + 'particle_emitter_starburst_yellow_00.json' },
        { name: 'particle_emitter_starburst_blue_00', url: Common.gameDir + Common.paths.particles + 'particle_emitter_starburst_blue_00.json' },
        { name: 'particle_emitter_starburst_green_00', url: Common.gameDir + Common.paths.particles + 'particle_emitter_starburst_green_00.json' },
    ];

    var sounds = [
        'music_ambient_wardrobe_loop_00',
        'music_camera_loop_00',
        'music_dorothy_complete_00',
        'music_lion_complete_00',
        'music_menu_loop_01',
        'music_pausehelp_menu_00',
        'music_restart_00',
        'music_scarecrow_complete_00',
        'music_stab_change_pose_00',
        'music_stab_change_pose_01',
        'music_stab_change_pose_02',
        'music_stab_change_pose_03',
        'music_tinman_complete_00',
        'music_witch_complete_00',
        'sfx_ambient_birdsong_01',
        'sfx_attach_item_lion_00',
        'sfx_attach_item_scarecrow_00',
        'sfx_attach_item_tinman_00',
        'sfx_background_swipe_00',
        'sfx_btn_accept_00',
        'sfx_btn_change_camera_pose_00',
        'sfx_btn_play_start_doorbell_00',
        'sfx_btn_reset_01',
        'sfx_costume_accept_00',
        'sfx_dorothy_click_heals_00',
        'sfx_dorothy_disappear_00',
        'sfx_dorothy_land_00',
        'sfx_dorothy_skid_in_00',
        'sfx_lion_complete_00',
        'sfx_magic_sparkles_00',
        'sfx_outfit_nome_king_complete_00',
        'sfx_outfit_queen_complete_00',
        'sfx_outfit_scarecrow_complete_00',
        'sfx_outfit_tinman_complete_00',
        'sfx_outfit_witch_complete_00',
        'sfx_scroll_wardrobe_loop_01',
        'sfx_switch_hat_00',
        'sfx_switch_shoes_00',
        'sfx_switch_top_01',
        'sfx_switch_trousers_01',
        'sfx_take_final_photo',
        'sfx_toto_bark_00',
        'sfx_wardrobe_appear_00',
        'sfx_wardrobe_change_draw_01'
    ];

    Common.config = {};
    Common.config.clothes = Common.assets.getJSON('clothes_config');
    Common.config.strings = Common.assets.getJSON('strings_config');
    Common.config.strings_formatting = Common.assets.getJSON('strings_formatting_config');
    
    for(var i in Common.config)
    {
        if(Common.config[i] == null)
        {
            console.warn("CONFIG: " + i + " IS NULL");
        }
    }

    if (files.length > 0)
    {
        this._preloader = new PreloaderScreen();
        Common.sceneManager.add(this._preloader);
        
        Common.assets.addFiles(files);
        Common.assets.signals.progress.add(this.onLoadingProgress, this);
        this._preloader.signals.loadComplete.addOnce(this.onLoadingCompleted, this);
        Common.assets.load();

        Common.audio.addSounds(sounds, ['.ogg', '.mp3', '.m4a'],  Common.gameDir + Common.paths.audio);
    }
    else
    {
        this.startGame();
    }
};

Main.prototype.startGame = function()
{
    Common.animator.setTimeout(function(){
        this._game = new Application();
        this._game.init();
    }, 1, this);
};

Main.prototype.update = function(delta)
{
    Common.delta = delta / PIXI.settings.TARGET_FPMS / 1000;
    p3.Timestep.deltaTime = Common.delta;

    if (!Common.view.isCorrectOrientation()) {
        return;
    }

    Common.frameCount++;
    Common.sceneManager.update();
    Common.animator.update();
    Common.queueCalls.update();

    Common.renderer.render(Common.stage);
};

Main.prototype.onCanvasResize = function(correct)
{
    if (correct)
    {
        Common.renderer.resize(p3.View.width, p3.View.height);
        if (Common.sceneManager)
        {
            Common.sceneManager.resize();
        }
    }
};

Main.prototype._shouldForceCanvas = function()
{
    var androidVersion = -1;

    var ua = (ua || navigator.userAgent).toLowerCase(); 
    var match = ua.match(/android\s([0-9\.]*)/);
    if(match) 
    {
        androidVersion = parseFloat(match[1]);
    }
     
    var isAndroid = ( androidVersion >-1 ) ? true : false;
    var lenovoRes = (window.screen.width / window.screen.height == 1024 / 600 ) ;
     
    // Tab 2
    // Mozilla/5.0 (Linux; Android 4.4.2; Lenovo TAB 2 A7-30F Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.84 Safari/537.36
     
    // Tab 3 - from web
    // Mozilla/5.0 (Linux; Android 6.0.1; Lenovo TB-8703F Build/MMB29M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
     
    // Tab 3 - from Testology
    // Mozilla/5.0 (Linux; Android 5.0.1; Lenovo TB3-710F Build/LRX21M)
     
    return isAndroid && lenovoRes && navigator.userAgent.indexOf('Lenovo') > -1;
}

module.exports = Main;
},{"./Application":1,"./Common":2,"./SavedData":4,"./audio/AudioManager":6,"./common/Emitter":8,"./common/FontLoader":9,"./common/Input":10,"./common/QueueCalls":11,"./screens/PreloaderScreen":25}],4:[function(require,module,exports){

var Common          = require("./Common");

//===================================================
// CONSTRUCTOR
//===================================================

function SavedData()
{
    this.SAVE_NAME = "oz_dressup";
    this.SAVE_VERSION = "0.0.5"; //remember to update this in image.html!
    this.SAVE_SEED = "x5k0Eo6R177mUkb";

    this.allTutorialsViewed = false;
    this.exportedImage = null;

    this.init();
}
module.exports = SavedData;

//===================================================
// PUBLIC METHODS
//===================================================

SavedData.prototype.init = function()
{
    if (!window.localStorage[this.SAVE_NAME + "_" + this.SAVE_VERSION])
    {
        console.log('reset');
        this.reset();
        this.save();
    }
    else
    {
        console.log('load');    
        this.load();
    }

};

SavedData.prototype.reset = function()
{
    this.allTutorialsViewed = false;
    this.exportedImage = null;
};


SavedData.prototype.load = function()
{
    var data = window.localStorage[this.SAVE_NAME + "_" + this.SAVE_VERSION];
    data = JSON.parse(data);

    var json = JSON.stringify(
    {
        allTutorialsViewed: data.allTutorialsViewed,
        exportedImage: data.exportedImage
    });

    var hash = md5(json + this.SAVE_SEED);
    if (hash != data.hash)
    {
        window.localStorage.removeItem(this.SAVE_NAME + "_" + this.SAVE_VERSION);
        location.reload();
    }
    else
    {
        this.allTutorialsViewed = data.allTutorialsViewed;
        this.exportedImage = data.exportedImage; 
    }
};

SavedData.prototype.save = function()
{
    console.log('save');
    var data = {};
    data.allTutorialsViewed = this.allTutorialsViewed;
    data.exportedImage = this.exportedImage;
    
    var json = JSON.stringify(data);
    data.hash = md5(json + this.SAVE_SEED);

    window.localStorage[this.SAVE_NAME + "_" + this.SAVE_VERSION] = JSON.stringify(data);    
};




//===================================================
// PRIVATE METHODS
//===================================================


//===================================================
// EVENTS
//===================================================

//===================================================
// GETTERS/SETTERS
//===================================================


//===================================================
},{"./Common":2}],5:[function(require,module,exports){
/**
 *  Audio
 *
 *  Created by Legman on 12/09/2016.
 *
 */

/**
 * @constructor
 */
function Audio() {
    /**
     * @type {number}
     */
    this.id = -1;

    /**
     * @type {Howl}
     */
    this.howl = null;
}
module.exports = Audio;

Audio.prototype.stop = function() {
    this.howl.stop(this.id);
};

},{}],6:[function(require,module,exports){
/**
 *  AudioManager
 *
 *  Created by Legman on 25/02/2016.
 *
 */

var Audio                   = require("./Audio");
var AudioParams             = require("./AudioParams");

function AudioManager() {
    /**
     * @type {object}
     * @private
     */
    this._cache = {};

    /**
     * @type {Howl}
     * @private
     */
    this._music = null;

    /**
     * @type {boolean}
     * @private
     */
    this._isMuted = false;

    var hidden;
    "undefined" != typeof document.hidden ? (hidden = "hidden",
        this.visibilityChange = "visibilitychange")     : "undefined" != typeof document.mozHidden  ? (hidden = "mozHidden",
        this.visibilityChange = "mozvisibilitychange")  : "undefined" != typeof document.msHidden   ? (hidden = "msHidden",
        this.visibilityChange = "msvisibilitychange")   : "undefined" != typeof document.webkitHidden && (hidden = "webkitHidden",
        this.visibilityChange = "webkitvisibilitychange");

    document.addEventListener(this.visibilityChange, function(){
        document[hidden] ? Howler.volume(0) : Howler.volume(1);
    }, false);

}
module.exports = AudioManager;

/**
 * @param {!Array.<string>} sounds
 * @param {!Array.<string>} extensions
 * @param {string=} basePath
 */
AudioManager.prototype.addSounds = function(sounds, extensions, basePath) {
    basePath = basePath || "";

    var howl, name, url, urls, extension, i, j;
    for (i = 0; i < sounds.length; ++ i) {
        url     = basePath + sounds[i];
        url     = url.split("/");
        name    = url[url.length - 1];

        urls = [];
        for (j = 0; j < extensions.length; ++ j) {
            extension = extensions[j];
            urls.push(url.join("/") + extension);
        }
        howl = new Howl({
            src: urls,
            volume: 1.0,
            loop: false,
            autoplay: false
        });
        howl.name = name;
        this._cache[name] = howl;
    }
};

/**
 * @param {!Array.<string>} name
 * @param {!Array.<string>} sprite
 * @param {!Array.<string>} extensions
 * @param {string=} basePath
 */
AudioManager.prototype.addSoundSprite = function(name, sprite, extensions, basePath) {
    basePath = basePath || "";

    var extension;

    var url = basePath + name;
    url = url.split("/");

    var urls = [];
    for (var i = 0; i < extensions.length; ++ i) {
        extension = extensions[i];
        urls.push(url.join("/") + extension);
    }

    var howl = new Howl({
        src: urls,
        sprite: sprite,
        volume: 1,
        loop: false,
        autoplay: false
    });
    for (var key in sprite) {
        if (sprite.hasOwnProperty(key)) {
            this._cache[key] = howl;
        }
    }
};

/**
 * @param {!Array.<string>} sounds
 */
AudioManager.prototype.removeSounds = function(sounds) {
    var name, n, howl;
    for (var i = 0; i < sounds.length; ++ i) {
        name = sounds[i];
        for (n in this._cache) {
            if (this._cache.hasOwnProperty(key)) {
                howl = this._cache[key];
                if (howl.name == n) {
                    howl.unload();
                    delete this._cache[name];
                    break;
                }
            }
        }
    }
};

/**
 * @param {!string | Array.<string>} name
 * @param {AudioParams=} params
 * @returns {Audio}
 */
AudioManager.prototype.playSound = function(name, params) {

    params = params || new AudioParams();

    var id = -1;

    if (typeof name !== "string") {
        name = name[Math.floor(Math.random() * name.length)];
    }

    var howl = this._cache[name];
    if (!howl) {
        console.warn("Could not find sound - " + name);
        return id;
    }

    id = howl.play();//howl._sprite ? name : 0);
    howl.volume(params.volume, id);
    howl.loop(params.loop, id);

    var audio = new Audio();
    audio.id = id;
    audio.howl = howl;
    return audio;
};

/**
 * @param {!string | Array.<string>} name
 * @param {AudioParams=} params
 * @returns {Audio}
 */
AudioManager.prototype.playMusic = function(name, params) {
    params = params || new AudioParams();

    var id = -1;

    if (typeof name !== "string") {
        name = name[Math.floor(Math.random() * name.length)];
    }

    // skip if no change
    if (this._music && this._music.howl.name == name) {
        return this._music;
    }

    var howl = this._cache[name];
    if (!howl) {
        console.warn("Could not find music - " + name);
        return null;
    }

    // callback
    howl.__onend = function() {
        params.callback && params.callback.call(params.scope);
    };
    howl.on("end", howl.__onend);

    if (p3.Device && p3.Device.isAndroidStockBrowser) {
        howl.buffer = true;
    }

    id = howl.play();
    howl.volume(params.volume, id);
    howl.loop(true, id);

    var audio = new Audio();
    audio.id = id;
    audio.howl = howl;

    if (params.fadeIn > 0.0) {
        if (this._music) {
            this.fadeOut(this._music, params.fadeIn);
        }
        this.fadeIn(audio, params.fadeIn);
    }

    this._music = audio;
    return audio;
};

/**
 * @param {!string} name
 * @param {number=} id
 * @deprecated
 */
AudioManager.prototype.stopSound = function(name, id) {
    var howl = this._cache[name];
    !howl && console.warn("Could not find sound - " + name);
    howl.stop(id);

    console.warn("'AudioManager.stopSound()' is deprecated. Use 'Audio.stop()' instead.")
};

AudioManager.prototype.stopMusic = function() {
    if (this._music) {
        this._music.howl.__onend && this._music.howl.off("end", this._music.howl.__onend);
        this._music.howl.stop();
        this._music = null;
    }
};

/**
 * @param {!boolean} value
 */
AudioManager.prototype.mute = function(value) {
    this._isMuted = value;
    if (this._isMuted) {
        Howler.mute(true);
    } else {
        Howler.mute(false);
    }
};

/**
 * @param {!Audio} audio
 * @param {number=} duration
 * @param {function=} callback
 * @param {*=} scope
 */
AudioManager.prototype.fadeIn = function(audio, duration, callback, scope) {
    duration = duration || 1.0;

    var volume = audio.howl.volume(audio.id);
    audio.howl.volume(0.0, audio.id);
    audio.__volume = 0.0;

    TweenMax.killTweensOf(audio);
    TweenMax.to(audio, duration, {
        __volume: volume,
        ease: Power1.easeInOut,
        onUpdate: function() {
            audio.howl.volume(audio.__volume, audio.id);
        },
        onUpdateScope: this,
        onComplete: callback,
        onCompleteParams: [audio],
        onCompleteScope: scope
    });
};

/**
 * @param {!Audio} audio
 * @param {number=} duration
 * @param {function=} callback
 * @param {*=} scope
 */
AudioManager.prototype.fadeOut = function(audio, duration, callback, scope) {
    duration = duration || 1.0;

    audio.__volume = audio.howl.volume(audio.id);

    TweenMax.killTweensOf(audio);
    TweenMax.to(audio, duration, {
        __volume: 0.0,
        ease: Power1.easeInOut,
        onUpdate: function() {
            audio.howl.volume(audio.__volume, audio.id);
        },
        onUpdateScope: this,
        onComplete: callback,
        onCompleteParams: [audio],
        onCompleteScope: scope
    });
};

/**
 * @param {!Audio} audio
 * @param {!*} object
 * @param {!Camera} camera
 * @param {number=} min
 * @param {number=} max
 */
AudioManager.prototype.setAudioPos3D = function(audio, object, camera, min, max) {
    if (p3.Device.isMobile || !p3.Device.bowser["chrome"]) return;

    min = min || 0.0;
    max = max || 320.0;

    var layer = camera.findLayerForObject(object);
    var x = object.x * (1.0 / layer.parallax.x);
    var sign = (x - camera.position.x);
    sign = sign / Math.abs(sign);

    if (sign == -1) x = Math.min(0.0, ((x + min) - camera.position.x) / (max - min));
    else if (sign == 1) x = Math.max(0.0, ((x - min) - camera.position.x) / (max - min));

    audio.howl.pos(x, 0.0, 0.0, audio.id);
};

/**
 * @param {Audio} audio
 * @param {*} object
 * @param {Camera} camera
 * @param {!number} [min]
 * @param {!number} [max]
 * @param {!number} [offset]
 * @param {boolean} [fallback]
 */
AudioManager.prototype.setAudioPosStereo = function(audio, object, camera, min, max, offset, fallback) {
    if (p3.Device.isMobile || !p3.Device.bowser["chrome"]) {
        fallback = true;
    }

    min = min || 0.0;
    max = max || 320.0;
    offset = offset || 0;

    var layer = camera.findLayerForObject(object);
    var x = (object.x + offset) * (1.0 / layer.parallax.x);
    var sign = (x - camera.position.x);
    sign = sign / Math.abs(sign);

    x = Math.max(0.0, Math.abs((x - min) - camera.position.x) / (max));
    x = Math.max(0.0, Math.min(1.0, 1.0 + (1.0 - x)));

    audio.howl.volume(x, audio.id);

    if (fallback) return;

    x = (object.x + offset) * (1.0 / layer.parallax.x);

    if (sign == -1) x = Math.min(0.0, ((x + min) - camera.position.x) / (max - min));
    else if (sign == 1) x = Math.max(0.0, ((x - min) - camera.position.x) / (max - min));

    x = Math.max(-1.0, Math.min(1.0, x));
    audio.howl.stereo(x, audio.id);
};

Object.defineProperty(AudioManager.prototype, "isMute", {
    /**
     * @returns {!boolean}
     */
    get: function() {
        return this._isMuted;
    }
});

},{"./Audio":5,"./AudioParams":7}],7:[function(require,module,exports){
/**
 *  AudioParams
 *
 *  Created by Legman on 25/02/2016.
 *
 */

/**
 * @constructor
 */
function AudioParams() {
    /**
     * @type {number}
     */
    this.volume = 1.0;

    /**
     * @type {boolean}
     */
    this.loop = false;

    /**
     * @type {number}
     */
    this.delay = 0.0;

    /**
     * @type {number}
     */
    this.fadeIn = 0.0;

    /**
     * @type {number}
     */
    this.priority = 0;

    /**
     * @type {function}
     */
    this.callback = null;

    /**
     * @type {*}
     */
    this.scope = window;
}
module.exports = AudioParams;

},{}],8:[function(require,module,exports){

var Common          = require("../Common");

//===================================================
// CONSTRUCTOR
//===================================================

/**
 * @constructor
 */
function Emitter() {
}
module.exports = Emitter;

//===================================================
// PUBLIC METHODS
//===================================================


/**
 * @param {!PIXI.Container} parent
 * @param {!Array<String>} textures
 * @param {!String} json
 * @param {Number=} x
 * @param {Number=} y
 * @param {Number=} removeTime
 * @param {Boolean=} autoEmit
 * @returns {cloudkid.Emitter} emitter
 */
Emitter.add = function(parent, textures, json, x, y, removeTime, autoEmit, destroyTime)
{
    if(autoEmit == undefined) autoEmit = true;
    if(destroyTime == undefined) destroyTime = 1;

    x = x || 0;
    y = y || 0;

    var assetManager = p3.AssetManager.instance;

    for(var i = 0; i < textures.length; i++)
    {
        textures[i] = assetManager.getTexture(textures[i]);
    }    

    var emitter = new PIXI.particles.Emitter(
        parent,
        textures,
        assetManager.getJSON(json)
    );
    if(autoEmit)
        emitter.emit = true;
    else
        emitter.emit = false;

    emitter.updateOwnerPos(x, y);

    Common.animator.add(emitter);

    if(removeTime != null)
    {    
        Common.animator.setTimeout(function(){
            Emitter.destroy(emitter, destroyTime);
        }, removeTime, this);
    }

    return emitter;
};

Emitter.destroy = function(emitter, destroyDelay)
{
    if(emitter != null)
    {    
        destroyDelay = destroyDelay || 0;

        emitter.emit = false;
        Common.animator.setTimeout(function(){
            try{
                Common.animator.remove(emitter);
                emitter.destroy();
            }catch(e){
                //console.log('could not destroy emitter');
            }
        }, destroyDelay, this);
    }
}




//===================================================
// PRIVATE METHODS
//===================================================

//===================================================
// EVENTS
//===================================================

//===================================================
// GETTERS/SETTERS
//===================================================

//===================================================
},{"../Common":2}],9:[function(require,module,exports){
var Common                  = require("../Common");

function FontLoader(font)
{
    this._font = font;
    this._hiddenText = null;

    this.hasLoaded = false;

	PIXI.Container.call(this);

    this.signals = {};
    this.signals.loaded = new signals.Signal();
}
module.exports = FontLoader;
FontLoader.prototype = Object.create(PIXI.Container.prototype);
FontLoader.prototype.constructor = FontLoader;


//===================================================
// PUBLIC METHODS
//===================================================

FontLoader.prototype.init = function()
{
    this._hiddenText = new PIXI.Text('LOADING', {
            font:"60px " + this._font
        });
    this.addChild(this._hiddenText);

    Common.animator.setTimeout(this.checkLoaded, .5, this);
};

FontLoader.prototype.destroy = function()
{

};

FontLoader.prototype.update = function()
{
	
};

FontLoader.prototype.checkLoaded = function()
{
    var text = new PIXI.Text('LOADING', {
            font:"60px " + this._font
        });
    if(text.width != this._hiddenText.width || text.height != this._hiddenText.height)
    {
        this.hasLoaded = true;
        this.signals.loaded.dispatch();
    }
    else
    {
        Common.animator.setTimeout(this.checkLoaded, .5, this);
    }
}



//===================================================
// PRIVATE METHODS
//===================================================


//===================================================
// EVENTS
//===================================================


//===================================================
// GETTERS/SETTERS
//===================================================

//===================================================

},{"../Common":2}],10:[function(require,module,exports){

var Common          = require("../Common");

/**
 *  Input
 *
 *  Created by Legman on 8/10/2015.
 *
 */

"use strict";

/**
 * @constructor
 */
function Input() {
    /**
     * @type {boolean}
     */
    this.isKeyUp = false;

    /**
     * @type {boolean}
     */
    this.isKeyLeft = false;

    /**
     * @type {boolean}
     */
    this.isKeyRight = false;

    /**
     * @type {boolean}
     */
    this.isKeyDown = false;

    /**
     * @type {boolean}
     */
    this.isKeyFire = false;

    /**
     * @type {boolean}
     */
    this.isKeyAltFire = false;

    /**
     * @type {PIXI.Point}
     */
    this.touch = new PIXI.Point();

    /**
     * @type {boolean}
     */
    this.isTouch = false;

    /**
     * @type {*}
     */
    this.signals                = {};
    this.signals.mouseMove      = new signals.Signal();
    this.signals.mouseDown      = new signals.Signal();
    this.signals.mouseUp        = new signals.Signal();
    this.signals.mouseOut       = new signals.Signal();
    this.signals.mouseClick     = new signals.Signal();

    this.signals.keyDown        = new signals.Signal();
    this.signals.keyUp          = new signals.Signal();

    /**
     * @type {null}
     * @private
     */
    this._stage = null;
}
module.exports = Input;

/**
 * @type {*}
 */
Input.keys = {};

/**
 * @type {number}
 * @static
 * @const
 */
Input.keys.W = 87;

/**
 * @type {number}
 * @static
 * @const
 */
Input.keys.A = 65;

/**
 * @type {number}
 * @static
 * @const
 */
Input.keys.S = 83;

/**
 * @type {number}
 * @static
 * @const
 */
Input.keys.D = 68;

/**
 * @type {number}
 * @static
 * @const
 */
Input.keys.Z = 90;

/**
 * @type {number}
 * @static
 * @const
 */
Input.keys.X = 88;

/**
 * @type {number}
 * @static
 * @const
 */
Input.keys.C = 67;

/**
 * @type {number}
 * @static
 * @const
 */
Input.keys.SPACE = 32;

/**
 * @type {number}
 * @static
 * @const
 */
Input.keys.LEFT = 37;

/**
 * @type {number}
 * @static
 * @const
 */
Input.keys.RIGHT = 39;

/**
 * @type {number}
 * @static
 * @const
 */
Input.keys.UP = 38;

/**
 * @type {number}
 * @static
 * @const
 */
Input.keys.DOWN = 40;

/**
 * @type {number}
 * @static
 * @const
 */
Input.keys.ENTER = 13;

/**
 * @param {!PIXI.DisplayObject} stage
 * @param {!*} keyListener
 */
Input.prototype.init = function(stage, keyListener) {
    this._stage                 = stage;
    this._stage.interactive     = true;
    this._stage.mousemove       = this._stage.touchmove     = this.onMouseMove.bind(this);
    this._stage.mousedown       = this._stage.touchstart    = this.onMouseDown.bind(this);
    this._stage.mouseup         = this._stage.touchend      = this.onMouseUp.bind(this);
    this._stage.mouseout                                    = this.onMouseOut.bind(this);
    this._stage.click           = this._stage.tap           = this.onMouseClick.bind(this);

    keyListener.onkeydown       = this.onKeyDown.bind(this);
    keyListener.onkeyup         = this.onKeyUp.bind(this);
    keyListener.focus();
};

Input.prototype.dispose = function() {
    this._stage.mousemove   = this._stage.touchmove     = null;
    this._stage.mousedown   = this._stage.touchstart    = null;
    this._stage.mouseup     = this._stage.touchend      = null;
    this._stage.mouseout                                = null;
    this._stage.click       = this._stage.tap           = null;

    this.signals.mouseMove.dispose();
    this.signals.mouseDown.dispose();
    this.signals.mouseUp.dispose();
    this.signals.mouseOut.dispose();
    this.signals.mouseClick.dispose();

    this.signals.keyDown.dispose();
    this.signals.keyUp.dispose();
};

/**
 * @param {!Event} event
 */
Input.prototype.onMouseMove = function(event) {
    this.touch = event.data.getLocalPosition(this._stage);

    Common.queueCalls.add(function() {
        this.signals.mouseMove.dispatch(event);
    }, [], this);
};

/**
 * @param {!Event} event
 */
Input.prototype.onMouseDown = function(event) {
    this.touch = event.data.getLocalPosition(this._stage);
    this.isTouch = true;

    Common.queueCalls.add(function() {
        this.signals.mouseDown.dispatch(event);
    }, [], this);
};

/**
 * @param {!Event} event
 */
Input.prototype.onMouseUp = function(event) {
    this.touch = event.data.getLocalPosition(this._stage);
    this.isTouch = false;

    Common.queueCalls.add(function() {
        this.signals.mouseUp.dispatch(event);
    }, [], this);
};

/**
 * @param {!Event} event
 */
Input.prototype.onMouseOut = function(event) {
    this.touch = event.data.getLocalPosition(this._stage);
    this.isTouch = false;

    Common.queueCalls.add(function() {
        this.signals.mouseOut.dispatch(event);
    }, [], this);
};

/**
 * @param {!Event} event
 */
Input.prototype.onMouseClick = function(event)
{
    Common.queueCalls.add(function() {
        this.signals.mouseClick.dispatch(event);
    }, [], this);
};

/**
 * @param {!Event} event
 */
Input.prototype.onKeyDown = function(event) {
    switch (event.keyCode) {
        case Input.keys.UP :
        case Input.keys.W : {
            this.isKeyUp = true;
            break;
        }
        case Input.keys.LEFT :
        case Input.keys.A : {
            this.isKeyLeft = true;
            break;
        }
        case Input.keys.RIGHT :
        case Input.keys.D : {
            this.isKeyRight = true;
            break;
        }
        case Input.keys.DOWN :
        case Input.keys.S : {
            this.isKeyDown = true;
            break;
        }
        case Input.keys.Z :
        case Input.keys.SPACE : {
            this.isKeyFire = true;
            break;
        }
        case Input.keys.X : {
            this.isKeyAltFire = true;
            break;
        }
    }

    Common.queueCalls.add(function() {
        this.signals.keyDown.dispatch(event);
    }, [], this);
};

/**
 * @param {!Event} event
 */
Input.prototype.onKeyUp = function(event) {
    switch (event.keyCode) {
        case Input.keys.UP :
        case Input.keys.W : {
            this.isKeyUp = false;
            break;
        }
        case Input.keys.LEFT :
        case Input.keys.A : {
            this.isKeyLeft = false;
            break;
        }
        case Input.keys.RIGHT :
        case Input.keys.D : {
            this.isKeyRight = false;
            break;
        }
        case Input.keys.DOWN :
        case Input.keys.S : {
            this.isKeyDown = false;
            break;
        }
        case Input.keys.Z :
        case Input.keys.SPACE : {
            this.isKeyFire = false;
            break;
        }
        case Input.keys.X : {
            this.isKeyAltFire = false;
            break;
        }
    }

    Common.queueCalls.add(function() {
        this.signals.keyUp.dispatch(event);
    }, [], this);
};

},{"../Common":2}],11:[function(require,module,exports){
var Common = require("../Common");

function QueueCalls()
{
	this._calls = null;
    this.init();
}
QueueCalls.prototype = Object.create(PIXI.Container.prototype);
QueueCalls.prototype.constructor = QueueCalls;
module.exports = QueueCalls;

//===================================================
// PUBLIC METHODS
//===================================================

QueueCalls.prototype.init = function()
{
    this._calls = [];
};

QueueCalls.prototype.update = function()
{
	while(this._calls.length > 0)
	{
		this._calls[0].callback.apply(this._calls[0].scope, this._calls[0].params);
		this._calls.splice(0, 1);
	}
};

QueueCalls.prototype.add = function(callback, params, scope)
{
	this._calls.push({callback:callback, params:params, scope:scope});
};

//===================================================
// PRIVATE METHODS
//===================================================

//===================================================
// EVENTS
//===================================================

//===================================================
// GETTERS/SETTERS
//===================================================

//===================================================

},{"../Common":2}],12:[function(require,module,exports){
var Common = require("../Common");

function AnimatedCharacter()
{
	this._spine = null;
	this._spineData = null;
	this._jsonData = null;

	this._slots = {};
	this._attachments = {};

    this._animationTime = 0;

    this.currentAnimation = 'idle1';

    this.currentOutfit = {};

    this.completeAnimations = {
        dorothy:    {animation:true,    music:true,     sfx:false,  animationName:'costume_dorothy',    animationTime:1},
        lion:       {animation:true,    music:true,     sfx:false,  animationName:'costume_lion',       animationTime:3},
        nome_king:  {animation:true,    music:false,    sfx:true,   animationName:'costume_nomeking',   animationTime:3},
        queen:      {animation:false,   music:false,    sfx:true},
        scarecrow:  {animation:true,    music:true,     sfx:true,   animationName:'costume_scarecrow',  animationTime:3},
        tinman:     {animation:true,    music:true,     sfx:true,   animationName:'costume_tinman',     animationTime:3},
        witch:      {animation:false,   music:true,     sfx:true}
    };

    this.photoMode = false;

	PIXI.Container.call(this);

    this.init();
}
module.exports = AnimatedCharacter;
AnimatedCharacter.prototype = Object.create(PIXI.Container.prototype);
AnimatedCharacter.prototype.constructor = AnimatedCharacter;


//===================================================
// PUBLIC METHODS
//===================================================

AnimatedCharacter.prototype.init = function()
{
    this._spine = new PIXI.spine.Spine(Common.assets.getSpineData("dorothy_anim"));
    this._spineData = Common.assets.getSpineData("dorothy_anim");
    //this._spine.skeleton.setToSetupPose();
    this._spine.skeleton.setSkin(null);
    this._spine.scale.set(0.5);
    this._spine.autoUpdate = false;
    this.addChild(this._spine);

    this._spine.state.addListener({
        complete: this.onAnimationComplete.bind(this)
    });

    var idles = ['idle1', 'idle2', 'idle3', 'idle4', 'idle5', 'idle6'];
    var clicks = ['clickhat', 'clickshoes', 'clickskirt', 'clicktop', 'jumpcentre', 
                  'photopose1', 'photopose2', 'photopose3', 'photopose4',
                  'costume_nomeking', 'costume_scarecrow', 'costume_tinman', 'costume_lion', 'costume_dorothy'];

    for(var i in idles)
    {
        for(var j in clicks)
        {
            this._spine.stateData.setMix(idles[i], clicks[j], 0.2);
        }
    }

    for(var i in clicks)
    {
        for(var j in clicks)
        {
            this._spine.stateData.setMix(clicks[i], clicks[j], 0.3);
        }
    }

    this._spine.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this._spine.interactive = false;

    this._determineOptions();

    this.resetClothes();

    this._spine.state.setAnimation(0, this.currentAnimation, true);
};

AnimatedCharacter.prototype.destroy = function()
{
    
};

AnimatedCharacter.prototype.update = function()
{
	this._spine.update(Common.delta);
    this._animationTime += Common.delta;
};

AnimatedCharacter.prototype.setAnimation = function(animation, repeat)
{
    this._spine.state.setAnimation(0, animation, repeat || false);
    this.currentAnimation = animation;
    this._animationTime = 0;
};

AnimatedCharacter.prototype.setAttachmentForSlot = function(slotName, attachmentName)
{
	this._slots[slotName].setAttachment(this._attachments[attachmentName]);
};

AnimatedCharacter.prototype.removeAttachmentFromSlot = function(slotName)
{
    this._slots[slotName].setAttachment(null);
};

AnimatedCharacter.prototype.resetClothes = function()
{
    for(var i in Common.config.clothes)
    {
        this.resetBase(Common.config.clothes[i].base_slots);
        for(var j in Common.config.clothes[i].items)
        {
            var item = Common.config.clothes[i].items[j];
            if(item.default)
            {
                this.currentOutfit[i] = item.id;
                for(var k in item.slots_to_clear)
                {
                    this.removeAttachmentFromSlot(item.slots_to_clear[k]);
                }
                for(k in item.attachments)
                {
                    this.setAttachmentForSlot(item.attachments[k].slot, item.attachments[k].attachment);
                }
            }
        }
    }
};

AnimatedCharacter.prototype.resetBase = function(baseSlots)
{
    for(var i in baseSlots)
    {
        this.removeAttachmentFromSlot(baseSlots[i].base_slot);
        this.setAttachmentForSlot(baseSlots[i].base_slot, baseSlots[i].base_attachment);
    }
}

AnimatedCharacter.prototype.intro = function()
{
    this._spine.x = 500;
    this.setAnimation('enterstage'); 
    Common.animator.add(TweenMax.to(this._spine, 1, {x:0, ease:Power1.easeOut}));
    Common.audio.playSound('sfx_dorothy_skid_in_00');
}

AnimatedCharacter.prototype.changeClothesEffect = function(type)
{
    if(!Common.lowPerformance)
    {
        var pos = {footwear:0, lower_body:-100, upper_body:-300, headwear:-500};
        var colours = ['blue', 'green', 'orange', 'pink', 'yellow'];

        var i = Math.floor(colours.length * Math.random());
        var colour1 = colours[i];
        colours.splice(i, 1);
        var colour2 = colours[Math.floor(colours.length * Math.random())];

        Common.emitter.add(this, 
            ['particle_star_00', 'particle_star_01'],
            "particle_emitter_starburst_" + colour1 + "_00", 0, pos[type], 3);
        Common.emitter.add(this, 
            ['particle_star_00', 'particle_star_01'],
            "particle_emitter_starburst_" + colour2 + "_00", 0, pos[type], 3);
    }

    Common.audio.playSound('sfx_magic_sparkles_00');
}

AnimatedCharacter.prototype.hasCompleteOutfit = function(str)
{
    var allSame = true
    for(var j in this.currentOutfit)
    {
        if(this.currentOutfit[j].indexOf(str) == -1)
        {
            allSame = false;
        }
    }
    return allSame;
}

//===================================================
// PRIVATE METHODS
//===================================================

AnimatedCharacter.prototype._determineOptions = function()
{
	for(var i in this._spineData.defaultSkin.attachments)
    {
    	for(var j in this._spineData.defaultSkin.attachments[i])
    	{
    		this._attachments[j] = this._spineData.defaultSkin.attachments[i][j];
    	}
    }

    for(var i in this._spine.skeleton.slots)
    {
    	this._slots[this._spine.skeleton.slots[i].data.name] = this._spine.skeleton.slots[i];
    }

    p3.log(this._slots);
    p3.log(this._attachments);
}

//===================================================
// EVENTS
//===================================================

AnimatedCharacter.prototype.onAnimationComplete = function(entry)
{
    if(this.currentAnimation.indexOf('photopose') > -1) return;

    for(var i in this.completeAnimations)
    {
        if(this.completeAnimations[i].animation &&
           this.currentAnimation == this.completeAnimations[i].animationName && 
           this._animationTime < this.completeAnimations[i].animationTime)
        {
            p3.log('DENIED');
            return;
        }
    }


    var rand = Math.floor(Math.random() * 100);
    var anim;

    var stances = [];

    if(this.photoMode)
    {
        for(var i in this.completeAnimations)
        {
            if(this.completeAnimations[i].animation && this.hasCompleteOutfit(i))
            {
                stances.push(this.completeAnimations[i].animationName);
            }
        }
        if(stances.length > 0)
        {
            stances.push('idle' + String(1 + Math.floor(Math.random() * 6)));
        }
    }
    if(stances.length == 0)
    {
        if(rand < 20) anim = 'idle1';
        else if(rand < 30) anim = 'idle2';
        else if(rand < 45) anim = 'idle3';
        else if(rand < 60) anim = 'idle4';
        else if(rand < 80) anim = 'idle5';
        else anim = 'idle6';
    }
    else
    {
        var split = 100 / stances.length;
        anim = stances[stances.length-1];

        for(var i in stances)
        {
            if(rand < split * (i+1))
            {
                anim = stances[i];
                break;
            }
        }
    }

    this.setAnimation(anim);
}

//===================================================
// GETTERS/SETTERS
//===================================================

Object.defineProperty(AnimatedCharacter.prototype, "isIdle",
{
    get: function()
    {
        return this.currentAnimation.indexOf('idle') > -1;
    }
});

//===================================================

},{"../Common":2}],13:[function(require,module,exports){
var Common                  = require("../Common");

function Butterfly()
{
    var colours = ['blue', 'green', 'red', 'yellow'];

    this._colour = colours[Math.floor(Math.random() * colours.length)];
    this._type = 'side';//Math.random() > 0.5 ? 'side' : 'front';

    this._changeFrame = 6 + Math.floor(Math.random() * 6);
    this._currentFrame = 1;

    this._upperPosLimit = -100;
    this._lowerPosLimit = Common.STAGE_HEIGHT - 200;

    this._sprite = null;
    this._tween = null;

	PIXI.Container.call(this);

    this.init();
}
module.exports = Butterfly;
Butterfly.prototype = Object.create(PIXI.Container.prototype);
Butterfly.prototype.constructor = Butterfly;


//===================================================
// PUBLIC METHODS
//===================================================

Butterfly.prototype.init = function()
{
    this._sprite = new PIXI.Sprite(Common.assets.getTexture('butterfly_' + this._type + '_001_' + this._colour));
    this._sprite.anchor = new PIXI.Point(0.5, 0.5);
    this.addChild(this._sprite);

    //if(this._type == 'front')
    //    this._sprite.rotation = (-70 + (Math.random() * 70)) * PIXI.DEG_TO_RAD;

    this.x = Common.STAGE_WIDTH * Math.random();
    this.y = this._upperPosLimit + ((this._lowerPosLimit - this._upperPosLimit) * Math.random());
};

Butterfly.prototype.destroy = function()
{

};

Butterfly.prototype.update = function()
{
	if(Common.frameCount % this._changeFrame == 0)
    {
        this._currentFrame = this._currentFrame == 1 ? 2 : 1;
        this._sprite.texture = Common.assets.getTexture('butterfly_' + this._type + '_00' + this._currentFrame + '_' + this._colour);
    }

    if(!TweenMax.isTweening(this))
    {
        var lowerLimit = Math.min(this._lowerPosLimit, this.y + 200);
        var upperLimit = Math.max(this._upperPosLimit, this.y - 200);
        var midY = upperLimit + ((lowerLimit - upperLimit) * Math.random());
        var endX = 300 + (400 * Math.random());

        var speed = (5 + (Math.random() * 4)) * (endX / 700);

        var reverse = false;
        if((this.x > Common.STAGE_WIDTH || Math.random() > 0.5) && this.x > 0)
        {
            endX = endX * -1;
            this._type == 'side' && (this.scale.x = -1);
        }
        else
        {
            this._type == 'side' && (this.scale.x = 1);
        }
        endX += this.x;

        var endY;
        if(midY < this.y)
        {
            endY = midY + ((midY - upperLimit) * Math.random());
        }
        else
        {
            endY = upperLimit + ((midY - upperLimit) * Math.random());
        }
        var midX = this.x + ((endX - this.x)/2); 

        Common.animator.add(TweenMax.to(this, speed, {bezier:{autoRotate:this._type == 'front', values:[{x:midX, y:midY}, {x:endX, y:endY}]}, ease:Linear.easeNone}));
    }
};



//===================================================
// PRIVATE METHODS
//===================================================


//===================================================
// EVENTS
//===================================================


//===================================================
// GETTERS/SETTERS
//===================================================

//===================================================

},{"../Common":2}],14:[function(require,module,exports){
var Common = require("../Common");

function ClothesCategoryButton(id, selected, deselected)
{
    this.id = id;
    this._selected = selected;
    this._deselected = deselected;

    this._graphic = null;

    this.selected = false;

    this.signals = {};
    this.signals.clicked = new signals.Signal();

	PIXI.Container.call(this);

    this.init();
}
module.exports = ClothesCategoryButton;
ClothesCategoryButton.prototype = Object.create(PIXI.Container.prototype);
ClothesCategoryButton.prototype.constructor = ClothesCategoryButton;


//===================================================
// PUBLIC METHODS
//===================================================

ClothesCategoryButton.prototype.init = function()
{   
    this._graphic = new PIXI.Sprite(Common.assets.getTexture(this._deselected));
    this._graphic.hitArea = new PIXI.Rectangle(this._graphic._texture.trim.x, this._graphic._texture.trim.y, this._graphic._texture.trim.width, this._graphic._texture.trim.height);
    this.addChild(this._graphic);

    this.interactive = true;
    this.buttonMode = true;
    this.mousedown = this.touchstart = this.onMouseUp.bind(this);
};

ClothesCategoryButton.prototype.select = function()
{
    this.selected = true;
    this._graphic.texture = Common.assets.getTexture(this._selected);
};

ClothesCategoryButton.prototype.deselect = function()
{
    this.selected = false;
    this._graphic.texture = Common.assets.getTexture(this._deselected);
};


//===================================================
// PRIVATE METHODS
//===================================================

//===================================================
// EVENTS
//===================================================

ClothesCategoryButton.prototype.onMouseUp = function()
{
    this.signals.clicked.dispatch(this.id);
}

//===================================================
// GETTERS/SETTERS
//===================================================

//===================================================

},{"../Common":2}],15:[function(require,module,exports){
var Common = require("../Common");

function ClothesItemButton(texture, id, clearSlots, addSlots)
{
    var states = new p3.ButtonStates(
        Common.assets.getTexture('cell'), null, null, texture);

	p3.Button.call(this, states);

	this.id = id;
	this.defaultIconScale = new PIXI.Point(1, 1);
	this.clearSlots = clearSlots;
	this.addSlots = addSlots;

    this.init();
}
module.exports = ClothesItemButton;
ClothesItemButton.prototype = Object.create(p3.Button.prototype);
ClothesItemButton.prototype.constructor = ClothesItemButton;


//===================================================
// PUBLIC METHODS
//===================================================

ClothesItemButton.prototype.init = function()
{   
    this.animate = false;
    this.animateIcon = false;

    var ws = this._background.width / this._icon.width;
    var hs = this._background.height / this._icon.height;
    this._icon.scale.x = this._icon.scale.y = ws<hs?ws:hs;
    this.defaultIconScale.x = this._icon.scale.x;
    this.defaultIconScale.y = this._icon.scale.y;
};


//===================================================
// PRIVATE METHODS
//===================================================

//===================================================
// EVENTS
//===================================================

ClothesItemButton.prototype.onMouseOver = function()
{
	if(TweenMax.isTweening(this._icon))
		return null;

	var tl = new TimelineMax();
	tl.to(this._icon.scale, .15, {x:this.defaultIconScale.x * 1.1, 
								 y:this.defaultIconScale.y * 1.1,
								 ease:Sine.easeInOut});
	tl.to(this._icon.scale, 1, {x:this.defaultIconScale.x,
								y:this.defaultIconScale.y,
								 ease:Elastic.easeOut});
	Common.animator.add(tl);
}

ClothesItemButton.prototype.onMouseOut = function()
{

}

//===================================================
// GETTERS/SETTERS
//===================================================

//===================================================

},{"../Common":2}],16:[function(require,module,exports){
var Common                  = require("../Common");
var ClothesCatgeoryButton   = require("./ClothesCategoryButton");
var ClothesItemButton       = require("./ClothesItemButton");
var ScrollBar               = require("./ScrollBar");
var TutorialFinger          = require("./TutorialFinger");

function ClothesMenu()
{
    this._categoryButtons = [];

    this._backing = null;

    this._itemHolder = null;
    this._itemHolderScroll = null;
    this._itemHolderMask = null;
    this._itemHolderScrollWindowSize = 500;

    this._categoryButtonHolder = null;
    this._categoryButtonSelectedHolder = null;
    this._frame = null;

    this._items = [];

    this._touchScrollRect = null;
    this._touchScrollCurrent = null;
    this._touchScrollLast = null;
    this._touchScrollMomentum = 0;

    this.tutorialFinger = null;
    this.promptFinger = null;

    this.currentCategory = null;

    this.signals = {};
    this.signals.itemSelected = new signals.Signal();
    this.signals.tutorialCompleted = new signals.Signal();

	PIXI.Container.call(this);
}
module.exports = ClothesMenu;
ClothesMenu.prototype = Object.create(PIXI.Container.prototype);
ClothesMenu.prototype.constructor = ClothesMenu;


//===================================================
// PUBLIC METHODS
//===================================================

ClothesMenu.prototype.init = function()
{
    this._backing = new PIXI.Sprite(Common.assets.getTexture('panel'));

    this._scrollBar = new ScrollBar(400, -15);
    this._scrollBar.y = 0;
    //this._scrollBar.scale.x = -1;
    this._scrollBar.x = 0;//560;
    this._scrollBar.init();
    this.addChild(this._scrollBar);

    this._scrollBar.forcePosition(400);

    this.addChild(this._backing);

    this._itemHolder = new PIXI.Container();
    this._itemHolder.x = 120;
    this._itemHolder.y = 180;
    this.addChild(this._itemHolder);

    this._itemHolderScroll = new PIXI.Container();
    this._itemHolder.addChild(this._itemHolderScroll);

    this._itemHolderMask = new PIXI.Graphics();
    this._itemHolderMask.beginFill(0x000000);
    this._itemHolderMask.moveTo(4, 70);
    this._itemHolderMask.lineTo(561, 76);
    this._itemHolderMask.lineTo(538, 652);
    this._itemHolderMask.lineTo(30, 656);
    this.addChild(this._itemHolderMask);
    this._itemHolder.mask = this._itemHolderMask;

    this._categoryButtonHolder = new PIXI.Container();
    this.addChild(this._categoryButtonHolder);

    this._frame = new PIXI.Sprite(Common.assets.getTexture('panel_frame'));
    this.addChild(this._frame);

    this._categoryButtonSelectedHolder = new PIXI.Container();
    this.addChild(this._categoryButtonSelectedHolder);

    var count = 0;
    for(var i in Common.config.clothes)
    {
        var button = new ClothesCatgeoryButton(i, Common.config.clothes[i].icon_selected, Common.config.clothes[i].icon_deselected);
        this._categoryButtonHolder.addChild(button);
        this._categoryButtons.push(button);
        button.signals.clicked.add(this.onCategoryButtonClicked, this);
        count++;
    }

    this.setCategory(i);

    this._touchScrollRect = new PIXI.Rectangle(50, 90, 470, 550);
    /*var gr = new PIXI.Graphics();
    gr.lineStyle(1, 0xFFFFFF);
    gr.drawShape(this._touchScrollRect);
    this.addChild(gr);*/

    Common.input.signals.mouseDown.add(this.onTouchStart, this);
    Common.input.signals.mouseUp.add(this.onTouchEnd, this);
    Common.input.signals.mouseMove.add(this.onTouchMove, this);

    document.addEventListener("wheel", function(e)
    {
        this._scrollBar.setTargetY(this._scrollBar.y + (100 * Math.sign(e.deltaY)), false);
    }.bind(this));
};

ClothesMenu.prototype.destroy = function()
{
    Common.input.signals.mouseDown.remove(this.onTouchStart);
    Common.input.signals.mouseUp.remove(this.onTouchEnd);
    Common.input.signals.mouseMove.remove(this.onTouchMove);
    this._scrollBar.dispose();
};

ClothesMenu.prototype.update = function()
{
	var percent = this._scrollBar.update();

    this._itemHolderScroll.y = -(this._itemHolder.height - this._itemHolderScrollWindowSize) * percent;

    if(this._itemHolder.height > this._itemHolderScrollWindowSize)
    {
        this._scrollBar.activate();

        if(!this._scrollBar.dragging)
        {
            if(this._touchScrollCurrent != null)
            {
                this._touchScrollMomentum = (this._touchScrollLast - this._touchScrollCurrent) * 5;
                this._touchScrollLast = this._touchScrollCurrent;
            }
            else
            {
                this._touchScrollMomentum = this._touchScrollMomentum * 0.8;
            }

            if(this._touchScrollMomentum != 0)
            {
                var result = this._scrollBar.setTargetY(this._scrollBar.y + this._touchScrollMomentum, false);
            }

            if(Math.abs(this._touchScrollMomentum) > 10)
            {
                this._tutorialActionPerformed('scroll');
            }

            if(Math.round(this._touchScrollMomentum) == 0)
            {
                this._touchScrollMomentum = 0;
            }
        }
        else
        {
            this._touchScrollMomentum = 0;
        }
    }
    else
    {
        this._scrollBar.deactivate();
    }
};

ClothesMenu.prototype.setCategory = function(id)
{
    for(var i in this._categoryButtons)
    {
        if(this._categoryButtons[i].id == id)
        {
            this._categoryButtons[i].select();
            this._categoryButtonSelectedHolder.addChild(this._categoryButtons[i]);
        }
        else
        {
            this._categoryButtons[i].deselect();
            this._categoryButtonHolder.addChild(this._categoryButtons[i]);
        }
    }

    this.fillMenu(id);
    this._scrollBar.reset();

    this.currentCategory = id;
};

ClothesMenu.prototype.fillMenu = function(id)
{
    while(this._items.length > 0)
    {
        this._itemHolderScroll.removeChild(this._items[0]);
        this._items[0].signals.down.remove(this.onItemButtonClicked);
        this._items.splice(0, 1);
    }

    var json = Common.config.clothes[id].items;

    var row = 0;
    var col = 0;
    var colLimit = 3;
    var rowPadding = 15;
    var colPadding = 15;

    for(var i in json)
    {
        var texture = PIXI.EmptyTexture;

        if(json[i].icon != null)
        {
            texture = Common.assets.getTexture(json[i].icon);
        }

        var item = new ClothesItemButton(texture, json[i].id, json[i].slots_to_clear, json[i].attachments);
        item.x = col*item.width + (col*colPadding);
        item.y = row*item.height + (row*rowPadding);

        if(json[i].icon != null)
        {
            item.signals.down.add(this.onItemButtonClicked, this);
        }

        this._items.push(item);
        this._itemHolderScroll.addChild(item);

        col++;
        if(col >= colLimit)
        {
            col = 0;
            row++;
        }
    }
}

ClothesMenu.prototype.activateButtons = function()
{
    this._itemHolder.alpha = 1;
}

ClothesMenu.prototype.deactivateButtons = function()
{
    this._itemHolder.alpha = 0.6;
}

ClothesMenu.prototype.setFirstTutorial = function()
{
    this.tutorialFinger = new TutorialFinger(0.5);
    this.addChild(this.tutorialFinger);

    this.initialiseTutorial(this.tutorialFinger);
}

ClothesMenu.prototype.setPromptTutorial = function()
{
    if(this.tutorialFinger)
    {
        this.removeChild(this.tutorialFinger);
        this.tutorialFinger = null;
    }

    this.promptFinger = new TutorialFinger(20, true);
    this.addChild(this.promptFinger);

    this.initialiseTutorial(this.promptFinger);
}

ClothesMenu.prototype.initialiseTutorial = function(finger)
{
    var clothes = [
            {type:'move', time:1, x:320, y:283},
            {type:'down', delay:0.2},
            {type:'up', delay:0.6},
            {type:'move', time:1, x:466, y:460},
            {type:'down', delay:0.2},
            {type:'up', delay:0.6},
            {type:'move', time:1, x:310, y:600},
            {type:'down', delay:0.2},
            {type:'up', delay:0.6}
        ];

    var scroll = [
            {type:'target', time:1, target:this._scrollBar, offset:{x:650, y:300}},
            {type:'down', delay:0.2},
            {type:'move', delay:.5, time:1, x:650-30, y:615},
            {type:'move', time:1, x:650, y:298},
            {type:'up', delay:0.6}
        ];

    var categories = [
            {type:'move', time:1, x:255, y:157},
            {type:'down', delay:0.2},
            {type:'up', delay:0.6},
            {type:'move', delay:.5, time:0.9, x:389, y:157},
            {type:'down', delay:0.2},
            {type:'up', delay:0.6},
            {type:'move', delay:.5, time:0.9, x:524, y:157},
            {type:'down', delay:0.2},
            {type:'up', delay:0.6}
        ];

    if(finger === this.tutorialFinger)
    {
        finger.addSequence('clothes', clothes, new PIXI.Point(155, 215), 1, 1);
        finger.addSequence('scroll', scroll, new PIXI.Point(316, 298), 1, 2);
        finger.addSequence('categories', categories, new PIXI.Point(125, 171), 1, 3);
    }
    else
    {
        finger.addSequence('clothes', clothes.concat(scroll, categories), new PIXI.Point(155, 215), -1, 1);
    }
}

//===================================================
// PRIVATE METHODS
//===================================================

ClothesMenu.prototype._isPointWithinScrollRect = function(point)
{
    return point.x > this._touchScrollRect.x && 
           point.x < this._touchScrollRect.x + this._touchScrollRect.width &&
           point.y > this._touchScrollRect.y &&
           point.y < this._touchScrollRect.y + this._touchScrollRect.height;
}

ClothesMenu.prototype._tutorialActionPerformed = function(tutorialId)
{
    if(this.tutorialFinger && this.tutorialFinger.currentSequence == tutorialId)
    {
        Common.tutorialStatesPassed[tutorialId] = true;
        this.tutorialFinger.removeSequence(tutorialId);
        this.signals.tutorialCompleted.dispatch(scroll);
    }
    else if(this.promptFinger)
    {
        this.promptFinger.resetPrompt();
    }
}

//===================================================
// EVENTS
//===================================================

ClothesMenu.prototype.onCategoryButtonClicked = function(id)
{
    this._tutorialActionPerformed('categories');
    this.setCategory(id);
    Common.audio.playSound('sfx_wardrobe_change_draw_01');
};

ClothesMenu.prototype.onItemButtonClicked = function(button)
{
    this._tutorialActionPerformed('clothes');
    this.signals.itemSelected.dispatch({id:button.id, clear:button.clearSlots, add:button.addSlots, baseSlots:Common.config.clothes[this.currentCategory].base_slots});
};

ClothesMenu.prototype.onTouchStart = function(e)
{
    var pos = e.data.getLocalPosition(this);
    if(this._isPointWithinScrollRect(pos))
    {
        if(this._itemHolder.height > this._itemHolderScrollWindowSize)
        {
            this._touchScrollCurrent = pos.y;
            this._touchScrollLast = pos.y;
        }
    }
};

ClothesMenu.prototype.onTouchMove = function(e)
{
    var pos = e.data.getLocalPosition(this);

    if(this._scrollBar.dragging)
    {
        this._scrollBar.setTargetY(e.data.getLocalPosition(this).y);
        this._tutorialActionPerformed('scroll');
    }
    else if(this._touchScrollCurrent != null 
            && this._itemHolder.height > this._itemHolderScrollWindowSize 
            && this._isPointWithinScrollRect(pos))
    {
        this._touchScrollCurrent = pos.y;
    }
}

ClothesMenu.prototype.onTouchEnd = function(e)
{
    if(this._scrollBar.dragging)
    {
        this._scrollBar.onRelease();
    }

    this._touchScrollCurrent = null;
    this._touchScrollLast = null;
}

//===================================================
// GETTERS/SETTERS
//===================================================

//===================================================

},{"../Common":2,"./ClothesCategoryButton":14,"./ClothesItemButton":15,"./ScrollBar":17,"./TutorialFinger":19}],17:[function(require,module,exports){
var Common          = require("../Common");
var AudioParams     = require("../audio/AudioParams");

//===================================================
// CONSTRUCTOR
//===================================================

function ScrollBar(verticalRange, horizontalChange)
{
    this._verticalRange = verticalRange;
    this._horizontalChange = horizontalChange;
    this._startingPoint = null;
    this._dragging = false;
    this._offset = null;
    this._clickOffset = new PIXI.Point(0, 0);
    this._targetY = 0;
    this._onDownPos = null;
    this._loopSound = null;

    this.active = false;

    PIXI.Container.call(this);
}
module.exports = ScrollBar;
ScrollBar.prototype = Object.create(PIXI.Container.prototype);
ScrollBar.prototype.constructor = ScrollBar;

//===================================================
// PUBLIC METHODS
//===================================================

ScrollBar.prototype.init = function()
{
    var texture = Common.assets.getTexture('btn_scroll');
	var graphic = new PIXI.Sprite(texture);
    this.addChild(graphic);

    this._startingPoint = new PIXI.Point(this.x, this.y);

    this._offset = new PIXI.Point(-texture.trim.x, -texture.trim.y);

    this.buttonMode = true;
    this.interactive = true;
    this.hitArea = new PIXI.Rectangle(texture.trim.x + (texture.trim.width/2), texture.trim.y, texture.trim.width, texture.trim.height);

    var params = new AudioParams();
    params.loop = true;
    this._loopSound = Common.audio.playSound('sfx_scroll_wardrobe_loop_01', params);
};

ScrollBar.prototype.update = function()
{
    if(Math.round(this.y - this._targetY) == 0 || Common.paused)
    {
        this._loopSound.howl.pause();
    }
    else if(!this._loopSound.howl.playing())
    {
        this._loopSound.howl.play();
    }

    return this.setPosition();
};

ScrollBar.prototype.dispose = function()
{
    this._loopSound.stop();
};

ScrollBar.prototype.setPosition = function()
{
    this.y = this.y + ((this._targetY-this.y) / 7);

    var percent = (this.y - this._startingPoint.y) / this._verticalRange;

    this.x = this._startingPoint.x + (percent * this._horizontalChange);

    return percent;
};

ScrollBar.prototype.setTargetY = function(yPos, includeOffsets)
{
    includeOffsets == undefined && (includeOffsets = true);

    var y = yPos;

    if(includeOffsets)
        y = yPos + this._offset.y + this._clickOffset.y;

    var targetY = Math.min(this._startingPoint.y + this._verticalRange, 
                    Math.max(this._startingPoint.y, 
                    y));

    if(!isNaN(targetY))
        this._targetY = targetY;

    return this._targetY;
};

ScrollBar.prototype.forcePosition = function(y)
{
    this.y = y;
    this._targetY = y;
};

ScrollBar.prototype.setPercentage = function(percentage)
{
    this.setTargetY(this._startingPoint.y + (percentage * this._verticalRange));
}

ScrollBar.prototype.addIncrement = function(inc)
{

}

ScrollBar.prototype.reset = function()
{
    this.setPosition(this.setPercentage(0));
}

ScrollBar.prototype.activate = function()
{
    this._active = true;
    this.alpha = 1;
    this.mousedown = this.touchstart = this.onDown.bind(this);
}

ScrollBar.prototype.deactivate = function()
{
    this._active = true;
    this.alpha = 0.3;
    this.mousedown = this.touchstart = null;
}

//===================================================
// PRIVATE METHODS
//===================================================

//===================================================
// EVENTS
//===================================================

ScrollBar.prototype.onDown = function(event)
{
    this._dragging = true;
    this._clickOffset = event.data.getLocalPosition(this);
    this._clickOffset.y = -(this._clickOffset.y + this._offset.y);
    this.buttonMode = false;
    this._onDownPos = this.y;
};

ScrollBar.prototype.onRelease = function(event)
{
    this._dragging = false;
    this.buttonMode = true;

    if(Math.round(this.y) == Math.round(this._onDownPos))
    {
        this.setTargetY(this.y + (this._clickOffset.y < -65 ? 150 : -150), false);
    }
    this._onDownPos = null;
    this._clickOffset = new PIXI.Point(0, 0);
};

//===================================================
// GETTERS/SETTERS
//===================================================

Object.defineProperty(ScrollBar.prototype, "dragging", {

    get: function()
    {
        return this._dragging;
    }
});

Object.defineProperty(ScrollBar.prototype, "offset", {

    get: function()
    {
        return this._offset;
    }
});


//===================================================


},{"../Common":2,"../audio/AudioParams":7}],18:[function(require,module,exports){
var Common                  = require("../Common");

function TitleBar()
{
    this._bar = null;
    this._field = null;

	PIXI.Container.call(this);

    this.init();
}
module.exports = TitleBar;
TitleBar.prototype = Object.create(PIXI.Container.prototype);
TitleBar.prototype.constructor = TitleBar;


//===================================================
// PUBLIC METHODS
//===================================================

TitleBar.prototype.init = function()
{
    this._bar = new PIXI.Sprite(Common.assets.getTexture('hint'));
    this._bar.anchor = new PIXI.Point(0.5, 0.5);
    this.addChild(this._bar);

    //this._field = new PIXI.extras.BitmapText('', {font:"WindsorEF-Elongated", align:'center'});
    this._field = new PIXI.Text('', {
            font:"58px Windsor Elongated", 
            align:'center',
            fillGradientType:PIXI.TEXT_GRADIENT.LINEAR_VERTICAL,
            fill:[0xfef49d, 0xf8b711],
            fillGradientStops:[0, 1],
            dropShadow:true,
            dropShadowAngle:90*PIXI.DEG_TO_RAD,
            dropShadowAlpha:0.5,
            dropShadowDistance:3.5
        });
    this._field.anchor = new PIXI.Point(0.5, 0.5);
    this.addChild(this._field);


    this.scale = new PIXI.Point(0, 0);
};

TitleBar.prototype.destroy = function()
{

};

TitleBar.prototype.update = function()
{
	
};

TitleBar.prototype.show = function(text)
{
    TweenMax.killTweensOf(this);
    this.alpha = 1;

    var textConf = Common.config.strings[text][Common.language];
    var fontConf = Common.config.strings_formatting[text][Common.language];
    this._field.text = textConf;
    this._field.font = fontConf.font;
    this._field.scale = new PIXI.Point(fontConf.sizePercent/100, fontConf.sizePercent/100);

    Common.animator.add(TweenMax.to(this.scale, .3, {startAt:{x:0, y:0}, x:1, ease:Back.easeOut}));
    Common.animator.add(TweenMax.to(this.scale, .3, {delay:.1, y:1, ease:Back.easeOut}));
}

TitleBar.prototype.remove = function(removeTime)
{
    Common.animator.add(TweenMax.to(this, 2, {delay:removeTime, alpha:0}));
}



//===================================================
// PRIVATE METHODS
//===================================================


//===================================================
// EVENTS
//===================================================


//===================================================
// GETTERS/SETTERS
//===================================================

//===================================================

},{"../Common":2}],19:[function(require,module,exports){
var Common   = require("../Common");

function TutorialFinger(sequenceInterval, promptMode)
{
    this.sequences = {};
    this.sequenceInterval = sequenceInterval || 3;
    this.finger = null;
    this.currentSequence = null;
    this.promptMode = promptMode || false;

    this.signals = {};
    this.signals.tutorialStarted = new signals.Signal();

    this.timer = null;

	PIXI.Container.call(this);

    this.init();
}
module.exports = TutorialFinger;
TutorialFinger.prototype = Object.create(PIXI.Container.prototype);
TutorialFinger.prototype.constructor = TutorialFinger;


//===================================================
// PUBLIC METHODS
//===================================================

TutorialFinger.prototype.init = function()
{
    this.finger = new PIXI.Sprite(Common.assets.getTexture('tutorial_hand'));
    this.finger.anchor = new PIXI.Point(0.5, 1);
    this.addChild(this.finger);

    this.alpha = 0;

    this.finger.interactive = false;
    this.finger.hitArea = new PIXI.Rectangle(0, 0, 0, 0);

    this.timer = Common.animator.setTimeout(this.onSequenceIntervalEnded, this.sequenceInterval, this);
};

TutorialFinger.prototype.destroy = function()
{

};

TutorialFinger.prototype.update = function()
{
	
};

TutorialFinger.prototype.addSequence = function(id, sequence, startPoint, repeat, importance)
{
    this.sequences[id] = {sequence:sequence, repeat:repeat, startPoint:startPoint, importance:importance};
};

TutorialFinger.prototype.removeSequence = function(id)
{
    if(this.sequences[id])
    {
        delete this.sequences[id];

        if(this.currentSequence == id)
        {
            TweenMax.killTweensOf(this);
            TweenMax.killTweensOf(this.scale);
            Common.animator.add(TweenMax.to(this.scale, .3, {y:1, ease:Sine.easeOut}));
            Common.animator.add(TweenMax.to(this, .3, {alpha:0, ease:Sine.easeOut}));
            this.timer = Common.animator.setTimeout(this.onSequenceIntervalEnded, this.sequenceInterval, this);
        }
    }
};

TutorialFinger.prototype.setSequence = function(id)
{
    var sequence = this.sequences[id];

    console.log(sequence);

    this.x = sequence.startPoint.x;
    this.y = sequence.startPoint.y;

    var tl = new TimelineMax({repeat:sequence.repeat, onCompleteScope:this, onComplete:function(){
        this.timer = Common.animator.setTimeout(this.onSequenceIntervalEnded, this.sequenceInterval, this);
        this.currentSequence = null;
    }});
    tl.to(this, .3, {alpha:1});
    for(var i in sequence.sequence)
    {
        var s = sequence.sequence[i];
        if(s.type == 'move')
            tl.to(this, s.time, {delay:s.delay, x:s.x, y:s.y, ease:Sine.easeInOut});
        else if(s.type == 'down')
            tl.to(this.scale, s.time || 0.2, {delay:s.delay, y:0.8, ease:Sine.easeInOut});
        else if(s.type == 'up')
            tl.to(this.scale, s.time || 0.3, {delay:s.delay, y:1, ease:Sine.easeInOut});
        else if(s.type == 'target')
        {
            console.log(s);
            tl.to(this, s.time, {delay:s.delay, x:s.target.x + (s.offset ? s.offset.x : 0), y:s.target.y + (s.offset ? s.offset.y : 0), ease:Sine.easeInOut});
        }
    }
    tl.to(this, .3, {alpha:0});
    Common.animator.add(tl);

    this.currentSequence = id;

    this.signals.tutorialStarted.dispatch(id);
}

TutorialFinger.prototype.resetPrompt = function()
{
    TweenMax.killTweensOf(this);
    TweenMax.killTweensOf(this.scale);
    Common.animator.add(TweenMax.to(this.scale, .3, {y:1, ease:Sine.easeOut}));
    Common.animator.add(TweenMax.to(this, .3, {alpha:0}));

    if(!this.timer.complete)
    {
        this.timer.reset();
        this.timer.start();
    }
    else
    {
        this.timer = Common.animator.setTimeout(this.onSequenceIntervalEnded, this.sequenceInterval, this);
    }
}

//===================================================
// PRIVATE METHODS
//===================================================


//===================================================
// EVENTS
//===================================================

TutorialFinger.prototype.onSequenceIntervalEnded = function(id)
{
    console.log('onSequenceIntervalEnded');
    if(!this.promptMode)
    {
        var mostImportant = null;
        var mostImportantNumber = null;
        for(var i in this.sequences)
        {
            if(mostImportantNumber == null || this.sequences[i].importance < mostImportantNumber)
            {
                mostImportant = i;
                mostImportantNumber = this.sequences[i].importance;
            }
        }
        if(mostImportant)
        {
            this.setSequence(mostImportant);
        }
    }
    else
    {
        var arr = [];
        for(var i in this.sequences)
        {
            arr.push(i);
        }
        console.log(arr);

        this.setSequence(arr[0]);
    }
}

//===================================================
// GETTERS/SETTERS
//===================================================

//===================================================

},{"../Common":2}],20:[function(require,module,exports){
(function (global){
//import Main from './Main';
var Main = require("./Main");

global.Main = Main;

p3.log = console.log;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./Main":3}],21:[function(require,module,exports){
var Common          = require("../Common");
var SimpleScreen    = require('../screens/SimpleScreen');

//===================================================
// CONSTRUCTOR
//===================================================

/**
 * @constructor
 */
function PauseOverlay()
{
    this._panel = null;
    this._buttons = [];

    this._contents          = null;
    this._imageContainer    = null;
    this._helpText          = null;
    this._confirmContainer  = null;
    this._image             = null;
    this._leftButton        = null;
    this._rightButton       = null;
    this._homeButton        = null;
    this._currentPage       = 0;
    this._currentStep       = 0;
    this._lastStepTime      = 0;

    SimpleScreen.call(this);
}

PauseOverlay.prototype = Object.create(SimpleScreen.prototype);
PauseOverlay.prototype.constructor = PauseOverlay;
module.exports = PauseOverlay;

//===================================================
// PUBLIC METHODS
//===================================================

PauseOverlay.prototype.init = function()
{
    SimpleScreen.prototype.init.call(this);

    Common.paused = true;
    Common.animator.paused = true;

    this.addOverlay();

    this._panel = new PIXI.Sprite(Common.assets.getTexture('pause'));
    this._panel.anchor = new PIXI.Point(0.5, 0.5);
    this._panel.x = Common.STAGE_WIDTH / 2;
    this._panel.y = Common.STAGE_HEIGHT / 2;
    this.addChild(this._panel);

    var title = new PIXI.Sprite(Common.assets.getTexture('paused'));
    title.anchor = new PIXI.Point(0.5, 0.5);
    title.y = -280;
    this._panel.addChild(title);
    
    var muteButton = this.addMuteButton(248, 242);
    this._panel.addChild(muteButton);
    this._buttons.push(muteButton);

    this._homeButton = this.addHomeButton(-215, 242);
    this._panel.addChild(this._homeButton);
    this._buttons.push(this._homeButton);

    var playButton = this._generateButton('icon_play_large', 'resume', 'primary_large');
    playButton.x = 10;
    playButton.y = 250;
    playButton.signals.up.add(this.onPlayButtonClicked, this);
    this._panel.addChild(playButton);
    this._buttons.push(playButton);

    //HELP

    //this._helpText = new PIXI.extras.BitmapText('', {font:"WindsorEF-Elongated", align:'center'});
    this._helpText = new PIXI.Text('', {
            font:"58px Windsor Elongated", 
            align:'center',
            fillGradientType:PIXI.TEXT_GRADIENT.LINEAR_VERTICAL,
            fill:[0xfef49d, 0xf8b711],
            fillGradientStops:[0, 1],
            dropShadow:true,
            dropShadowAngle:90*PIXI.DEG_TO_RAD,
            dropShadowAlpha:0.5,
            dropShadowDistance:3.5
        });
    this._helpText.anchor.set(0.5);
    this._helpText.y = 122;
    this._panel.addChild(this._helpText);

    var setHelpText = function(text)
    {
        var textConf = Common.config.strings[text][Common.language];
        var fontConf = Common.config.strings_formatting[text][Common.language];
        this._helpText.text = textConf;
        this._helpText.font = fontConf.font;
        this._helpText.scale = new PIXI.Point(fontConf.sizePercent/100, fontConf.sizePercent/100);
    }.bind(this);

    var tweenAlphaOut = function(obj, callbackScope, callback){
        TweenMax.to(obj, .3, {alpha:0, onCompleteScope:callbackScope || null, onComplete:callback || null});
    }

    var tweenAlphaIn = function(obj, callbackScope, callback){
        TweenMax.to(obj, .3, {alpha:1, onCompleteScope:callbackScope || null, onComplete:callback || null});
    }

    var dressUpScreen = new PIXI.Container();
        dressUpScreen.bg = this._addImageToTutorialContent(dressUpScreen, 'help_clothes_bg');
        dressUpScreen.icon1 = this._addImageToTutorialContent(dressUpScreen, 'help_clothes_icon1', 0.9);
        dressUpScreen.icon2 = this._addImageToTutorialContent(dressUpScreen, 'help_clothes_icon2', 0.9);
        dressUpScreen.dot1 = this._addImageToTutorialContent(dressUpScreen, 'help_clothes_dorothy1', 0.9);
        dressUpScreen.dot2 = this._addImageToTutorialContent(dressUpScreen, 'help_clothes_dorothy2', 0.9);
        dressUpScreen.camBut = this._createButtonForTutorialContent('icon_camera_off', 'btn_primary_small_off'); 
            dressUpScreen.camBut.position.set(280, 100);
            dressUpScreen.addChild(dressUpScreen.camBut);
        dressUpScreen.finger = this._addImageToTutorialContent(dressUpScreen, 'tutorial_hand', 0.5, new PIXI.Point(0.1, 0.1));

    dressUpScreen.steps = [];
    dressUpScreen.steps[0] = function(){
        this.dot1.alpha = 1;
        this.dot2.alpha = 0;
        setHelpText('tutorial_clothes');
        tweenAlphaOut(this.finger, this, function(){
            this.finger.x = -33;
            this.finger.y = 16;
            tweenAlphaIn(this.finger);
        });
    };
    dressUpScreen.steps[1] = function(){
        this.dot1.alpha = 0;
        this.dot2.alpha = 1;
        this.finger.x = -33;
        this.finger.y = 16;
    };
    dressUpScreen.steps[2] = function(){
        tweenAlphaOut(this.finger, this, function(){
            this.finger.x = -100;
            this.finger.y = 16;
            tweenAlphaIn(this.finger);
        });
    };
    dressUpScreen.steps[3] = function(){
        this.dot2.alpha = 0;
        this.dot1.alpha = 1;
        this.finger.x = -100;
        this.finger.y = 16;
    };
    dressUpScreen.steps[4] = function(){
        tweenAlphaOut(this.finger, this, function(){
            this.finger.x = this.camBut.x;
            this.finger.y = this.camBut.y;
            tweenAlphaIn(this.finger);
        });
    };
    dressUpScreen.steps[5] = function(){};

    var backgroundScreen = new PIXI.Container();
        backgroundScreen.bg1 = this._addImageToTutorialContent(backgroundScreen, 'help_background_bg1');
        backgroundScreen.bg2 = this._addImageToTutorialContent(backgroundScreen, 'help_background_bg2');
        backgroundScreen.dot = this._addImageToTutorialContent(backgroundScreen, 'help_background_dorthy', 0.9);
        backgroundScreen.btns = this._addImageToTutorialContent(backgroundScreen, 'help_background_btns', 1.07);
        backgroundScreen.tickBut = this._createButtonForTutorialContent('icon_tick_off', 'btn_primary_small_off', 0.9); 
            backgroundScreen.tickBut.position.set(280, 100);
            backgroundScreen.addChild(backgroundScreen.tickBut);
        backgroundScreen.finger = this._addImageToTutorialContent(backgroundScreen, 'tutorial_hand', 0.5, new PIXI.Point(0.1, 0.1));


    backgroundScreen.steps = [];
    backgroundScreen.steps[0] = function(){
        setHelpText('tutorial_pick_background');
        this.bg2.alpha = 0;
        tweenAlphaOut(this.finger, this, function(){
            this.finger.x = 320;
            this.finger.y = 0;
            tweenAlphaIn(this.finger);
        });
    };
    backgroundScreen.steps[1] = function(){
        tweenAlphaIn(this.bg2);
    };
    backgroundScreen.steps[2] = function(){
        tweenAlphaOut(this.finger, this, function(){
            this.finger.x = -320;
            tweenAlphaIn(this.finger);
        });
    };
    backgroundScreen.steps[3] = function(){
        tweenAlphaOut(this.bg2);
    };
    backgroundScreen.steps[4] = function(){
        tweenAlphaOut(this.finger, this, function(){
            this.finger.x = this.tickBut.x;
            this.finger.y = this.tickBut.y;
            tweenAlphaIn(this.finger);
        });
    };
    backgroundScreen.steps[5] = function(){};

    var poseScreen = new PIXI.Container();
        poseScreen.bg = this._addImageToTutorialContent(poseScreen, 'help_photo_bg');
        poseScreen.dot1 = this._addImageToTutorialContent(poseScreen, 'help_photo_dorthy1');
        poseScreen.dot2 = this._addImageToTutorialContent(poseScreen, 'help_photo_dorthy2');
        poseScreen.dot3 = this._addImageToTutorialContent(poseScreen, 'help_photo_dorthy3');
        poseScreen.dot4 = this._addImageToTutorialContent(poseScreen, 'help_photo_dorthy4');
        poseScreen.btns = this._addImageToTutorialContent(poseScreen, 'help_photo_btns', 0.84);
        poseScreen.finger = this._addImageToTutorialContent(poseScreen, 'tutorial_hand', 0.5, new PIXI.Point(0.1, 0.1));

    poseScreen.steps = [];
    poseScreen.steps[0] = function(){
        setHelpText('tutorial_pick_pose_picture');
        this.dot1.alpha = 0;
        this.dot2.alpha = 0;
        this.dot3.alpha = 1;
        this.dot4.alpha = 0;
        this.finger.rotation = -30 * PIXI.DEG_TO_RAD;
        tweenAlphaOut(this.finger, this, function(){
            this.finger.x = -160;
            this.finger.y = -75;
            tweenAlphaIn(this.finger); 
        });
    };
    poseScreen.steps[1] = function(){
        this.dot3.alpha = 0;
        this.dot1.alpha = 1;
    };
    poseScreen.steps[2] = function(){
        tweenAlphaOut(this.finger, this, function(){
            this.finger.y = -30;
            tweenAlphaIn(this.finger); 
        });
    };
    poseScreen.steps[3] = function(){
        this.dot1.alpha = 0;
        this.dot2.alpha = 1;
    };
    poseScreen.steps[4] = function(){
        tweenAlphaOut(this.finger, this, function(){
            this.finger.y = 35;
            tweenAlphaIn(this.finger); 
        });
    };
    poseScreen.steps[5] = function(){
        this.dot2.alpha = 0;
        this.dot3.alpha = 1;
    };
    poseScreen.steps[6] = function(){
        tweenAlphaOut(this.finger, this, function(){
            this.finger.y = 100;
            this.finger.x = 10;
            tweenAlphaIn(this.finger);
        });
    };
    poseScreen.steps[7] = function(){}

    var photoScreen = new PIXI.Container();
        photoScreen.bg2 = this._addImageToTutorialContent(photoScreen, 'help_pose_bg2');
        photoScreen.dot1 = this._addImageToTutorialContent(photoScreen, 'help_photo_dorthy1', 0.9);
        photoScreen.finalButtons = new PIXI.Container();
            photoScreen.finalButtons.y = 110;
            photoScreen.finalButtons.back = this._createButtonForTutorialContent('icon_previous_off', 'btn_primary_small_off', 0.9)
            photoScreen.finalButtons.back.position.set(-80, 0);
            photoScreen.finalButtons.addChild(photoScreen.finalButtons.back);
            photoScreen.finalButtons.replay = this._createButtonForTutorialContent('icon_replay_off', 'btn_primary_small_off', 0.9);
            photoScreen.finalButtons.addChild(photoScreen.finalButtons.replay); 
            photoScreen.finalButtons.download = this._createButtonForTutorialContent('icon_download_off', 'btn_primary_small_off', 0.9)
            photoScreen.finalButtons.download.position.set(80, 0);
            photoScreen.finalButtons.addChild(photoScreen.finalButtons.download); 
            photoScreen.addChild(photoScreen.finalButtons);
        photoScreen.finger = this._addImageToTutorialContent(photoScreen, 'tutorial_hand', 0.5, new PIXI.Point(0.1, 0.1));

    photoScreen.steps = [];
    photoScreen.steps[0] = function(){
        setHelpText('tutorial_download');
        tweenAlphaOut(this.finger);
    };
    photoScreen.steps[1] = function(){
        
        this.finger.rotation = -30 * PIXI.DEG_TO_RAD;
        this.finger.x = this.finalButtons.x + this.finalButtons.download.x;
        this.finger.y = this.finalButtons.y;
        tweenAlphaIn(this.finger);
    };
    photoScreen.steps[2] = function(){}

    this._contents = [
        {image:dressUpScreen},
        {image:backgroundScreen},
        {image:poseScreen}//,
        //{image:photoScreen}
    ];

    this._imageContainer = new PIXI.Container();
    this._imageContainer.y = -60;
    this._panel.addChild(this._imageContainer);

    this.addRightButton();
    this.addLeftButton();

    this._leftButton = this._guiButtons.left.button;
    this._rightButton = this._guiButtons.right.button;

    this.setPage(this._currentPage);

    this._confirmContainer = new PIXI.Container();
    this._confirmContainer.visible = false;
    this._panel.addChild(this._confirmContainer);

    this._confirmContainer.tickButton = this._generateButton('icon_tick', 'tick', 'primary_small');
    this._confirmContainer.tickButton.signals.up.add(this.onTickButtonClicked, this);
    this._confirmContainer.tickButton.x = -100;
    this._confirmContainer.tickButton.y = 20;
    this._confirmContainer.addChild(this._confirmContainer.tickButton);

    this._confirmContainer.crossButton = this._generateButton('icon_cross', 'cross', 'primary_small');
    this._confirmContainer.crossButton.signals.up.add(this.onCrossButtonClicked, this);
    this._confirmContainer.crossButton.x = 100;
    this._confirmContainer.crossButton.y = 20;
    this._confirmContainer.addChild(this._confirmContainer.crossButton);

    this._confirmContainer.text = new PIXI.Sprite(Common.assets.getTexture('areyousure'));
    this._confirmContainer.text.anchor.set(0.5);
    this._confirmContainer.text.scale.set(0.5);
    this._confirmContainer.text.y = -110;
    this._confirmContainer.addChild(this._confirmContainer.text);

    this.signals.requestedMusicPlay.dispatch('music_pausehelp_menu_00');
};

PauseOverlay.prototype.destroy = function()
{
    Common.paused = false;
    Common.animator.paused = false;
    SimpleScreen.prototype.destroy.call(this);
};

PauseOverlay.prototype.resize = function()
{
    SimpleScreen.prototype.resize.call(this);
};

PauseOverlay.prototype.update = function()
{
    SimpleScreen.prototype.update.call(this);

    if(Common.frameCount == this._lastStepTime + 100)
    {
        this._currentStep = this._currentStep+1 < this._contents[this._currentPage].image.steps.length ? this._currentStep+1 : 0;
        this._lastStepTime = Common.frameCount;
        this._contents[this._currentPage].image.steps[this._currentStep].call(this._contents[this._currentPage].image);
    }
};

PauseOverlay.prototype.animateIn = function(callback, scope)
{
    SimpleScreen.prototype.animateIn.call(this);

    this._panel.scale = new PIXI.Point(0, 0);
    Common.animator.add(TweenMax.to(this._panel.scale, .2, {x:1, ease:Sine.easeOut}));
    Common.animator.add(TweenMax.to(this._panel.scale, .9, {y:1, ease:Elastic.easeOut}));
};

PauseOverlay.prototype.animateOut = function(callback, scope, args)
{
    SimpleScreen.prototype.animateOut.call(this);

    Common.animator.add(TweenMax.to(this._panel.scale, .45, {x:0, ease:Back.easeIn}));
    Common.animator.add(TweenMax.to(this._panel.scale, .5, {y:0, ease:Back.easeIn, onCompleteScope:this, onComplete:function(){
        callback.call(scope, args);
    }}));
};

PauseOverlay.prototype.disableGUI = function()
{
    for(var i in this._buttons)
    {   
        this._buttons[i].interactive = false;
    }
};

PauseOverlay.prototype.enableGUI = function()
{
    for(var i in this._buttons)
    {   
        this._buttons[i].interactive = true;
    }
};

PauseOverlay.prototype.setPage = function(page)
{
    var newImage = this._contents[page].image;
    newImage.x = this._contents[page].x || 0;
    newImage.y = this._contents[page].y || 0;
    newImage.anchor = new PIXI.Point(0.5, 0.5);
    newImage.alpha = 0;
    this._imageContainer.addChild(newImage);

    this._leftButton.interactive = false;
    this._rightButton.interactive = false;

    if(this._image)
    {
        Common.animator.add(TweenMax.to(this._image, .5, {alpha:0, ease:Sine.easeOut}));
    }
    Common.animator.add(TweenMax.to(newImage, .5, {alpha:1, ease:Sine.easeOut, onCompleteScope:this, onComplete:function(){
        if(this._image)
        {
            this._imageContainer.removeChild(this._image);
        }
        this._image = newImage;
        this._leftButton.interactive = true;
        this._rightButton.interactive = true;
    }}));

    if(page == 0)
        this._leftButton.visible = false;
    else
        this._leftButton.visible = true;

    if(page == this._contents.length-1)
    {
        this._rightButton.visible = false;
    }
    else
    {
        this._rightButton.visible = true;
    }

    this._currentPage = page;
    this._currentStep = 0;
    this._lastStepTime = Common.frameCount;
    this._contents[this._currentPage].image.steps[this._currentStep].call(this._contents[this._currentPage].image);
}

//===================================================
// PRIVATE METHODS
//===================================================

PauseOverlay.prototype._addImageToTutorialContent = function(content, textureName, scale, anchor)
{
    var item = new PIXI.Sprite(Common.assets.getTexture(textureName));
    item.anchor = anchor || new PIXI.Point(0.5, 0.5);
    if(scale !== undefined)
        item.scale = new PIXI.Point(scale, scale);
    content.addChild(item);
    return item;
}

PauseOverlay.prototype._createButtonForTutorialContent = function(iconTexture, buttonTexture)
{
    var button = new PIXI.Sprite(Common.assets.getTexture(buttonTexture));
    button.anchor.set(0.5);
    button.scale.set(0.4);
    var icon = new PIXI.Sprite(Common.assets.getTexture(iconTexture));
    icon.anchor.set(0.5);
    button.addChild(icon);

    return button;
}

//===================================================
// EVENTS
//===================================================

PauseOverlay.prototype.onPlayButtonClicked = function()
{
    this.disableGUI();
    this.animateOut(this.signals.next.dispatch, this);
};

PauseOverlay.prototype.onHomeButtonClicked = function()
{
    TweenMax.to(this._imageContainer, .5, {alpha:0});
    TweenMax.to(this._helpText, .5, {alpha:0});
    this._confirmContainer.visible = true;
    this._confirmContainer.alpha = 0;
    TweenMax.to(this._confirmContainer, .5, {alpha:1});
    this._leftButton.visible = false;
    this._rightButton.visible = false;
}

PauseOverlay.prototype.onCrossButtonClicked = function()
{
    TweenMax.to(this._imageContainer, .5, {alpha:1});
    TweenMax.to(this._helpText, .5, {alpha:1});
    TweenMax.to(this._confirmContainer, .5, {alpha:0, onCompleteScope:this, onComplete:function(){
        this._confirmContainer.visible = false;
    }});
    this._leftButton.visible = true;
    this._rightButton.visible = true;
}

PauseOverlay.prototype.onTickButtonClicked = function()
{
    SimpleScreen.prototype.onGUIButtonClicked.call(this, this._homeButton);
}

PauseOverlay.prototype.onGUIButtonClicked = function(button)
{
    if(button.id == 'home')
    {
        this.onHomeButtonClicked();
    }
    else
    {
        SimpleScreen.prototype.onGUIButtonClicked.call(this, button);
    }
};

PauseOverlay.prototype.onInternalButtonClicked = function(button)
{
    if(button.id == 'right')
    {
        this.setPage(this._currentPage+1);
    }
    else if(button.id == 'left')
    {
        this.setPage(this._currentPage-1);
    }
}

//===================================================
// GETTERS/SETTERS
//===================================================

//===================================================


},{"../Common":2,"../screens/SimpleScreen":26}],22:[function(require,module,exports){
var Common          = require("../Common");
var SimpleScreen    = require('./SimpleScreen');
var TitleBar        = require('../game/TitleBar');

//===================================================
// CONSTRUCTOR
//===================================================

/**
 * @constructor
 */
function BackgroundScreen(character, background)
{
    SimpleScreen.call(this);

    this._character = character;

    this._background = null;
    this._backgroundTextures = [
        'bg_game_001', 
        'bg_game_002', 
        'bg_game_003',
        'bg_game_004',
        'bg_game_005',
        'bg_game_006',
        'bg_game_007',
        'bg_game_008',
        'bg_game_009',
        'bg_game_010',
        'bg_game_011',
        'bg_game_012',
        'bg_game_013'
    ];
    this._currentBackgroundTexture = background == undefined ? 0 : this._backgroundTextures.indexOf(background);

    this._title = null;

    this._photoScene = null;
}

BackgroundScreen.prototype = Object.create(SimpleScreen.prototype);
BackgroundScreen.prototype.constructor = BackgroundScreen;
module.exports = BackgroundScreen;

//===================================================
// PUBLIC METHODS
//===================================================

BackgroundScreen.prototype.init = function()
{
    SimpleScreen.prototype.init.call(this);

    this._character.photoMode = true;

    this._exportBackground = new PIXI.Sprite(Common.assets.getTexture('bg_photo'));
    this.addChild(this._exportBackground);

    this._black = new PIXI.Sprite(Common.colours.black);
    this._black.width = Common.STAGE_WIDTH;
    this._black.height = Common.STAGE_HEIGHT;
    this.addChild(this._black);

    this._photoScene = new PIXI.Container();
    this.addChild(this._photoScene);

    this._background = new PIXI.Sprite(Common.assets.getTexture(this._backgroundTextures[this._currentBackgroundTexture]));
    this._photoScene.addChild(this._background);

    var x = Common.STAGE_WIDTH / 2;
    var y = 700;
    if(this._character.x != x || this._character.y != y)
    {
        this._character.setAnimation('jumpcentre');
        Common.animator.add(TweenMax.to(this._character, .5, {delay:.2, x:x, y:y, ease:Sine.easeInOut}));
    }
    else
    {
        this._character.setAnimation('idle1');
    }
    this._photoScene.addChild(this._character);

    this._setTitle('tutorial_pick_background');

    this.addPauseButton();
    this.addRightButton();
    this.addLeftButton();
    this.addNextButton(null, null, 'icon_tick');
    this.addBackButton();

    this.signals.requestedMusicPlay.dispatch('music_camera_loop_00');
};

BackgroundScreen.prototype.destroy = function()
{
    SimpleScreen.prototype.destroy.call(this);
};

BackgroundScreen.prototype.resize = function()
{
    SimpleScreen.prototype.resize.call(this);
};

BackgroundScreen.prototype.update = function()
{
    if(Common.paused) return true;

    SimpleScreen.prototype.update.call(this);

    if(this._state != 'end')
    {
        this._character.update();
    }
};

//===================================================
// PRIVATE METHODS
//===================================================

BackgroundScreen.prototype._setBackground = function()
{
    this._background.texture = Common.assets.getTexture(this._backgroundTextures[this._currentBackgroundTexture]);
}

BackgroundScreen.prototype._setTitle = function(text)
{
    if(this._title)
        this.removeChild(this._title);

    this._title = new TitleBar();
    this._title.x = Common.STAGE_WIDTH / 2;
    this._title.y = 70;
    this.addChild(this._title);

    this._title.show(text);
}

//===================================================
// EVENTS
//===================================================

BackgroundScreen.prototype.onInternalButtonClicked = function(button)
{
    if(button.id == 'right')
    {
        this._currentBackgroundTexture ++;
        if(this._currentBackgroundTexture >= this._backgroundTextures.length)
            this._currentBackgroundTexture = 0;
        Common.audio.playSound('sfx_background_swipe_00');
    }
    else if(button.id == 'left')
    {
        this._currentBackgroundTexture --;
        if(this._currentBackgroundTexture < 0)
            this._currentBackgroundTexture = this._backgroundTextures.length-1;
        Common.audio.playSound('sfx_background_swipe_00');
    }
    this._setBackground();
}

BackgroundScreen.prototype.onNextButtonClicked = function(button)
{
    this.signals.next.dispatch(this._backgroundTextures[this._currentBackgroundTexture]);
};

//===================================================
// GETTERS/SETTERS
//===================================================

//===================================================


},{"../Common":2,"../game/TitleBar":18,"./SimpleScreen":26}],23:[function(require,module,exports){
var Common              = require("../Common");
var SimpleScreen        = require('./SimpleScreen');
var AnimatedCharacter   = require('../game/AnimatedCharacter');
var ClothesMenu         = require('../game/ClothesMenu');
var TitleBar            = require('../game/TitleBar');

//===================================================
// CONSTRUCTOR
//===================================================

/**
 * @constructor
 */
function DressupScreen(character)
{
    this._character = character;
    this._fresh = !character;
    this._menu = null;
    this._title = null;

    this._currentTutorial = null;

    p3.log(this._fresh);

    SimpleScreen.call(this);
}

DressupScreen.prototype = Object.create(SimpleScreen.prototype);
DressupScreen.prototype.constructor = DressupScreen;
module.exports = DressupScreen;

//===================================================
// PUBLIC METHODS
//===================================================

DressupScreen.prototype.init = function()
{
    SimpleScreen.prototype.init.call(this);

    var background = new PIXI.Sprite(Common.assets.getTexture('bg_game_001'));
    this.addChild(background);

    if(this._character == null)
    {
        this._character = new AnimatedCharacter();
    }

    this._character.photoMode = false;
    
    this._character.x = (Common.STAGE_WIDTH / 2) + 300;
    this._character.y = 700;
    this.addChild(this._character);

    this._menu = new ClothesMenu();
    this._menu.x = (Common.STAGE_WIDTH / 2) - 340;
    this._menu.y = 50;
    this.addChild(this._menu);
    this._menu.init();
    this._menu.signals.itemSelected.add(this.onItemSelected, this);
    this._menu.signals.tutorialCompleted.add(this.onTutorialCompleted, this);

    this._title = new TitleBar();
    this._title.x = Common.STAGE_WIDTH / 2;
    this._title.y = Common.STAGE_HEIGHT - 130;
    this.addChild(this._title);

    var allTutorialsComplete = true;

    for(var i in Common.tutorialStatesPassed)
    {
        if(Common.tutorialStatesPassed[i] == false)
            allTutorialsComplete = false;
    }

    if(!allTutorialsComplete)
    {
        this._menu.setFirstTutorial();
        this._menu.tutorialFinger.signals.tutorialStarted.add(this.onTutorialStarted, this);
    }
    else
    {
        this._title.show('tutorial_clothes');
        this._title.remove(3);
        this._menu.setPromptTutorial();
    }

    this.addPauseButton();
    this.addNextButton(null, null, 'icon_camera');

    if(this._fresh)
    {
        Common.audio.playSound('sfx_wardrobe_appear_00');
        this._character.intro();
    }
    else
    {
        this._character.setAnimation('idle1');
    }

    this._menu.y = Common.STAGE_HEIGHT;
    Common.animator.add(TweenMax.to(this._menu, .8, {y:50, ease:Back.easeOut}));

    this.signals.requestedMusicPlay.dispatch('music_ambient_wardrobe_loop_00');
};

DressupScreen.prototype.destroy = function()
{
    this._menu.destroy();
    SimpleScreen.prototype.destroy.call(this);
};

DressupScreen.prototype.resize = function()
{
    SimpleScreen.prototype.resize.call(this);

    this._character.x = Math.min(this._rightEdge, (Common.STAGE_WIDTH/2) + 320);
    this._menu.x = Math.max(this._leftEdge + 20, (Common.STAGE_WIDTH/2) - 480);
};

DressupScreen.prototype.update = function()
{
    if(Common.paused) return;

    SimpleScreen.prototype.update.call(this);

    this._character.update();
    this._menu.update();
};

DressupScreen.prototype.getCharacter = function()
{
    return this._character;
}


//===================================================
// PRIVATE METHODS
//===================================================

//===================================================
// EVENTS
//===================================================

DressupScreen.prototype.onItemSelected = function(obj)
{
    if(this._character.currentOutfit[this._menu.currentCategory] != obj.id)
    {
        this._character.currentOutfit[this._menu.currentCategory] = obj.id;
        this._character.resetBase(obj.baseSlots);

        for(var i in obj.clear)
        {
            this._character.removeAttachmentFromSlot(obj.clear[i]);
        }

        for(var i in obj.add)
        {
            for(var j in obj.baseSlots)
            {
                if(obj.baseSlots[j].outfit_slot == obj.add[i].slot)
                {
                    this._character.removeAttachmentFromSlot(obj.baseSlots[j].base_slot);
                }
            }

            this._character.setAttachmentForSlot(obj.add[i].slot, obj.add[i].attachment);
        }

        var arr = {headwear:'hat', footwear:'shoes', lower_body:'skirt', upper_body:'top'};

        var anim = 'click' + arr[this._menu.currentCategory];
        for(var i in Common.config.clothes[this._menu.currentCategory].items)
        {
            var item = Common.config.clothes[this._menu.currentCategory].items[i];
            if(item.id == obj.id && item.custom_animation)
            {
                anim = item.custom_animation;
            }
        }

        for(var i in this._character.completeAnimations)
        {
            if(this._character.hasCompleteOutfit(i))
            {
                if(this._character.completeAnimations[i].animation)
                {
                    anim = this._character.completeAnimations[i].animationName;
                }
                if(this._character.completeAnimations[i].music)
                {
                    Common.audio.playSound('music_' + i + '_complete_00');
                }
                if(this._character.completeAnimations[i].sfx)
                {
                    Common.audio.playSound('sfx_outfit_' + i + '_complete_00');
                }
            }
        }

        this._character.setAnimation(anim);
        this._character.changeClothesEffect(this._menu.currentCategory);

        var sfx = null;

        if(obj.id.indexOf('lion') > -1)
        {
            sfx = 'sfx_attach_item_lion_00';
        }
        else if(obj.id.indexOf('scarecrow') > -1)
        {
            sfx = 'sfx_attach_item_scarecrow_00';
        }
        else if(obj.id.indexOf('tinman') > -1)
        {
            sfx = 'sfx_attach_item_tinman_00';
        }
        else
        {
            var sounds = {headwear:'sfx_switch_hat_00', 
                          upper_body:'sfx_switch_top_01',
                          lower_body:'sfx_switch_trousers_01',
                          footwear:'sfx_switch_shoes_00'}

            sfx = sounds[this._menu.currentCategory];
        }
        Common.audio.playSound(sfx);
    }
}

DressupScreen.prototype.onTutorialStarted = function(id)
{
    this._currentTutorial = id;
    this._title.show('tutorial_' + id);
}

DressupScreen.prototype.onTutorialCompleted = function(id)
{
    if(this._currentTutorial == id)
    {
        this._currentTutorial = null;
        this._title.remove();
    }
    if(!Common.savedData.allTutorialsViewed &&
        Common.tutorialStatesPassed.clothes == true &&
        Common.tutorialStatesPassed.scroll == true &&
        Common.tutorialStatesPassed.categories == true)
    {
        Common.savedData.allTutorialsViewed = true;
        Common.savedData.save();
        this._title.remove();
        this._menu.setPromptTutorial();
    }
}

DressupScreen.prototype.onNextButtonClicked = function(button)
{
    if(button.id == 'next')
    {
        button.interactive = false;
        Common.audio.playSound('sfx_btn_accept_00');
        Common.animator.add(TweenMax.to(this._menu, .5, {y:Common.STAGE_HEIGHT, ease:Sine.easeIn, onCompleteScope:this, onComplete:function(){
            this.signals.next.dispatch(button.id);
        }}));
    }
    else
    {
        this.signals.next.dispatch(button.id);
    }
};

//===================================================
// GETTERS/SETTERS
//===================================================

//===================================================


},{"../Common":2,"../game/AnimatedCharacter":12,"../game/ClothesMenu":16,"../game/TitleBar":18,"./SimpleScreen":26}],24:[function(require,module,exports){
var Common          = require("../Common");
var SimpleScreen    = require('./SimpleScreen');
var TitleBar        = require('../game/TitleBar');

//===================================================
// CONSTRUCTOR
//===================================================

/**
 * @constructor
 */
function PhotoScreen(character, background)
{
    SimpleScreen.call(this);

    this._state = 'photo';

    this._photoScene = null;
    this._photoSceneCircleMask = null;
    this._photoSceneSquareMask = null;

    this._character = character;

    this._background = null;
    this._backgroundTexture = background !== undefined ? background : 'bg_game_001';

    this._photoFrame = null;
    this._poseButtons = [];
    this._cameraButton = null;
    this._exportFrame = null;

    this._title = null;

    this._exportData = null;
}

PhotoScreen.prototype = Object.create(SimpleScreen.prototype);
PhotoScreen.prototype.constructor = PhotoScreen;
module.exports = PhotoScreen;

//===================================================
// PUBLIC METHODS
//===================================================

PhotoScreen.prototype.init = function()
{
    SimpleScreen.prototype.init.call(this);

    this._character.photoMode = true;

    this._exportBackground = new PIXI.Sprite(Common.assets.getTexture('bg_photo'));
    this.addChild(this._exportBackground);

    this._black = new PIXI.Sprite(Common.colours.black);
    this._black.width = Common.STAGE_WIDTH;
    this._black.height = Common.STAGE_HEIGHT;
    this.addChild(this._black);

    this._photoScene = new PIXI.Container();
    this.addChild(this._photoScene);

    this._photoSceneCircleMask = new PIXI.Graphics();
    this._photoSceneCircleMask.beginFill(0x000000);
    this._photoSceneCircleMask.drawCircle(0, 0, Common.STAGE_WIDTH/2);
    this._photoSceneCircleMask.x = Common.STAGE_WIDTH / 2;
    this._photoSceneCircleMask.y = Common.STAGE_HEIGHT / 2;

    this._photoSceneSquareMask = new PIXI.Graphics();
    this._photoSceneSquareMask.beginFill(0x000000);
    this._photoSceneSquareMask.drawRect(-902/2, -652/2, 902, 652);
    this._photoSceneSquareMask.x = Common.STAGE_WIDTH / 2;
    this._photoSceneSquareMask.y = (Common.STAGE_HEIGHT / 2) + 10;

    this._background = new PIXI.Sprite(Common.assets.getTexture(this._backgroundTexture));
    this._photoScene.addChild(this._background);

    this._exportFrame = new PIXI.Sprite(Common.assets.getTexture('photo_boarder'));
    this._exportFrame.anchor = new PIXI.Point(0.5, 0.5);
    this._exportFrame.x = Common.STAGE_WIDTH / 2;
    this._exportFrame.y = Common.STAGE_HEIGHT / 2;
    this._exportFrame.visible = false;
    this.addChild(this._exportFrame);

    this._photoScene.addChild(this._character);

    this._photoFrame = new PIXI.Sprite(Common.assets.getTexture('frame'));
    this._photoFrame.anchor = new PIXI.Point(0.5, 0.5);
    this._photoFrame.x = Common.STAGE_WIDTH / 2;
    this._photoFrame.y = Common.STAGE_HEIGHT / 2;
    this._photoFrame.visible = false;
    this.addChild(this._photoFrame);

    this.addPauseButton();
    this.addHomeButton();
    this.addBackButton();

    this._guiButtons.home.setX = function()
    {
        this._guiButtons.home.button.x = this._rightEdge - this._guiButtonMargins.right;
    }.bind(this);

    this._guiButtons.home.button.visible = false;

    this.signals.requestedMusicPlay.dispatch('music_camera_loop_00');

    this.setPhotoMode();
};

PhotoScreen.prototype.destroy = function()
{
    SimpleScreen.prototype.destroy.call(this);
};

PhotoScreen.prototype.resize = function()
{
    SimpleScreen.prototype.resize.call(this);
};

PhotoScreen.prototype.update = function()
{
    if(Common.paused) return true;

    SimpleScreen.prototype.update.call(this);

    if(this._state != 'end')
    {
        this._character.update();
    }
};

PhotoScreen.prototype.setPhotoMode = function()
{
    this._state = 'photo';

    this._photoFrame.visible = true;

    var poses = [
        {icon:'icon_pose_001', animation:'photopose1'}, 
        {icon:'icon_pose_002', animation:'photopose2'},
        {icon:'icon_pose_003', animation:'photopose3'},
        {icon:'icon_pose_004', animation:'photopose4'},
    ];
    for(var i = 0; i < poses.length; i++)
    {
        var button = this._generateButton(poses[i].icon, poses[i].animation, 'secondary_small');
        button.signals.up.add(this.onPoseButtonClicked, this);
        button.x = (Common.STAGE_WIDTH / 2) - 420;
        button.y = ((Common.STAGE_HEIGHT / 2)+100) - 240 + (i * 130);
        button.sound = 'music_stab_change_pose_0' + i;
        this.addChild(button);
        button.hitArea = new PIXI.Rectangle(-50, -50, 100, 100);
        this._poseButtons.push(button);
    }

    var button = this._generateButton('icon_flash', 'camera', 'primary_small');
    button.signals.up.add(this.onInternalButtonClicked, this);
    button.x = (Common.STAGE_WIDTH / 2) + 400;
    button.y = (Common.STAGE_HEIGHT / 2) + 280;
    this.addChild(button);
    this._cameraButton = button;

    this._setTitle('tutorial_pick_pose_picture');
};

PhotoScreen.prototype.takePicture = function()
{
    this.addChild(this._photoSceneCircleMask);
    this._photoScene.mask = this._photoSceneCircleMask;
    Common.audio.playSound('sfx_take_final_photo');
    Common.animator.add(TweenMax.to(this._photoSceneCircleMask.scale, .2, {x:0, y:0, onCompleteScope:this, onComplete:this.setEndMode}));
}

PhotoScreen.prototype.setEndMode = function()
{
    this._photoScene.mask = null;
    this._photoSceneCircleMask.scale = new PIXI.Point(0, 0);
    this.removeChild(this._photoSceneCircleMask);

    this._photoScene.mask = this._photoSceneSquareMask;
    this.addChild(this._photoSceneSquareMask);

    this._state = 'end';

    for(var i in this._poseButtons)
    {
        this.removeChild(this._poseButtons[i]);
    }
    this.removeChild(this._cameraButton);
    this.removeChild(this._guiButtons.pause.button);
    this._guiButtons.back.button.visible = false;
    this.removeChild(this._title);

    this._photoFrame.visible = false;

    this._exportFrame.visible = true;
    this._black.visible = false;

    /*
    Common.renderer.render(Common.stage);
    try{
        this._exportData = Common.renderer.extract.base64();
    }
    catch(e){
        this._exportData = document.getElementById('canvas').toDataURL("image/png");
    }   
    Common.savedData.exportedImage = this._exportData;
    Common.savedData.save();
    */

    this._guiButtons.home.button.visible = true;

    this._setTitle('tutorial_great_photo'); 
    
    var button = this._generateButton('icon_previous', 'restart', 'primary_small');
    button.signals.up.add(this.onInternalButtonClicked, this);
    button.x = (Common.STAGE_WIDTH / 2) - 200;
    button.y = (Common.STAGE_HEIGHT / 2) + 280;
    this.addChild(button);
    this._restartButton = button;

    var button = this._generateButton('icon_replay', 'complete', 'primary_small');
    button.signals.up.add(this.onNextButtonClicked, this);
    button.x = (Common.STAGE_WIDTH / 2);
    button.y = (Common.STAGE_HEIGHT / 2) + 280;
    this.addChild(button);
    this._completeButton = button;

    var button = this._generateButton('icon_download', 'download', 'primary_small');
    button.signals.up.add(this.onInternalButtonClicked, this);
    button.x = (Common.STAGE_WIDTH / 2) + 200;
    button.y = (Common.STAGE_HEIGHT / 2) + 280;
    this.addChild(button);
    this._downloadButton = button;

    //Removing download functionality
    this._downloadButton.visible = false;
    this._restartButton.x = (Common.STAGE_WIDTH / 2)-150;
    this._completeButton.x = (Common.STAGE_WIDTH / 2)+150;

}

//===================================================
// PRIVATE METHODS
//===================================================

PhotoScreen.prototype._setTitle = function(text)
{
    if(this._title)
        this.removeChild(this._title);

    this._title = new TitleBar();
    this._title.x = Common.STAGE_WIDTH / 2;
    this._title.y = 70;
    this.addChild(this._title);

    this._title.show(text);
}

//===================================================
// EVENTS
//===================================================

PhotoScreen.prototype.onInternalButtonClicked = function(button)
{
    if(button.id == 'camera')
    {
        this.takePicture();
    }
    else if(button.id == 'download')
    {
        //if(p3.Device.isMobile)
        //   window.open(this._exportData, "_BLANK");
        //else
            window.open(Common.gameDir + 'image.html', "_BLANK");
    }
    else if(button.id == 'restart')
    {
        this.onPreviousButtonClicked();
    }
}

PhotoScreen.prototype.onPreviousButtonClicked = function(button)
{
    p3.log('onPreviousButtonClicked');
    this.signals.previous.dispatch(this._state);
};

PhotoScreen.prototype.onPoseButtonClicked = function(button)
{
    this._character.setAnimation(button.id, true);
    Common.audio.playSound(button.sound);
    Common.audio.playSound('sfx_btn_change_camera_pose_00');
};

//===================================================
// GETTERS/SETTERS
//===================================================

//===================================================


},{"../Common":2,"../game/TitleBar":18,"./SimpleScreen":26}],25:[function(require,module,exports){
var Common       = require("../Common");
var SimpleScreen = require("./SimpleScreen");

/**
 * @constructor
 */
function PreloaderScreen()
{
    SimpleScreen.call(this);

    this.loaded = 0;

    this._loadedSmooth = 0;
    this._logo = null;
    this._bar = null;
    this._text = null;

    this.signals.loadComplete = new signals.Signal();
}

module.exports                        = PreloaderScreen;
PreloaderScreen.prototype             = Object.create(SimpleScreen.prototype);
PreloaderScreen.prototype.constructor = PreloaderScreen;

PreloaderScreen.prototype.init = function()
{
	SimpleScreen.prototype.init.call(this);

    var g = new PIXI.Graphics();
    g.clear();
    g.beginFill(0x872F87);
    g.drawRect(0, 0, Common.STAGE_WIDTH, Common.STAGE_HEIGHT);
    g.endFill();
    this.addChild(g);

    var holder = new PIXI.Container();
    holder.x = Common.STAGE_WIDTH * 0.5;
    holder.y = Common.STAGE_HEIGHT * 0.5 + 46;
    this.addChild(holder);

    var frames = [];
    for (let i = 1; i < 10; ++ i) {
        frames.push(Common.assets.getTexture("loader_animation000" + i));
    }
    frames.push(Common.assets.getTexture("loader_animation0010"));

    var sequence = new p3.MovieClipSequence();
    sequence.addTextures(frames);

    this._logo = new p3.MovieClip(sequence);
    this._logo.x = 50;
    this._logo.y = 20;
    this._logo.anchor = new PIXI.Point(0.5, 1);
    this._logo.animationSpeed = 1 / 4;
    this._logo.looping = false;
    this._logo.play();
    holder.addChild(this._logo);

    this._bar = new PIXI.Sprite(Common.assets.getTexture("preloader_bg"));
    this._bar.y = 34;
    this._bar.anchor = new PIXI.Point(0.5, 0.5);
    holder.addChild(this._bar);

    this._bar.fill = new PIXI.Sprite(Common.assets.getTexture("preloader_bar"));
    this._bar.fill.anchor = new PIXI.Point(0.5, 0.5);
    this._bar.addChild(this._bar.fill);

    this._bar.fill.mask = new PIXI.Graphics();
    this._bar.fill.mask.x = -this._bar.fill.texture.width * 0.5;
    this._bar.fill.mask.scale.x = 0;
    this._bar.fill.mask.beginFill(0xFF0000);
    this._bar.fill.mask.drawRect(0, -this._bar.fill.texture.height * 0.5,
    this._bar.fill.texture.width, this._bar.fill.texture.height);
    this._bar.fill.addChild(this._bar.fill.mask);

    this._bar.frame = new PIXI.Sprite(Common.assets.getTexture("preloader_overlay"));
    this._bar.frame.anchor = new PIXI.Point(0.5, 0.5);
    this._bar.addChild(this._bar.frame);

    this._text = new PIXI.Text("0%", {fontSize: "32px", fontFamily: "Arial", fill: "#FFFFFF", align: "center"});
    this._text.y = this._bar.y + 60;
    this._text.pivot.x = this._text.width * 0.5;
    this._text.pivot.y = this._text.height * 0.5;
    holder.addChild(this._text);

};

PreloaderScreen.prototype.destroy = function()
{
    SimpleScreen.prototype.destroy.call(this);
};

PreloaderScreen.prototype.animateIn = function()
{

};

PreloaderScreen.prototype.update = function()
{
    this._loadedSmooth += (this.loaded - this._loadedSmooth) * 0.1;

    if(this._loadedSmooth > 99)
        this._loadedSmooth = 100;

    var loaded = Math.min(1, this._loadedSmooth/100);
    this._bar.fill.mask.scale.x += (loaded - this._bar.fill.mask.scale.x) * 0.4;

    this._text.text = "" + Math.round(loaded * 100) + "%";
    this._text.pivot.x = this._text.width * 0.5;

    if(loaded == 1)
    {
        this.signals.loadComplete.dispatch();
    }
};
},{"../Common":2,"./SimpleScreen":26}],26:[function(require,module,exports){

var Common          = require("../Common");
var GUIButtonData   = require("../ui/GUIbuttonData");

//===================================================
// CONSTRUCTOR
//===================================================

/**
 * @constructor
 */
function SimpleScreen() {

    p3.Scene.call(this);

    this.signals.next = new signals.Signal();
    this.signals.previous = new signals.Signal();
    this.signals.guiClick = new signals.Signal();
    this.signals.requestedMusicPlay = new signals.Signal();
    this.signals.requestedMusicStop = new signals.Signal();
    this.signals.requestedAmbiencePlay = new signals.Signal();
    this.signals.requestedAmbienceStop = new signals.Signal();
    this.signals.requestedAmbienceStopAll = new signals.Signal();

    this._centre = new PIXI.Point(Common.STAGE_WIDTH/2, Common.STAGE_HEIGHT/2);
    this._leftEdge = 0;
    this._rightEdge = 0;

    this._guiButtonMargins = {top:100, bottom:100, right:100, left:100, minSpacing:150};
    this._guiButtons = {};
}
module.exports = SimpleScreen;
SimpleScreen.prototype = Object.create(p3.Scene.prototype);
SimpleScreen.prototype.constructor = SimpleScreen;

//===================================================
// PUBLIC METHODS
//===================================================


SimpleScreen.prototype.init = function()
{
    
};

SimpleScreen.prototype.destroy = function()
{
    this.signals.next.dispose();
    this.signals.previous.dispose();
    this.signals.guiClick.dispose();
};

SimpleScreen.prototype.update = function()
{

};

SimpleScreen.prototype.addPauseButton = function(x, y)
{
    var button = this._generateButton('icon_pause', 'pause');
    button.signals.up.add(this.onGUIButtonClicked, this);

    if(y == undefined)
    {
        button.y = this._guiButtonMargins.top;
    }
    else
    {
        button.y = y;
    }
    if(x == undefined)
    {
        this._guiButtons.pause = new GUIButtonData(button, function()
        {
            button.x = this._rightEdge - this._guiButtonMargins.right;
        }.bind(this));
    }
    else
    {
        button.x = x;
    }

    this.addChild(button);

    return button;
}

SimpleScreen.prototype.addHelpButton = function(x, y)
{
    var button = this._generateButton('icon_help', 'help');
    button.signals.up.add(this.onGUIButtonClicked, this);

    if(y == undefined)
    {
        button.y = this._guiButtonMargins.top;
    }
    else
    {
        button.y = y;
    }
    if(x == undefined)
    {
        this._guiButtons.help = new GUIButtonData(button, function()
        {
            button.x = this._rightEdge - this._guiButtonMargins.right;
            if(this._guiButtons.pause)
            {
                button.x -= this._guiButtonMargins.minSpacing;
            }
        }
        .bind(this));
    }
    else
    {
        button.x = x;
    }

    this.addChild(button);

    return button;
}

SimpleScreen.prototype.addBackButton = function(x, y)
{
    var button = this._generateButton('icon_previous', 'back');
    button.signals.up.add(this.onPreviousButtonClicked, this);

    if(y == undefined)
    {
        button.y = this._guiButtonMargins.top;
    }
    else
    {
        button.y = y;
    }
    if(x == undefined)
    {
        this._guiButtons.back = new GUIButtonData(button, function()
        {
            button.x = this._leftEdge + this._guiButtonMargins.left;
        }
        .bind(this));
    }
    else
    {
        button.x = x;
    }

    this.addChild(button);

    return button;
}

SimpleScreen.prototype.addNextButton = function(x, y, icon)
{
    var button = this._generateButton(icon || 'icon_next', 'next');
    button.signals.up.add(this.onNextButtonClicked, this);

    if(y == undefined)
    {
        button.y = Common.STAGE_HEIGHT - this._guiButtonMargins.bottom;
    }
    else
    {
        button.y = y;
    }
    if(x == undefined)
    {
        this._guiButtons.next = new GUIButtonData(button, function()
        {
            button.x = this._rightEdge - this._guiButtonMargins.right;
        }
        .bind(this));
    }
    else
    {
        button.x = x;
    }

    this.addChild(button);

    return button;
}

SimpleScreen.prototype.addRightButton = function(x, y)
{
    var button = this._generateButton('icon_tertairy_next', 'right', 'tertairy');
    button.signals.up.add(this.onInternalButtonClicked, this);

    if(y == undefined)
    {
        button.y = Common.STAGE_HEIGHT/2;
    }
    else
    {
        button.y = y;
    }
    if(x == undefined)
    {
        this._guiButtons.right = new GUIButtonData(button, function()
        {
            button.x = this._rightEdge - (button.width/2);
        }
        .bind(this));
    }
    else
    {
        button.x = x;
    }

    button.animate = false;
    button._background.scale.x = -1;
    this.addChild(button);

    return button;
}

SimpleScreen.prototype.addLeftButton = function(x, y)
{
    var button = this._generateButton('icon_tertairy_back', 'left', 'tertairy');
    button.signals.up.add(this.onInternalButtonClicked, this);

    if(y == undefined)
    {
        button.y = Common.STAGE_HEIGHT/2;
    }
    else
    {
        button.y = y;
    }
    if(x == undefined)
    {
        this._guiButtons.left = new GUIButtonData(button, function()
        {
            button.x = this._leftEdge + (button.width/2);
        }
        .bind(this));
    }
    else
    {
        button.x = x;
    }
    button.animate = false;
    this.addChild(button);

    return button;
}

SimpleScreen.prototype.addMuteButton = function(x, y)
{
    var button = this._generateButton('icon_sound', 'mute');

    if(y == undefined)
    {
        button.y = this._guiButtonMargins.top;
    }
    else
    {
        button.y = y;
    }
    if(x == undefined)
    {
        this._guiButtons.mute = new GUIButtonData(button, function()
        {
            button.x = this._rightEdge - this._guiButtonMargins.right;
            if(this._guiButtons.pause)
            {
                button.x -= this._guiButtonMargins.minSpacing;
            }
            if(this._guiButtons.help)
            {
                button.x -= this._guiButtonMargins.minSpacing;
            }
        }
        .bind(this));
    }
    else
    {
        button.x = x;
    }
    this.addChild(button);
    return button;
}

SimpleScreen.prototype.addHomeButton = function(x, y)
{
    var button = this._generateButton('icon_home', 'home');
    button.signals.up.add(this.onGUIButtonClicked, this);

    if(y == undefined)
    {
        button.y = this._guiButtonMargins.top;
    }
    else
    {
        button.y = y;
    }
    if(x == undefined)
    {
        this._guiButtons.home = new GUIButtonData(button, function()
        {
            button.x = this._leftEdge + this._guiButtonMargins.left;
        }
        .bind(this));
    }
    else
    {
        button.x = x;
    }
    this.addChild(button);
    return button;
}

SimpleScreen.prototype.addOverlay = function()
{
    var overlay = new PIXI.Sprite(Common.colours.black);
    overlay.alpha = 0.7;
    overlay.width = Common.STAGE_WIDTH;
    overlay.height = Common.STAGE_HEIGHT;
    overlay.hitArea = new PIXI.Rectangle(0, 0, Common.STAGE_WIDTH, Common.STAGE_HEIGHT);
    overlay.interactive = true;
    this.addChild(overlay);
}

SimpleScreen.prototype.resize = function()
{
    this.x = (p3.View.width - Common.STAGE_WIDTH) * 0.5;

    this._rightEdge = this._centre.x + (p3.View.width/2);
    this._leftEdge = this._centre.x - (p3.View.width/2);

    for(var i in this._guiButtons)
    {
        if(this._guiButtons[i].setX)
        {
            this._guiButtons[i].setX();
        }
    }
};


SimpleScreen.prototype.hideGUI = function()
{


};

SimpleScreen.prototype.showGUI = function()
{

};


//===================================================
// PRIVATE METHODS
//===================================================

SimpleScreen.prototype._generateButton = function(icon, id, type)
{
    type = type || 'primary_small';
    var buttonStates = new p3.ButtonStates(
        Common.assets.getTexture('btn_' + type + '_off'),
        Common.assets.getTexture('btn_' + type + '_over'),
        Common.assets.getTexture('btn_' + type + '_down'),
        Common.assets.getTexture(icon + '_off')
    );

    buttonStates.iconOver = Common.assets.getTexture(icon + '_over');
    buttonStates.iconDown = Common.assets.getTexture(icon + '_down');

    var button;
    if(id == 'mute')
    {
        buttonStates.iconAlt = Common.assets.getTexture('icon_mute_off');
        buttonStates.iconOverAlt = Common.assets.getTexture('icon_mute_over');
        buttonStates.iconDownAlt = Common.assets.getTexture('icon_mute_down');
        button = new p3.MuteButton(buttonStates);
    }
    else
    {
        button = new p3.Button(buttonStates);
    }
    button.id = id;
    return button;
}

SimpleScreen.prototype._generatePlaceholderButton = function(text, id, mute)
{
    if(Common.placeHolderButtonIcons[id] == null)
    {   
        var text = new PIXI.Text(text, {font:'30px Tahoma', fill:0x000000, align:'center'});
        Common.placeHolderButtonIcons[id] = text.generateTexture(Common.renderer, 1.0, PIXI.SCALE_MODES.LINEAR);
    }
    var buttonStates = new p3.ButtonStates(
        Common.placeHolderButtonBox,
        Common.placeHolderButtonBox,
        Common.placeHolderButtonBox,
        Common.placeHolderButtonIcons[id]
    );

    var button;
    if(mute)
    {
        if(Common.placeHolderButtonIcons.unmute == null)
        {   
            var text = new PIXI.Text('Unmute', {font:'30px Tahoma', fill:0x000000, align:'center'});
            Common.placeHolderButtonIcons.unmute = text.generateTexture(Common.renderer, 1.0, PIXI.SCALE_MODES.LINEAR);
        }
        buttonStates.iconAlt = Common.placeHolderButtonIcons.unmute;
        button = new p3.MuteButton(buttonStates);
    }
    else
    {
        button = new p3.Button(buttonStates);
    }
    button.animate = false;
    button.animateIcon = false;
    button.id = id;
    return button;
}

//===================================================
// EVENTS
//===================================================

SimpleScreen.prototype.onGUIButtonClicked = function(button)
{
    if(button.id == "back")
        this.signals.previous.dispatch(button.id);
    else
        this.signals.guiClick.dispatch(button.id);
};

SimpleScreen.prototype.onInternalButtonClicked = function(button)
{

}

SimpleScreen.prototype.onNextButtonClicked = function(button)
{
    this.signals.next.dispatch(button.id);
};

SimpleScreen.prototype.onPreviousButtonClicked = function(button)
{
    this.signals.previous.dispatch(button.id);
};


//===================================================
// GETTERS/SETTERS
//===================================================

//===================================================


},{"../Common":2,"../ui/GUIbuttonData":28}],27:[function(require,module,exports){
var Common              = require("../Common");
var SimpleScreen        = require('./SimpleScreen');
var GUIButtonData       = require("../ui/GUIbuttonData");
var AnimatedCharacter   = require('../game/AnimatedCharacter');
var Butterfly           = require('../game/Butterfly');

//===================================================
// CONSTRUCTOR
//===================================================

/**
 * @constructor
 */
function TitleScreen()
{
    this._character = null;
    this._toto = null;

    this._butterflies = null;

    SimpleScreen.call(this);
}

TitleScreen.prototype = Object.create(SimpleScreen.prototype);
TitleScreen.prototype.constructor = TitleScreen;
module.exports = TitleScreen;

//===================================================
// PUBLIC METHODS
//===================================================

TitleScreen.prototype.init = function()
{
	var background = new PIXI.Sprite(Common.assets.getTexture('bg_splash'));
    this.addChild(background);

    this._butterflies = [];

    for(var i = 0; i < 5 + Math.floor(Math.random() * 3); i++)
    {
        var bf = new Butterfly();
        this.addChild(bf);
        this._butterflies.push(bf);
    }

    var title = new PIXI.Sprite(Common.assets.getTexture('title'));
    title.anchor = new PIXI.Point(0.5, 0.5);
    title.x = Common.STAGE_WIDTH / 2;
    title.y = (Common.STAGE_HEIGHT / 2) - 200;
    title.scale = new PIXI.Point(0, 0);
    title.rotation = 20 * PIXI.DEG_TO_RAD;
    this.addChild(title);

    this._character = new AnimatedCharacter();
    this._character.x = (Common.STAGE_WIDTH / 2);
    this._character.y = 740;
    this._character.scale = new PIXI.Point(0.8, 0.8);
    this.addChild(this._character);

    this._toto = new PIXI.Sprite(Common.assets.getTexture('splash_dog'));
    this._toto.anchor = new PIXI.Point(0.5, 1);
    this._toto.x = (Common.STAGE_WIDTH / 2) - 200;
    this._toto.y = 740;

    Common.animator.add(TweenMax.to(this._toto.scale, 1, {y:0.98, ease:Sine.easeInOut, repeat:-1, yoyo:true}));

    var totoShadow = new PIXI.Sprite(Common.assets.getTexture('splash_dog_shadow'));
    totoShadow.anchor = new PIXI.Point(0.3, 0.5);
    totoShadow.x = this._toto.x;
    totoShadow.y = this._toto.y;
    this.addChild(totoShadow);

    this.addChild(this._toto);

    var delay = 0.4;
    Common.animator.add(TweenMax.to(title.scale, 1, {delay:delay, x:1, ease:Elastic.easeOut}));
    Common.animator.add(TweenMax.to(title.scale, 1.1, {delay:delay, y:1, ease:Elastic.easeOut}));
    Common.animator.add(TweenMax.to(title, 0.8, {delay:delay, rotation:0, ease:Back.easeOut}));

	var playButton = this._generateButton('icon_play_large', 'play', 'primary_large');
    playButton.signals.up.add(this.onNextButtonClicked, this);
    playButton.y = Common.STAGE_HEIGHT - (this._guiButtonMargins.bottom * 1.38);
    this._guiButtons.play = new GUIButtonData(playButton, function()
    {
        playButton.x = this._rightEdge - (this._guiButtonMargins.right * 1.38);
    }
    .bind(this));
    this.addChild(playButton);

    this.addMuteButton();

    this.signals.requestedMusicPlay.dispatch('music_menu_loop_01');

    SimpleScreen.prototype.init.call(this);
};

TitleScreen.prototype.destroy = function()
{
    SimpleScreen.prototype.destroy.call(this);
};

TitleScreen.prototype.resize = function()
{
    SimpleScreen.prototype.resize.call(this);
};

TitleScreen.prototype.update = function()
{
    if(Common.paused) return true;

    if(Common.frameCount % 30 == 0 && Math.floor(Math.random() * 5) == 0)
    {
        this._toto.texture = Common.assets.getTexture('splash_dog_blink');
        Common.animator.setTimeout(function(){
            this._toto.texture = Common.assets.getTexture('splash_dog');
        }, .2, this);
    }

    this._character.update();

    for(var i in this._butterflies)
    {
        this._butterflies[i].update();
    }
    
    SimpleScreen.prototype.update.call(this);
};

//===================================================
// PRIVATE METHODS
//===================================================

//===================================================
// EVENTS
//===================================================


//===================================================
// GETTERS/SETTERS
//===================================================

//===================================================


},{"../Common":2,"../game/AnimatedCharacter":12,"../game/Butterfly":13,"../ui/GUIbuttonData":28,"./SimpleScreen":26}],28:[function(require,module,exports){

function GUIButtonData(button, setX)
{
    this.button = button;
    this.setX = setX;    
}
module.exports = GUIButtonData;

},{}]},{},[20])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
