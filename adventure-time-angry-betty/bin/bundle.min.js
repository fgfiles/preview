(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * isMobile.js v0.4.1
 *
 * A simple library to detect Apple phones and tablets,
 * Android phones and tablets, other mobile devices (like blackberry, mini-opera and windows phone),
 * and any kind of seven inch device, via user agent sniffing.
 *
 * @author: Kai Mallea (kmallea@gmail.com)
 *
 * @license: http://creativecommons.org/publicdomain/zero/1.0/
 */
(function (global) {

    var apple_phone         = /iPhone/i,
        apple_ipod          = /iPod/i,
        apple_tablet        = /iPad/i,
        android_phone       = /(?=.*\bAndroid\b)(?=.*\bMobile\b)/i, // Match 'Android' AND 'Mobile'
        android_tablet      = /Android/i,
        amazon_phone        = /(?=.*\bAndroid\b)(?=.*\bSD4930UR\b)/i,
        amazon_tablet       = /(?=.*\bAndroid\b)(?=.*\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\b)/i,
        windows_phone       = /Windows Phone/i,
        windows_tablet      = /(?=.*\bWindows\b)(?=.*\bARM\b)/i, // Match 'Windows' AND 'ARM'
        other_blackberry    = /BlackBerry/i,
        other_blackberry_10 = /BB10/i,
        other_opera         = /Opera Mini/i,
        other_chrome        = /(CriOS|Chrome)(?=.*\bMobile\b)/i,
        other_firefox       = /(?=.*\bFirefox\b)(?=.*\bMobile\b)/i, // Match 'Firefox' AND 'Mobile'
        seven_inch = new RegExp(
            '(?:' +         // Non-capturing group

            'Nexus 7' +     // Nexus 7

            '|' +           // OR

            'BNTV250' +     // B&N Nook Tablet 7 inch

            '|' +           // OR

            'Kindle Fire' + // Kindle Fire

            '|' +           // OR

            'Silk' +        // Kindle Fire, Silk Accelerated

            '|' +           // OR

            'GT-P1000' +    // Galaxy Tab 7 inch

            ')',            // End non-capturing group

            'i');           // Case-insensitive matching

    var match = function(regex, userAgent) {
        return regex.test(userAgent);
    };

    var IsMobileClass = function(userAgent) {
        var ua = userAgent || navigator.userAgent;

        // Facebook mobile app's integrated browser adds a bunch of strings that
        // match everything. Strip it out if it exists.
        var tmp = ua.split('[FBAN');
        if (typeof tmp[1] !== 'undefined') {
            ua = tmp[0];
        }

        // Twitter mobile app's integrated browser on iPad adds a "Twitter for
        // iPhone" string. Same probable happens on other tablet platforms.
        // This will confuse detection so strip it out if it exists.
        tmp = ua.split('Twitter');
        if (typeof tmp[1] !== 'undefined') {
            ua = tmp[0];
        }

        this.apple = {
            phone:  match(apple_phone, ua),
            ipod:   match(apple_ipod, ua),
            tablet: !match(apple_phone, ua) && match(apple_tablet, ua),
            device: match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)
        };
        this.amazon = {
            phone:  match(amazon_phone, ua),
            tablet: !match(amazon_phone, ua) && match(amazon_tablet, ua),
            device: match(amazon_phone, ua) || match(amazon_tablet, ua)
        };
        this.android = {
            phone:  match(amazon_phone, ua) || match(android_phone, ua),
            tablet: !match(amazon_phone, ua) && !match(android_phone, ua) && (match(amazon_tablet, ua) || match(android_tablet, ua)),
            device: match(amazon_phone, ua) || match(amazon_tablet, ua) || match(android_phone, ua) || match(android_tablet, ua)
        };
        this.windows = {
            phone:  match(windows_phone, ua),
            tablet: match(windows_tablet, ua),
            device: match(windows_phone, ua) || match(windows_tablet, ua)
        };
        this.other = {
            blackberry:   match(other_blackberry, ua),
            blackberry10: match(other_blackberry_10, ua),
            opera:        match(other_opera, ua),
            firefox:      match(other_firefox, ua),
            chrome:       match(other_chrome, ua),
            device:       match(other_blackberry, ua) || match(other_blackberry_10, ua) || match(other_opera, ua) || match(other_firefox, ua) || match(other_chrome, ua)
        };
        this.seven_inch = match(seven_inch, ua);
        this.any = this.apple.device || this.android.device || this.windows.device || this.other.device || this.seven_inch;

        // excludes 'other' devices and ipods, targeting touchscreen phones
        this.phone = this.apple.phone || this.android.phone || this.windows.phone;

        // excludes 7 inch devices, classifying as phone or tablet is left to the user
        this.tablet = this.apple.tablet || this.android.tablet || this.windows.tablet;

        if (typeof window === 'undefined') {
            return this;
        }
    };

    var instantiate = function() {
        var IM = new IsMobileClass();
        IM.Class = IsMobileClass;
        return IM;
    };

    if (typeof module !== 'undefined' && module.exports && typeof window === 'undefined') {
        //node
        module.exports = IsMobileClass;
    } else if (typeof module !== 'undefined' && module.exports && typeof window !== 'undefined') {
        //browserify
        module.exports = instantiate();
    } else if (typeof define === 'function' && define.amd) {
        //AMD
        define('isMobile', [], global.isMobile = instantiate());
    } else {
        global.isMobile = instantiate();
    }

})(this);

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Common = require("./Common");

var _Common2 = _interopRequireDefault(_Common);

var _SplashScene = require("./SplashScene");

var _SplashScene2 = _interopRequireDefault(_SplashScene);

var _IntroScene = require("./IntroScene");

var _IntroScene2 = _interopRequireDefault(_IntroScene);

var _GameScene = require("./GameScene");

var _GameScene2 = _interopRequireDefault(_GameScene);

var _ResultsScene = require("./ResultsScene");

var _ResultsScene2 = _interopRequireDefault(_ResultsScene);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Application = function () {
    function Application() {
        _classCallCheck(this, Application);
    }

    _createClass(Application, null, [{
        key: "init",
        value: function init() {

            var g = new PIXI.Graphics();
            g.beginFill(0x0);
            g.drawEllipse(0, 0, 75, 25);
            g.endFill();

            _Common2.default.shadowTexture = _Common2.default.renderer.generateTexture(g); //generate our shadow texture now

            g.destroy();

            if (_Common2.default.language === "en_US") _Common2.default.language = "en"; // i find the en_US thing a pain in the ass so doing this for now.

            _Common2.default.copy = _Common2.default.assets.json("copy");
            _Common2.default.config = _Common2.default.assets.json("config");
            _Common2.default.isDebug = _Common2.default.config.debug;

            //--load paths here (config needs to be loaded first to get value for number of paths)--//
            var files = [];
            for (var i = 1; i <= _Common2.default.config.total_paths; i++) {
                files.push({ name: "path_" + i, url: "data/paths/" + "path_" + i + ".json" });
            }
            _Common2.default.assets.addFiles(files, "assets/");
            _Common2.default.assets.load();

            delay(function () {
                Application.showSplashScene();
                // Application.showGameScene();
                //Application.showResultsScene();
            }, 0.5, this);
        }

        /**
         * @returns {Scene}
         */

    }, {
        key: "showSplashScene",
        value: function showSplashScene() {

            _Common2.default.paused = false;

            var scene = new _SplashScene2.default();

            scene.signals.next.add(function () {
                Application.showIntroScene();
            }, this);

            _Common2.default.scene.show(scene);

            return scene;
        }

        /**
         * @returns {Scene}
         */

    }, {
        key: "showIntroScene",
        value: function showIntroScene() {

            _Common2.default.paused = false;

            var scene = new _IntroScene2.default();

            scene.signals.next.add(function () {
                Application.showGameScene();
            }, this);

            _Common2.default.scene.show(scene);

            return scene;
        }
    }, {
        key: "showGameScene",
        value: function showGameScene() {

            var scene = new _GameScene2.default();

            scene.signals.next.add(function (scene) {
                Application.showResultsScene();
            }, this);

            scene.signals.home.add(function (scene) {
                Application.showSplashScene();
            }, this);

            _Common2.default.scene.show(scene);

            return scene;
        }

        /**
         * @returns {Scene}
         */

    }, {
        key: "showResultsScene",
        value: function showResultsScene() {

            _Common2.default.paused = false;

            var scene = new _ResultsScene2.default();

            scene.signals.next.add(function () {
                Application.showGameScene();
            }, this);

            scene.signals.home.add(function (scene) {
                Application.showSplashScene();
            }, this);

            // Common.scene.add(scene);
            _Common2.default.scene.show(scene);

            return scene;
        }
    }]);

    return Application;
}();

exports.default = Application;

},{"./Common":6,"./GameScene":7,"./IntroScene":9,"./ResultsScene":16,"./SplashScene":23}],3:[function(require,module,exports){
/**
 * Created by Owlz on 24/10/2017.
 */

"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Sprite3D2 = require("./Sprite3D");

var _Sprite3D3 = _interopRequireDefault(_Sprite3D2);

var _Shake = require("./Shake");

var _Shake2 = _interopRequireDefault(_Shake);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class
 */
var Betty = function (_Sprite3D) {
    _inherits(Betty, _Sprite3D);

    /**
     * @param texName {String} - texture name
     * @param holder {*|PIXI.projection.Container2d} - optional holder to add to
     * @param scoreManager {ScoreManager}
     * @param cb {function}
     */
    function Betty(texName, holder, scoreManager, cb) {
        _classCallCheck(this, Betty);

        /**
         * @type {Function}
         */
        var _this = _possibleConstructorReturn(this, (Betty.__proto__ || Object.getPrototypeOf(Betty)).call(this, "", holder));

        _this.cb = cb;

        /**
         * @type {number}
         * @private
         */
        _this._moveSpeed = Common.config.path_speed;

        /**
         * @type {number}
         * @private
         */
        _this._dx = 0;

        /**
         * @type {number}
         * @private
         */
        _this._dy = 0;

        /**
         * @type {Array}
         * @private
         */
        _this._path = [];

        /**
         * @type {PIXI.Point}
         * @private
         */
        _this._target = null;

        /**
         * @type {boolean}
         * @private
         */
        _this._sleep = true;

        /**
         * @type {boolean}
         * @private
         */
        _this._isReal = false;

        /**
         * @type {ScoreManager}
         * @private
         */
        _this._scoreManager = scoreManager;

        /**
         * @type {boolean}
         * @private
         */
        _this._pause = false;

        /**
         * @type {*|PIXI.projection.Container2d}
         * @private
         */
        _this._container3D = holder;

        /**
         * @type {Array}
         * @private
         */
        _this._projectiles = [];

        /**
         * @type {number}
         * @private
         */
        _this._projectileSpeed = Common.config.projectile_speed;

        /**
         * @type {Array}
         * @private
         */
        _this._testPath = null;

        /**
         * @type {number}
         * @private
         */
        _this._time = 0;

        /**
         * @type {number}
         * @public
         */
        _this.pathId = -1;

        /**
         * @type {null|PIXI.particles.Emitter}
         * @private
         */
        _this._emitter = null;

        /**
         * @type {null|PIXI.particles.Emitter}
         * @private
         */
        _this._emitter2 = null;

        /**
         * @type {null|PIXI.Container}
         * @private
         */
        _this._particleHolder = null;

        /**
         * @type {Array}
         * @private
         */
        _this._explodingPieces = [];

        /**
         * @type {boolean}
         * @private
         */
        _this._isReal = false;

        /**
         * @type {null}
         * @private
         */
        _this._shadow = null;

        /**
         * @type {number}
         * @private
         */
        _this._particleStartY = -1;

        /**
         * @type {null}
         * @private
         */
        _this._targetVelocity = null;

        /**
         * @type {null}
         * @private
         */
        _this._velocity = new PIXI.Point();

        /**
         * @type {number}
         * @private
         */
        _this._fireDelay = 3;

        /**
         * @type {number}
         * @private
         */
        _this._fireTime = 0;

        /**
         * @type {Shake}
         * @private
         */
        _this._myShake = new _Shake2.default();

        return _this;
    }

    /**
     * @public
     */


    _createClass(Betty, [{
        key: "init",
        value: function init() {

            this.view = P3.createSpine("betty", "idle1");
            this.view.anchor = new PIXI.Point(0.5, 1);
            this.view.scale.set(0.5);
            this.addChild(this.view);

            if (this._isReal) {
                this.view.skeleton.setSkinByName("good");
            } else {
                this.view.skeleton.setSkinByName("bad");
            }
            this.view.skeleton.setSlotsToSetupPose();
            this.view.y = -125;

            this.view.visible = false;
            this.visible = false;

            this._myShake.setTarget(this.view);
            this._myShake.maxOffsetX = 175; //big ol shake
            this._myShake.maxOffsetY = 175;

            var hitArea = P3.createSprite(PIXI.Texture.EMPTY, this._view);
            hitArea.width = 625; //old value, 325
            hitArea.height = 625;
            hitArea.anchor.set(0.5);

            hitArea.interactive = true;
            hitArea.pointerdown = hitArea.touchstart = this._inputdown.bind(this);

            var shadow = P3.createSprite(Common.shadowTexture, this);
            shadow.y = -this._view.y - 150;
            shadow.scale.set(1.25);
            shadow.alpha = 0.15;
            shadow.visible = false;

            this._shadow = shadow;
            this._shadowStartScale = shadow.scale.x;
            this._shadowStartPos = new PIXI.Point(shadow.x, shadow.y);
            this._viewStartPos = new PIXI.Point(this.view.x, this.view.y);
        }
    }, {
        key: "startTweens",
        value: function startTweens() {

            if (!this._viewTween) {
                this._viewTween = TweenMax.to(this._view, 1, {
                    y: this._view.y - 85,
                    yoyo: true,
                    repeat: -1,
                    ease: Power1.easeInOut
                });
            }

            if (!this._shadScaleTween) {
                this._shadScaleTween = TweenMax.to(this._shadow.scale, 1, {
                    x: 1,
                    y: 1,
                    yoyo: true,
                    repeat: -1,
                    ease: Power1.easeInOut
                });
            }

            if (!this._shadAlphaTween) {
                this._shadAlphaTween = TweenMax.to(this._shadow, 1, {
                    alpha: 0.1,
                    yoyo: true,
                    repeat: -1,
                    ease: Power1.easeInOut
                });
            }
        }
    }, {
        key: "endTweens",
        value: function endTweens() {

            if (this._viewTween) {
                this._viewTween.kill();
                this._viewTween = null;
            }

            if (this._partTween) {
                this._partTween.kill();
                this._partTween = null;
            }

            if (this._shadScaleTween) {
                this._shadScaleTween.kill();
                this._shadScaleTween = null;
            }

            if (this._shadAlphaTween) {
                this._shadAlphaTween.kill();
                this._shadAlphaTween = null;
            }
        }

        /**
         * @public
         */

    }, {
        key: "update",
        value: function update() {

            this.view.update(deltaTime);

            this._myShake.update(deltaTime);

            //--fire timer--//
            if (!this._isReal) {
                this._fireTime += deltaTime;
                if (this._fireTime > this._fireDelay) {
                    this._fireTime = 0;
                    if (Math.random() < 0.25) {
                        //small chance to shoot projectile
                        this._fireProjectile();
                    }
                }
            }

            //--update projectile spine animation--//
            var len = this._projectiles.length;
            for (var i = 0; i < len; i++) {
                this._projectiles[i].view.update(P3.deltaTime);
            }

            //--update emitters--//
            if (!this._isReal) {
                this._emitter.update(P3.deltaTime);
                this._emitter2.update(P3.deltaTime);

                this._particleHolder.x = this._view.x;
                this._particleHolder.y = this._view.y - 15;
            }

            for (var _i = 0; _i < this._explodingPieces.length; _i++) {
                if (!this._explodingPieces[_i]) {
                    continue;
                }
                this._explodingPieces[_i].x += this._explodingPieces[_i].dx * P3.deltaTime;
                this._explodingPieces[_i].y += this._explodingPieces[_i].dy * P3.deltaTime;
            }

            if (!this._target || this._sleep || this._pause || !this._view.visible) return;

            var dist = Common.distance(this.x, this.y, this._target.x, this._target.y);
            if (dist === 0) dist = 1; //ovoid NaN on divide by zero

            this._dx = (this._target.x - this.x) / dist; //get each component of our direction vector and normalise with the length
            this._dy = (this._target.y - this.y) / dist;

            this._targetVelocity = new PIXI.Point(this._dx * this._moveSpeed, this._dy * this._moveSpeed);

            var force = 15;

            if (this._velocity.x < this._targetVelocity.x) {
                this._velocity.x += force;
            } else if (this._velocity.x > this._targetVelocity.x) {
                this._velocity.x -= force;
            }

            if (this._velocity.y < this._targetVelocity.y) {
                this._velocity.y += force;
            } else if (this._velocity.y > this._targetVelocity.y) {
                this._velocity.y -= force;
            }

            this.x += this._velocity.x * P3.deltaTime; //scale by move speed and multiply by dt before addition
            this.y += this._velocity.y * P3.deltaTime;

            if (dist < 10) {
                this._path.pop();
                this.setTarget();
            }
        }

        /**
         * @public
         */

    }, {
        key: "test",
        value: function test() {
            var _this2 = this;

            console.log(this._path[this._path.length - 1]);
            var node = this._path[this._path.length - 1];

            if (!node) {
                console.warn("testing path finished");
                return;
            }

            TweenMax.to(this, 5, {
                x: node.x, y: node.y,
                ease: Power0.easeNone,
                onComplete: function onComplete() {
                    _this2._path.pop();
                    _this2.test();
                }
            });
        }

        /**
         * @public
         */

    }, {
        key: "jumpToTarget",
        value: function jumpToTarget() {
            if (!this._target) return;
            this.x = this._target.x;
            this.y = this._target.y;
        }

        /**
         * @public
         */

    }, {
        key: "setTarget",
        value: function setTarget() {
            var _this3 = this;

            if (this._path.length > 0) {
                this._target = this._path[this._path.length - 1];
                if (Math.random() < 0.05) {
                    //small chance to pause for a bit
                    this._pause = true;
                    this._velocity = new PIXI.Point();
                    delay(function () {
                        _this3._pause = false;
                    }, 1, this);
                }
            } else {
                this._pathComplete();
            }
        }

        /**
         * @public
         * @param pause {boolean}
         */

    }, {
        key: "pauseProjectiles",
        value: function pauseProjectiles(pause) {
            var len = this._projectiles.length;
            for (var i = 0; i < len; i++) {
                if (pause) {
                    this._projectiles[i].tweens[0].resume();
                    this._projectiles[i].tweens[1].resume();
                } else {
                    this._projectiles[i].tweens[0].pause();
                    this._projectiles[i].tweens[1].pause();
                }
            }
        }

        /**
         * @public
         */

    }, {
        key: "initParticles",
        value: function initParticles() {

            this._particleHolder = new PIXI.Container();
            this._particleHolder.scale.set(0.5);
            this._particleHolder.y -= this.view.height * 0.5 * 0.65 + 35;

            this._particleStartY = this._particleHolder.y;

            this.addChild(this._particleHolder, this._view);

            this._emitter = P3.createParticles(this._particleHolder, "part_virus_1", {
                name: "part_virus_2_",
                count: 1
            }, null, true);
            this._emitter.emit = false;

            this._emitter2 = P3.createParticles(this._particleHolder, "part_virus_2", {
                name: "part_virus_",
                count: 3
            }, null, true);
            this._emitter2.emit = false;
        }
    }, {
        key: "wakeUp",
        value: function wakeUp() {

            this.dieing = false;
            this.visible = true;

            this.setTarget();
            this.jumpToTarget();

            //--start an alpha tween to blend them coming in--//
            this.alpha = 0;
            TweenMax.to(this, 0.5, { alpha: 1 });

            this._sleep = false;
            this._view.visible = this._shadow.visible = true;
            this._pause = false;
            if (!this._isReal) {
                this._emitter.emit = true;
                this._emitter2.emit = true;
                this._particleHolder.visible = true;
            }
            this.startTweens();
        }
    }, {
        key: "goToSleep",
        value: function goToSleep() {
            this._view.visible = this._shadow.visible = false;
            this._sleep = true;
            if (!this._isReal) {
                this._emitter.emit = false;
                this._emitter2.emit = false;
            }
        }

        /**
         * @private
         */

    }, {
        key: "_pathComplete",
        value: function _pathComplete() {

            this.goToSleep();

            this.endTweens();

            this._shadow.alpha = 0.15;
            this._shadow.scale.x = this._shadow.scale.y = this._shadowStartScale;
            this._shadow.position = new PIXI.Point(this._shadowStartPos.x, this._shadowStartPos.y);
            this._view.position = new PIXI.Point(this._viewStartPos.x, this._viewStartPos.y);

            if (this._particleHolder) {
                this._particleHolder.y = this._particleStartY;
            }

            this._target = null;
            this.view.interactive = true;

            var index = Common.activePathIds.indexOf(this.pathId);
            Common.activePathIds.splice(index, 1);
        }

        /**
         * @param event
         * @private
         */

    }, {
        key: "_inputdown",
        value: function _inputdown(event) {
            var _this4 = this;

            if (this._sleep || !this._scoreManager.gotBullets() || this.dieing || this.immortal || Common.paused) return;

            this._playLaserSound();

            this.dieing = true;

            this.view.interactive = false; //turn interaction off until the enemy is hidden / sleeping

            if (this._isReal) {
                this._scoreManager.resetMultiplier();
                this._scoreManager.hitPlayer();
            } else {
                this._scoreManager.addMultiplier();
                this._scoreManager.addScore();
                this._view.texture = Common.assets.texture("betty_bad_hit");
                this._particleHolder.visible = false;
            }

            this.view.tint = this._tint;

            this._scoreManager.useBullet();

            this._shake(this._view, function () {
                if (!_this4._isReal) _this4._createAnimatedScore();
                _this4._pathComplete();
                _this4._explode();
            });

            this._playLaserSound();
            this._playHitSound();

            //--create particle effect--//
            var assets = Common.assets;
            var textures = assets.texture("part_hit_shot_1");
            var config = assets.json("part_hit_shot");
            var emitter = new PIXI.particles.Emitter(this, textures, config);

            var local = event.data.getLocalPosition(this);
            emitter.updateOwnerPos(local.x, local.y);

            emitter.playOnce(function () {
                _this4.removeChild(emitter);
                emitter.destroy();
            });

            if (this.tutorialBetty) {
                this.tutCB();
            }
        }
    }, {
        key: "tutCB",
        value: function tutCB() {
            //override
        }
    }, {
        key: "_createAnimatedScore",
        value: function _createAnimatedScore() {
            var _this5 = this;

            var view = createText("" + this._scoreManager.getHitValue(), {
                size: 95,
                fill: 0xffffff,
                stroke: "black",
                strokeWidth: 5
            });
            view.y = -175;
            this.addChild(view);
            TweenMax.to(view, 0.25, {
                y: view.y - 200,
                ease: Power2.easeOut,
                onComplete: function onComplete() {
                    TweenMax.to(view, 0.15, {
                        alpha: 0,
                        y: -P3.View.height,
                        ease: Power2.easeIn,
                        delay: 0.2,
                        onComplete: function onComplete() {
                            _this5.removeChild(view);
                            view.destroy();
                        }
                    });
                }
            });
        }

        /**
         * @private
         */

    }, {
        key: "_fireProjectile",
        value: function _fireProjectile() {
            var _this6 = this;

            if (this.y > -P3.View.height || this.x < 0 || this.x > P3.View.width || this._sleep) return; //don't fire if betty is close to screen or edges

            var projectile = new _Sprite3D3.default();
            projectile.position.set(this.x, this.y);
            projectile.view = P3.createSpine("projectile_1", "animation");
            projectile.view.autoUpdate = false;
            projectile.addChild(projectile.view);

            projectile.view.y = this._view.y - 75;

            var dist = Common.distance(projectile.x, projectile.y, 0, 0); //distance to zero is just as good really
            var vel = this._projectileSpeed;
            var t = dist / vel;

            var tw1 = TweenMax.to(projectile, t, {
                x: P3.View.width * 0.5 + P3.math.randomInt(-250, 250),
                y: 0,
                ease: Power0.easeNone,
                onComplete: function onComplete() {

                    //--add a decal in this position--//
                    var decal = P3.createSprite("hit_decal", Common.world);
                    decal.anchor.set(0.5);

                    var global = projectile.view.toGlobal(Common.world);
                    decal.x = /*(Common.STAGE_WIDTH - P3.View.width) * 0.5 + */global.x - P3.View.width * 0.5;
                    decal.y = global.y - P3.View.height * 0.5;

                    decal.alpha = 0.75;

                    TweenMax.to(decal, 0.5, {
                        alpha: 0,
                        delay: 0.5,
                        onComplete: function onComplete() {
                            decal.destroy();
                        }
                    });

                    TweenMax.killTweensOf(projectile.view);
                    TweenMax.killTweensOf(projectile);
                    _this6._container3D.removeChild(projectile);
                    projectile.destroy();
                    var index = _this6._projectiles.indexOf(projectile);
                    _this6._projectiles.splice(index, 1);
                    _this6._scoreManager.hitPlayer();
                }
            });

            var targ = P3.math.randomInt(-350, -450);

            var tw2 = TweenMax.to(projectile.view, t * 0.5, {
                y: projectile.view.y - 550,
                ease: Power1.easeOut
            });

            var tw3 = TweenMax.to(projectile.view, t * 0.5, {
                y: targ,
                ease: Power1.easeIn,
                delay: t * 0.5
            });

            projectile.tweens = [tw1, tw2, tw3];

            this._container3D.addChild(projectile);
            this._projectiles.push(projectile);

            projectile.interactive = true;
            projectile.mousedown = projectile.touchstart = this._projectileDown.bind(this);

            Common.audio.playSound("sfx_enemyfire");
        }

        /**
         * @param event
         * @private
         */

    }, {
        key: "_projectileDown",
        value: function _projectileDown(event) {
            var _this7 = this;

            if (!this._scoreManager.gotBullets()) {
                return;
            } else {
                this._scoreManager.useBullet();
            }

            this._playLaserSound();

            var projectile = event.target;
            if (projectile.deflected) return;

            TweenMax.killTweensOf(projectile);
            projectile.deflected = true;

            TweenMax.to(projectile, 0.25, {
                x: P3.View.width * 0.5 + P3.math.randomInt(-P3.View.width, P3.View.width),
                y: -P3.View.height * 8, //double full depth
                ease: Power0.easeNone,
                onComplete: function onComplete() {
                    TweenMax.killTweensOf(projectile.view);
                    TweenMax.killTweensOf(projectile);
                    _this7._container3D.removeChild(projectile);
                    projectile.destroy();
                    var index = _this7._projectiles.indexOf(projectile);
                    _this7._projectiles.splice(index, 1);
                }
            });
            TweenMax.to(projectile.view, 0.25, {
                y: P3.math.randomInt(-500, -800),
                ease: Power0.easeNone
            });

            this._playLaserSound();

            Common.audio.playSound("sfx_deflectshot");
        }

        /**
         * @param element
         * @param cb
         * @private
         */

    }, {
        key: "_shake",
        value: function _shake(element, cb) {
            //changed to use my new shake class
            this._myShake.onShakeEnd = cb;
            this._myShake.trauma = 0.25;

            /*
             const t = 0.05;
             TweenMax.to(element, t, {
             x: element.x - 15,
             y: element.y - 15,
             ease: Quad.easeInOut
             });
             TweenMax.to(element, t, {
             repeat: 4,
             x: element.x + 15,
             y: element.y + 15,
             yoyo: true,
             delay: 0.1,
             ease: Quad.easeInOut
             });
             TweenMax.to(element, t, {
             x: element.x,
             y: element.y,
             delay: t * 4,
             onComplete: cb.bind(this)
             });
             */
        }

        /**
         * @private
         */

    }, {
        key: "_playLaserSound",
        value: function _playLaserSound() {
            Common.audio.playSound(["sfx_firelaser1", "sfx_firelaser2", "sfx_firelaser3"]);
        }

        /**
         * @private
         */

    }, {
        key: "_playHitSound",
        value: function _playHitSound() {
            if (!this._isReal) {
                Common.audio.playSound("sfx_enemyhit");
            } else {
                Common.audio.playSound("sfx_realwendyhit");
            }
        }

        /**
         * @private
         */

    }, {
        key: "_explode",
        value: function _explode() {

            var texName = "betty_bad_part_";
            if (this._isReal) {
                texName = "betty_good_part_";
            }

            var pieces = [];
            for (var i = 1; i <= 9; i++) {
                var piece = P3.createSprite(texName + i, this);
                piece.scale.set(0.65);
                piece.position.set(this.view.x, this.view.y - this.view.height * 0.5);
                piece.dx = P3.randomInt(-400, 400);
                piece.dy = P3.randomInt(-150, 0);
                piece.anchor.set(0.5);
                pieces.push(piece);
            }
            this._explodingPieces = pieces;

            delay(this._cleanupPieces.bind(this), 0.1, this);
        }
    }, {
        key: "_cleanupPieces",
        value: function _cleanupPieces() {
            var _this8 = this;

            var len = this._explodingPieces.length;
            var t = 0.5;

            var _loop = function _loop(i) {
                TweenMax.to(_this8._explodingPieces[i], t, {
                    alpha: 0,
                    ease: Power0.easeNone,
                    onComplete: function onComplete() {
                        _this8.removeChild(_this8._explodingPieces[i]);
                    },
                    delay: 0.3
                });
            };

            for (var i = 0; i < len; i++) {
                _loop(i);
            }
            delay(function () {
                for (var i = 0; i < len; i++) {
                    _this8._explodingPieces[i].destroy();
                }
                _this8._explodingPieces.length = 0;
            }, t + 0.4, this);
        }
    }, {
        key: "setTint",
        value: function setTint() {}
        /// if (this._isReal) {
        ///     this._tint = 0x37FDFC;
        ///  } else {
        ///      this._tint = 0xDD0048;
        //  }
        ///this._glowFilter = new PIXI.filters.GlowFilter(15, 0, 0, this._tint, 0.2);


        //=======================//
        //====GETTERS SETTERS====//
        //=======================//

    }, {
        key: "path",
        set: function set(value) {
            this._path = value;
        }
    }, {
        key: "sleep",
        get: function get() {
            return this._sleep;
        },
        set: function set(value) {
            this._sleep = value;
        }
    }, {
        key: "isReal",
        set: function set(value) {
            this._isReal = value;
        }
    }]);

    return Betty;
}(_Sprite3D3.default);

exports.default = Betty;

},{"./Shake":21,"./Sprite3D":24}],4:[function(require,module,exports){
/**
 * Created by noOne on 26/10/2017.
 */
"use strict";

/**
 * @class
 */

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BettyController = function () {
    /**
     * @param peeking {Array}
     * @param pathing {Array}
     * @param paths {Array}
     */
    function BettyController(peeking, pathing, paths) {
        _classCallCheck(this, BettyController);

        /**
         * @type {Array}
         * @private
         */
        this._peeking = peeking;

        /**
         * @type {Array}
         * @private
         */
        this._pathing = pathing;

        /**
         * @type {Array}
         * @private
         */
        this._paths = paths;

        /**
         * Max number of pathing betties to have active at a time
         * @type {number}
         * @private
         */
        this._maxPathing = Common.config.max_pathing;

        /**
         * total number of paths
         * @type {number}
         * @private
         */
        this._totalPaths = Common.config.total_paths;

        /**
         * @type {number}
         * @private
         */
        this._startTime = Date.now();

        /**
         * @type {number}
         * @private
         */
        this._nextBettyTime = P3.math.randomInt(Common.config.release_interval_min, Common.config.release_interval_max);

        /**
         * @type {Array}
         * @private
         */
        this._peekTweens = [];

        /**
         * @type {Array}
         * @private
         */
        this._testPath = null;

        this.init();
    }

    _createClass(BettyController, [{
        key: "init",
        value: function init() {
            Common.activePathIds = [];
        }
    }, {
        key: "incMaxPathing",
        value: function incMaxPathing() {
            if (this._maxPathing < this._totalPaths) {
                this._maxPathing++;
            }
        }

        /**
         * @public
         */

    }, {
        key: "update",
        value: function update() {
            var time = Date.now();
            if (time > this._startTime + this._nextBettyTime) {
                this._startTime = time;
                this._nextBettyTime = P3.math.randomInt(Common.config.release_interval_min, Common.config.release_interval_max);
                if (this.countActivePathing() < this._maxPathing) {
                    this._wakeRandomPathing();
                } else {
                    this._wakeRandomPeeking();
                }
            }
        }

        /**
         * @public
         */

    }, {
        key: "countActivePathing",
        value: function countActivePathing() {
            var count = 0;
            var len = this._pathing.length;
            for (var i = 0; i < len; i++) {
                if (!this._pathing[i].sleep) count++;
            }
            return count;
        }

        /**
         * @public
         */

    }, {
        key: "pausePeekTweens",
        value: function pausePeekTweens(isPause) {
            for (var i = 0; i < this._peekTweens.length; i++) {
                if (isPause) {
                    if (this._peekTweens[i]) {
                        this._peekTweens[i].resume();
                    } else {
                        this._peekTweens.splice(i, 1);
                    }
                } else {
                    if (this._peekTweens[i]) {
                        this._peekTweens[i].pause();
                    } else {
                        this._peekTweens.splice(i, 1);
                    }
                }
            }
        }

        /**
         * @private
         */

    }, {
        key: "_wakeRandomPeeking",
        value: function _wakeRandomPeeking() {
            if (Math.random() < 0.75) return; //skip most of them randomly
            this._peeking = Common.shuffleArr(this._peeking);
            var len = this._peeking.length;
            for (var i = 0; i < len; i++) {
                if (this._peeking[i].sleep) {
                    //this._peeking[i].wakeUp();
                    var tw = this._peeking[i].peek();
                    this._peekTweens.push(tw);
                    break;
                }
            }
        }

        /**
         * @private
         */

    }, {
        key: "_wakeRandomPathing",
        value: function _wakeRandomPathing() {
            this._pathing = Common.shuffleArr(this._pathing);
            var len = this._pathing.length;
            for (var i = 0; i < len; i++) {
                if (this._pathing[i].sleep) {

                    if (!Common.isDebug) this._assignRandomPath(this._pathing[i]); //if not debugging take random path
                    else this._pathing[i].path = this._testPath.slice(0); //else use a copy of the test path

                    this._pathing[i].wakeUp();

                    break;
                }
            }
        }

        /**
         * @returns {Number|Array}
         * @private
         */

    }, {
        key: "_assignRandomPath",
        value: function _assignRandomPath(betty) {
            var attempts = 20;
            while (attempts-- > 0) {
                var rand = P3.math.randomInt(0, this._paths.length - 1);
                if (Common.activePathIds.indexOf(rand) === -1) {
                    Common.activePathIds.push(rand);
                    betty.pathId = rand;
                    betty.path = this._paths[rand].slice(0);
                    return;
                }
            }
        }
    }, {
        key: "testPath",
        set: function set(value) {
            this._testPath = value;
        }
    }]);

    return BettyController;
}();

exports.default = BettyController;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Common = require("./Common");

var _Common2 = _interopRequireDefault(_Common);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var that;

var Button = function (_P3$Button) {
    _inherits(Button, _P3$Button);

    /**
     * @param states
     * @param scope
     * @param audioType
     */
    function Button(states, scope, audioType) {
        _classCallCheck(this, Button);

        var _this = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this, states));

        that = _Common2.default;
        _this.type = audioType || "fwd";

        /**
         * @type {PIXI.Sprite}
         * @private
         */
        _this._normal = new PIXI.Sprite(states.normal || PIXI.Texture.EMPTY);
        _this._normal.anchor = new PIXI.Point(0.5, 0.5);
        _this.addChild(_this._normal);

        _this._normal.visible = false;

        /**
         * @type {PIXI.Sprite}
         * @private
         */
        /*
         this._over = new PIXI.Sprite(states.over || PIXI.Texture.EMPTY);
         this._over.anchor = new PIXI.Point(0.5, 0.5);
         this.addChild(this._over);
         this._over.visible = false;
         */
        /**
         * @type {PIXI.Sprite}
         * @private
         */
        _this._down = new PIXI.Sprite(states.down || PIXI.Texture.EMPTY);
        _this._down.anchor = new PIXI.Point(0.5, 0.5);
        _this.addChild(_this._down);
        _this._down.visible = false;

        _this._enabled = true;
        //this.animate = true;
        //this.animateIcon = true;
        return _this;
    }

    /*
       _onMouseOver() {
     // console.log("button over");
     if (!that.isMute) that.audio.playSound("sfx_btn_rollover");
     super._onMouseOver();
     }
       _onMouseDown() {
     //console.log("button down");
     if (!that.isMute) {
     that.audio.playSound("sfx_btn_select");
     }
     if (this.enabled) super._onMouseDown();
     }
     */


    _createClass(Button, [{
        key: "enabled",
        get: function get() {
            return this._enabled;
        },
        set: function set(val) {
            this._enabled = val;
        }

        /*
         onMouseOut() {
         super.onMouseOut();
         }
         */

    }]);

    return Button;
}(P3.Button);

exports.default = Button;

},{"./Common":6}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _Button = require("./Button");

var _Button2 = _interopRequireDefault(_Button);

var _Application = require("./Application");

var _Application2 = _interopRequireDefault(_Application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Common() {}
exports.default = Common;


Common.cameraShake = null;

Common.hearts = [];

Common.healthInLevel = false;

Common.gameScene = null;
Common.world = null;

Common.uiLayer = null;

Common.getMultiPanelPos = function () {
    var x = (Common.STAGE_WIDTH - P3.View.width) * 0.5 + 445,
        y = 42;
    return new PIXI.Point(x, y);
};

/**
 * @type {null}
 */
Common.scoreManager = null;

/**
 * Pans to right, left or centre.
 * @abstract
 * @param str {string}
 * @return {boolean}
 */
Common.panGameScene = function (str) {
    // "override" in game scene
    throw new Error('must be implemented in game scene!');
};

/**
 * @type {Array}
 */
Common.activePathIds = [];

/**
 * @param arr
 */
Common.buttonsAppear = function (arr) {
    for (var i = 0; i < arr.length; i++) {
        arr[i].scale.set(0);
        TweenMax.to(arr[i].scale, 0.34, {
            x: 1,
            y: 1,
            ease: Back.easeOut,
            easeParams: [2],
            delay: i * 0.2 + 0.25
        });
    }
};

/**
 * @type {null}
 */
Common.barMaxFill = null;

/**
 * @deprecated
 * @type {boolean}
 */
Common.inPuzzle = false;

/**
 * @deprecated
 * @type {Array}
 */
Common.generatedDispObjs = [];

/**
 * @type {number}
 */
Common.highestScore = 0;

/**
 * @type {{}}
 */
Common.results = {};

/**
 * @type {null}
 */
Common.assets = null;

/**
 * @static
 * @type {number}
 * @const
 */
Common.PHYSICS_TICK = 1.0 / 30.0;

/**
 * Semi unique key used as an identifier for save files, followed by the version
 * (useful if you want players to start a new game, increment version number)
 * @type {string}
 */
Common.game_key = "sjroki1muk-cnt-00918-gold-v2";

/**
 * @type {P3.View}
 */
Common.view = null;

/**
 * @type {P3.Tracking}
 */
Common.tracking = null;

/**
 * @type {AudioManager}
 * @static
 */
Common.audio = null;

/**
 * @type {P3.Camera}
 * @static
 */
Common.camera = null;

/**
 * @type {Player}
 */
Common.player = null;

/**
 * @type {number}
 */
Common.paused = false;

/**
 * @deprecated
 * @type {number}
 */
Common.gameRunning = false;

/**
 * @type {boolean}
 */
Common.isWebGL = false;

/**
 * @type {boolean}
 */
Common.isFirstPlay = true;

/**
 * @type {boolean}
 */
Common.isDebug = false;

/**
 * @type {boolean}
 */
Common.isMute = false;

//===============//
//==static vars==//
//===============//

/**
 * @type {object}
 * @static
 */
Common.copy = null;

/**
 * @type {object}
 * @static
 */
Common.config = null;

/**
 * @type {string}
 * @static
 */
Common.language = "";

/**
 * @type {number}
 * @static
 * @const
 */
Common.STAGE_WIDTH = 1664;

/**
 * @type {number}
 * @static
 * @const
 */
Common.STAGE_HEIGHT = 768;

/**
 * @type {PIXI.Container}
 * @static
 */
Common.stage = null;

/**
 * @type {PIXI.CanvasRenderer|PIXI.WebGLRenderer}
 * @static
 */
Common.renderer = null;

//===============//
//==static ends==//
//===============//

//================================//
//=====save and load functions====//
//================================//

Common.saveMute = function () {
    var data = {
        isMute: Common.isMute
    };
    localStorage.setItem(Common.game_key + "_isMute", JSON.stringify(data));
};

Common.loadMute = function () {
    //if the data exists get it
    var data = JSON.parse(localStorage.getItem(Common.game_key + "_isMute"));
    if (data) {
        Common.isMute = data.isMute;
        Common.audio.mute(Common.isMute);
    }
};

Common.saveGame = function () {
    var gameData = {
        highestScore: Common.highestScore
    };
    localStorage.setItem(Common.game_key, JSON.stringify(gameData));
};

Common.loadGame = function () {
    //if the data exists get it
    var gameData = JSON.parse(localStorage.getItem(Common.game_key));
    if (gameData) {
        Common.highestScore = gameData.highestScore;
        Common.isFirstPlay = false;
    } else Common.isFirstPlay = true;
};

//=========================================================//
//=============Rest is all util type functions=============//
//=========================================================//

/**
 * Creates and returns a new button
 * @param x - Coordinate
 * @param y - Coordinates
 * @param type - Button type
 * @param clickFunc - Target function
 * @param scope  -This context
 * @param holder - Display container optional arg]
 * @param text - For prototyping can add a bit of text to generic button
 * @param icon
 * @returns {Button}
 */
Common.createButton = function (x, y, type, clickFunc, scope, holder, text, icon) {

    var states = new P3.ButtonStates();

    if (text || type === null || type === undefined) {
        states.normal = PIXI.Texture.EMPTY;
        states.down = PIXI.Texture.EMPTY;
    } else if (typeof type === "string") {
        states.normal = Common.assets.texture("btn_" + type + "_out"); //meant to be "_up"
        //  states.over = Common.assets.getTexture("btn_" + type + "_over");
        states.down = Common.assets.texture("btn_" + type + "_down");
    } else {
        states.normal = type;
    }

    var button = new _Button2.default(states, this);
    button.x = x;
    button.y = y;
    button.anchor = new PIXI.Point(0.5, 0.5);
    button.animate = true;

    button.signals.click.add(clickFunc, scope);

    if (holder) holder.addChild(button);
    if (text) {

        var txtView = P3.simpleText(text, "consolas", 100, button, 0xffffff); //new PIXI.extras.BitmapText(text, {font: "45px Calibri"});
        txtView.anchor = { x: 0.5, y: 0.5 };
        button.txtView = txtView;
    }

    if (icon) {
        var sp = new PIXI.Sprite(Common.assets.texture(icon));
        sp.anchor.set(0.5);
        button.addChild(sp);
        button.icon = sp;
    }

    return button;
};

/**
 * Knuth shuffle variation
 * @param string
 * @returns {string}
 */
Common.shuffleString = function (string) {
    var a = string.split(""); //our array
    var n = a.length; //number of elements
    for (var i = n - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var tmp = a[i];
        a[i] = a[j];
        a[j] = tmp;
    }
    return a.join("");
};

/**
 * Knuth shuffle
 * @param a
 * @returns {*}
 */
Common.shuffleArr = function (a) {
    for (var i = a.length; i; i--) {
        var j = Math.floor(Math.random() * i);
        var _ref = [a[j], a[i - 1]];
        a[i - 1] = _ref[0];
        a[j] = _ref[1];
    }
    return a;
};

/**
 * Generates a random string for use as a semi unique ID for save data
 * @param strLen - Desired length of random string
 * @returns {string}
 */
Common.randomID = function (strLen) {
    return Math.random().toString(36).substr(2, strLen);
};

/**
 * Returns the angle between two points, where 0 is 3 o clock, 90 degrees is 6 o clock, etc.
 * @param x1 {number}
 * @param y1 {number}
 * @param x2 {number}
 * @param y2 {number}
 * @returns {number}
 */
Common.angle = function (x1, y1, x2, y2) {
    var dy = y2 - y1;
    var dx = x2 - x1;
    return Math.atan2(dy, dx);
};

/**
 * @param {number} x1 - Coordinate X of 1st point
 * @param {number} y1 - Coordinate Y of 1st point
 * @param {number} x2 - Coordinate X of 2nd point
 * @param {number} y2 - Coordinate Y of 2nd point
 * @returns {number} distance - Euclidean distance between the two points
 */
Common.distance = function (x1, y1, x2, y2) {
    return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
};

/**
 * @param {number} deg
 * @returns {number} rad
 */
Common.deg2rad = function (deg) {
    return deg * (Math.PI / 180);
};

Common.rad2deg = function (rad) {
    return rad * 180 / Math.PI; // rads to degs, range (-180, 180]
};

/**
 * Uses oriented bounding box (OBB) to check collisions with optional tuning arg to make bounds bigger or smaller
 * @param r1
 * @param r2
 * @param scale
 * @returns {boolean}
 */
Common.collisionOBB = function (r1, r2, scale) {
    if (!scale || scale <= 0) scale = 1;
    r1 = r1.getBounds();
    r2 = r2.getBounds();

    return !(r2.x > r1.x + r1.width * scale || r2.x + r2.width * scale < r1.x || r2.y > r1.y + r1.height * scale || r2.y + r2.height * scale < r1.y);
};

/**
 * Returns a new keyboard object that listens for keyboard input
 * @param keyCode
 * @returns {{}}
 */
Common.keyboard = function (keyCode) {
    var key = {};
    key.code = keyCode;
    key.isDown = false;
    key.isUp = true;
    key.down = undefined;
    key.up = undefined;
    //The `downHandler`
    key.downHandler = function (event) {
        if (event.keyCode === key.code) {
            if (key.isUp && key.down) key.down();
            key.isDown = true;
            key.isUp = false;
        }
        event.preventDefault();
    };

    //The `upHandler`
    key.upHandler = function (event) {
        if (event.keyCode === key.code) {
            if (key.isDown && key.up) key.up();
            key.isDown = false;
            key.isUp = true;
        }
        event.preventDefault();
    };

    //Attach event listeners
    window.addEventListener("keydown", key.downHandler.bind(key), false);
    window.addEventListener("keyup", key.upHandler.bind(key), false);
    return key;
};

Common.genTex = function (width, height, colour, shape) {
    var g = new PIXI.Graphics();
    if (colour) g.beginFill(colour);else g.beginFill(0x000fff);
    if (shape === "rect") g.drawRect(0, 0, width, height);else if (shape === "circle") g.drawEllipse(0, 0, width, height);else g.drawRect(0, 0, width, height); //fallback to rect
    g.endFill();
    return Common.renderer.generateTexture(g);
};

/**
 * Returns a new sprite that uses a texture generated using pixi graphics, mostly for debug and prototyping etc.
 * @param width
 * @param height
 * @param colour
 * @param retTexture - should we return a texture or a sprite?
 * @returns {PIXI.Sprite|String}
 */
Common.generateRect = function (width, height, colour, retTexture) {
    var g = new PIXI.Graphics();
    if (colour) g.beginFill(colour);else g.beginFill(0x000fff);
    g.lineStyle(5, 0xd9d9d9);
    g.drawRect(0, 0, width, height);
    g.endFill();
    var texture = Common.renderer.generateTexture(g);
    var sprite = new PIXI.Sprite(texture);
    sprite.anchor = { x: 0.5, y: 0.5 };
    g.destroy();
    if (!retTexture) return sprite;
    sprite.destroy();
    return texture;
};

/**
 * Returns a new sprite that uses a texture generated using pixi graphics, mostly for debug and prototyping etc.
 * @param width
 * @param height
 * @param colour
 * @param retTexture - Should we return a texture or a sprite?
 * @returns {PIXI.Sprite|PIXI.Texture}
 */
Common.generateEllipse = function (width, height, colour, retTexture) {
    var g = new PIXI.Graphics();
    if (colour) g.beginFill(colour);else g.beginFill(0xfff000);
    g.drawEllipse(0, 0, width, height);
    g.endFill();
    var texture = Common.renderer.generateTexture(g);
    var sprite = new PIXI.Sprite(texture);
    sprite.anchor = { x: 0.5, y: 0.5 };
    g.destroy();
    if (!retTexture) return sprite;else return texture;
};

/**
 * Centres all sprites passed to it
 * @param sprite
 */
Common.centreAnchor = function (sprite) {
    for (var i = 0; i < arguments.length; i++) {
        arguments[i].anchor = { x: 0.5, y: 0.5 };
    }
};

/**
 * Returns a matrix of defined size with optional initial values
 * @param {number} numRows - Number rows in matrix
 * @param {number} numCols - Number of columns in matrix
 * @param initial - Optional initial value
 * @returns {Array}
 */
Common.matrix = function (numRows, numCols, initial) {
    var arr = [];
    for (var i = 0; i < numRows; i++) {
        var columns = [];
        for (var j = 0; j < numCols; j++) {
            columns[j] = initial;
        }arr[i] = columns;
    }
    return arr;
};

/**
 * Returns array of defined size with optional initial values
 * @param {number} size
 * @param initial
 * @returns {Array}
 */
Common.array = function (size, initial) {
    var arr = [];
    for (var i = 0; i < size; i++) {
        arr.push(initial);
    }return arr;
};

/**
 * Uses quick sort to sort an array, with optional flag to sort high to low
 * @param array
 * @param highToLow
 * @returns {*}
 */
Common.sort = function (array, highToLow) {
    var size = array.length - 1;
    quickSort(0, size);
    return array;

    function quickSort(first, last) {

        if (first < last) {
            var pivotIndex = partition();
            quickSort(first, pivotIndex - 1);
            quickSort(pivotIndex + 1, last);
        }

        function swap(p, q) {
            var temp = array[p];
            array[p] = array[q];
            array[q] = temp;
        }

        function partition() {
            var pivot = array[first],
                index = first;
            swap(index, last);
            for (var i = first; i < last; i++) {
                if (!highToLow && array[i] < pivot) swap(index++, i);else if (highToLow && array[i] > pivot) swap(index++, i);
            }
            swap(index, last);
            return index;
        }
    }
};

/**
 * Sorts array of objects that have a score property, bit unnecessary function..
 * @param array
 * @param highToLow
 * @returns {*}
 */
Common.sortByScore = function (array, highToLow) {
    var size = array.length - 1;
    quickSort(0, size);
    return array;

    function quickSort(first, last) {

        if (first < last) {
            var pivotIndex = partition();
            quickSort(first, pivotIndex - 1);
            quickSort(pivotIndex + 1, last);
        }

        function swap(p, q) {
            var temp = array[p];
            array[p] = array[q];
            array[q] = temp;
        }

        function partition() {
            var pivot = array[first],
                index = first;
            swap(index, last);
            for (var i = first; i < last; i++) {
                if (!highToLow && array[i].score < pivot.score) swap(index++, i);else if (highToLow && array[i].score > pivot.score) swap(index++, i);
            }
            swap(index, last);
            return index;
        }
    }
};

/**
 * Uses quick sort to sort 2d array by length of 2nd array, with optional flag to sort high to low
 * @param array
 * @param highToLow
 * @returns {*}
 */
Common.sortByArrLen = function (array, highToLow) {
    var size = array.length - 1;
    quickSort(0, size);
    return array;

    function quickSort(first, last) {

        if (first < last) {
            var pivotIndex = partition();
            quickSort(first, pivotIndex - 1);
            quickSort(pivotIndex + 1, last);
        }

        function swap(p, q) {
            var temp = array[p];
            array[p] = array[q];
            array[q] = temp;
        }

        function partition() {
            var pivot = array[first],
                index = first;
            swap(index, last);
            for (var i = first; i < last; i++) {
                if (!highToLow && array[i].length < pivot.length) swap(index++, i);else if (highToLow && array[i].length > pivot.length) swap(index++, i);
            }
            swap(index, last);
            return index;
        }
    }
};

/**
 * Sorts tiles (or any display object) by x, y coordinates so they are ordered lowest top to bottom , left to right
 * @param array
 * @returns {*}
 */
Common.sortTiles = function (array) {
    array.sort(function (a, b) {
        if (a.y == b.y) return a.x - b.x;
        return a.y - b.y;
    });
    return array;
};

/**
 * Sorts object with an x or y property (such as sprites) by x or y dependant on flag
 * @param array - array to sort
 * @param highToLow - sort high to low?
 * @param x - flag to choose whether to sort by x or y
 * @returns {*}
 */
Common.sortBy = function (array, highToLow, x) {
    var size = array.length - 1;
    quickSort(0, size);
    return array;
    function quickSort(first, last) {
        if (first < last) {
            var pivotIndex = partition();
            quickSort(first, pivotIndex - 1);
            quickSort(pivotIndex + 1, last);
        }
        function swap(p, q) {
            var temp = array[p];
            array[p] = array[q];
            array[q] = temp;
        }

        function partition() {
            var pivot = array[first],
                index = first;
            swap(index, last);
            for (var i = first; i < last; i++) {
                if (!highToLow) {
                    if (x) {
                        if (array[i].x < pivot.x) swap(index++, i);
                    } else {
                        if (array[i].y < pivot.y) swap(index++, i);
                    }
                } else {
                    if (x) {
                        if (array[i].x > pivot.x) swap(index++, i);
                    } else {
                        if (array[i].y > pivot.y) swap(index++, i);
                    }
                }
            }
            swap(index, last);
            return index;
        }
    }
};

Common.compareXY = function (point1, point2) {
    return Math.round(point1.x) === Math.round(point2.x) && Math.round(point1.y) === Math.round(point2.y);
};

Common.compareX = function (point1, point2) {
    return Math.round(point1.x) === Math.round(point2.x);
};

//--from stackoverflow-- https://stackoverflow.com/questions/14962018/detecting-and-fixing-circular-references-in-javascript //
Common.detectCircularRef = function (obj) {

    return detectCircularReferences(obj);

    function detectCircularReferences(toBeStringifiedValue) {
        var serializationKeyStack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        Object.keys(toBeStringifiedValue).forEach(function (key) {
            var value = toBeStringifiedValue[key];
            var serializationKeyStackWithNewKey = serializationKeyStack.slice();
            serializationKeyStackWithNewKey.push(key);
            try {
                JSON.stringify(value);
            } catch (error) {
                var isCircularValue;
                var circularExcludingStringifyResult = "";
                try {
                    circularExcludingStringifyResult = JSON.stringify(value, replaceRootStringifyReplacer(value), 2);
                    isCircularValue = true;
                } catch (error) {
                    detectCircularReferences(value, serializationKeyStackWithNewKey);
                    isCircularValue = false;
                }
                if (isCircularValue) {
                    throw new Error("Circular reference detected:\nCircularly referenced value is value under path \"" + joinStrings(serializationKeyStackWithNewKey) + "\" of the given root object\n" + ("Calling stringify on this value but replacing itself with [Circular object --- fix me] ( <-- search for this string) results in:\n" + circularExcludingStringifyResult + "\n"));
                }
            }
        });
    }

    function replaceRootStringifyReplacer(toBeStringifiedValue) {
        var serializedObjectCounter = 0;
        return function (key, value) {
            if (serializedObjectCounter !== 0 && (typeof toBeStringifiedValue === "undefined" ? "undefined" : _typeof(toBeStringifiedValue)) === 'object' && toBeStringifiedValue === value) {
                return '[Circular object --- fix me]';
            }
            serializedObjectCounter++;
            return value;
        };
    }

    function joinStrings(arr) {
        var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ":";

        if (arr.length === 0) return "";
        return arr.reduce(function (v1, v2) {
            return "" + v1 + separator + v2;
        });
    }
};

//from github pixi-simple-gestures
Common.pinchable = function (sprite, inertia) {

    console.log("making pinchable");
    sprite.interactive = true;
    sprite.on('touchstart', start);
    sprite.on('touchend', end);
    sprite.on('touchendoutside', end);

    function start(e) {
        sprite.on('touchmove', move);
    }

    function move(e) {
        var t = e.data.originalEvent.targetTouches;
        if (!t || t.length < 2) {
            return;
        }
        var dx = t[0].clientX - t[1].clientX;
        var dy = t[0].clientY - t[1].clientY;
        var distance = Math.sqrt(dx * dx + dy * dy);
        if (!sprite._pinch) {
            sprite._pinch = {
                p: {
                    distance: distance,
                    date: new Date()
                }
            };
            sprite.emit('pinchstart');
            return;
        }
        var now = new Date();
        var interval = now - sprite._pinch.p.date;
        if (interval < 12) {
            return;
        }
        var center = {
            x: (t[0].clientX + t[1].clientX) / 2,
            y: (t[0].clientY + t[1].clientY) / 2
        };
        var event = {
            scale: distance / sprite._pinch.p.distance,
            velocity: distance / interval,
            center: center,
            data: e.data
        };
        sprite.emit('pinchmove', event);
        sprite._pinch.pp = {
            distance: sprite._pinch.p.distance,
            date: sprite._pinch.p.date
        };
        sprite._pinch.p = {
            distance: distance,
            date: now
        };
    }

    function end(e) {
        sprite.removeListener('touchmove', move);
        if (!sprite._pinch) {
            return;
        }
        if (inertia && sprite._pinch.pp) {
            if (sprite._pinch.intervalId) {
                return;
            }
            var interval = new Date() - sprite._pinch.p.date;
            var velocity = (sprite._pinch.p.distance - sprite._pinch.pp.distance) / interval;
            var center = sprite._pinch.p.center;
            var distance = sprite._pinch.p.distance;
            sprite._pinch.intervalId = setInterval(function () {
                if (Math.abs(velocity) < 0.04) {
                    clearInterval(sprite._pinch.intervalId);
                    sprite.emit('pinchend');
                    sprite._pinch = null;
                    return;
                }
                var updatedDistance = distance + velocity * 12;
                var event = {
                    scale: updatedDistance / distance,
                    velocity: velocity,
                    center: center,
                    data: e.data
                };
                sprite.emit('pinchmove', event);
                distance = updatedDistance;
                velocity *= 0.8;
            }, 12);
        } else {
            sprite.emit('pinchend');
            sprite._pinch = null;
        }
    }
};

//from https://stackoverflow.com/questions/7184573/pick-up-the-android-version-in-the-browser-by-javascript
Common.getAndroidVersion = function (ua) {
    ua = (ua || navigator.userAgent).toLowerCase();
    var match = ua.match(/android\s([0-9\.]*)/);
    return match ? match[1] : false;
};

/**
 * Custom tween
 * @param obj
 * @param time
 * @param params
 * @returns {TweenLite|TweenMax|TimelineLite|*}
 */
Common.erraticTween = function (obj, time) {
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { delay: 0 };

    params.ease = CustomEase.create("custom", "M0,0,C0,0,0.065,0.167,0.08,0.205,0.09,0.2,0.124,0.182,0.135,0.176,0.157,0.223,0.21,0.59,0.22,0.608,0.223,0.585,0.298,0.12,0.3,0.111,0.3,0.118,0.309,0.262,0.315,0.345,0.322,0.36,0.325,0.372,0.335,0.388,0.352,0.417,0.372,0.439,0.39,0.463,0.391,0.502,0.394,0.58,0.395,0.583,0.396,0.578,0.418,0.461,0.43,0.399,0.431,0.397,0.463,0.611,0.464,0.61,0.475,0.621,0.488,0.448,0.495,0.455,0.495,0.449,0.498,0.417,0.5,0.404,0.512,0.401,0.562,0.262,0.572,0.26,0.577,0.293,0.568,0.499,0.58,0.568,0.597,0.639,0.603,0.787,0.608,0.806,0.616,0.794,0.698,0.64,0.705,0.63,0.705,0.638,0.708,0.685,0.71,0.72,0.711,0.734,0.713,0.745,0.715,0.756,0.719,0.759,0.737,0.781,0.742,0.784,0.746,0.83,0.743,0.912,0.745,0.925,0.756,0.907,0.863,0.732,0.88,0.705,0.894,0.741,1,1,1,1");
    return TweenMax.to(obj, time, params);
};

window.Common = Common;

},{"./Application":2,"./Button":5}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Common = require("./Common");

var _Common2 = _interopRequireDefault(_Common);

var _Sprite3D = require("./Sprite3D");

var _Sprite3D2 = _interopRequireDefault(_Sprite3D);

var _Betty = require("./Betty");

var _Betty2 = _interopRequireDefault(_Betty);

var _Santa = require("./Santa");

var _Santa2 = _interopRequireDefault(_Santa);

var _Levels = require("./Levels");

var _Levels2 = _interopRequireDefault(_Levels);

var _PeekingBetty = require("./PeekingBetty");

var _PeekingBetty2 = _interopRequireDefault(_PeekingBetty);

var _BettyController = require("./BettyController");

var _BettyController2 = _interopRequireDefault(_BettyController);

var _PausePanel = require("./PausePanel");

var _PausePanel2 = _interopRequireDefault(_PausePanel);

var _ScoreManager = require("./ScoreManager");

var _ScoreManager2 = _interopRequireDefault(_ScoreManager);

var _GlitchFilter = require("./GlitchFilter");

var _GlitchFilter2 = _interopRequireDefault(_GlitchFilter);

var _Simon = require("./Simon");

var _Simon2 = _interopRequireDefault(_Simon);

var _Shake = require("./Shake");

var _Shake2 = _interopRequireDefault(_Shake);

var _TutorialPopup = require("./TutorialPopup");

var _TutorialPopup2 = _interopRequireDefault(_TutorialPopup);

var _ismobilejs = require("ismobilejs");

var _ismobilejs2 = _interopRequireDefault(_ismobilejs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class GameScene @extends P3.Scene
 */
var GameScene = function (_P3$Scene) {
    _inherits(GameScene, _P3$Scene);

    function GameScene() {
        _classCallCheck(this, GameScene);

        var _this = _possibleConstructorReturn(this, (GameScene.__proto__ || Object.getPrototypeOf(GameScene)).call(this));

        _this.interactive = true;
        _this.cursor = "url(./assets/images/icon_target.png) 25 25, default";

        /**
         * @type {*|Container2d}
         * @private
         */
        _this._container3D = new PIXI.projection.Container2d();

        /**
         * @type {PIXI.Container}
         * @private
         */
        _this._projectionHolder = new PIXI.Container();

        /**
         * @type {PIXI.Container}
         * @private
         */
        _this._bgHolder = new PIXI.Container();

        /**
         * @type {PIXI.Container}
         * @private
         */
        _this._worldHolder = _Common2.default.world = new PIXI.Container();

        /**
         * @type {PIXI.Container}
         * @private
         */
        _this._uiHolder = _Common2.default.uiLayer = new PIXI.Container();

        /**
         * @type {Array}
         * @private
         */
        _this._pathBetties = [];

        /**
         * @type {Array}
         * @private
         */
        _this._peekBetties = [];

        /**
         * @type {BettyController}
         * @private
         */
        _this._bettyController = null;

        /**
         * @type {Array}
         * @private
         */
        _this._paths = [];

        /**
         * @type {e.BlurFilter}
         * @private
         */
        _this._blurFilter = new PIXI.filters.BlurFilter(2, 1, 1);

        /**
         * @type {PixelGlitchFilter}
         * @private
         */
        _this._glitchFilter = new _GlitchFilter2.default(10);
        _this._glitchFilter.uAmp = 0.001;
        _this._glitchFilter.uFreq = 0.002;

        /**
         * @type {PIXI.projection.Sprite2d}
         * @private
         */
        _this._projectionPlane = null;

        /**
         * @type {Button}
         * @private
         */
        _this._pauseBtn = null;

        /**
         * @type {Button}
         * @private
         */
        _this._soundBtn = null;

        /**
         * @type {PIXI.Sprite}
         * @private
         */
        _this._scorePanel = null;

        /**
         * @type {PausePanel}
         * @private
         */
        _this._pausePanel = null;

        /**
         * @type {null}
         * @private
         */
        _this._scoreManager = null;

        /**
         * @type {Array}
         * @private
         */
        _this._particles = [];

        /**
         * @type {PIXI.Sprite}
         * @private
         */
        _this._meter = null;

        /**
         * @type {Array}
         * @private
         */
        _this._testPath = null;

        /**
         * @type {PIXI.Sprite}
         * @private
         */
        _this._overlayL = null;

        /**
         * @type {PIXI.Sprite}
         * @private
         */
        _this._overlayR = null;

        /**
         * @type {PIXI.Sprite}
         * @private
         */
        _this._bulletPanel = null;

        /**
         * @type {PIXI.Sprite}
         * @private
         */
        _this._bg = null;

        /**
         * @type {null}
         * @private
         */
        _this._santa = null;

        /**
         * @type {boolean}
         * @private
         */
        _this._inGrace = true;

        /**
         * @type {number}
         * @private
         */
        _this._sendSantaTime = 0;

        /**
         * @type {number}
         * @private
         */
        _this._sendSantaDelay = 20;

        /**
         * @type {Shake}
         * @private
         */
        _this._cameraShake = _Common2.default.cameraShake = new _Shake2.default();

        /**
         * @type {number}
         * @private
         */
        _this._tutorialState = -1;

        /**
         * @type {TutorialPopup}
         * @private
         */
        _this._tutorialPopup = new _TutorialPopup2.default();
        return _this;
    }

    /**
     * @public
     */


    _createClass(GameScene, [{
        key: "init",
        value: function init() {
            var _this2 = this;

            _Common2.default.gameScene = this;
            _Common2.default.renderer.backgroundColor = 0xfefcef;

            // this._tutorialPopup.visible = false;
            this._tutorialPopup.x = _Common2.default.STAGE_WIDTH * 0.5;
            this._tutorialPopup.y = _Common2.default.STAGE_HEIGHT * 0.5;
            this._uiHolder.addChild(this._tutorialPopup);

            this._worldHolder.x = _Common2.default.STAGE_WIDTH * 0.5;
            this._worldHolder.y = _Common2.default.STAGE_HEIGHT * 0.5;
            this._cameraShake.setTarget(this._worldHolder);
            this._cameraShake.setRotCentre({ x: _Common2.default.STAGE_WIDTH * 0.5, y: _Common2.default.STAGE_HEIGHT * 0.5 });
            this._cameraShake.useRotation = true;

            this._cameraShake.maxOffsetX = 10;
            this._cameraShake.maxOffsetY = 10;
            this._cameraShake.maxRot = Math.PI * 0.01;

            //--load game at start (actually in this game this just ensures tutorial doesn't show if played has played previously--//
            _Common2.default.loadGame();

            //--reset results--//
            _Common2.default.results = {};

            //--add holders to scene--//
            this._worldHolder.addChild(this._bgHolder, this._projectionHolder);
            this.addChild(this._worldHolder, this._uiHolder);

            //--create bg--//
            this._bg = P3.createSprite("gameplay_arena_bg", this._bgHolder);
            this._bg.x = P3.View.width * 0.5;
            this._bg.interactive = true;
            this._bg.mousedown = this._bg.touchstart = this._missShot.bind(this);

            //--loads path from json and converts to an array of points--//
            this._loadAndConvertPaths();

            //--init ui and score manager and pass in our score panel--//
            this._initUI();
            var cb = {
                onEmpty: function onEmpty() {
                    _this2._onBulletsEmpty();
                },
                onReload: function onReload() {
                    _this2._onBulletsReload();
                }
            };
            this._scoreManager = _Common2.default.scoreManager = new _ScoreManager2.default(this._scorePanel, this._bulletPanel, this._meter, this.gameOver.bind(this), cb);

            //--more init--//
            this._initProjectionView();
            this._initLevel();
            this._initBettyController();
            this._initBetties();
            //this._initSanta();
            this.initSimon();

            //--add screen overlays--//
            this._overlayL = P3.createSprite("fg_wall_left", this._worldHolder);
            this._overlayL.anchor.set(0, 0);

            this._overlayR = P3.createSprite("fg_wall_right", this._worldHolder);
            this._overlayR.anchor.set(1, 0);

            //--add keyboard events--//
            var reload = _Common2.default.keyboard(32);
            reload.up = function () {
                //console.log("key up");
                _this2._scoreManager.refillBullets();
            };

            //--start the game--//
            this.start();
        }
    }, {
        key: "initSimon",
        value: function initSimon() {
            var simon = new _Simon2.default(this._container3D);
            this._worldHolder.addChild(simon.view);
            this._simon = simon;
        }

        /**
         * @public
         */

    }, {
        key: "start",
        value: function start() {
            var _this3 = this;

            var oldPos = new PIXI.Point(this._meter.panel.x, this._meter.panel.y);
            this._meter.panel.y += 150;

            TweenMax.to(this._meter.panel, 0.3, { y: oldPos.y, ease: Power1.easeOut, delay: 0.5 });

            var oldPos2 = new PIXI.Point(this._scorePanel.x, this._scorePanel.y);
            this._scorePanel.y -= 150;
            this._scorePanel.back1.y -= 150;
            this._scorePanel.back2.y -= 150;

            TweenMax.to(this._scorePanel, 0.3, { y: oldPos2.y, delay: 0.8, ease: Back.easeOut });
            TweenMax.to(this._scorePanel.back1, 0.3, { y: oldPos2.y, delay: 0.8, ease: Power1.easeOut });
            TweenMax.to(this._scorePanel.back2, 0.3, { y: oldPos2.y, delay: 0.8, ease: Power1.easeOut });

            _Common2.default.audio.stopMusic();
            _Common2.default.audio.playMusic("music_gameplay_loop_00");
            this.afx = _Common2.default.audio.playSound("sfx_ambient_loop_00", { loop: true });

            // Common.isFirstPlay = true;
            if (!_Common2.default.isFirstPlay) {
                delay(function () {
                    //start game running after a pause
                    _this3._running = true;
                    _this3._inGrace = false;
                }, 2, this);
            } else {
                this._pauseBtn.visible = false;
                this._inGrace = false;
                this._onUnpauseStartTutorial = true;
                this._pauseButtonDown();
                // delay(()=>this.tutorial(), 1);
            }
        }
    }, {
        key: "tutorial",
        value: function tutorial() {
            var _this4 = this;

            this._tutorialState++;
            console.log("tutorial state : " + this._tutorialState);

            switch (this._tutorialState) {
                case 0:

                    this._tutorialPopup.show(_Common2.default.copy.tut_popup_1[_Common2.default.language]);

                    //  delay(()=>this._tutorialPopup.hide(), 2);

                    //remove some bullets
                    for (var i = 0; i < 6; i++) {
                        this._scoreManager.useBullet();
                    }
                    delay(function () {

					delay(function () {
                    return _this4._tutorialPopup.hide();
                    }, 3);
					
					    _this4._inTut = true;
                        _this4.tutBetty = _this4._createBetty(false);
                        _this4.tutBetty.tutorialBetty = true;
                        _this4.tutBetty.immortal = true;
                        _this4.tutBetty.path = _this4._paths[6].slice(0); //copy
                        _this4.tutBetty.wakeUp();

                        _this4.tutBetty.tutCB = function () {
                            return _this4.tutorialStateZeroCB();
                        };

                        delay(function () {
                            _this4._inTut = false;

                            var str = "cursor";
                            if (_ismobilejs2.default.any) str = "finger";

                            _this4._finger = P3.createSprite("tutorial_" + str, _Common2.default.world);
                            _this4._finger.anchor.set(0.5);

                            var lhs = (_Common2.default.STAGE_WIDTH - P3.View.width) * 0.5;
                            var global = { x: lhs + _this4.tutBetty.worldTransform.tx, y: _this4.tutBetty.worldTransform.ty };

                            _this4._finger.x = global.x;
                            _this4._finger.y = global.y - 75;

                            TweenMax.to(_this4._finger.scale, 0.5, {
                                yoyo: true,
                                repeat: -1,
                                x: 0.7,
                                y: 0.7,
                                ease: Power1.easeIn,
                                yoyoEase: Power1.easeOut
                            });

                            _this4.tutBetty.immortal = false; //make betty killable again

                        }, 2.75, _this4);
                        _this4._peekBetties[0].onTutProjectileDown = function () {

                            _this4._tutorialPopup.show(_Common2.default.copy.tut_popup_3[_Common2.default.language]);

                            delay(function () {
                                return _this4._tutorialPopup.hide();
                            }, 3);

                            _this4.projectileDownComplete = true;

                            _this4._uiHolder.addChild(_this4._finger); //move to ui container
                            _this4._finger.visible = true;
                            _this4._finger.x = (_Common2.default.STAGE_WIDTH - P3.View.width) * 0.5 + 125;
                            _this4._finger.y = P3.View.height * 0.5 + 175;

                            _this4._scoreManager.onRefillTutComplete = function () {
                                TweenMax.killTweensOf(_this4._finger);

                                _this4._finger.visible = false;
                                _this4.tutorial();
                            };
                        };
                    }, 2);
                    break;
                case 1:
                    delay(function () {

                        _this4._tutorialPopup.show(_Common2.default.copy.tut_popup_4[_Common2.default.language]);

                        _this4._inTut = true;
                        _this4.tutBetty = _this4._createBetty(true);
                        _this4.tutBetty.tutorialBetty = true;
                        _this4.tutBetty.immortal = true;
                        _this4.tutBetty.path = _this4._paths[6].slice(0); //copy
                        _this4.tutBetty.wakeUp();

                        _this4.tutBetty.tutCB = function () {

                            _this4._inTut = true;
                            _this4._finger.visible = false;

                            _this4.tutorial();
                        };

                        delay(function () {

											delay(function () {
                    return _this4._tutorialPopup.hide();
                    }, 3);
						
                            _this4._inTut = false;

                            //   let global = this.tutBetty.view.toGlobal(Common.world);


                            var lhs = (_Common2.default.STAGE_WIDTH - P3.View.width) * 0.5;
                            var global = { x: lhs + _this4.tutBetty.worldTransform.tx, y: _this4.tutBetty.worldTransform.ty };
                            _this4._finger.x = global.x;
                            _this4._finger.y = global.y - 75;

                            TweenMax.to(_this4._finger.scale, 0.5, {
                                yoyo: true,
                                repeat: -1,
                                x: 0.7,
                                y: 0.7,
                                ease: Power1.easeIn,
                                yoyoEase: Power1.easeOut
                            });

                            _this4.tutBetty.immortal = false; //make betty killable again
                        }, 2.35, _this4);

                        delay(function () {
                            _this4._inTut = false;

                            var str = "cursor";
                            if (_ismobilejs2.default.any) str = "finger";

                            _this4._finger = P3.createSprite("tutorial_" + str, _Common2.default.world);
                            _this4._finger.anchor.set(0.5);

                            var lhs = (_Common2.default.STAGE_WIDTH - P3.View.width) * 0.5;
                            var global = { x: lhs + _this4.tutBetty.worldTransform.tx, y: _this4.tutBetty.worldTransform.ty };
                            _this4._finger.x = global.x;
                            _this4._finger.y = global.y - 75;

                            TweenMax.to(_this4._finger.scale, 0.5, {
                                yoyo: true,
                                repeat: -1,
                                x: 0.7,
                                y: 0.7,
                                ease: Power1.easeIn,
                                yoyoEase: Power1.easeOut
                            });

                            _this4.tutBetty.immortal = false; //make betty killable again
                        }, 2.35, _this4);
                    }, 2);

                    break;
                case 2:

                    this._tutorialPopup.show(_Common2.default.copy.tut_popup_5[_Common2.default.language]);

                    //make finger visible after a short delay

                    var myPresent;
                    //send simon to popout and drop a present
                    this._simon.popout(function (present) {
                        present.skipDecay = true;
                        myPresent = present;
                        present.tutCB = function () {
                            _this4._finger.visible = false;

                            //reactivate game at end of tutorial
                            _this4._finger.destroy();

                            _this4._running = true;
                            _this4._inGrace = false;
                            _this4._inTut = false;

                            _this4._scoreManager.refillBullets();

                            _this4._pauseBtn.visible = true;

                            _Common2.default.buttonsAppear([_this4._pauseBtn]);
                        };
                    });

                    delay(function () {
                        _this4._finger.visible = true;
					delay(function () {
                    return _this4._tutorialPopup.hide();
                    }, 3);

                        var lhs = (_Common2.default.STAGE_WIDTH - P3.View.width) * 0.5;
                        var global = { x: lhs + myPresent.worldTransform.tx, y: myPresent.worldTransform.ty };
                        _this4._finger.x = global.x;
                        _this4._finger.y = global.y + 35;
                    }, 3.5);

                    break;
                default:
                    console.warn("unknown tutorial state : " + this._tutorialState);
                    break;
            }
        }
    }, {
        key: "tutorialStateZeroCB",
        value: function tutorialStateZeroCB() {
            var _this5 = this;

            this._tutorialPopup.show(_Common2.default.copy.tut_popup_2[_Common2.default.language]);

            this._inTut = true;
            this._finger.visible = false;

            delay(function () {

					delay(function () {
                    return _this4._tutorialPopup.hide();
                    }, 3);

                _this5._peekBetties[0].peek(true); //peek with fire true to gurantee betty shoots at us for tutorial

                delay(function () {

                    if (_this5.projectileDownComplete) return; //skip if player moused down on projectile during the delay period

                    var projectile = _this5._peekBetties[0].lastFired;
                    TweenMax.killTweensOf(projectile);
                    TweenMax.killTweensOf(projectile.view);

                    _this5._finger.visible = true;

                    var global = _this5.tutBetty.view.toGlobal(_Common2.default.world);
                    _this5._finger.x = _Common2.default.STAGE_WIDTH * 0.5;
                    _this5._finger.y = global.y - 75;

                    var pos = projectile.view.toGlobal(_Common2.default.world);
                    _this5._finger.x = (_Common2.default.STAGE_WIDTH - P3.View.width) * 0.5 + pos.x - _Common2.default.STAGE_WIDTH * 0.5;
                    _this5._finger.y = pos.y - _Common2.default.STAGE_HEIGHT * 0.5;
                }, 2.75, _this5);
            }, 2.5, this);
        }

        /**
         * @public
         */

    }, {
        key: "appear",
        value: function appear() {
            _Common2.default.buttonsAppear([this._soundBtn, this._pauseBtn]);
        }

        /**
         * @public
         */

    }, {
        key: "end",
        value: function end() {
            this._uiHolder.visible = false;

            this._running = false;
            this.signals.next.dispatch(this);

            _Common2.default.audio.stopMusic();
            this.afx.stop();
        }

        /**
         * @public
         */

    }, {
        key: "destroy",
        value: function destroy() {
            TweenMax.killAll();
            _get(GameScene.prototype.__proto__ || Object.getPrototypeOf(GameScene.prototype), "destroy", this).call(this);
            _Common2.default.audio.stopMusic();
        }

        /**
         * @public
         */

    }, {
        key: "resize",
        value: function resize() {
            this.x = (P3.View.width - _Common2.default.STAGE_WIDTH) * 0.5;

            this._soundBtn.x = (_Common2.default.STAGE_WIDTH + P3.View.width) * 0.5 - 100;
            this._pauseBtn.x = (_Common2.default.STAGE_WIDTH + P3.View.width) * 0.5 - 185;
            this._homeBtn.x = (_Common2.default.STAGE_WIDTH - P3.View.width) * 0.5 + 75;

            this._scorePanel.x = (_Common2.default.STAGE_WIDTH - P3.View.width) * 0.5 + 325;
            this._scorePanel.back1.x = this._scorePanel.back2.x = this._scorePanel.x;

            this._projectionPlane.width = P3.View.width;
            this._projectionPlane.x = _Common2.default.STAGE_WIDTH * 0.5;
            this._projectionHolder.x = (_Common2.default.STAGE_WIDTH - P3.View.width) * 0.5;

            this._overlayL.x = (_Common2.default.STAGE_WIDTH - P3.View.width) * 0.5 - 150;
            this._overlayR.x = (_Common2.default.STAGE_WIDTH + P3.View.width) * 0.5 + 150;

            this._scoreManager.resize();

            var arr = this._container3D.children;
            for (var i = 0; i < arr.length; i++) {
                roundToTileGrid(arr[i]);
            }
        }

        /**
         * @public
         */

    }, {
        key: "gameOver",
        value: function gameOver() {
            var _this6 = this;

            if (_Common2.default.isDebug) return;

            //--play game over SFX--//
            _Common2.default.audio.playSound("sfx_gameover");

            //--top animations and logic--//
            TweenMax.pauseAll();
            this._running = false;
            //--resume health tweens--//
            this._scoreManager.healthTweens[0].resume();
            this._scoreManager.healthTweens[1].resume();

            //--handle scoring / save--//
            _Common2.default.results.score = this._scoreManager.score;
            _Common2.default.results.highestMulti = this._scoreManager.highestMultiplier;
            if (_Common2.default.results.score > _Common2.default.highestScore) {
                _Common2.default.highestScore = _Common2.default.results.score;
                _Common2.default.saveGame();
            }

            var pixelFilter = new PIXI.filters.PixelateFilter(15);

            //--set glitch filter active world filters--//
            this._worldHolder.filters = [pixelFilter];

            //--lazily define a recursive function to make the background glitch repeating--//
            var glitcher = function glitcher() {

                _this6._worldHolder.filters = [_this6._glitchFilter];

                delay(function () {

                    _this6._worldHolder.filters = [pixelFilter];

                    delay(function () {
                        glitcher();
                    }, 0.5 + Math.random(), _this6);
                }, 0.15, _this6);
            };

            //--start glitcher recursive function running--//
            glitcher();

            //--end scene after a delay--//
            delay(this.end, 2.5, this);

            //--game ending flag--//
            this._gameend = true;
        }
    }, {
        key: "update",
        value: function update() {

            //--if we are mobile and if we are not portrait then pause the game--
            if (_ismobilejs2.default.any && _Common2.default.view.orientation !== "landscape") {
                if (!this.isPause) {
                    this._pauseButtonDown();
                }
            }

            this._cameraShake.update(deltaTime);

            //--update pixi projection--//
            this._updateProjection();

            //--run active game logic--//
            if (this._running) {
                this._bettyController.update();
                this._updateBetties();
                this._updateParticles();
                ///this._santa.update();
                this._scoreManager.update();

                //--drop present timer--//
                this._sendSantaTime += deltaTime;
                if (this._sendSantaTime > this._sendSantaDelay) {
                    this._sendSantaTime = 0;
                    this._sendSantaDelay = 40;
                    //this._sendSanta();
                    this._simon.popout();
                }
            } else if (this._inTut) {
                this.tutBetty.update();
            }

            //--depth sort--//
            P3.depthSortY(this._container3D);
            //add floor back at lowest level
            this._container3D.addChildAt(this._projectionPlane, 0);
        }

        /**
         * @private
         */

    }, {
        key: "_updateProjection",
        value: function _updateProjection() {
            //---projection code from PIXI examples---//
            this._container3D.proj.clear();
            this._container3D.updateTransform();

            // now we can get local coords for points of perspective
            var pos = this._container3D.toLocal({ x: P3.View.width * 0.5, y: 200 }); //the y value here can be used to adjust projection depth

            //need to invert this thing, otherwise we'll have to use scale.y=-1 which is not good
            pos.x = -pos.x;
            pos.y = -pos.y;
            this._container3D.proj.setAxisY(pos, /*-squareFar.factor*/-1);
        }

        /**
         * @private
         */

    }, {
        key: "_updateBetties",
        value: function _updateBetties() {
            var len = void 0;

            len = this._pathBetties.length;
            for (var i = 0; i < len; i++) {
                this._pathBetties[i].update();
            }
            len = this._peekBetties.length;
            for (var _i = 0; _i < len; _i++) {
                this._peekBetties[_i].update();
            }
        }

        /**
         * @private
         */

    }, {
        key: "_updateParticles",
        value: function _updateParticles() {
            var len = void 0;

            len = this._particles.length;
            for (var i = 0; i < len; i++) {
                this._particles[i].update(P3.deltaTime * 0.5);
            }

            len = _Common2.default.hearts.length;
            for (var _i2 = 0; _i2 < len; _i2++) {
                if (_Common2.default.hearts[_i2] && _Common2.default.hearts[_i2].update) {
                    _Common2.default.hearts[_i2].update(P3.deltaTime * 0.5);
                }
            }
        }

        /**
         * @private
         */

    }, {
        key: "_initBetties",
        value: function _initBetties() {

            var numEvil = 100;
            for (var i = 0; i < numEvil; i++) {
                var betty = this._createBetty();
                this._pathBetties.push(betty);
            }

            var numReal = 15;
            for (var _i3 = 0; _i3 < numReal; _i3++) {
                var _betty = this._createBetty(true);
                this._pathBetties.push(_betty);
            }

            this._pathBetties = _Common2.default.shuffleArr(this._pathBetties);
        }

        /**
         * @deprecated
         * @private
         */

    }, {
        key: "_initSanta",
        value: function _initSanta() {
            this._santa = new _Santa2.default(this._container3D);
        }

        /**
         * @deprecated
         * @private
         */

    }, {
        key: "_sendSanta",
        value: function _sendSanta() {

            if (!this._santa.sleep) {
                console.warn("santa is already awake");
                return;
            }

            var p = this._paths[6].slice(0); //copy
            p[0].x += 800; //temp solution really, so santa finishes his path off screen
            this._santa.view.y = -300;
            this._santa.path = p;
            this._santa.sleep = false;
            this._santa.setTarget();
            this._santa.jumpToTarget();
            this._santa.view.visible = true;

            //-inc max pathing to increase difficulty--//
            this._bettyController.incMaxPathing();
        }

        /**
         * @private
         */

    }, {
        key: "_initProjectionView",
        value: function _initProjectionView() {
            this._container3D = new PIXI.projection.Container2d();
            this._container3D.position.set(0, P3.View.height - 125);

            var plane = new PIXI.projection.Sprite2d(_Common2.default.assets.texture("floor_tile"));
            plane.anchor.set(0.5, 1);
            plane.x = P3.View.width * 0.5;
            plane.width = P3.View.width;
            plane.height = P3.View.height * 4;
            plane.floor = true;
            this._projectionPlane = plane;

            this._container3D.addChild(plane);
            this._projectionHolder.addChild(this._container3D);
        }

        /**
         * Creates real and evil betti's dependent on isReal flag
         * @param {boolean} isReal
         * @returns {Betty}
         * @private
         */

    }, {
        key: "_createBetty",
        value: function _createBetty(isReal) {
            var _this7 = this;

            var cb = {
                onHit: function onHit(pos) {
                    _this7._createHit(pos);
                }
            };

            var betty = void 0;
            if (isReal) {
                betty = new _Betty2.default("betty_good", this._container3D, this._scoreManager, cb);
                betty.isReal = true;
            } else {
                betty = new _Betty2.default("betty_bad", this._container3D, this._scoreManager, cb);
                betty.initParticles();
            }

            betty.setTint();
            betty.init();

            return betty;
        }

        /**
         * @private
         */

    }, {
        key: "_initLevel",
        value: function _initLevel() {
            //todo - generalise this function better / sort this mess out
            var lvlData = _Levels2.default["level_1"].map.slice(0); //take a copy
            lvlData = lvlData.reverse(); //then reverse

            var sp = void 0;

            for (var y = 0; y < lvlData.length; y++) {
                for (var x = 0; x < lvlData[y].length; x++) {
                    if (lvlData[y][x] === 1) {

                        var rand = P3.math.randomInt(0, 2);
                        sp = new _Sprite3D2.default("wall_tile_end_0" + rand);

                        sp.x = x * P3.View.width * 0.2 + 150;
                        sp.y = y * (-P3.View.height * 0.2);
                        sp.interactive = true; //so it blocks interactions behind it
                        if (sp.x < P3.View.width * 0.5) {
                            sp.view.scale.x = -sp.view.scale.x;
                        }
                        if (x === lvlData[y].length - 1) {
                            sp.x -= 35;
                        }

                        sp.hitArea = new PIXI.Rectangle(0, 0, sp.width, sp.height * 0.5);

                        roundToTileGrid(sp);
                    } else if (lvlData[y][x] === 2) {
                        sp = new _Sprite3D2.default("wall_tile_0" + P3.math.randomInt(1, 3));
                        sp.x = x * P3.View.width * 0.2 + 150;
                        sp.y = y * (-P3.View.height * 0.2);
                        sp.interactive = true; //so it blocks interactions behind it

                        roundToTileGrid(sp);
                    } else if (lvlData[y][x] === 3) {
                        sp = new _Sprite3D2.default("plant_0" + P3.math.randomInt(0, 3));
                        sp.x = x * P3.View.width * 0.2 + 150 + 25;
                        sp.y = y * (-P3.View.height * 0.2);
                        if (sp.x < P3.View.width * 0.25) {
                            sp.x += P3.math.randomInt(-300, -150);
                        } else if (sp.x > P3.View.width * 0.75) {
                            sp.x += P3.math.randomInt(300, 150);
                        }
                        sp.y += P3.math.randomInt(150, 300);

                        if (Math.random() < 0.5) {
                            sp.view.scale.x = -sp.view.scale.x;
                        }
                    } else if (lvlData[y][x] === 4) {
                        sp = new _Sprite3D2.default("wall_1x1");
                        sp.x = x * P3.View.width * 0.2 + 150;
                        sp.y = y * (-P3.View.height * 0.2);
                        sp.interactive = true; //so it blocks interactions behind it
                    } else if (lvlData[y][x] === 6) {
                        sp = new _Sprite3D2.default("wall_tile_end_0" + P3.math.randomInt(1, 2));

                        sp.x = x * P3.View.width * 0.2 + 150;
                        sp.y = y * (-P3.View.height * 0.2);
                        sp.interactive = true; //so it blocks interactions behind it

                        roundToTileGrid(sp);

                        var betty = void 0;
                        if (Math.random() < 0.75) {
                            betty = new _PeekingBetty2.default("betty_bad", this._container3D, this._scoreManager);
                        } else {
                            betty = new _PeekingBetty2.default("betty_good", this._container3D, this._scoreManager);
                            betty.isReal = true;
                        }
                        betty.currentState = "up";
                        betty.x = sp.x;
                        betty.y = sp.y - 5;
                        betty.view.y -= 40;

                        sp.hitArea = new PIXI.Rectangle(0, 0, sp.width, sp.height * 0.5);

                        this._peekBetties.push(betty);
                        this._container3D.addChild(betty);
                    } else if (lvlData[y][x] === 7) {
                        sp = new _Sprite3D2.default("wall_tile_02");
                        sp.x = x * P3.View.width * 0.2 + 150;
                        sp.y = y * (-P3.View.height * 0.2);
                        // sp.interactive = true;//so it blocks interactions behind it

                        roundToTileGrid(sp);
                    } else {
                        continue;
                    }
                    this._container3D.addChildAt(sp, 1);
                }
            }

            var edgeData = _Levels2.default["level_1"].edgeL.slice(0); //copy
            edgeData = edgeData.reverse(); //reverse
            this._createEdge(edgeData, -1);

            edgeData = _Levels2.default["level_1"].edgeR.slice(0); //copy
            edgeData = edgeData.reverse(); //reverse
            this._createEdge(edgeData, 1);
        }
    }, {
        key: "_createEdge",
        value: function _createEdge(edgeData, dir) {
            var _this8 = this;

            var sp = void 0;
            for (var y = 0; y < edgeData.length; y++) {
                for (var x = 0; x < edgeData[y].length; x++) {
                    if (edgeData[y][x] === 1) {
                        var rand = P3.math.randomInt(1, 2);
                        sp = new _Sprite3D2.default("wall_tile_end_0" + rand);
                        sp.view.scale.x = dir;
                        sp.x = x * (300 * dir);
                        sp.x += 150 * dir;
                        if (dir === 1) {
                            sp.x += P3.View.width;
                        }
                        sp.y = y * (-P3.View.height * 0.2);
                        sp.interactive = true; //so it blocks interactions behind it
                        sp.mousedown = sp.touchstart = function (e) {
                            return _this8._missShot(e);
                        }; //and uses a bullet
                        sp.hitArea = new PIXI.Rectangle(0, 0, sp.width, sp.height * 0.5);
                        roundToTileGrid(sp);
                    } else if (edgeData[y][x] === 2) {
                        sp = new _Sprite3D2.default("wall_tile_0" + P3.math.randomInt(1, 3));
                        sp.view.scale.x = dir;
                        sp.x = x * (300 * dir);
                        sp.x += 150 * dir;
                        if (dir === 1) sp.x += P3.View.width;
                        sp.y = y * (-P3.View.height * 0.2);
                        sp.interactive = true; //so it blocks interactions behind it
                        sp.mousedown = sp.touchstart = function (e) {
                            return _this8._missShot(e);
                        }; //and uses a bullet
                        roundToTileGrid(sp);
                    } else if (edgeData[y][x] === 3) {
                        if (Math.random() < 0.75) {
                            sp = new _PeekingBetty2.default("betty_bad", this._container3D, this._scoreManager);
                        } else {
                            sp = new _PeekingBetty2.default("betty_good", this._container3D, this._scoreManager);
                            sp.isReal = true;
                        }
                        sp.currentState = "right";
                        sp.x = -150;
                        if (dir === 1) {
                            sp.currentState = "left";
                            sp.x = P3.View.width + 150;
                        }
                        if (Math.random() < 0.5) {
                            sp.currentState = "up";
                        }
                        roundToTileGrid(sp);
                        this._peekBetties.push(sp);
                    } else {
                        continue;
                    }

                    sp.y = y * (-P3.View.height / 5);
                    this._container3D.addChildAt(sp, 1);
                }
            }
        }

        /**
         * @private
         */

    }, {
        key: "_loadAndConvertPaths",
        value: function _loadAndConvertPaths() {
            var numPaths = _Common2.default.config.total_paths;
            for (var i = 0; i < numPaths; i++) {
                var pathData = _Common2.default.assets.json("path_" + (i + 1));
                pathData = this._convertPath(pathData);
                pathData = pathData.reverse();
                this._paths.push(pathData);
            }

            if (_Common2.default.isDebug) {
                var _pathData = _Common2.default.assets.json("path_test");
                _pathData = this._convertPath(_pathData);
                _pathData = _pathData.reverse();
                this._testPath = _pathData;
            }
        }

        /**
         * @param pathData
         * @returns {Array}
         * @private
         */

    }, {
        key: "_convertPath",
        value: function _convertPath(pathData) {
            var arr = [];
            var obj = void 0;
            for (var i = 0; i < pathData.length; i++) {
                if (i === 0) {
                    obj = {
                        x: pathData[i].rectA.X / 200 * P3.View.width - 250, //here 250 is a magic number, not sure why its needed
                        y: pathData[i].rectA.Y / 800 * (-P3.View.height * 4)
                    };
                    arr.push(obj);
                    obj = {
                        x: pathData[i].rectB.X / 200 * P3.View.width - 250,
                        y: pathData[i].rectB.Y / 800 * (-P3.View.height * 4)
                    };
                    arr.push(obj);
                } else {
                    obj = {
                        x: pathData[i].rectB.X / 200 * P3.View.width - 250,
                        y: pathData[i].rectB.Y / 800 * (-P3.View.height * 4)
                    };
                    arr.push(obj);
                }
                roundToTileGrid(obj);
            }
            return arr;
        }

        /**
         * @private
         */

    }, {
        key: "_initBettyController",
        value: function _initBettyController() {
            this._bettyController = new _BettyController2.default(this._peekBetties, this._pathBetties, this._paths);
            if (_Common2.default.isDebug) this._bettyController.testPath = this._testPath;
        }

        /**
         * @private
         */

    }, {
        key: "_initUI",
        value: function _initUI() {

            //--init our health meter--//
            this._initHealthMeter();

            //--create score panel--//
            var scorePanel = P3.createSprite("score_panel", this._uiHolder);
            scorePanel.x = -325;
            scorePanel.y = -55;

            var scoreView = createText("0", { size: 50, fill: 0xffffff, stroke: 0xabc3b0, strokeWidth: 2 }, "Digital-7");
            scoreView.position.set(-50, 70);
            scoreView.anchor.set(0);
            scorePanel.addChild(scoreView);

            var multiPanel = P3.createSprite("multiplier_sheet", scorePanel);
            multiPanel.position.set(120, 65);
            multiPanel.anchor.set(0.5, 0);
            scorePanel.multiPanel = multiPanel;

            _Common2.default.multiPanelPos = new PIXI.Point(multiPanel.x, multiPanel.y);

            var multiView = createText("1", { size: 31, fill: 0x644727 });
            multiView.y = 30;
            multiView.x = -10;
            multiView.anchor.set(0, 0.5);
            multiPanel.addChild(multiView);

            this._scorePanel = scorePanel;
            this._scorePanel.scoreView = scoreView;
            this._scorePanel.multiView = multiView;
            this._scorePanel.back1 = P3.createSprite("score_panel_tube_1", this._uiHolder);
            this._scorePanel.back2 = P3.createSprite("score_panel_tube_2", this._uiHolder);

            this._scorePanel.back1.x = this._scorePanel.x;
            this._scorePanel.back1.y = this._scorePanel.y;
            this._scorePanel.back2.x = this._scorePanel.x;
            this._scorePanel.back2.y = this._scorePanel.y;

            var bulletBack1 = P3.createSprite("ammo_loading_tube_1", this._uiHolder);
            var bulletBack2 = P3.createSprite("ammo_loading_tube_2", this._uiHolder);

            this._bulletPanel = P3.createSprite("ammo_loading_panel", this._uiHolder);
            this._bulletPanel.back1 = bulletBack1;
            this._bulletPanel.back2 = bulletBack2;
            this._bulletPanel.scale = bulletBack1.scale = bulletBack2.scale = new PIXI.Point(0.9, 0.9);

            var reloadText = createText(_Common2.default.copy.reload[_Common2.default.language], {
                size: 50,
                fill: 0xfb002e,
                stroke: 0x9a0213,
                strokeWidth: 2
            });

            this._uiHolder.addChild(reloadText);

            reloadText.x = (_Common2.default.STAGE_WIDTH - P3.View.width) * 0.5 + 255;
            reloadText.y = _Common2.default.STAGE_HEIGHT * 0.5;

            reloadText.anchor.set(0.5);

            this._bulletPanel.reloadText = reloadText;

            var lLightning = P3.createSprite("reload_warning_001", reloadText);
            var rLightning = P3.createSprite("reload_warning_001", reloadText);
            lLightning.anchor.set(0.5);
            rLightning.anchor.set(0.5);

            lLightning.x = -reloadText.width * 0.5 - 20;
            rLightning.x = reloadText.width * 0.5 + 20;

            reloadText.visible = false;

            reloadText.lLight = lLightning;
            reloadText.rLight = rLightning;

            this._bulletPanel.x = (_Common2.default.STAGE_WIDTH - P3.View.width) * 0.5 - 35;
            this._bulletPanel.y = P3.View.height * 0.5 - 35;

            this._bulletPanel.back1.x = this._bulletPanel.x;
            this._bulletPanel.back1.y = this._bulletPanel.y;
            this._bulletPanel.back2.x = this._bulletPanel.x;
            this._bulletPanel.back2.y = this._bulletPanel.y;

            var cb = {
                onUnpause: this._pauseButtonDown.bind(this)
            };

            this._scorePanel.startPos = new PIXI.Point(this._scorePanel.x, this._scorePanel.y);
            this._scorePanel.back1.startPos = new PIXI.Point(this._scorePanel.back1.x, this._scorePanel.back1.y);
            this._scorePanel.back2.startPos = new PIXI.Point(this._scorePanel.back2.x, this._scorePanel.back2.y);

            this._bulletPanel.startPos = new PIXI.Point(this._bulletPanel.x, this._bulletPanel.y);
            this._bulletPanel.back1.startPos = new PIXI.Point(this._bulletPanel.back1.x, this._bulletPanel.back1.y);
            this._bulletPanel.back2.startPos = new PIXI.Point(this._bulletPanel.back2.x, this._bulletPanel.back2.y);

            //--create pause panel--//
            this._pausePanel = new _PausePanel2.default(this._uiHolder, cb);
            this._pausePanel.x = _Common2.default.STAGE_WIDTH * 0.5;
            this._pausePanel.visible = false;

            //--create mute btn--//
            this._soundBtn = P3.simpleMute();
            this._soundBtn.y = 100;

            //--create pause btn--//
            this._pauseBtn = P3.simpleButton("small", "pause", this._pauseButtonDown.bind(this), this);
            this._pauseBtn.y = 100;

            this._homeBtn = P3.simpleButton("small", "home", this._homeButtonDown.bind(this), this);
            this._homeBtn.x = -P3.View.width * 0.5 + 75;
            this._homeBtn.y = 100;
            this._homeBtn.visible = false;

            this._uiHolder.addChild(this._pauseBtn, this._soundBtn, this._homeBtn);
        }

        /**
         * @private
         */

    }, {
        key: "_initHealthMeter",
        value: function _initHealthMeter() {
            var barBg = P3.createSprite("life_meter_bg", this._uiHolder);
            barBg.y = P3.View.height - barBg.height;

            var barFill = P3.createSprite("life_meter_fill", barBg);
            barFill.position.set(-barFill.width * 0.5 + 50, 8);
            barFill.anchor.set(0);
            _Common2.default.barMaxFill = barFill.width;

            var fillParticles = P3.createParticles(barFill, "part_life_meter", { name: "bubble_0", count: 1 });
            fillParticles.updateOwnerPos(15, 15);
            this._particles.push(fillParticles);

            var mask = new PIXI.Graphics();
            barBg.addChild(mask);
            mask.drawRect(0, 0, barFill.width, barFill.height);
            mask.position = barFill.position;
            mask.y += 6;
            barFill.mask = mask;
            mask.barEnd = P3.createSprite("life_meter_fill_end", barBg);
            mask.barEnd.x = _Common2.default.barMaxFill - 195;
            mask.barEnd.y = 13;

            this._meter = mask;
            this._meter.panel = barBg;
            this._meter.panel.x = _Common2.default.STAGE_WIDTH * 0.5;

            this._meter.panel.startPos = { x: this._meter.panel.x, y: this._meter.panel.y };
        }
    }, {
        key: "_createRicochet",
        value: function _createRicochet(pos) {
            var _this9 = this;

            var emitter = P3.createParticles(this._worldHolder, "part_missed_shot", {
                name: "part_missedshot_",
                count: 1
            }, null, true);
            emitter.updateOwnerPos(pos.x, pos.y);
            //--emit and cleanup--//
            emitter.playOnce(function () {
                _this9._worldHolder.removeChild(emitter);
                emitter.destroy();
            });
        }

        /**
         * @deprecated
         * @param pos
         * @private
         */

    }, {
        key: "_createHit",
        value: function _createHit(pos) {
            var _this10 = this;

            var assets = _Common2.default.assets;
            var textures = assets.texture("part_hit_shot_1");
            var config = assets.json("part_hit_shot");
            var emitter = new PIXI.particles.Emitter(this._worldHolder, textures, config);
            emitter.updateOwnerPos(pos.x, pos.y);
            emitter.playOnce(function () {
                _this10._worldHolder.removeChild(emitter);
                emitter.destroy();
            });
        }

        /**
         * @param pause {boolean}
         * @private
         */

    }, {
        key: "_pauseProjectiles",
        value: function _pauseProjectiles(pause) {
            var len = this._pathBetties.length;
            for (var i = 0; i < len; i++) {
                this._pathBetties[i].pauseProjectiles(pause);
            }
        }

        /**
         * Fired when user input down on bg (or otherwise doesn't input down on an enemy, so a miss)
         * @param event {event}
         * @private
         */

    }, {
        key: "_missShot",
        value: function _missShot(event) {
            if (this._running && this._scoreManager.gotBullets()) {

                this._scoreManager.useBullet();
                this._scoreManager.resetMultiplier();

                _Common2.default.audio.playSound(["sfx_firelaser1", "sfx_firelaser2", "sfx_firelaser3"]);

                var pos = event.data.getLocalPosition(this._worldHolder);
                this._createRicochet(pos);
            }
        }

        /**
         * @deprecated
         * @param event {event}
         * @private
         */

    }, {
        key: "_muteButtonDown",
        value: function _muteButtonDown(event) {
            _Common2.default.isMute = !_Common2.default.isMute;
            _Common2.default.audio.mute(_Common2.default.isMute);
            _Common2.default.saveMute();
            if (!_Common2.default.isMute) this._soundBtn.icon.texture = _Common2.default.assets.texture("icon_sound_on");else this._soundBtn.icon.texture = _Common2.default.assets.texture("icon_sound_off");
        }

        /**
         * @param event {event}
         * @private
         */

    }, {
        key: "_pauseButtonDown",
        value: function _pauseButtonDown(event) {
            var _this11 = this;

            if (this._inGrace || this.panelAnimating || this._gameend) return;

            if (!_Common2.default.paused) {

                this.isPause = true;

                TweenMax.pauseAll();
                //let root = TimelineLite.exportRoot();
                //root.timeScale(0);

                this._pausePanel.bounceIn();
                this._worldHolder.filters = [this._blurFilter];

                //is paused
                this.panelAnimating = true;
                TweenMax.to(this._meter.panel, 0.2, { y: this._meter.panel.y + 170 });

                TweenMax.to(this._scorePanel, 0.2, { y: this._scorePanel.y - 170 });
                TweenMax.to(this._scorePanel.back1, 0.2, { y: this._scorePanel.y - 170 });
                TweenMax.to(this._scorePanel.back2, 0.2, { y: this._scorePanel.y - 170 });

                TweenMax.to(this._bulletPanel, 0.2, { x: this._bulletPanel.x - 270 });
                TweenMax.to(this._bulletPanel.back1, 0.2, { x: this._bulletPanel.x - 270 });
                TweenMax.to(this._bulletPanel.back2, 0.2, {
                    x: this._bulletPanel.x - 270,
                    onComplete: function onComplete() {
                        _this11.panelAnimating = false;
                    }
                });

                this.afx.stop();
                this.afx = null;
                this.afx = _Common2.default.audio.playSound("sfx_ambient_popup_loop_00", { loop: true });

                _Common2.default.audio.stopMusic();
                var sound = _Common2.default.audio.playSound("music_menu_loop_start_00");
                sound.howl.on("end", function () {
                    _Common2.default.audio.stopMusic();
                    _Common2.default.audio.playMusic("music_menu_loop_00");
                });
            } else {

                this.isPause = false;

                TweenMax.resumeAll();
                //let root = TimelineLite.exportRoot();
                //root.timeScale(1);

                this._worldHolder.filters = null;
                this.panelAnimating = true;

                TweenMax.to(this._meter.panel, 0.2, { y: this._meter.panel.startPos.y });

                TweenMax.to(this._scorePanel, 0.2, { y: this._scorePanel.startPos.y });
                TweenMax.to(this._scorePanel.back1, 0.2, { y: this._scorePanel.back1.startPos.y });
                TweenMax.to(this._scorePanel.back2, 0.2, { y: this._scorePanel.back2.startPos.y });

                TweenMax.to(this._bulletPanel, 0.2, { x: this._bulletPanel.startPos.x });
                TweenMax.to(this._bulletPanel.back1, 0.2, { x: this._bulletPanel.startPos.x });
                TweenMax.to(this._bulletPanel.back2, 0.2, {
                    x: this._bulletPanel.startPos.x,
                    onComplete: function onComplete() {
                        _this11.panelAnimating = false;
                    }
                });

                this.afx.stop();
                this.afx = _Common2.default.audio.playMusic("sfx_ambient_loop_00", { loop: true });

                _Common2.default.audio.stopMusic();
                _Common2.default.audio.playMusic("music_gameplay_loop_00");
            }
            delay(function () {
                _this11._pauseBtn.visible = !_this11._pauseBtn.visible;

                _this11._pausePanel.visible = !_this11._pausePanel.visible;
                _this11._homeBtn.visible = !_this11._homeBtn.visible;

                _Common2.default.paused = _this11._pausePanel.visible;
                _this11._running = !_Common2.default.paused;

                if (!_Common2.default.paused) {
                    if (_this11._onUnpauseStartTutorial) {
                        console.log("starting tut");
                        _this11._inGrace = true;
                        _this11._running = false;
                        _this11.tutorial();
                        _this11._onUnpauseStartTutorial = false;
                    }
                }
            }, 0.05, this);

            this._bettyController.pausePeekTweens(_Common2.default.paused);
            this._pauseProjectiles(_Common2.default.paused);
        }
    }, {
        key: "_homeButtonDown",
        value: function _homeButtonDown(event) {
            this.signals.home.dispatch(this);
        }
    }, {
        key: "_onBulletsEmpty",
        value: function _onBulletsEmpty() {
            this.cursor = "url(./assets/images/icon_target_reload.png) 25 25, auto";
        }
    }, {
        key: "_onBulletsReload",
        value: function _onBulletsReload() {
            this.cursor = "url(./assets/images/icon_target.png) 25 25, auto";
        }
    }]);

    return GameScene;
}(P3.Scene);

/**
 * rounds x to tile width
 * @param sprite
 */


exports.default = GameScene;
function roundToTileGrid(sprite) {
    var tWid = 300;
    sprite.x = Math.round(sprite.x / tWid) * tWid;
    sprite.y = Math.round(sprite.y);
}

},{"./Betty":3,"./BettyController":4,"./Common":6,"./GlitchFilter":8,"./Levels":10,"./PausePanel":12,"./PeekingBetty":13,"./Santa":18,"./ScoreManager":20,"./Shake":21,"./Simon":22,"./Sprite3D":24,"./TutorialPopup":25,"ismobilejs":1}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var frag = "precision mediump float;\n#define GLSLIFY 1\n\nvarying vec2 vTextureCoord;\n\nuniform vec2 size;\nuniform sampler2D uSampler;\n\nuniform float uFreq;\nuniform float uAmp;\n\nuniform vec4 filterArea;\n\nvec2 mapCoord( vec2 coord )\n{\n    coord *= filterArea.xy;\n    coord += filterArea.zw;\n\n    return coord;\n}\n\nvec2 unmapCoord( vec2 coord )\n{\n    coord -= filterArea.zw;\n    coord /= filterArea.xy;\n\n    return coord;\n}\n\nvec2 pixelate(vec2 coord, vec2 size)\n{\n\treturn floor( coord / size ) * size;\n}\n\nvec2 movePixels(vec2 coord)\n{\n    float t = gl_FragCoord.y / uFreq;\n    coord.x += sin( t ) * uAmp;\n    return coord;\n}\n\nvoid main(void)\n{\n\n    vec2 coord = mapCoord(vTextureCoord);\n\n    coord = pixelate(coord, size);\n\n    coord = unmapCoord(coord);\n\n    coord = movePixels(coord);\n\n    gl_FragColor = texture2D(uSampler, coord);\n}";

var PixelGlitchFilter = function (_PIXI$Filter) {
    _inherits(PixelGlitchFilter, _PIXI$Filter);

    function PixelGlitchFilter() {
        var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;

        _classCallCheck(this, PixelGlitchFilter);

        var _this = _possibleConstructorReturn(this, (PixelGlitchFilter.__proto__ || Object.getPrototypeOf(PixelGlitchFilter)).call(this, null, frag));

        _this.size = size;
        _this.uFreq = 0.01;
        _this.uAmp = 0.02;
        return _this;
    }

    /**
     * This a point that describes the size of the blocks.
     * x is the width of the block and y is the height.
     *
     * @member {PIXI.Point|Array<number>|number}
     * @default 10
     */


    _createClass(PixelGlitchFilter, [{
        key: "size",
        get: function get() {
            return this.uniforms.size;
        }

        /**
         * @param value
         */
        ,
        set: function set(value) {
            if (typeof value === 'number') {
                value = [value, value];
            }
            this.uniforms.size = value;
        }
    }, {
        key: "uFreq",
        get: function get() {
            return this.uniforms.uFreq;
        },
        set: function set(value) {
            this.uniforms.uFreq = value;
        }
    }, {
        key: "uAmp",
        get: function get() {
            return this.uniforms.uAmp;
        },
        set: function set(value) {
            this.uniforms.uAmp = value;
        }
    }]);

    return PixelGlitchFilter;
}(PIXI.Filter);

exports.default = PixelGlitchFilter;

},{}],9:[function(require,module,exports){
/**
 * Created by noOne on 13/12/2017.
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Common = require("./Common");

var _Common2 = _interopRequireDefault(_Common);

var _GlitchFilter = require("./GlitchFilter");

var _GlitchFilter2 = _interopRequireDefault(_GlitchFilter);

var _ScanlinesFilter = require("./ScanlinesFilter");

var _ScanlinesFilter2 = _interopRequireDefault(_ScanlinesFilter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IntroScene = function (_P3$Scene) {
    _inherits(IntroScene, _P3$Scene);

    function IntroScene() {
        _classCallCheck(this, IntroScene);

        var _this = _possibleConstructorReturn(this, (IntroScene.__proto__ || Object.getPrototypeOf(IntroScene)).call(this));

        _this._backHolder = new PIXI.Container();

        /**
         * @type {PIXI.Container}
         * @private
         */
        _this._primaryHolder = new PIXI.Container();

        /**
         * @type {PIXI.Container}
         * @private
         */
        _this._loadingHolder = new PIXI.Container();

        /**
         * @type {ScanlinesFilter}
         * @private
         */
        _this._scanLineFilter = null;

        /**
         * @type {PIXI.Text}
         * @private
         */
        _this._loadTextView = createText("", { size: 45, fill: 0xffffff, letterSpacing: 15 }, "Munro");
        return _this;
    }

    _createClass(IntroScene, [{
        key: "init",
        value: function init() {
            var _this2 = this;

            var bg = P3.createSprite("splash_bg", this._primaryHolder);
            bg.visible = false;

            this._scanLineFilter = new _ScanlinesFilter2.default(bg);

            var frontHolder = new PIXI.Container();

            this.addChild(this._backHolder, this._primaryHolder, frontHolder);
            this._primaryHolder.addChild(this._loadingHolder);

            this._skipBtn = P3.simpleButton("small", "next", function () {
                // this.animateOut();
                _this2.end();
            }, this);
            frontHolder.addChild(this._skipBtn);

            this.start();
        }
    }, {
        key: "start",
        value: function start() {
            var _this3 = this;

            var spine = P3.createSpine("intro", "animation", true, false);
            this._primaryHolder.addChild(spine);
            spine.x = _Common2.default.STAGE_WIDTH * 0.5;
            spine.y = P3.View.height * 0.5;

            delay(function () {
                spine.visible = false;
                _this3.bootSequence();
            }, 10, this);

            _Common2.default.audio.stopMusic();
            _Common2.default.audio.playMusic("music_menu_loop_00");
        }

        /**
         * @deprecated
         */

    }, {
        key: "headsetAnimation",
        value: function headsetAnimation() {
            var _this4 = this;

            this._goggles = P3.createSprite("vr_goggles", this._primaryHolder);
            this._goggles.anchor.set(0.5, 0.25);
            this._goggles.position.set(_Common2.default.STAGE_WIDTH * 0.5, -this._goggles.height * 0.5);
            TweenMax.to(this._goggles, 1, {
                y: P3.View.height * 0.5,
                onComplete: function onComplete() {
                    TweenMax.to(_this4._goggles.scale, 0.5, {
                        x: 8,
                        y: 8
                    });
                    TweenMax.to(_this4._goggles, 0.5, {
                        alpha: 0
                    });

                    delay(function () {
                        _this4.bootSequence();
                    }, 0.4, _this4);
                }
            });
        }
    }, {
        key: "bootSequence",
        value: function bootSequence() {
            var _this5 = this;

            var overlay = P3.createSprite(PIXI.Texture.WHITE, this._primaryHolder);
            overlay.anchor.set(0);
            overlay.width = _Common2.default.STAGE_WIDTH;
            overlay.height = P3.View.height;
            overlay.tint = 0x0;

            TweenMax.to(overlay, 0.15, { alpha: 0, ease: Power0.easeNone });

            this._primaryHolder.filters = [this._scanLineFilter];
            var typeView = createText("_", { size: 45, fill: 0xffffff, stroke: 0xFFFFF0, strokeThickness: 2 }, "Munro");
            TweenMax.to(typeView, 0.25, { alpha: 0, ease: Sine.easeInOut, yoyo: true, repeat: -1 });
            typeView.y = -15;
            this._typeView = typeView;

            this._loadingHolder.addChild(typeView);
            this._loadingHolder.y = P3.View.height - 225;

            var loadString = "../FOR X=1 GOTO VR 0.3";
            var loadTextView = this._loadTextView;
            loadTextView.anchor.set(0, 0.5);
            this._loadingHolder.addChild(loadTextView);
            this._loadTextView = loadTextView;
            this._textArray = loadString.split("");

            var title = createText("VR 0.3 BETA", {
                size: 175,
                fill: 0xffffff,
                stroke: 0x93DB70,
                strokeWidth: 8
            }, "Digital-7");
            title.x = _Common2.default.STAGE_WIDTH * 0.5;
            title.y = P3.View.height * 0.5 - 100;
            title.alpha = 0;
            title.anchor.set(0.5);
            this._primaryHolder.addChild(title);
            this._title = title;

            var pixFilter = new _GlitchFilter2.default(15);
            pixFilter.uFreq = Math.random() * 0.001;
            pixFilter.uAmp = Math.random() * 0.002;

            this._typeView.x = this._loadTextView.x;

            //-animate as if someone was typing--//

            var _loop = function _loop(i) {
                delay(function () {
                    _this5._loadTextView.text += _this5._textArray[i];
                    _this5._typeView.x = _this5._loadTextView.x + _this5._loadTextView.width;
                }, i * 0.05 + 0.5 + (Math.random() / 20 - 0.025), _this5);
            };

            for (var i = 0; i < this._textArray.length; i++) {
                _loop(i);
            }

            var delayLength = this._textArray.length * 0.1;
            delay(function () {
                _this5.end();
            }, delayLength, this);
        }

        /**
         * @deprecated
         */

    }, {
        key: "animateScreen",
        value: function animateScreen() {
            var _this6 = this;

            var blue = P3.createSprite(PIXI.Texture.WHITE, this._backHolder);
            blue.tint = 0xA0A0A0;
            blue.anchor.set(0.5);
            blue.width = _Common2.default.STAGE_WIDTH;
            blue.height = P3.View.height;
            blue.x = _Common2.default.STAGE_WIDTH * 0.5;
            blue.y = P3.View.height * 0.5;

            var redContainer = new PIXI.Container();

            this._backHolder.addChild(redContainer);

            TweenMax.to(redContainer, 1, { y: -150, repeat: -1, ease: Power0.easeNone });

            for (var i = 0; i < 10; i++) {

                var red = P3.createSprite(PIXI.Texture.WHITE, redContainer);
                red.anchor.set(0.5);
                red.width = _Common2.default.STAGE_WIDTH;
                red.height = 75;
                //  red.tint = 0xc80000;
                red.tint = 0x484848;

                red.rotation = -0.01;

                red.x = _Common2.default.STAGE_WIDTH * 0.5;
                red.y += i * 150;
            }

            var white = P3.createSprite(PIXI.Texture.WHITE, this._backHolder);
            white.tint = 0x0; //is now black
            white.width = P3.View.width - 150;
            white.height = P3.View.height - 150;
            white.anchor.set(0.5);
            white.x = _Common2.default.STAGE_WIDTH * 0.5;
            white.y = P3.View.height * 0.5;

            delay(function () {
                _this6.end();
            }, 2.5, this);
        }
    }, {
        key: "appear",
        value: function appear() {}
    }, {
        key: "animateOut",
        value: function animateOut() {}
    }, {
        key: "end",
        value: function end() {
            this._running = false;
            _Common2.default.audio.stopMusic();
            this.signals.next.dispatch(this);
        }
    }, {
        key: "update",
        value: function update() {
            this._scanLineFilter.uniforms.time += deltaTime;
        }
    }, {
        key: "destroy",
        value: function destroy() {
            TweenMax.killAll();
            _get(IntroScene.prototype.__proto__ || Object.getPrototypeOf(IntroScene.prototype), "destroy", this).call(this, { children: true });
            _Common2.default.audio.stopMusic();
        }
    }, {
        key: "resize",
        value: function resize() {
            this.x = (P3.View.width - _Common2.default.STAGE_WIDTH) * 0.5;
            this._loadTextView.x = (_Common2.default.STAGE_WIDTH - P3.View.width) * 0.5 + 55; //lhs
            this._skipBtn.x = (_Common2.default.STAGE_WIDTH + P3.View.width) * 0.5 - 55;
            this._skipBtn.y = P3.View.height - 55;
        }
    }]);

    return IntroScene;
}(P3.Scene);

exports.default = IntroScene;

},{"./Common":6,"./GlitchFilter":8,"./ScanlinesFilter":19}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Created by Owlz on 23/10/2017.
 */

var levelData = {
    level_1: {
        map: [[0, 0, 6, 7, 2], [0, 0, 0, 0, 0], [3, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 3, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 3], [3, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [3, 0, 0, 0, 3], [0, 3, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [3, 0, 0, 0, 0], [0, 0, 3, 0, 0], [0, 0, 0, 3, 0], [3, 0, 0, 0, 3], [3, 0, 3, 3, 3]],
        edgeL: [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 2, 2], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [3, 0, 0], [1, 2, 2], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 2, 2], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
        edgeR: [[2, 2, 2], [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 2, 2], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [3, 0, 0], [1, 2, 2], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 2, 2], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
    }
};

exports.default = levelData;

},{}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Application = require("./Application");

var _Application2 = _interopRequireDefault(_Application);

var _PreloaderScene = require("./PreloaderScene");

var _PreloaderScene2 = _interopRequireDefault(_PreloaderScene);

var _Common = require("./Common");

var _Common2 = _interopRequireDefault(_Common);

var _ismobilejs = require("ismobilejs");

var _ismobilejs2 = _interopRequireDefault(_ismobilejs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Main = function () {
    /**
     * @param {number} width
     * @param {number} height
     */
    function Main(width, height) {
        _classCallCheck(this, Main);

        /**
         * @member {!number}
         * @private
         */
        this._width = width;

        /**
         * @member {!number}
         * @private
         */
        this._height = height;

        /**
         * @member {PreloaderScene}
         * @private
         */
        this._preloader = null;

        /**
         * @member {Application}
         * @private
         */
        this._game = null;
    }

    _createClass(Main, [{
        key: "init",
        value: function init() {
            _Common2.default.assets = new P3.AssetManager();
            _Common2.default.audio = P3.Button.audio = new P3.AudioManager();
            _Common2.default.language = language;

            _Common2.default.loadMute();
            _Common2.default.loadGame();

            var isPortrait = false;

            var params = {};
            params.holderId = "game";
            params.width = this._width;
            params.height = this._height;
            params.portrait = isPortrait;
            params.aspectRatioFillHeight = !isPortrait;
            params.rotateImageUrl = "./assets/images/rotate_screen" + ".jpg";
            params.rotateImageColor = "#000000";

            PIXI.settings.RETINA_PREFIX = /\_(?=[^_]*$)(.+)x/;
            // PIXI.settings.MIPMAP_TEXTURES = false;//attempt to fix seams between tiles
            // PIXI.glCore.VertexArrayObject.FORCE_NATIVE = true; //attempted fix for flickering UI

            TweenMax.defaultOverwrite = "none";
            TweenMax.ticker.fps(60);

            TweenLite.lagSmoothing(); //turn lag smoothing on

            var view = new P3.View(params);
            view.signals.ready.addOnce(function (canvas) {

                var options = {};
                options.view = canvas;
                options.transparent = false;
                options.antialias = false;
                options.preserveDrawingBuffer = false;
                options.resolution = 1.0;
                // options.roundPixels = true;//again, attempts seams between tiles fix

                var stage = new PIXI.Container();
                _Common2.default.stage = stage;

                // const input = new Input();
                /// input.init(stage, canvas);
                // Common.input = input;

                //on clicking the document focus on canvas, fix for buttons not working on mobile
                document.onclick = function () {
                    canvas.focus();
                };

                var renderer = PIXI.autoDetectRenderer(this._width, this._height, options);
                //  const renderer = new PIXI.WebGLRenderer(this._width, this._height, options);
                renderer.backgroundColor = 0x0;
                _Common2.default.renderer = renderer;
                _Common2.default.isWebGL = renderer instanceof PIXI.WebGLRenderer;

                var scene = new P3.SceneManager(renderer);
                scene.updateAll = true;
                _Common2.default.scene = scene;
                _Common2.default.stage.addChild(scene.view);

                PIXI.ticker.shared.add(function (deltaTime) {
                    window.P3.deltaTime = window.deltaTime = deltaTime / PIXI.settings.TARGET_FPMS / 1000;

                    scene.update();
                    renderer.render(_Common2.default.stage);
                }, this);

                /*
                 const timestep = new p3.Timestep(p3.Timestep.FIXED);
                 timestep.init(this.update, this.render, this);
                 Common.timestep = timestep;
                 */

                window.delay = function (callback, delay, scope) {
                    TweenMax.delayedCall(delay, callback, [], scope);
                };
                window.translate = function (str) {
                    var s = _Common2.default.config.strings[str];
                    s = s && s[_Common2.default.language];
                    return typeof s !== "undefined" ? s : str;
                };

                this.loadPreloader();
            }, this);
            view.signals.resize.add(this.onCanvasResize, this);
            _Common2.default.view = view;
        }
    }, {
        key: "loadPreloader",
        value: function loadPreloader() {
            var files = [{ name: "cn_preloader_1x", url: "images/" + "cn_preloader_1x" + ".json" }, { name: "cn_preloader", url: "images/" + "cn_preloader" + ".jpg" }, { name: "ui_1x", url: "images/" + "ui_1x" + ".json" }];
            var sounds = [];
            if (files.length) {
                _Common2.default.assets.addFiles(files, "assets/");
                _Common2.default.assets.signals.complete.addOnce(function () {
                    this.createConfig();
                    this.loadAssets();
                }, this);
                _Common2.default.assets.load();

                _Common2.default.audio.addSounds(sounds, [".ogg", ".m4a"], "");
            } else {
                this.loadAssets();
            }
        }
    }, {
        key: "loadAssets",
        value: function loadAssets() {

            var files = [
            //jpg
            { name: "splash_bg", url: "images/" + "splash_bg" + ".jpg" }, { name: "game_over_bg", url: "images/" + "game_over_bg" + ".jpg" }, { name: "gameplay_arena_bg", url: "images/" + "gameplay_arena_bg" + ".jpg" },

            //sheets
            { name: "game_0_1x", url: "images/" + "game_0_1x" + ".json" }, { name: "ui_1x", url: "images/" + "ui_1x" + ".json" }, { name: "tutorial_1x", url: "images/" + "tutorial_1x" + ".json" },
            //spine
            { name: "projectile_1", url: "images/" + "projectile_1" + ".json" }, { name: "intro", url: "images/" + "intro" + ".json" }, { name: "betty", url: "images/" + "betty" + ".json" },
            //particles
            { name: "part_life_meter", url: "particles/" + "part_life_meter" + ".json" }, { name: "part_virus_1", url: "particles/" + "part_virus_1" + ".json" }, { name: "part_virus_2", url: "particles/" + "part_virus_2" + ".json" }, { name: "part_projectile_1", url: "particles/" + "part_projectile_1" + ".json" }, { name: "part_burst", url: "particles/" + "part_burst" + ".json" }, { name: "part_hit_shot", url: "particles/" + "part_hit_shot" + ".json" }, { name: "part_missed_shot", url: "particles/" + "part_missed_shot" + ".json" }, { name: "part_virus_drift", url: "particles/" + "part_virus_drift" + ".json" }, { name: "part_emitter_heart", url: "particles/" + "part_emitter_heart" + ".json" },
            //data
            { name: "copy", url: "data/" + "copy" + ".json" }, { name: "path_test", url: "data/paths/" + "path_test" + ".json" }, { name: "config", url: "data/" + "config" + ".json" }];

            var sounds = ["sfx_btn_select", "sfx_btn_rollover", "sfx_ambient_loop_00", "sfx_ambient_popup_loop_00", "sfx_deflectshot", "sfx_empty_00", "sfx_enemyfire", "sfx_enemyhit", "sfx_gameover", "sfx_realwendyhit", "sfx_playerhit", "sfx_linealert", "sfx_firelaser1", "sfx_firelaser2", "sfx_firelaser3", "sfx_reload_00", "sfx_heart_throw_00", "sfx_heart_pickup_2", "music_gameover_music_sting_00", "music_gameplay_loop_00", "music_menu_loop_00", "music_menu_loop_start_00", "music_results_loop_00"];

            if (files.length) {
                this._preloader = new _PreloaderScene2.default();
                _Common2.default.scene.add(this._preloader);

                _Common2.default.assets.addFiles(files, "assets/");
                _Common2.default.assets.signals.progress.add(this.onLoadingProgress, this);
                _Common2.default.assets.signals.complete.addOnce(this.onLoadingCompleted, this);
                _Common2.default.assets.load();

                _Common2.default.audio.addSounds(sounds, [".ogg", ".m4a"], "assets/audio/");
            } else {
                this.startGame();
            }
        }
    }, {
        key: "createConfig",
        value: function createConfig() {
            var assets = _Common2.default.assets;

            var config = {};
            _Common2.default.config = config;
        }
    }, {
        key: "startGame",
        value: function startGame() {
            delay(function () {
                new _Application2.default();
                _Application2.default.init();
            }, 1.0, this);
        }
    }, {
        key: "onLoadingProgress",
        value: function onLoadingProgress(event) {
            this._preloader.loaded = event.progress / 100.0;
        }
    }, {
        key: "onLoadingCompleted",
        value: function onLoadingCompleted() {
            _Common2.default.assets.signals.progress.removeAll();
            _Common2.default.assets.signals.complete.removeAll();

            this._preloader.loaded = 1;

            if (_ismobilejs2.default.any) {
                this._preloader.signals.next.add(function () {
                    this.startGame(0);
                }, this);
            } else {
                this.startGame(1);
            }
        }

        /**
         * @param {boolean} correct
         */

    }, {
        key: "onCanvasResize",
        value: function onCanvasResize(correct) {
            if (correct) {
                _Common2.default.renderer.resize(P3.View.width, P3.View.height);
                if (_Common2.default.scene) {
                    _Common2.default.scene.resize();
                }
            }
        }
    }]);

    return Main;
}();

exports.default = Main;


window.Main = Main;

/**
 *
 * @param texture
 * @param holder
 * @returns {PIXI.Sprite}
 */
function createSprite(texture, holder, anchor) {
    var sprite = void 0;
    anchor = anchor || new PIXI.Point(0.5, 0);
    if (typeof texture === "string") {
        sprite = new PIXI.Sprite(_Common2.default.assets.texture(texture));
    } else if (texture instanceof PIXI.Texture) {
        sprite = new PIXI.Sprite(texture);
    } else {
        console.warn("texture neither a string nor a PIXI.Texture, falling back to empty texture");
        sprite = new PIXI.Sprite(PIXI.Texture.EMPTY);
    }
    sprite.anchor = anchor;
    if (holder) holder.addChild(sprite);
    return sprite;
}
P3.createSprite = createSprite;

/**
 *
 * @param copy
 * @param fontName
 * @param size
 * @param holder
 * @param colour
 * @returns {PIXI.Text}
 */
function simpleText(copy, fontName, size, holder, colour) {
    var col = colour || 0x000000;
    var textView = new PIXI.Text(copy, { fontFamily: fontName, fontSize: size, fill: col });
    textView.anchor.x = 0.5;
    if (holder) holder.addChild(textView);
    return textView;
}
P3.simpleText = simpleText;

function createText(copy, config, type) {
    var cfg = {};
    var textView = void 0;
    if (_Common2.default.language === "ar") {} else {

        if (!type) cfg.fontFamily = "Fred Fredburger Headline Black";else cfg.fontFamily = type;
        cfg.fontSize = config.size || config.fontSize || 25;
        cfg.fill = config.fill || 0x0;
        cfg.align = config.align || "left";
        cfg.letterSpacing = config.letterSpacing || 0;
        if (config.stroke) {
            cfg.stroke = config.stroke;
            cfg.strokeThickness = config.strokeThickness || 5;
        }
        if (config.wordWrap || cfg.wordWrapWidth) {
            cfg.wordWrap = true;
            cfg.wordWrapWidth = config.wordWrapWidth;
        }
        if (config.dropShadow || cfg.dropShadowDistance) {
            cfg.dropShadow = true;
            cfg.dropShadowDistance = config.dropShadowDistance || 5;
        }

        textView = new PIXI.Text(copy, cfg);
    }
    return textView;
}
window.createText = createText;

/**
 * Creates the texture for the popups sprite
 * @param width
 * @param height
 * @returns {Texture|PIXI.Texture}
 */
function createPopUpTexture(width, height) {
    var g = new PIXI.Graphics();
    g.beginFill(0xffffff);
    g.lineStyle(25, 0xe1e1e1);
    g.drawRoundedRect(0, 0, width, height, 10);
    g.endFill();
    var texture = _Common2.default.renderer.generateTexture(g);
    g.destroy();
    return texture;
}

/**
 * Creates a popup screen sprite
 * @param width {number}
 * @param height {number}
 * @param centre {boolean}
 * @param holder {PIXI.Container}
 * @returns {PIXI.Sprite}
 */
function createPopup(width, height, centre, holder) {
    var sc = new PIXI.Sprite(createPopUpTexture(width, height));
    sc.anchor.set(0.5);
    if (centre) sc.y = P3.View.height * 0.5;
    if (holder) holder.addChild(sc);
    _Common2.default.generatedDispObjs.push(sc);
    return sc;
}
P3.createPopup = createPopup;

/**
 * Depths sorts children in container passed to it by x, y coordinates
 * @param container {PIXI.Container}
 */
function depthSortXY(container) {
    container.children.sort(function (a, b) {
        return a.position.y > b.position.y ? 1 : a.position.y < b.position.y ? -1 : a.position.x > b.position.x ? 1 : a.position.x < b.position.x ? -1 : 0;
    });
}
P3.depthSortXY = depthSortXY;

/**
 * Depth sorts children by y value
 * @param container
 */
function depthSortY(container) {
    container.children.sort(function (a, b) {
        //if (a.floor || b.floor) return -1;//don't sort floor
        if (a.y === b.y) {
            //bit of weirdness to handle z fighting
            b.y -= 0.1;
            return 1;
        }
        if (a.y > b.y) {
            return 1;
        }
        return -1;
    });
}
P3.depthSortY = depthSortY;

/**
 * TODO - swap for built in sort function, my tests show it is much quicker
 * Depth sorts children by z value (must assign a z value to the display object for this to work)
 * @param container
 * @param highToLow {?boolean}
 */
function depthSortZ(container, highToLow) {
    highToLow = highToLow || true;
    var array = container.children;
    var len = array.length - 1;
    quickSort(0, len);

    function quickSort(first, last) {

        if (first < last) {
            var pivotIndex = partition();
            quickSort(first, pivotIndex - 1);
            quickSort(pivotIndex + 1, last);
        }

        function swap(p, q) {
            var temp = array[p];
            array[p] = array[q];
            array[q] = temp;
        }

        function partition() {
            var pivot = array[first],
                index = first;
            swap(index, last);
            for (var i = first; i < last; i++) {
                if (!highToLow && array[i].z < pivot.z) swap(index++, i);else if (highToLow && array[i].z > pivot.z) swap(index++, i);
            }
            swap(index, last);
            return index;
        }
    }
}
P3.depthSortZ = depthSortZ;

/**
 * @deprecated
 * Creates and returns a new UI button
 * @param point {PIXI.Point}
 * @param type
 * @param callback
 * @param scope
 * @param params
 * @returns {Button}
 */
function createButton(point, type, callback, scope) {
    var params = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : { holder: null, text: null, icon: null };


    var states = new P3.ButtonStates();

    if (params.text || !type) {
        states.normal = PIXI.Texture.EMPTY;
        states.down = PIXI.Texture.EMPTY;
    } else if (typeof type === "string") {
        states.normal = _Common2.default.assets.texture("btn_" + type + "_out");
        states.over = _Common2.default.assets.texture("btn_" + type + "_over");
        states.down = _Common2.default.assets.texture("btn_" + type + "_down");
    } else {
        states.normal = type;
    }
    var button = new Button(states);
    button.x = point.x;
    button.y = point.y;
    button.anchor = new PIXI.Point(0.5, 0.5);
    button.animate = true;

    button.signals.click.add(callback, scope);

    if (params) {
        if (params.holder) {
            params.holder.addChild(button);
        }
        if (params.icon) {
            var sp = P3.createSprite(params.icon);
            sp.anchor.set(0.5);
            button.addChild(sp);
            button.icon = sp;
        }
        if (params.text) {
            var txtView = P3.simpleText(params.text, "consolas", 45, button, 0xffffff); //new PIXI.extras.BitmapText(text, {font: "45px Calibri"});
            txtView.anchor = { x: 0.5, y: 0.5 };
            button.txtView = txtView;
        }
    }

    return button;
}
P3.createButton = createButton;

function simpleButton(type, icon, cb, ctx) {

    var assets = _Common2.default.assets;

    var btn = void 0;
    if (icon) {
        btn = P3.Button.create(assets.texture("btn_" + type + "_out"), assets.texture("btn_" + type + "_over"), assets.texture("btn_" + type + "_down"), assets.texture("icon_" + icon));
    } else {
        btn = P3.Button.create(assets.texture("btn_" + type + "_out"), assets.texture("btn_" + type + "_over"), assets.texture("btn_" + type + "_down"));
    }

    btn.overSoundName = "sfx_btn_rollover";
    btn.clickSoundName = "sfx_btn_select";
    btn.signals.click.add(function (e) {
        cb(e);
    }, ctx);

    return btn;
}
P3.simpleButton = simpleButton;

function simpleMute() {

    var assets = _Common2.default.assets;

    var states = new P3.ButtonStates();
    states.normal = assets.texture("btn_small_out");
    states.over = assets.texture("btn_small_over");
    states.up = assets.texture("btn_small_down");
    states.icon = assets.texture("icon_sound_on");
    states.iconAlt = assets.texture("icon_sound_off");

    var btn = new P3.MuteButton(states);
    btn.overSoundName = "sfx_btn_rollover";
    btn.clickSoundName = "sfx_btn_select";

    if (_Common2.default.isMute) {
        //if is mute switch to muted icon on creation
        btn._icon.texture = assets.texture("icon_sound_off");
    }

    return btn;
}
P3.simpleMute = simpleMute;

/**
 * Create and returns new particle emitter
 * @param holder {PIXI.Container}
 * @param configName {String}
 * @param tex {Object}
 * @param arr {Array}
 * @param emit {boolean} @default {true}
 * @returns {PIXI.particles.Emitter}
 */
function createParticles(holder, configName, tex, arr, emit) {
    var assets = _Common2.default.assets;
    var textures = [];
    for (var i = 1; i <= tex.count; i++) {
        textures.push(assets.texture(tex.name + i));
    }
    var config = assets.json(configName);
    var emitter = new PIXI.particles.Emitter(holder, textures, config);
    if (arr) arr.push(emitter);
    emitter.emit = emit || true;
    return emitter;
}
P3.createParticles = createParticles;

/**
 * @param name {string}
 * @param startAnim {string}
 * @param autoUpdate {boolean}
 * @returns {*|Spine}
 */
function createSpine(name, startAnim, autoUpdate) {
    var loop = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

    autoUpdate = autoUpdate || false;
    var spine = new PIXI.spine.Spine(_Common2.default.assets.spineData(name));
    spine.skeleton.setToSetupPose();
    spine.autoUpdate = autoUpdate;
    if (startAnim) {
        spine.state.setAnimation(0, startAnim, loop);
    }
    spine.update(0);
    return spine;
}
P3.createSpine = createSpine;

},{"./Application":2,"./Common":6,"./PreloaderScene":14,"ismobilejs":1}],12:[function(require,module,exports){
/**
 * Created by noOne on 13/10/2017.
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
        value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PausePanel = function (_PIXI$Sprite) {
        _inherits(PausePanel, _PIXI$Sprite);

        function PausePanel(holder, cb) {
                _classCallCheck(this, PausePanel);

                var _this = _possibleConstructorReturn(this, (PausePanel.__proto__ || Object.getPrototypeOf(PausePanel)).call(this, PIXI.Texture.EMPTY));

                _this.cb = cb;

                holder.addChild(_this);

                var panel = P3.createSprite("panel_pause", _this);

                var lBtn = P3.simpleButton("small", "prev", _this._btnDown.bind(_this), _this);
                lBtn.x = -panel.width * 0.5 + 62;
                lBtn.y = panel.height * 0.5 + 25;
                lBtn.dir = -1;
                panel.addChild(lBtn);

                /*
                   const lBtn = P3.createButton({
                 x: -panel.width * 0.5 + 62,
                 y: panel.height * 0.5 + 25
                 }, "small", this._btnDown.bind(this), this, {
                 holder: panel,
                 icon: "icon_prev"
                 });
                 lBtn.dir = -1;
                 */
                /*
                 const rBtn = P3.createButton({
                 x: panel.width * 0.5 - 175,
                 y: panel.height * 0.5 + 25
                 }, "small", this._btnDown.bind(this), this, {
                 holder: panel,
                 icon: "icon_next"
                 });
                 rBtn.dir = 1;
                 */
                var rBtn = P3.simpleButton("small", "next", _this._btnDown.bind(_this), _this);
                rBtn.x = panel.width * 0.5 - 175;
                rBtn.y = panel.height * 0.5 + 25;
                rBtn.dir = 1;
                panel.addChild(rBtn);

                //console.log(Common.language);
                // console.log(Common.copy.help);
                // console.log(Common.copy.help[Common.language]);

                // const panelHeader = P3.simpleText("HOW TO PLAY", "consolas", 75, panel, 0x0);
                var panelHeader = createText(Common.copy.help[Common.language], {
                        size: 60,
                        fill: 0x929ebb
                });
                panelHeader.anchor.set(0.5);
                panelHeader.x = -60;
                panelHeader.y = 105;
                panel.addChild(panelHeader);

                /*
                 const copy = "Lorem ipsum dolor sit amet, consectetur adipiscing \nelit. Morbi at viverra nisl.";
                 // const tempBody = P3.simpleText("Lorem ipsum dolor sit amet, consectetur adipiscing \nelit. Morbi at viverra nisl.", "consolas", 25, panel, 0xffffff);
                 const tempBody = createText(copy, {
                 size: 28,
                 fill: "white",
                 wordWrapWidth: panel.width - 375
                 }, "Fred Fredburger Regular");
                 tempBody.anchor.set(0.5);
                 tempBody.x = -50;
                 tempBody.y = panel.height - 175;
                 panel.addChild(tempBody);
                 */

                //  this.scale.set(0.9);

                //this.anchor.set()

                /**
                 * @type {boolean}
                 * @private
                 */
                _this._animating = false;

                _this._frames = [];

                _this._currentFrame = 0;

                for (var i = 0; i < 4; i++) {
                        var fr = P3.createSprite("fr_" + (i + 1), panel);
                        fr.visible = false;
                        _this._frames.push(fr);
                        fr.copy = createText(Common.copy["help_fr" + (i + 1)][Common.language], {
                                size: 28,
                                fill: "white",
                                wordWrap: true,
                                wordWrapWidth: panel.width - 400,
                                align: "center"
                        }, "Fred Fredburger Regular");
                        fr.copy.anchor.set(0.5);
                        fr.copy.x = -65;
                        fr.copy.y = panel.height - 165;
                        panel.addChild(fr.copy);
                        fr.copy.visible = false;

                        fr.pip = P3.createSprite("pip_off", panel);
                        fr.pip.anchor.set(0.5);

                        fr.pip.scale.set(0.75);

                        fr.pip.x = -138 + i * 55;
                        fr.pip.y = panel.height - 45;
                }

                _this._btnDown({ dir: 0 }); //init

                var playBtn = P3.simpleButton("big", "play", function (e) {
                        // this.animateOut();
                        //this.end();
                        _this.cb.onUnpause(e);
                }, _this);

                panel.addChild(playBtn);
                playBtn.x = panel.width * 0.5 - 225;
                playBtn.y = panel.height - 75;

                //  this._playBtn.x = Common.STAGE_WIDTH * 0.5;
                //  this._playBtn.y = P3.View.height * 0.5 + 200;

                return _this;
        }

        _createClass(PausePanel, [{
                key: "_btnDown",
                value: function _btnDown(btn) {

                        this._frames[this._currentFrame].visible = false;
                        this._frames[this._currentFrame].copy.visible = false;
                        this._frames[this._currentFrame].pip.texture = Common.assets.texture("pip_off");

                        this._currentFrame += btn.dir;

                        if (this._currentFrame < 0) this._currentFrame = 3;else if (this._currentFrame > 3) this._currentFrame = 0;

                        this._frames[this._currentFrame].visible = true;
                        this._frames[this._currentFrame].copy.visible = true;
                        this._frames[this._currentFrame].pip.texture = Common.assets.texture("pip_on");
                }
        }, {
                key: "flipIn",
                value: function flipIn() {
                        var _this2 = this;

                        if (this._animating) return;
                        this._animating = true;
                        TweenMax.from(this.scale, 0.5, {
                                y: -1,
                                ease: Power0.easeNone,
                                onComplete: function onComplete() {
                                        _this2._animating = false;
                                }
                        });
                }
        }, {
                key: "bounceIn",
                value: function bounceIn() {
                        var _this3 = this;

                        if (this._animating) return;
                        this._animating = true;
                        TweenMax.from(this, 0.25, {
                                y: -350,
                                ease: Power1.easeOut,
                                onComplete: function onComplete() {
                                        _this3._animating = false;
                                }
                        });
                }
        }]);

        return PausePanel;
}(PIXI.Sprite);

exports.default = PausePanel;

},{}],13:[function(require,module,exports){
/**
 * Created by Owlz on 24/10/2017.
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Sprite3D2 = require("./Sprite3D");

var _Sprite3D3 = _interopRequireDefault(_Sprite3D2);

var _Shake = require("./Shake");

var _Shake2 = _interopRequireDefault(_Shake);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class
 */
var PeekingBetty = function (_Sprite3D) {
    _inherits(PeekingBetty, _Sprite3D);

    /**
     * @param texName {String} - texture name
     * @param holder {*|PIXI.projection.Container2d} - optional holder to add to
     * @param scoreManager {ScoreManager}
     */
    function PeekingBetty(texName, holder, scoreManager) {
        _classCallCheck(this, PeekingBetty);

        /**
         * @type {*|PIXI.projection.Container2d}
         * @private
         */
        var _this = _possibleConstructorReturn(this, (PeekingBetty.__proto__ || Object.getPrototypeOf(PeekingBetty)).call(this, texName, null));

        _this._container3D = holder;

        /**
         * @type {number}
         * @private
         */
        _this._moveSpeed = Common.config.peek_speed;

        /**
         * @type {boolean}
         * @private
         */
        _this._sleep = true;

        /**
         * @type {string}
         * @private
         */
        _this._currentState = "";

        /**
         * @type {{left: function, right: function, up: function}}
         * @private
         */
        _this._peekStates = {
            "left": function left(f) {
                return _this._peekTween(-1, f);
            },
            "right": function right(f) {
                return _this._peekTween(1, f);
            },
            "up": function up(f) {
                return _this._peekTween(0, f);
            } //use zero for peeking upwards (not sure this will even be used)
        };

        /**
         * @type {number}
         * @private
         */
        _this._peekDistance = 250;

        /**
         * @type {number}
         * @private
         */
        _this._tweenTime = _this._peekDistance / _this._moveSpeed;

        /**
         * @type {boolean}
         * @private
         */
        _this._sleep = true;

        /**
         * @type {ScoreManager}
         * @private
         */
        _this._scoreManager = scoreManager;

        /**
         * @type {boolean}
         * @private
         */
        _this._isReal = false;

        /**
         * @type {Array}
         * @private
         */
        _this._explodingPieces = [];

        /**
         * @type {null|PIXI.Container}
         * @private
         */
        _this._particleHolder = new PIXI.Container();

        /**
         * @type {null}
         * @private
         */
        _this._emitter = null;

        /**
         * @type {null}
         * @private
         */
        _this._emitter2 = null;

        /**
         * @type {Array}
         * @private
         */
        _this._projectiles = [];

        /**
         * @type {number}
         * @private
         */
        _this._projectileSpeed = Common.config.projectile_speed;

        _this._myShake = new _Shake2.default();

        _this.init();
        return _this;
    }

    _createClass(PeekingBetty, [{
        key: "init",
        value: function init() {

            this._initParticles();

            var hitArea = P3.createSprite(PIXI.Texture.EMPTY, this.view);
            hitArea.width = this.view.width * 0.5;
            hitArea.height = this.view.height * 0.5;
            hitArea.anchor.set(0.5);
            hitArea.y = -this.view.height * 0.5;

            hitArea.interactive = true;
            hitArea.pointerdown = hitArea.touchstart = this._inputdown.bind(this);

            this._myShake.setTarget(this.view);
            this._myShake.maxOffsetX = 175; //big ol shake
            this._myShake.maxOffsetY = 125; //less y shake otherwise they might shake out from underneath wall tile

            this.goToSleep();
        }
    }, {
        key: "update",
        value: function update() {

            this._myShake.update(deltaTime);

            for (var i = 0; i < this._explodingPieces.length; i++) {
                this._explodingPieces[i].x += this._explodingPieces[i].dx * P3.deltaTime;
                this._explodingPieces[i].y += this._explodingPieces[i].dy * P3.deltaTime;
            }

            //--update projectile spine animation--//
            var len = this._projectiles.length;
            for (var _i = 0; _i < len; _i++) {
                this._projectiles[_i].view.update(P3.deltaTime);
            }

            this._emitter.update(P3.deltaTime * 0.5);
            this._emitter2.update(P3.deltaTime * 0.5);
            this._particleHolder.x = this._view.x;
            this._particleHolder.y = this._view.y - this._view.height * 0.5;
        }
    }, {
        key: "wakeUp",
        value: function wakeUp(fire) {

            this.dieing = false;

            this.view.visible = true;
            this._sleep = false;
            if (!this._isReal) {
                this._emitter.emit = true;
                this._emitter2.emit = true;
            }

            this.setTint();
        }
    }, {
        key: "goToSleep",
        value: function goToSleep() {

            TweenMax.killTweensOf(this._view);
            this._view.x = 0;
            this._view.y = 65;
            this.view.visible = false;
            this._sleep = true;

            this._emitter.emit = false;
            this._emitter2.emit = false;

            this.setTint();
        }

        /**
         * @deprecated
         */

    }, {
        key: "setTint",
        value: function setTint() {
            //   if (this._isReal) {
            ///      this._tint = 0x37FDFC;
            //  } else {
            ///      this._tint = 0xDD0048;
            ///   }
            //   this._glowFilter = new PIXI.filters.GlowFilter(25, 0, 0, this._tint, 0.2);
        }
    }, {
        key: "_inputdown",
        value: function _inputdown(event) {
            var _this2 = this;

            if (this._sleep || !this._scoreManager.gotBullets() || this.dieing || Common.paused) return;

            this.dieing = true;

            if (this._isReal) {
                this._scoreManager.resetMultiplier();
                this._scoreManager.hitPlayer();
            } else {
                this._scoreManager.addMultiplier();
                this._scoreManager.addScore();
            }

            this.view.tint = this._tint;

            this._scoreManager.useBullet();

            this._playLaserSound();
            this._playHitSound();

            this._shake(this, function () {
                if (!_this2._isReal) _this2._createAnimatedScore();
                _this2._explode();
                _this2.goToSleep();
            });

            //--create particle effect--//
            var assets = Common.assets;
            var textures = assets.texture("part_hit_shot_1");
            var config = assets.json("part_hit_shot");
            var emitter = new PIXI.particles.Emitter(this, textures, config);

            var local = event.data.getLocalPosition(this);
            emitter.updateOwnerPos(local.x, local.y);

            emitter.playOnce(function () {
                _this2.removeChild(emitter);
                emitter.destroy();
            });
        }

        /**
         * @returns {Tween}
         */

    }, {
        key: "peek",
        value: function peek(fire) {

            //--small chance to be a good betty--//
            if (Math.random() < 0.2 && !fire) {
                this.view.texture = Common.assets.texture("betty_good");
                this._isReal = true;
            } else {
                this.view.texture = Common.assets.texture("betty_bad");
                this._isReal = false;
            }

            this.wakeUp();

            return this._peekStates[this._currentState](fire);
        }

        /**
         * @param dir
         * @returns {Tween}
         * @private
         */

    }, {
        key: "_peekTween",
        value: function _peekTween(dir, fire) {
            var _this3 = this;

            if (TweenMax.isTweening(this._view)) return;

            var target = void 0,
                tween = void 0;
            if (dir !== 0) {
                target = this._view.x + this._peekDistance * dir;
                tween = TweenMax.to(this._view, this._tweenTime, {
                    x: target,
                    yoyo: true,
                    repeat: 1,
                    repeatDelay: 1,
                    ease: Power0.easeNone,
                    onComplete: function onComplete() {
                        _this3.goToSleep();
                    }
                });
            } else {
                target = this._view.y - this._peekDistance;
                tween = TweenMax.to(this._view, this._tweenTime, {
                    y: target,
                    yoyo: true,
                    repeat: 1,
                    repeatDelay: 1,
                    ease: Power0.easeNone,
                    onComplete: function onComplete() {
                        _this3.goToSleep();
                    }
                });
            }

            if (!this._isReal && Math.random() < 0.25 || fire) {
                delay(function () {
                    _this3._fireProjectile();
                }, this._tweenTime, this);
            }

            return tween;
        }

        /**
         * @private
         */

    }, {
        key: "_initParticles",
        value: function _initParticles() {

            // this._particleHolder
            // console.log("peeking init particles");
            this._particleHolder.scale.set(0.4);
            this._particleHolder.y -= this.view.height * 0.5;
            this.addChild(this._particleHolder, this._view);

            this._emitter = P3.createParticles(this._particleHolder, "part_virus_1", {
                name: "part_virus_2_",
                count: 1
            }, null, true);
            this._emitter.emit = true;

            this._emitter2 = P3.createParticles(this._particleHolder, "part_virus_2", {
                name: "part_virus_",
                count: 3
            }, null, true);
            this._emitter2.emit = true;
        }

        /**
         * @deprecated
         * @public
         */

    }, {
        key: "testPeek",
        value: function testPeek() {
            var _this4 = this;

            // this._peek();
            delay(function () {
                _this4.testPeek();
            }, P3.math.randomInt(8, 12), this);
        }

        /**
         * @private
         */

    }, {
        key: "_playLaserSound",
        value: function _playLaserSound() {
            Common.audio.playSound(["sfx_firelaser1", "sfx_firelaser2", "sfx_firelaser3"]);
        }

        /**
         * @private
         */

    }, {
        key: "_playHitSound",
        value: function _playHitSound() {
            if (!this._isReal) {
                Common.audio.playSound("sfx_enemyhit");
            } else {
                Common.audio.playSound("sfx_realwendyhit");
            }
        }

        /**
         * @param element
         * @param cb
         * @private
         */

    }, {
        key: "_shake",
        value: function _shake(element, cb) {
            //changed to use my new shake class
            this._myShake.onShakeEnd = cb;
            this._myShake.trauma = 0.25;
            /*
             const t = 0.05;
             const startX = this.x;
             TweenMax.to(element, t, {
             x: this.x - 15,
             ease: Quad.easeInOut
             });
             TweenMax.to(element, t, {
             repeat: 4,
             x: this.x + 15,
             yoyo: true,
             delay: 0.1,
             ease: Quad.easeInOut
             });
             TweenMax.to(element, t, {
             x: startX,
             delay: t * 4,
             onComplete: cb.bind(this)
             });
             */
        }

        /**
         * @private
         */

    }, {
        key: "_explode",
        value: function _explode() {
            var texName = "betty_bad_part_";
            if (this._isReal) {
                texName = "betty_good_part_";
            }

            var pieces = [];
            for (var i = 1; i <= 9; i++) {
                var piece = P3.createSprite(texName + i, this);
                piece.scale.set(0.65);
                piece.position.set(this.view.x, this.view.y - this.view.height * 0.5);
                piece.dx = P3.randomInt(-400, 400);
                piece.dy = P3.randomInt(-150, 0);
                piece.anchor.set(0.5);
                pieces.push(piece);
            }
            this._explodingPieces = pieces;

            delay(this._cleanupPieces.bind(this), 0.15, this);
        }
    }, {
        key: "_cleanupPieces",
        value: function _cleanupPieces() {
            var _this5 = this;

            var len = this._explodingPieces.length;
            var t = 0.5;

            var _loop = function _loop(i) {
                TweenMax.to(_this5._explodingPieces[i], t, {
                    alpha: 0,
                    ease: Power0.easeNone,
                    onComplete: function onComplete() {
                        _this5.removeChild(_this5._explodingPieces[i]);
                    },
                    delay: 0.3
                });
            };

            for (var i = 0; i < len; i++) {
                _loop(i);
            }
            delay(function () {
                for (var i = 0; i < len; i++) {
                    _this5._explodingPieces[i].destroy();
                }
                _this5._explodingPieces.length = 0;
            }, t + 0.4, this);
        }
    }, {
        key: "_createAnimatedScore",
        value: function _createAnimatedScore() {
            var _this6 = this;

            var view = createText("" + this._scoreManager.getHitValue(), {
                size: 95,
                fill: 0xffffff,
                stroke: "black",
                strokeWidth: 5
            });
            view.x = this.view.x;
            view.y = this.view.y - 175;
            this.addChild(view);
            TweenMax.to(view, 0.25, {
                y: view.y - 200,
                ease: Power2.easeOut,
                onComplete: function onComplete() {
                    TweenMax.to(view, 0.15, {
                        alpha: 0,
                        y: -P3.View.height,
                        ease: Power2.easeIn,
                        delay: 0.2,
                        onComplete: function onComplete() {
                            _this6.removeChild(view);
                            view.destroy();
                        }
                    });
                }
            });
        }

        /**
         * @private
         */

    }, {
        key: "_fireProjectile",
        value: function _fireProjectile() {
            var _this7 = this;

            //   if (this.y > -P3.View.height || this.x < 0 || this.x > P3.View.width || this._sleep) return;//don't fire if betty is close to screen or edges

            var projectile = new _Sprite3D3.default();
            projectile.position.set(this.x + this.view.x, this.y);
            projectile.view = P3.createSpine("projectile_1", "animation");
            projectile.view.autoUpdate = false;
            projectile.addChild(projectile.view);

            projectile.view.y = this._view.y - 75;

            var dist = Common.distance(projectile.x, projectile.y, 0, 0); //distance to zero is just as good really
            var vel = this._projectileSpeed;
            var t = dist / vel;

            var tw1 = TweenMax.to(projectile, t, {
                x: P3.View.width * 0.5 + P3.math.randomInt(-250, 250),
                y: 0,
                ease: Power0.easeNone,
                onComplete: function onComplete() {

                    //--add a decal in this position--//
                    var decal = P3.createSprite("hit_decal", Common.world);
                    decal.anchor.set(0.5);

                    var global = projectile.view.toGlobal(Common.world);
                    decal.x = /*(Common.STAGE_WIDTH - P3.View.width) * 0.5 + */global.x - P3.View.width * 0.5;
                    decal.y = global.y - P3.View.height * 0.5;
                    decal.alpha = 0.75;

                    // TweenMax.to(decal.scale, 1, {x: 2, y: 2, ease: Power0.easeNone});

                    TweenMax.to(decal, 0.5, {
                        alpha: 0,
                        delay: 0.5,
                        onComplete: function onComplete() {
                            decal.destroy();
                        }
                    });

                    TweenMax.killTweensOf(projectile.view);
                    TweenMax.killTweensOf(projectile);
                    _this7._container3D.removeChild(projectile);
                    projectile.destroy();
                    var index = _this7._projectiles.indexOf(projectile);
                    _this7._projectiles.splice(index, 1);
                    _this7._scoreManager.hitPlayer();
                }
            });
            var targ = P3.math.randomInt(-350, -450);

            var tw2 = TweenMax.to(projectile.view, t * 0.5, {
                y: projectile.view.y - 550,
                ease: Power1.easeOut
            });

            var tw3 = TweenMax.to(projectile.view, t * 0.5, {
                y: targ,
                ease: Power1.easeIn,
                delay: t * 0.5
            });

            projectile.tweens = [tw1, tw2, tw3];

            this._container3D.addChild(projectile);
            this._projectiles.push(projectile);

            projectile.interactive = true;
            projectile.mousedown = projectile.touchstart = this._projectileDown.bind(this);

            Common.audio.playSound("sfx_enemyfire");

            this.lastFired = projectile;
        }

        /**
         * @param event
         * @private
         */

    }, {
        key: "_projectileDown",
        value: function _projectileDown(event) {
            var _this8 = this;

            if (!this._scoreManager.gotBullets()) {
                return;
            } else {
                this._scoreManager.useBullet();
            }

            this._playLaserSound();

            var projectile = event.target;
            if (projectile.deflected) return;

            TweenMax.killTweensOf(projectile);
            projectile.deflected = true;

            TweenMax.to(projectile, 0.25, {
                x: P3.View.width * 0.5 + P3.math.randomInt(-P3.View.width, P3.View.width),
                y: -P3.View.height * 8, //double full depth
                ease: Power0.easeNone,
                onComplete: function onComplete() {
                    TweenMax.killTweensOf(projectile.view);
                    TweenMax.killTweensOf(projectile);
                    _this8._container3D.removeChild(projectile);
                    projectile.destroy();
                    var index = _this8._projectiles.indexOf(projectile);
                    _this8._projectiles.splice(index, 1);
                }
            });
            TweenMax.to(projectile.view, 0.25, {
                y: P3.math.randomInt(-500, -800),
                ease: Power0.easeNone
            });

            this._playLaserSound();

            Common.audio.playSound("sfx_deflectshot");

            if (this._onTutProjectileDown) {
                this._onTutProjectileDown();
                this._onTutProjectileDown = null; //cb and remove
            }
        }
    }, {
        key: "sleep",
        get: function get() {
            return this._sleep;
        },
        set: function set(value) {
            this._sleep = value;
        }
    }, {
        key: "currentState",
        set: function set(value) {
            this._currentState = value;
        }
    }, {
        key: "isReal",
        set: function set(value) {
            this._isReal = value;
        }
    }, {
        key: "onTutProjectileDown",
        set: function set(value) {
            this._onTutProjectileDown = value;
        }
    }]);

    return PeekingBetty;
}(_Sprite3D3.default);

exports.default = PeekingBetty;

},{"./Shake":21,"./Sprite3D":24}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Common = require("./Common");

var _Common2 = _interopRequireDefault(_Common);

var _ismobilejs = require("ismobilejs");

var _ismobilejs2 = _interopRequireDefault(_ismobilejs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
reloaderScene
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
reated by Legman on 7/10/2015.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

//import Application from ""

/**
 * @class
 */
var PreloaderScene = function (_P3$Scene) {
    _inherits(PreloaderScene, _P3$Scene);

    function PreloaderScene() {
        _classCallCheck(this, PreloaderScene);

        /**
         * @member {number}
         */
        var _this = _possibleConstructorReturn(this, (PreloaderScene.__proto__ || Object.getPrototypeOf(PreloaderScene)).call(this));

        _this.loaded = 0;

        /**
         * @member {PIXI.Sprite}
         * @private
         */
        _this._bar = null;

        /**
         * @member {PIXI.BitmapText}
         * @private
         */
        _this._text = null;

        /**
         * @member {P3.Button}
         * @private
         */
        _this._playButton = null;

        /**
         * @member {boolean}
         * @private
         */
        _this._finishedLoading = false;
        return _this;
    }

    _createClass(PreloaderScene, [{
        key: "init",
        value: function init() {
            _get(PreloaderScene.prototype.__proto__ || Object.getPrototypeOf(PreloaderScene.prototype), "init", this).call(this);

            var assets = _Common2.default.assets;

            var g = new PIXI.Graphics();
            g.clear();
            g.beginFill(0x0);
            g.drawRect(0, 0, _Common2.default.STAGE_WIDTH, _Common2.default.STAGE_HEIGHT);
            g.endFill();
            this.addChild(g);

            var bg = new PIXI.Sprite(assets.texture("cn_preloader"));
            bg.x = _Common2.default.STAGE_WIDTH * 0.5 - 10;
            bg.y = _Common2.default.STAGE_HEIGHT * 0.5 - 55;
            bg.anchor = new PIXI.Point(0.5, 0.5);
            this.addChild(bg);

            var holder = new PIXI.Container();
            holder.x = _Common2.default.STAGE_WIDTH * 0.5;
            holder.y = _Common2.default.STAGE_HEIGHT * 0.5 + 46;
            this.addChild(holder);

            this._bar = new PIXI.Container();
            this._bar.y = 90;
            this._bar.scale = new PIXI.Point(0.9, 0.9);
            this._bar.anchor = new PIXI.Point(0.5, 0.5);
            holder.addChild(this._bar);

            this._bar.fill = new PIXI.Sprite(assets.texture("preloader_fill"));
            this._bar.fill.anchor = new PIXI.Point(0.5, 0.5);
            this._bar.addChild(this._bar.fill);

            this._bar.fill.mask = new PIXI.Graphics();
            this._bar.fill.mask.x = -this._bar.fill.texture.width * 0.5;
            this._bar.fill.mask.scale.x = 0;
            this._bar.fill.mask.beginFill(0xFF0000);
            this._bar.fill.mask.drawRect(0, -this._bar.fill.texture.height * 0.5, this._bar.fill.texture.width, this._bar.fill.texture.height);
            this._bar.fill.addChild(this._bar.fill.mask);

            this._bar.frame = new PIXI.Sprite(assets.texture("preloader_overlay"));
            this._bar.frame.x = -260;
            this._bar.frame.anchor = new PIXI.Point(0.5, 0.5);
            this._bar.addChild(this._bar.frame);

            this._createPlayButton();

            Howler.ctx && Howler.ctx.resume && Howler.ctx.resume();

            var config = { fontFamily: "Fred Fredburger Headline Black", fontSize: "1px" };
            var txt = new PIXI.Text("adasd", config);
            this.addChild(txt);
            txt.visible = false;

            config = { fontFamily: "Fred Fredburger Regular", fontSize: "1px" };
            txt = new PIXI.Text("asdas", config);
            this.addChild(txt);
            txt.visible = false;

            config = { fontFamily: "Digital-7", fontSize: "1px" };
            txt = new PIXI.Text("asdasd", config);
            this.addChild(txt);
            txt.visible = false;

            config = { fontFamily: "Munro", fontSize: "1px" };
            txt = new PIXI.Text("adasd", config);
            this.addChild(txt);
            txt.visible = false;

            config = { fontFamily: "Ed Gothic", fontSize: "1px" };
            txt = new PIXI.Text("adad", config);
            this.addChild(txt);
            txt.visible = false;
        }
    }, {
        key: "resize",
        value: function resize() {
            this.x = (P3.View.width - _Common2.default.STAGE_WIDTH) * 0.5;
        }
    }, {
        key: "update",
        value: function update() {
            var loaded = Math.min(1, this.loaded);
            this._bar.fill.mask.scale.x += (loaded - this._bar.fill.mask.scale.x) * 0.4;

            if (_ismobilejs2.default.any) {
                if (loaded >= 1 && !this._finishedLoading) {
                    this._finishedLoading = true;

                    var tl = this.addTween(new TimelineMax());
                    tl.append(TweenMax.to(this._bar.scale, 0.2, {
                        x: 0,
                        y: 0,
                        ease: Power1.easeInOut,
                        onComplete: function onComplete() {
                            this._bar.visible = false;
                        },
                        onCompleteScope: this
                    }));

                    this._playButton.scale.set(0);
                    tl.append(TweenMax.to(this._playButton.scale, 0.34, {
                        x: 1,
                        y: 1,
                        ease: Back.easeOut,
                        easeParams: [2],
                        onStart: function onStart() {
                            this._playButton.visible = true;
                        },
                        onStartScope: this
                    }));
                }
            }
        }

        /**
         * @private
         */

    }, {
        key: "_createPlayButton",
        value: function _createPlayButton() {
            var _this2 = this;

            this._playButton = P3.simpleButton("big", "play", function () {
                _this2._onPlayButtonClick();
            }, this);
            this._playButton.x = _Common2.default.STAGE_WIDTH * 0.5;
            this._playButton.y = 580;

            this.addChild(this._playButton);
            this._playButton.visible = false;

            /*
             this._playButton = Common.createButton(Common.STAGE_WIDTH * 0.5, 580, "blank", ()=> {
             this._onPlayButtonClick();
             }, this, this, "PLAY", null);
             */
        }

        /**
         * @private
         */

    }, {
        key: "_onPlayButtonClick",
        value: function _onPlayButtonClick() {
            Howler.ctx && Howler.ctx.resume && Howler.ctx.resume();

            this._playButton.interactive = false;

            this.signals.next.dispatch(this);
        }
    }]);

    return PreloaderScene;
}(P3.Scene);

exports.default = PreloaderScene;

},{"./Common":6,"ismobilejs":1}],15:[function(require,module,exports){
/**
 * Created by noOne on 04/12/2017.
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Sprite3D2 = require("./Sprite3D");

var _Sprite3D3 = _interopRequireDefault(_Sprite3D2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class
 */
var Present = function (_Sprite3D) {
    _inherits(Present, _Sprite3D);

    /**
     * @param texName {String} - texture name
     * @param holder {*|PIXI.projection.Container2d} - optional holder to add to
     */
    function Present(texName, holder) {
        _classCallCheck(this, Present);

        /**
         * @type {string}
         * @private
         */
        var _this = _possibleConstructorReturn(this, (Present.__proto__ || Object.getPrototypeOf(Present)).call(this, texName, holder));

        _this._type = "health";

        /**
         * @type {*|PIXI.projection.Container2d}
         * @private
         */
        _this._container3D = holder;

        var partHolder = new PIXI.Container();
        _this.addChild(partHolder);

        _this._emitter = P3.createParticles(partHolder, "part_emitter_heart", {
            name: "part_heart_",
            count: 1
        }, null, false);
        _this._emitter.emit = false;

        // this.addChild(this.view);//to top
        Common.hearts.push(_this);

        _this.dead = false;

        _this.tutCB = null;

        _this.animatedShadow();
        return _this;
    }

    _createClass(Present, [{
        key: "animatedShadow",
        value: function animatedShadow() {
            var shadow = P3.createSprite(Common.shadowTexture, this);
            shadow.y = this._view.y + 150;
            shadow.scale.set(1.25);
            shadow.alpha = 0.15;

            TweenMax.to(shadow, 0.75 * 0.5, { y: 350, ease: Power0.easeNone, yoyo: true, repeat: 1 });
            //  shadow.visible = false;
        }
    }, {
        key: "update",
        value: function update() {
            if (!this.dead) {
                if (this._emitter) this._emitter.update(deltaTime);
            }
        }
    }, {
        key: "reveal",
        value: function reveal() {
            var _this2 = this;

            this._emitter.emit = true;
            //  this.view.tint = 0xffffff;

            this.view.interactive = true;
            this.view.mousedown = this.view.touchstart = this.inputdown.bind(this);

            delay(function () {
                //start blinking

                _this2._view.alpha = 0;

                delay(function () {
                    //start blinking

                    _this2._view.alpha = 1;

                    delay(function () {
                        //start blinking

                        _this2._view.alpha = 0;

                        delay(function () {
                            //start blinking

                            _this2._view.alpha = 1;

                            delay(function () {
                                //start blinking
                                if (!_this2.skipDecay) {
                                    TweenMax.to(_this2._view, 1, {
                                        alpha: 0,
                                        onComplete: function onComplete() {

                                            _this2.destroy();
                                        }
                                    });
                                }
                            }, 0.2, _this2);
                        }, 0.2, _this2);
                    }, 0.2, _this2);
                }, 0.2, _this2);
            }, 10, this);
        }
    }, {
        key: "inputdown",
        value: function inputdown(event) {
            Common.audio.playSound("sfx_heart_pickup_2");

            this.dead = true;
            Common.healthInLevel = false;
            switch (this._type) {
                case "health":
                    if (Common.scoreManager.gotBullets()) {
                        Common.scoreManager.useBullet();
                        Common.scoreManager.refillHealth();
                        this.destroy({ children: true });
                    }
                    break;
                default:
                    console.error("unknown present type");
                    break;
            }

            if (this.tutCB) this.tutCB();
        }
    }]);

    return Present;
}(_Sprite3D3.default);

exports.default = Present;

},{"./Sprite3D":24}],16:[function(require,module,exports){
/**
 * Created by noOne on 21/09/2017.
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
        value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Common = require("./Common");

var _Common2 = _interopRequireDefault(_Common);

var _GlitchFilter = require("./GlitchFilter");

var _GlitchFilter2 = _interopRequireDefault(_GlitchFilter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ResultsScene = function (_P3$Scene) {
        _inherits(ResultsScene, _P3$Scene);

        function ResultsScene() {
                _classCallCheck(this, ResultsScene);

                /**
                 * @type {PIXI.Container}
                 * @private
                 */
                var _this = _possibleConstructorReturn(this, (ResultsScene.__proto__ || Object.getPrototypeOf(ResultsScene)).call(this));

                _this._primaryHolder = new PIXI.Container();

                /**
                 * @type {PIXI.Container}
                 * @private
                 */
                _this._uiLayer = new PIXI.Container();

                /**
                 * @type {Button}
                 * @private
                 */
                _this._soundBtn = null;
                return _this;
        }

        _createClass(ResultsScene, [{
                key: "init",
                value: function init() {
                        var _this2 = this;

                        var bg = P3.createSprite("game_over_bg", this._primaryHolder);
                        bg.anchor.set(0.5, 0);
                        bg.x = _Common2.default.STAGE_WIDTH * 0.5;

                        //--set vis so we can animate in without seeing a frame of it visible--//
                        // this._uiLayer.visible = false;

                        //--add holders--//
                        this.addChild(this._primaryHolder, this._uiLayer);

                        //--add bg--//
                        //  const bg = P3.createSprite("game_bg", this._primaryHolder);
                        // bg.anchor.set(0);

                        // Common.renderer.backgroundColor = 0xc1f1ff;
                        var panel = P3.createSprite("panel", this._uiLayer);
                        panel.anchor.set(0.5, 0);
                        panel.x = _Common2.default.STAGE_WIDTH * 0.5;
                        panel.y = -100;

                        // const gameOverTxtView = P3.simpleText("GAME OVER", "consolas", 80, panel, 0x00ff40);
                        var gameOverTxtView = createText(_Common2.default.copy.gameover[_Common2.default.language], {
                                size: 80,
                                fill: 0x76718a
                        }, "Ed Gothic");
                        gameOverTxtView.x = -46;
                        gameOverTxtView.y = 135;
                        gameOverTxtView.anchor.set(0.5, 0);
                        panel.addChild(gameOverTxtView);

                        var scoreWordTxtView = createText(_Common2.default.copy.score[_Common2.default.language], {
                                size: 55,
                                fill: 0x01ff46,
                                stroke: 0x30b45e
                        }, "Ed Gothic");
                        scoreWordTxtView.x = -46;
                        scoreWordTxtView.y = 230;
                        scoreWordTxtView.anchor.set(0.5, 0);
                        panel.addChild(scoreWordTxtView);

                        //  const rect = P3.createSprite("rectangle_bg", panel);
                        /// rect.x = -70;
                        //  rect.y = panel.height * 0.5 - 150;

                        // const scoreTxtView = P3.simpleText("" + Common.results.score + " " + Common.copy.pts[Common.language], "consolas", 80, rect, 0xffffff);
                        var scoreTxtView = createText("" + _Common2.default.results.score /* + " " + Common.copy.pts[Common.language]*/, {
                                size: 125,
                                fill: 0xffffff,
                                stroke: 0x469f6e
                        }, "Digital-7");
                        scoreTxtView.x = -46;
                        scoreTxtView.y = 345;
                        scoreTxtView.anchor.set(0.5, 0);
                        panel.addChild(scoreTxtView);

                        //  const bestTxtView = P3.simpleText(Common.copy.bestscore[Common.language], "consolas", 50, panel, 0x00ff40)
                        var bestTxtView = createText(_Common2.default.copy.bestscore[_Common2.default.language], {
                                size: 40,
                                fill: 0x01ff46,
                                stroke: 0x30b45e
                        }, "Ed Gothic");
                        bestTxtView.x = -65 + 20;
                        bestTxtView.y = 455;
                        bestTxtView.anchor.set(0.5, 0);
                        panel.addChild(bestTxtView);

                        //  const bScoreTxtView = P3.simpleText("" + Common.highestScore + " " + Common.copy.pts[Common.language], "consolas", 50, panel, 0xffffff);
                        var bScoreTxtView = createText("" + _Common2.default.highestScore + " " + _Common2.default.copy.pts[_Common2.default.language], {
                                size: 75,
                                fill: 0xffffff,
                                stroke: 0x1da14d
                        }, "Digital-7");
                        bScoreTxtView.x = -55 + 20;
                        bScoreTxtView.y = 515;
                        bScoreTxtView.anchor.set(0.5, 0);
                        panel.addChild(bScoreTxtView);

                        /*
                         const homeBtn = Common.createButton(-130, P3.View.height - 170, "med", ()=> {
                         this.signals.home.dispatch(this);
                         }, this, panel, null, "icon_home");
                         */
                        var homeBtn = P3.simpleButton("med", "home", function () {
                                _this2.signals.home.dispatch(_this2);
                        }, this);
                        homeBtn.x = -130;
                        homeBtn.y = P3.View.height - 70;

                        var playBtn = P3.simpleButton("big", "replay", this.end.bind(this), this);
                        playBtn.x = 22;
                        playBtn.y = P3.View.height - 70;

                        this._soundBtn = P3.simpleMute();
                        this._soundBtn.y = 100;

                        this._uiLayer.addChild(this._soundBtn);
                        panel.addChild(homeBtn, playBtn);
                        /*
                           const playBtn = Common.createButton(22, P3.View.height - 170, "big", ()=> {
                         this.end();
                         }, this, panel, null, "icon_replay");
                         */
                        /*
                         let str = "icon_sound_on";
                         if (Common.isMute) str = "icon_sound_off";
                         const soundBtn = Common.createButton(P3.View.width * 0.5 - 100, 100, "small", ()=> {
                         console.log("mute click");
                         Common.isMute = !Common.isMute;
                         Common.audio.mute(Common.isMute);
                         Common.saveMute();
                         if (!Common.isMute) soundBtn.icon.texture = Common.assets.texture("icon_sound_on");
                         else soundBtn.icon.texture = Common.assets.texture("icon_sound_off");
                         }, this, this._uiLayer, null, str);
                         this._soundBtn = soundBtn;
                         */

                        //--set glitch filter active world filters--//
                        // this._worldHolder.filters = [this._glitchFilter];
                        // this._worldHolder.filters = [pixelFilter];
                        this._glitchFilter = new _GlitchFilter2.default(10);
                        this._glitchFilter.uAmp = 0.001;
                        this._glitchFilter.uFreq = 0.002;

                        //--lazily used a recursive function to make the glitch effect--//

                        /*
                         var glitcher = ()=> {
                           panel.filters = [this._glitchFilter];
                           delay(()=> {
                           panel.filters = null;
                           delay(()=> {
                         glitcher();
                         }, 2.5, this);
                           }, 0.15, this);
                           };
                           glitcher();*/
                        _Common2.default.audio.stopMusic();
                        _Common2.default.audio.playMusic("music_results_loop_00");

                        this.initCharacters();
                }
        }, {
                key: "initCharacters",
                value: function initCharacters() {

                        var king = P3.createSprite("iceking_endgame", this._uiLayer);
                        king.anchor.set(0.5, 1);
                        king.x = _Common2.default.STAGE_WIDTH * 0.5 - 475;
                        king.y = P3.View.height - 10;

                        this.breathTween(king, 0.1);

                        var gunter = P3.createSprite("penguin_endgame", this._uiLayer);
                        gunter.anchor.set(0.5, 1);
                        gunter.x = _Common2.default.STAGE_WIDTH * 0.5 - 545;
                        gunter.y = P3.View.height;

                        this.breathTween(gunter, 0.2);

                        var princess = P3.createSprite("princess_endgame", this._uiLayer);
                        princess.anchor.set(0.5, 1);
                        princess.x = _Common2.default.STAGE_WIDTH * 0.5 + 385;
                        princess.y = P3.View.height;

                        this.breathTween(princess, 0.3);

                        var marc = P3.createSprite("marceline_endgame", this._uiLayer);
                        marc.anchor.set(0.5, 1);
                        marc.x = _Common2.default.STAGE_WIDTH * 0.5 + 245;
                        marc.y = P3.View.height;

                        this.breathTween(marc, 0.4);
                }
        }, {
                key: "breathTween",
                value: function breathTween(sprite) {
                        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

                        t += Math.random();
                        TweenMax.to(sprite.scale, 1.25, {
                                x: 0.99,
                                y: 1.007,
                                yoyo: true,
                                repeat: -1,
                                ease: Power1.easeIn,
                                yoyoEase: Power1.easeIn,
                                delay: t
                        });
                }

                /**
                 animateIn() {
                    TweenMax.from(this._uiLayer, 0.75, {
                        y: -P3.View.height,
                        ease: Bounce.easeOut
                    });
                    delay(()=> {
                        this._uiLayer.visible = true;
                    }, 0.1, this);
                **/

        }, {
                key: "start",
                value: function start() {
                        this._running = true;
                }
        }, {
                key: "end",
                value: function end() {
                        this._running = false;
                        this.signals.next.dispatch(this);
                        _Common2.default.audio.stopMusic();
                }
        }, {
                key: "update",
                value: function update() {}
        }, {
                key: "destroy",
                value: function destroy() {
                        TweenMax.killAll();

                        _get(ResultsScene.prototype.__proto__ || Object.getPrototypeOf(ResultsScene.prototype), "destroy", this).call(this);

                        _Common2.default.audio.stopMusic();
                }
        }, {
                key: "resize",
                value: function resize() {
                        //  this._uiLayer.x = P3.View.width * 0.5;
                        //  this._soundBtn.x = P3.View.width * 0.5 - 100;
                        this.x = (P3.View.width - _Common2.default.STAGE_WIDTH) * 0.5;
                        this._soundBtn.x = (_Common2.default.STAGE_WIDTH + P3.View.width) * 0.5 - 100;
                }
        }]);

        return ResultsScene;
}(P3.Scene);

exports.default = ResultsScene;

},{"./Common":6,"./GlitchFilter":8}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = SAT;
/**
 * Created by noOne on 28/02/2018.
 */

/**
 * Collision testing with rotation, also returns overlap in an object if a collision occurs, should be able to
 * use it to reverse the vector then move the colliding object along that vector by that distance, and the
 * sprite will be pushed out of whatever it collided with.
 * Original source - https://gist.github.com/louisstow/807250 - added fixes and adapted to PIXI
 * @param poly1
 * @param poly2
 * @returns {*}
 */
function SAT(poly1, poly2) {
    var points1 = convertVertsToVectors(poly1.vertexData),
        points2 = convertVertsToVectors(poly2.vertexData),
        i = 0,
        l = points1.length,
        j,
        k = points2.length,
        normal = { x: 0, y: 0 },
        length,
        min1,
        min2,
        max1,
        max2,
        interval,
        MTV,
        dot,
        nextPoint,
        currentPoint;

    //loop through the edges of Polygon 1
    for (; i < l; i++) {
        nextPoint = points1[i == l - 1 ? 0 : i + 1];
        currentPoint = points1[i];

        //generate the normal for the current edge
        normal.x = -(nextPoint[1] - currentPoint[1]);
        normal.y = nextPoint[0] - currentPoint[0];

        //normalize the vector
        length = Math.sqrt(normal.x * normal.x + normal.y * normal.y);
        normal.x /= length;
        normal.y /= length;

        //default min max
        min1 = min2 = -1;
        max1 = max2 = -1;

        //project all vertices from poly1 onto axis
        for (j = 0; j < l; ++j) {
            dot = points1[j][0] * normal.x + points1[j][1] * normal.y;
            if (dot > max1 || max1 === -1) max1 = dot;
            if (dot < min1 || min1 === -1) min1 = dot;
        }

        //project all vertices from poly2 onto axis
        for (j = 0; j < k; ++j) {
            dot = points2[j][0] * normal.x + points2[j][1] * normal.y;
            if (dot > max2 || max2 === -1) max2 = dot;
            if (dot < min2 || min2 === -1) min2 = dot;
        }

        //calculate the minimum translation vector should be negative
        interval = min1 < min2 ? min2 - max1 : min1 - max2;

        //exit early if positive
        if (interval > 0) {
            return false;
        }
        if (interval > MTV) MTV = interval;
    }

    //loop through the edges of Polygon 1
    for (i = 0; i < k; i++) {
        nextPoint = points2[i == k - 1 ? 0 : i + 1];
        currentPoint = points2[i];

        //generate the normal for the current edge
        normal.x = -(nextPoint[1] - currentPoint[1]);
        normal.y = nextPoint[0] - currentPoint[0];

        //normalize the vector
        length = Math.sqrt(normal.x * normal.x + normal.y * normal.y);
        normal.x /= length;
        normal.y /= length;

        //default min max
        min1 = min2 = -1;
        max1 = max2 = -1;

        //project all vertices from poly1 onto axis
        for (j = 0; j < l; ++j) {
            dot = points1[j][0] * normal.x + points1[j][1] * normal.y;
            if (dot > max1 || max1 === -1) max1 = dot;
            if (dot < min1 || min1 === -1) min1 = dot;
        }

        //project all vertices from poly2 onto axis
        for (j = 0; j < k; ++j) {
            dot = points2[j][0] * normal.x + points2[j][1] * normal.y;
            if (dot > max2 || max2 === -1) max2 = dot;
            if (dot < min2 || min2 === -1) min2 = dot;
        }

        //calculate the minimum translation vector should be negative
        interval = min1 < min2 ? min2 - max1 : min1 - max2;

        //exit early if positive
        if (interval > 0) {
            return false;
        }
        if (interval > MTV) MTV = interval;
    }

    return { overlap: MTV };
}

function convertVertsToVectors(verts) {
    var arr = Common.matrix(4, 2);

    var count = 0;
    for (var i = 0; i < verts.length; i += 2) {
        arr[count][0] = verts[i];
        arr[count][1] = verts[i + 1];
        count++;
    }

    //  console.log(arr);

    return arr;
}

},{}],18:[function(require,module,exports){
/**
 * Created by noOne on 01/12/2017.
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
        value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Betty2 = require("./Betty");

var _Betty3 = _interopRequireDefault(_Betty2);

var _Present = require("./Present");

var _Present2 = _interopRequireDefault(_Present);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Santa = function (_Betty) {
        _inherits(Santa, _Betty);

        /**
         * @param holder {*|PIXI.projection.Container2d} - optional holder to add to
         */
        function Santa(holder) {
                _classCallCheck(this, Santa);

                /**
                 * @type {*|PIXI.projection.Container2d}
                 * @private
                 */
                var _this = _possibleConstructorReturn(this, (Santa.__proto__ || Object.getPrototypeOf(Santa)).call(this, "santa", holder));

                _this._container3D = holder;

                /**
                 * @type {number}
                 * @private
                 */
                _this._dropPresentLength = 3;

                /**
                 * @type {number}
                 * @private
                 */
                _this._dropPresentTime = 0;

                /**
                 * @type {number}
                 * @private
                 */
                _this._numPresents = 1;

                //this.init();
                _this.view.y = -300;
                _this._isReal = true;

                return _this;
        }

        _createClass(Santa, [{
                key: "update",
                value: function update() {

                        if (!this._target || this._sleep || this._pause || !this.view.visible) return;

                        var dist = Common.distance(this.x, this.y, this._target.x, this._target.y);
                        if (dist === 0) dist = 1; //ovoid NaN on divide by zero

                        this._dx = (this._target.x - this.x) / dist; //get each component of our direction vector and normalise with the length
                        this._dy = (this._target.y - this.y) / dist;

                        this._targetVelocity = new PIXI.Point(this._dx * this._moveSpeed, this._dy * this._moveSpeed);

                        var force = 15;

                        if (this._velocity.x < this._targetVelocity.x) {
                                this._velocity.x += force;
                        } else if (this._velocity.x > this._targetVelocity.x) {
                                this._velocity.x -= force;
                        }

                        if (this._velocity.y < this._targetVelocity.y) {
                                this._velocity.y += force;
                        } else if (this._velocity.y > this._targetVelocity.y) {
                                this._velocity.y -= force;
                        }

                        this.x += this._velocity.x * P3.deltaTime; //scale by move speed and multiply by dt before addition
                        this.y += this._velocity.y * P3.deltaTime;

                        if (dist < 10) {
                                this._path.pop();
                                this.setTarget();
                        }

                        //--drop present timer--//
                        this._dropPresentTime += deltaTime;
                        if (this._dropPresentTime > this._dropPresentLength) {
                                this.dropPresent();
                        }
                }
        }, {
                key: "dropPresent",
                value: function dropPresent() {
                        var _this2 = this;

                        if (this._numPresents < 1 || Common.healthInLevel) {
                                return;
                        }

                        Common.healthInLevel = true;

                        this._numPresents--;

                        var present = new _Present2.default(null, this._container3D);

                        present.view = P3.createSprite("santa_heart", present);
                        present.x = this.x;
                        present.y = this.y;
                        present.view.y = this.view.y - 150;
                        present.view.anchor.set(0.5, 0);
                        present.view.width = 150;
                        present.view.height = 150;
                        this._sleep = true;

                        TweenMax.to(present.view, 1, {
                                y: -95,
                                ease: Bounce.easeOut,
                                delay: 0.2,
                                onComplete: function onComplete() {
                                        _this2._dropPresentTime = 0;
                                        _this2._sleep = false;

                                        present.addChild(present.view);
                                        present.view.y = -95;
                                        present.reveal();
                                }
                        });
                }
        }, {
                key: "setTarget",
                value: function setTarget() {
                        if (this._path.length > 0) {
                                this._target = this._path[this._path.length - 1];
                        } else {
                                this._pathComplete();
                        }
                }

                /**
                 * @private
                 */

        }, {
                key: "_pathComplete",
                value: function _pathComplete() {

                        this.goToSleep();

                        this._dropPresentTime = 0;
                        this._numPresents = 1;
                        this._dropPresentLength = P3.math.random(2, 3.5);

                        this._target = null;
                        this.view.interactive = true;

                        var index = Common.activePathIds.indexOf(this.pathId);
                        Common.activePathIds.splice(index, 1);

                        this._path.length = 0;
                }
        }]);

        return Santa;
}(_Betty3.default);

exports.default = Santa;

},{"./Betty":3,"./Present":15}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 *  ScanlinesFilter
 *
 *  Created by Legman on 09/11/2016.
 *
 */

var frag = "precision highp float;\n#define GLSLIFY 1\n\nvarying vec2 vFilterCoord;\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nuniform float time;\n\nvoid main() {\n    vec4 color = texture2D(uSampler, vTextureCoord);\n    float a = color.a;\n    color -= abs(sin(vFilterCoord.y * 1000.0 + time * 2.5)) * -0.6;\n    color.a = a;\n    gl_FragColor = color;\n}";

/**
 * @class
 */

var ScanlinesFilter = function (_PIXI$Filter) {
    _inherits(ScanlinesFilter, _PIXI$Filter);

    /**
     * @param {PIXI.Sprite} [sprite]
     * @constructor
     */
    function ScanlinesFilter(sprite) {
        _classCallCheck(this, ScanlinesFilter);

        var maskMatrix = new PIXI.Matrix();

        var _this = _possibleConstructorReturn(this, (ScanlinesFilter.__proto__ || Object.getPrototypeOf(ScanlinesFilter)).call(this, null, frag));

        _this.maskSprite = sprite;
        _this.maskMatrix = maskMatrix;

        _this.uniforms.time = 0;
        _this.uniforms.filterMatrix = maskMatrix;
        return _this;
    }

    _createClass(ScanlinesFilter, [{
        key: "apply",
        value: function apply(filterManager, input, output) {
            this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite);
            filterManager.applyFilter(this, input, output);
        }

        /**
         * @returns {number}
         */

    }, {
        key: "time",
        get: function get() {
            return this.uniforms.time;
        }

        /**
         * @param {number} value
         */
        ,
        set: function set(value) {
            this.uniforms.time = value;
        }
    }]);

    return ScanlinesFilter;
}(PIXI.Filter);

exports.default = ScanlinesFilter;

},{}],20:[function(require,module,exports){
/**
 * Created by noOne on 27/10/2017.
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GlitchFilter = require("./GlitchFilter");

var _GlitchFilter2 = _interopRequireDefault(_GlitchFilter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @class
 */
var ScoreManager = function () {
    /**
     * @param scorePanel {PIXI.Sprite}
     * @param bulletPanel {PIXI.Sprite}
     * @param meter {PIXI.Sprite}
     * @param gameOver {Function}
     * @param cb {Function}
     */
    function ScoreManager(scorePanel, bulletPanel, meter, gameOver, cb) {
        _classCallCheck(this, ScoreManager);

        /**
         * @type {null[]}
         */
        this.healthTweens = [null, null];

        /**
         * @type {function}
         */
        this.cb = cb;

        /**
         * @type {Number}
         * @private
         */
        this._meterStart = meter.x;

        /**
         * @type {PIXI.Sprite}
         * @private
         */
        this._scorePanel = scorePanel;

        /**
         * @type {PIXI.Text}
         * @private
         */
        this._scoreView = scorePanel.scoreView;

        /**
         * @type {PIXI.Text}
         * @private
         */
        this._multiView = scorePanel.multiView;

        /**
         * @type {number}
         * @private
         */
        this._score = 0;

        /**
         * @type {number}
         * @private
         */
        this._multiplier = 1;

        /**
         * @type {PIXI.Sprite}
         * @private
         */
        this._meter = meter;

        /**
         * @type {Function}
         * @private
         */
        this._gameOver = gameOver;

        /**
         * @type {number}
         * @private
         */
        this._highestMulti = -1;

        /**
         * @type {PixelGlitchFilter}
         * @private
         */
        this._glitchFilter = new _GlitchFilter2.default(25);

        /**
         * @type {GlowFilter}
         * @private
         */
        this._glowFilter = new PIXI.filters.GlowFilter(10, 0, 0, 0xfa52a5, 0.1);

        /**
         * @type {number}
         * @private
         */
        this._bulletsMax = 8;

        /**
         * @type {number}
         * @private
         */
        this._bullets = this._bulletsMax;

        /**
         * @type {*|PIXI.Sprite}
         * @private
         */
        this._bulletPanel = bulletPanel;

        /**
         * @type {Array}
         * @private
         */
        this._bulletIndicators = [];

        /**
         * @type {Array}
         * @private
         */
        this._bulletBacks = [];

        /**
         * @type {boolean}
         * @private
         */
        this._lightningFlipFlop = false;

        this._initBulletView();
    }

    /**
     * @private
     */


    _createClass(ScoreManager, [{
        key: "_initBulletView",
        value: function _initBulletView() {
            var _this = this;

            this._bulletPanel.anchor.set(0, 0.5);
            this._bulletPanel.back1.anchor.set(0, 0.5);
            this._bulletPanel.back2.anchor.set(0, 0.5);

            var refillBtn = this._refillBtn = P3.simpleButton("reload", null, function () {
                // pointless btn does nothing just for look
            }, this);
            this._bulletPanel.addChild(refillBtn);
            refillBtn.x = 140;
            refillBtn.y = 215;

            var texture = Common.assets.texture("ammo_loading_on");
            //  let xSpace = 0, ySpace = 0;
            for (var i = 0; i < this._bullets; i++) {

                var bk = P3.createSprite(Common.assets.texture("ammo_loading_off"), this._bulletPanel);
                bk.y = i * 25.5 - 70;
                bk.x = 83;
                this._bulletBacks.push(bk);

                var sp = P3.createSprite(texture, this._bulletPanel);
                sp.y = i * 25.5 - 70;
                sp.x = 83;
                this._bulletIndicators.push(sp);
            }
            this._bulletIndicators.reverse(); //reverse array so bullets refill in opposite order

            this._bulletPanel.interactive = true;
            this._bulletPanel.mousedown = this._bulletPanel.touchstart = this.refillBullets.bind(this);

            this._animatingPanel = true;
            var oldPos = new PIXI.Point(this._bulletPanel.x, this._bulletPanel.y);
            this._bulletPanel.x -= 275;
            this._bulletPanel.back1.x -= 275;
            this._bulletPanel.back2.x -= 275;

            this._bulletPanel.startScale = new PIXI.Point(this._bulletPanel.scale.x, this._bulletPanel.scale.y);

            TweenMax.to(this._bulletPanel, 0.3, {
                x: oldPos.x,
                delay: 1.1,
                ease: Back.easeOut,
                onComplete: function onComplete() {
                    _this._animatingPanel = false;
                }
            });

            TweenMax.to(this._bulletPanel.back1, 0.3, {
                x: oldPos.x,
                delay: 1.2,
                ease: Power1.easeOut,
                onComplete: function onComplete() {
                    _this._animatingPanel = false;
                }
            });

            TweenMax.to(this._bulletPanel.back2, 0.3, {
                x: oldPos.x,
                delay: 1.3,
                ease: Power1.easeOut,
                onComplete: function onComplete() {
                    _this._animatingPanel = false;
                }
            });
        }
    }, {
        key: "update",
        value: function update() {
            this._scoreView.text = "" + this._score;
        }
    }, {
        key: "resize",
        value: function resize() {
            if (this._animatingPanel) return;
            this._bulletPanel.x = (Common.STAGE_WIDTH - P3.View.width) * 0.5 - 35;
            this._bulletPanel.back1.x = this._bulletPanel.back2.x = this._bulletPanel.x;
        }
    }, {
        key: "getHitValue",
        value: function getHitValue() {
            return this._multiplier * 3;
        }

        /**
         * @public
         */

    }, {
        key: "addScore",
        value: function addScore() {
            var _this2 = this;

            var hitValue = this.getHitValue();
            var obj = { value: this._score };
            TweenMax.to(obj, hitValue * 0.05, {
                value: this._score + hitValue, ease: Power0.easeNone, onUpdate: function onUpdate() {
                    _this2._score = Math.floor(obj.value);
                }, onComplete: function onComplete() {
                    _this2._score = _this2._score + hitValue;
                }
            });
        }

        /**
         * @public
         */

    }, {
        key: "addMultiplier",
        value: function addMultiplier() {
            //create a new paper sheet and animate
            var paper = P3.createSprite("multiplier_sheet");
            paper.position = Common.getMultiPanelPos();

            paper.textView = createText("" + this._multiplier, { size: 31, fill: 0x644727 });
            paper.textView.y = 3;
            paper.textView.x = -3;
            paper.textView.anchor.set(0.5, 0.5);

            paper.addChild(paper.textView);
            Common.uiLayer.addChild(paper);

            paper.anchor.set(0.5, 0.5);

            paper.rotation = Math.PI / 4 * (Math.random() * 2 - 1);

            var t = 2;
            TweenMax.to(paper, t, {
                rotation: paper.rotation + Math.PI * 2,
                ease: Power0.easeNone
            });
            TweenMax.to(paper, t * 0.25, {
                x: paper.x + 25,
                yoyo: true,
                repeat: 3,
                ease: Power1.easeInOut,
                yoyoEase: Power1.easeInOut
            });
            TweenMax.to(paper, t, {
                alpha: 0,
                y: paper.y + 175,
                ease: Power0.easeNone,
                onComplete: function onComplete() {
                    paper.destroy();
                }
            });

            TweenMax.to(paper, t * 0.75, {
                alpha: 0,
                ease: Power0.easeNone
            });

            this._multiplier++;
            this._multiView.text = "" + this._multiplier;

            if (this._multiplier > this._highestMulti) this._highestMulti = this._multiplier;

            //animate multiplier panel
            var multiPanel = this._scorePanel.multiPanel;
            multiPanel.scale.y = 0;
            TweenMax.to(multiPanel.scale, 0.1, { y: 1, ease: Power0.easeNone });
        }

        /**
         * @public
         */

    }, {
        key: "resetMultiplier",
        value: function resetMultiplier() {

            this._multiplier = 1;
            this._multiView.text = "" + this._multiplier;

            //animate multiplier panel
            var multiPanel = this._scorePanel.multiPanel;
            multiPanel.filters = [this._glowFilter];
            TweenMax.to(this._glowFilter.uniforms, 0.2, {
                outerStrength: 5,
                yoyo: true,
                repeat: 1,
                onComplete: function onComplete() {
                    multiPanel.filters = null;
                }
            });
        }

        /**
         * @public
         */

    }, {
        key: "hitPlayer",
        value: function hitPlayer() {
            var _this3 = this;

            var xTarg = this._meter.x - Common.barMaxFill / 3;
            var xTarg2 = xTarg + Common.barMaxFill;

            this.healthTweens[0] = TweenMax.to(this._meter, 0.15, { ease: Power0.easeNone, x: xTarg });
            this.healthTweens[1] = TweenMax.to(this._meter.barEnd, 0.15, { ease: Power0.easeNone, x: xTarg2 });

            if (xTarg < -531.25) this._gameOver();

            this._meter.panel.filters = [this._glitchFilter];
            this._scorePanel.filters = [this._glitchFilter];
            this._bulletPanel.filters = [this._glitchFilter];

            delay(function () {
                _this3._meter.panel.filters = null;
                _this3._scorePanel.filters = null;
                _this3._bulletPanel.filters = null;
            }, 0.15, this);

            //Common.erraticTween(Common.world, 0.05, {y: 5, x: 35, yoyo: true, repeat: 3});
            Common.cameraShake.trauma += 0.5;

            Common.audio.playSound("sfx_playerhit");
        }
    }, {
        key: "refillHealth",
        value: function refillHealth() {
            if (this._meter.x < this._meterStart) {

                var xTarg = this._meter.x + Common.barMaxFill / 3;
                var xTarg2 = xTarg + Common.barMaxFill;

                if (xTarg2 > 270) xTarg2 = 270; //some crappy hacks to get the end of the bar fill in the correct place

                TweenMax.to(this._meter, 0.15, { ease: Power0.easeNone, x: xTarg });
                TweenMax.to(this._meter.barEnd, 0.15, { ease: Power0.easeNone, x: xTarg2 });
            }
        }

        /**
         * @public
         */

    }, {
        key: "useBullet",
        value: function useBullet() {
            var _this4 = this;

            if (!this.gotBullets()) return;

            this._bullets--;
            this._bulletIndicators[this._bullets].visible = false;

            if (!this.gotBullets()) {
                Common.audio.playSound("sfx_empty_00");
                this._bulletPanel.reloadText.visible = true;

                this._bulletPanel.reloadText.rotation = -Math.PI * 0.05;
                this._reloadTextTween = TweenMax.to(this._bulletPanel.reloadText, 0.3, {
                    rotation: Math.PI * 0.05,
                    yoyo: true,
                    repeat: -1,
                    ease: Power0.easeNone,
                    onRepeat: function onRepeat() {
                        if (!_this4._lightningFlipFlop) {
                            _this4._bulletPanel.reloadText.lLight.texture = Common.assets.texture("reload_warning_002");
                            _this4._bulletPanel.reloadText.rLight.texture = Common.assets.texture("reload_warning_002");
                        } else {
                            _this4._bulletPanel.reloadText.lLight.texture = Common.assets.texture("reload_warning_001");
                            _this4._bulletPanel.reloadText.rLight.texture = Common.assets.texture("reload_warning_001");
                        }
                        _this4._lightningFlipFlop = !_this4._lightningFlipFlop;
                    }
                });

                var flag = true;
                if (!this._reloadTween) {
                    this._reloadTween = TweenMax.to(this._bulletPanel.scale, 0.3, {
                        x: 1,
                        y: 1,
                        yoyo: true,
                        repeat: -1,
                        onRepeat: function onRepeat() {
                            flag = !flag;
                            if (flag) {
                                for (var i = 0; i < _this4._bulletBacks.length; i++) {
                                    _this4._bulletBacks[i].tint = 0xff0000;
                                }
                            } else {
                                for (var _i = 0; _i < _this4._bulletBacks.length; _i++) {
                                    _this4._bulletBacks[_i].tint = 0xffffff;
                                }
                            }
                        }
                    });
                }
            }
        }

        /**
         * @public
         */

    }, {
        key: "refillBullets",
        value: function refillBullets() {
            for (var i = this._bullets; i < this._bulletsMax; i++) {
                var bi = this._bulletIndicators[i];
                if (!bi) continue; //why?
                if (bi.visible) {
                    console.warn("bullet shouldn't be visible");
                    continue;
                }
                bi.scale.set(0);
                bi.visible = true;
                TweenMax.to(bi.scale, 0.35, { x: 1, y: 1, ease: Back.easeOut, delay: 0.1 * (i - this._bullets) });
            }
            this._bullets = this._bulletsMax;

            if (this._reloadTween) {
                this._reloadTween.kill();
                this._reloadTween = null;
                this._bulletPanel.scale.set(this._bulletPanel.startScale.x, this._bulletPanel.startScale.y);
            }

            Common.audio.playSound("sfx_reload_00");
            this._refillBtn.visible = true;

            this.cb.onReload();

            if (this._onRefillTutComplete) {
                this._onRefillTutComplete();
                this._onRefillTutComplete = null; //callback function and remove (do once)
            }

            for (var _i2 = 0; _i2 < this._bulletBacks.length; _i2++) {
                this._bulletBacks[_i2].tint = 0xffffff;
            }

            this._bulletPanel.reloadText.visible = false;

            if (this._reloadTextTween) this._reloadTextTween.kill();
            this._reloadTextTween = null;
        }

        /**
         * @public
         */

    }, {
        key: "gotBullets",
        value: function gotBullets() {
            if (this._bullets < 1) {
                Common.audio.playSound("sfx_linealert");
                this.cb.onEmpty();
            }
            return this._bullets > 0;
        }
    }, {
        key: "score",
        get: function get() {
            return this._score;
        }
    }, {
        key: "highestMultiplier",
        get: function get() {
            return this._multiplier;
        }
    }, {
        key: "onRefillTutComplete",
        set: function set(value) {
            this._onRefillTutComplete = value;
        }
    }]);

    return ScoreManager;
}();

exports.default = ScoreManager;

},{"./GlitchFilter":8}],21:[function(require,module,exports){
/**
 * Created by noOne on 19/02/2018.
 */
"use strict";

/**
 * @class Class that uses Perlin noise to provide a camera shake effect (will shake any display object, use on world container for camera shake)
 * @author Owain Bell - PlayerThree - 2018
 */

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Shake = function () {
    function Shake() {
        _classCallCheck(this, Shake);

        /**
         * Perlin noise generator
         * @member {SimplexNoise}
         * @private
         */
        this._simplex = new SimplexNoise();

        /**
         * Trauma level, increase to add to trauma
         * @member {number}
         * @private
         */
        this._trauma = 0;

        /**
         * Should shake include rotation?
         * @member{boolean}
         * @private
         */
        this._useRotation = false;

        /**
         * The display object we want to shake
         * @member {null|PIXI.Point|PIXI.DisplayObject}
         * @private
         */
        this._shakeTarget = null;

        /**
         * Position of object before shake, use to reset position each frame and at end of animation.
         * Set when setting the trauma level when the target isn't already shaking
         * @member {null|PIXI.Point}
         * @private
         */
        this._shakeStart = null;

        /**
         * @deprecated
         * @member {number}
         * @private
         */
        this._shakeTime = -1;

        /**
         * How quickly should the trauma fade, higher levels result in quicker fade
         * @member {number}
         * @private
         */
        this._traumaFade = 0.5;

        /**
         * Max X offset for shake.  Increase to turn up shake violence.
         * @member {number}
         * @private
         */
        this._maxOffsetX = 20;

        /**
         * Max Y offset for shake.  Increase to turn up shake violence.
         * @member {number}
         * @private
         */
        this._maxOffsetY = 20;

        /**
         * Max rotational offset for shake.  Increase to turn up shake violence.
         * @member {number}
         * @private
         */
        this._maxRot = Math.PI * 0.02;

        /**
         * Is shaking flag
         * @member {boolean}
         * @private
         */
        this._shaking = false;

        /**
         * Random seed
         * @member {*|number}
         * @private
         */
        this._seed = Math.random();

        /**
         * Step is incremented each frame, for our stepped procedural noise generator
         * @member {number}
         * @private
         */
        this._step = 0;

        /**
         * Rotational centre point
         * @member {PIXI.Point}
         * @private
         */
        this._centre = null;

        /**
         * Optional callback function for when shake ends
         * @member {null|function}
         * @private
         */
        this._onShakeEnd = null;
    }

    _createClass(Shake, [{
        key: "update",
        value: function update(dt) {

            if (this._useRotation && this._centre) {
                this._shakeTarget.pivot.set(this._centre.x + (this._shakeTarget.x - Common.STAGE_WIDTH * 0.5), this._centre.y + (this._shakeTarget.y - Common.STAGE_HEIGHT * 0.5));
            }

            if (!this._shakeTarget || !this._shaking) return;

            this._resetTarget();

            var offsetX = this._trauma * this._maxOffsetX * this._simplex.noise(this._seed, this._step);
            var offsetY = this._trauma * this._maxOffsetY * this._simplex.noise(this._seed + 1, this._step);

            this._shakeTarget.x += offsetX;
            this._shakeTarget.y += offsetY;

            if (this._useRotation) {
                var offsetR = this._trauma * this._maxRot * this._simplex.noise(this._seed + 2, this._step);
                this._shakeTarget.rotation += offsetR;
            }

            this._trauma -= dt * this._traumaFade;
            this._step++;

            if (this._trauma < 0) {
                this._end();
            }
        }
    }, {
        key: "setTarget",
        value: function setTarget(target) {
            target = target || this._shakeTarget;
            this._shakeTarget = target;
            this._shakeStart = new PIXI.Point(target.x, target.y);
            this._shakeStartRot = target.rotation;
            this._step = 0;
        }
    }, {
        key: "setRotCentre",
        value: function setRotCentre(point) {
            this._centre = point;
        }
    }, {
        key: "_end",
        value: function _end() {
            this._resetTarget();
            this._shaking = false;
            if (this._onShakeEnd) this._onShakeEnd(); //cb
        }
    }, {
        key: "_resetTarget",
        value: function _resetTarget() {
            this._shakeTarget.position.set(this._shakeStart.x, this._shakeStart.y);
            this._shakeTarget.rotation = this._shakeStartRot;
        }
    }, {
        key: "trauma",
        get: function get() {
            return this._trauma;
        },
        set: function set(value) {

            //todo - should we make new start when trauma is incremented?
            if (this._shakeTarget && !this._shaking) {
                this._shakeStart = new PIXI.Point(this._shakeTarget.x, this._shakeTarget.y);
            }

            this._shaking = true;
            this._trauma = value;

            //capped at 0-1 range
            if (this._trauma > 1) {
                this._trauma = 1;
            }
        }
    }, {
        key: "useRotation",
        get: function get() {
            return this._useRotation;
        },
        set: function set(value) {
            this._useRotation = value;
        }
    }, {
        key: "maxOffsetX",
        get: function get() {
            return this._maxOffsetX;
        },
        set: function set(value) {
            this._maxOffsetX = value;
        }
    }, {
        key: "maxOffsetY",
        get: function get() {
            return this._maxOffsetY;
        },
        set: function set(value) {
            this._maxOffsetY = value;
        }
    }, {
        key: "maxRot",
        get: function get() {
            return this._maxRot;
        },
        set: function set(value) {
            this._maxRot = value;
        }
    }, {
        key: "traumaFade",
        get: function get() {
            return this._traumaFade;
        },
        set: function set(value) {
            this._traumaFade = value;
        }
    }, {
        key: "onShakeEnd",
        set: function set(value) {
            this._onShakeEnd = value;
        }
    }]);

    return Shake;
}();

//-- converted to javascript from java code found in this paper -- http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf --//
/**
 * @class - Perlin noise generator, generates stepped procedural noise, more ordered and pleasing than pure randomness.
 */


exports.default = Shake;

var SimplexNoise = function () {
    function SimplexNoise() {
        _classCallCheck(this, SimplexNoise);

        this._grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];

        //--changed to fixed numbers with a good distribution rather than randomised values--//
        this._p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];

        // To remove the need for index wrapping, double the permutation table length
        this._perm = new Array(512);

        this.init();
    }

    _createClass(SimplexNoise, [{
        key: "init",
        value: function init() {
            for (var i = 0; i < this._perm.length; i++) {
                this._perm[i] = this._p[i & 255];
            }
        }
    }, {
        key: "noise",
        value: function noise(xIn, yIn) {
            // 2D simplex noise

            var n0 = void 0,
                n1 = void 0,
                n2 = void 0; //noise contributions from three corners

            // Skew the input space to determine which simplex cell we're in
            var f2 = 0.5 * (Math.sqrt(3) - 1);
            var s = (xIn + yIn) * f2;
            var i = Math.floor(xIn + s);
            var j = Math.floor(yIn + s);

            var g2 = (3 - Math.sqrt(3)) / 6;
            var t = (i + j) * g2;
            var X0 = i - t; //Unskew cell origin back to (x, y) space
            var Y0 = j - t; //^
            var x0 = xIn - X0; //distances from cell origin
            var y0 = yIn - Y0; //^

            //Note - for 2d, the simplex shape is a equilateral triangle
            //determine which simplex we are
            var i1 = void 0,
                j1 = void 0; //offsets for 2nd (middle) corner of simplex in (i,j) coords

            if (x0 > y0) {
                // lower triangle, XY order: (0,0)->(1,0)->(1,1)
                i1 = 1;
                j1 = 0;
            } else {
                // upper triangle, YX order: (0,0)->(0,1)->(1,1)
                i1 = 0;
                j1 = 1;
            }

            // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
            // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
            // c = (3-sqrt(3))/6

            var x1 = x0 - i1 + g2; //offsets for middle corner in (x,y) unskewed coords
            var y1 = y0 - j1 + g2;
            var x2 = x0 - 1 + 2 * g2;
            var y2 = y0 - 1 + 2 * g2;

            // work out the hashed gradient indices of the three simplex corners
            var ii = i & 255;
            var jj = j & 255;
            var gi0 = this._perm[ii + this._perm[jj]] % 12;
            var gi1 = this._perm[ii + i1 + this._perm[jj + j1]] % 12;
            var gi2 = this._perm[ii + 1 + this._perm[jj + 1]] % 12;

            //calculate the contribution from the three corners
            var t0 = 0.5 - x0 * x0 - y0 * y0;
            if (t0 < 0) {
                n0 = 0;
            } else {
                t0 *= t0;
                n0 = t0 * t0 * SimplexNoise.dotProduct(this._grad3[gi0][0], this._grad3[gi0][1], x0, y0); // (x,y) of grad3 used for 2D gradient
            }

            var t1 = 0.5 - x1 * x1 - y1 * y1;
            if (t1 < 0) {
                n1 = 0;
            } else {
                t1 *= t1;
                n1 = t1 * t1 * SimplexNoise.dotProduct(this._grad3[gi1][0], this._grad3[gi1][1], x1, y1);
            }

            var t2 = 0.5 - x2 * x2 - y2 * y2;
            if (t2 < 0) {
                n2 = 0;
            } else {
                t2 *= t2;
                n2 = t2 * t2 * SimplexNoise.dotProduct(this._grad3[gi2][0], this._grad3[gi2][1], x2, y2);
            }

            // Add contributions from each corner to get the final noise value.
            // The result is scaled to return values in the interval [-1,1].
            return 70.0 * (n0 + n1 + n2);
        }
    }], [{
        key: "dotProduct",
        value: function dotProduct(x0, y0, x1, y1) {
            return x0 * x1 + y0 * y1;
        }
    }]);

    return SimplexNoise;
}();

},{}],22:[function(require,module,exports){
/**
 * Created by noOne on 03/01/2018.
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Present = require("./Present");

var _Present2 = _interopRequireDefault(_Present);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Simon = function () {
    function Simon(container3D) {
        _classCallCheck(this, Simon);

        this._container3D = container3D;

        /**
         * @type {number}
         * @private
         */
        this._numPresents = 1;

        //  this._view = P3.createSprite("")

        var a = Common.assets;
        var textureArray = [a.texture("simon_1"), a.texture("simon_2"), a.texture("simon_3")];
        this._view = new PIXI.extras.AnimatedSprite(textureArray);
        this._view.animationSpeed = 0.2;
        this._view.loop = false;
        this._view.anchor = new PIXI.Point(0.5, 0.5);
        this._view.visible = false;
        this._view.x = (Common.STAGE_WIDTH + P3.View.width) * 0.5 - 125; //rhs
        this._view.y = P3.View.height * 0.5;
        this._view.rotation = -Math.PI * 0.2;
    }

    _createClass(Simon, [{
        key: "popout",
        value: function popout(getPresCB) {
            var _this = this;

            this._view.gotoAndStop(0);
            var start = new PIXI.Point(this._view.x, this._view.y);

            delay(function () {
                _this._view.visible = true;

                TweenMax.from(_this.view, 0.5, {
                    x: _this._view.x + 300,
                    y: _this._view.y + 300,
                    ease: Power2.easeOut,
                    yoyoEase: Power2.easeIn,
                    onComplete: function onComplete() {
                        _this._view.position = start;
                        _this._view.visible = false;
                    },
                    repeat: 1,
                    repeatDelay: 0.65,
                    yoyo: true
                });

                delay(function () {
                    _this._view.play();
                    delay(function () {
                        var present = _this.dropPresent();
                        if (getPresCB) getPresCB(present);
                    }, 0.05, _this);
                }, 0.5, _this);
            }, 0.5, this);
        }
    }, {
        key: "dropPresent",
        value: function dropPresent() {

            var present = new _Present2.default(null, this._container3D);

            present.visible = false;

            present.view = P3.createSprite("santa_heart", present);
            present.x = P3.View.width;
            present.y = 0;
            present.view.anchor.set(0.5, 0);
            present.view.width = 150;
            present.view.height = 150;

            delay(function () {
                Common.audio.playSound("sfx_heart_throw_00");
                present.visible = true;
            }, 0.2, this);

            var t = 0.75;
            TweenMax.to(present.view, t * 0.5, {
                yoyo: true,
                repeat: 1,
                ease: Power1.easeOut,
                yoyoEase: Power1.easeIn,
                y: -675,
                onComplete: function onComplete() {
                    present.reveal();
                }
            });

            TweenMax.to(present, t, { x: P3.View.width * 0.5, y: -P3.View.height * 1.5, ease: Power0.easeNone });

            return present;
        }
    }, {
        key: "view",
        get: function get() {
            return this._view;
        }
    }]);

    return Simon;
}();

exports.default = Simon;

},{"./Present":15}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
        value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Common = require("./Common");

var _Common2 = _interopRequireDefault(_Common);

var _GlitchFilter = require("./GlitchFilter");

var _GlitchFilter2 = _interopRequireDefault(_GlitchFilter);

var _SAT = require("./SAT");

var _SAT2 = _interopRequireDefault(_SAT);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SplashScene = function (_P3$Scene) {
        _inherits(SplashScene, _P3$Scene);

        function SplashScene() {
                _classCallCheck(this, SplashScene);

                /**
                 * @type {PIXI.Container}
                 * @private
                 */
                var _this = _possibleConstructorReturn(this, (SplashScene.__proto__ || Object.getPrototypeOf(SplashScene)).call(this));

                _this._primaryHolder = new PIXI.Container();

                /**
                 * @type {PIXI.Container}
                 * @private
                 */
                _this._btnHolder = new PIXI.Container();

                /**
                 * @type {P3.Button}
                 * @private
                 */
                _this._playBtn = null;

                /**
                 * @type {*|PIXI.Sprite}
                 * @private
                 */
                _this._bg = P3.createSprite("splash_bg", _this._primaryHolder);

                /**
                 * @type {*|PIXI.Sprite}
                 * @private
                 */
                _this._goggles = null;
                return _this;
        }

        _createClass(SplashScene, [{
                key: "init",
                value: function init() {
                        var _this2 = this;

                        this._bg.anchor.set(0.5, 0);
                        this._bg.x = _Common2.default.STAGE_WIDTH * 0.5;

                        this.addChild(this._primaryHolder, this._btnHolder);

                        this._playBtn = P3.simpleButton("big", "play", function () {
                                _this2.end();
                        }, this);

                        this._playBtn.x = _Common2.default.STAGE_WIDTH * 0.5;
                        this._playBtn.y = P3.View.height * 0.5 + 200;

                        this._muteBtn = P3.simpleMute();
                        this._muteBtn.y = 100;

                        this._btnHolder.addChild(this._playBtn, this._muteBtn);

                        this.trail = P3.createSprite("betty_trail", this._primaryHolder);
                        this.trail.scale.set(0.75);
                        this.trail.alpha = 0;

                        this._spines = [];

                        var betties = [];
                        for (var i = 0; i < 3; i++) {
                                var _b = P3.createSpine("betty", "idle1");
                                _b.anchor = new PIXI.Point(0.5, 0.5);
                                _b.scale.set(0.25 + i * 0.15);
                                _b.backHolder = new PIXI.Container();
                                _b.backHolder.scale.set(0.25 + i * 0.06);

                                _b.emitter = P3.createParticles(_b.backHolder, "part_virus_2", {
                                        name: "part_virus_",
                                        count: 3
                                }, null, true);
                                _b.emitter.emit = true;

                                this._primaryHolder.addChild(_b.backHolder, _b);
                                betties.push(_b);

                                _b.backHolder.visible = false;

                                this._spines.push(_b);

                                if (i !== 1) {
                                        _b.skeleton.setSkinByName("bad");
                                } else {
                                        _b.skeleton.setSkinByName("good");
                                        _b.emitter.emit = false;
                                }
                        }

                        var changeAnim = function changeAnim() {
                                for (var _i = 0; _i < _this2._spines.length; _i++) {
                                        if (Math.random() < 0.5) {
                                                _this2._spines[_i].state.setAnimation(0, "idle1", true);
                                        }
                                }
                                delay(changeAnim, 5);
                        };
                        changeAnim(); //lazy animation changer

                        betties[0].x = 250;
                        betties[0].y = 250;

                        betties[1].x = _Common2.default.STAGE_WIDTH * 0.5 - 140;
                        betties[1].y = P3.View.height * 0.5 + 75;

                        betties[2].x = _Common2.default.STAGE_WIDTH * 0.5 + 375;
                        betties[2].y = P3.View.height * 0.5 - 225;

                        var b = P3.createSprite("betty_back_splash", this._primaryHolder);
                        b.anchor.set(0.5);
                        b.x = _Common2.default.STAGE_WIDTH * 0.5 - 15;
                        b.y = P3.View.height * 0.5 - 35;
                        betties.push(b);

                        this.betties = betties;

                        var logo = P3.createSprite("AT_logo_en", this._primaryHolder);
                        logo.anchor.set(0.5);
                        logo.x = _Common2.default.STAGE_WIDTH * 0.5;
                        logo.y = 85;
                        this.logo = logo;

                        var title = P3.createSprite("game_title_en", this._primaryHolder);
                        title.anchor.set(0.5);
                        title.x = _Common2.default.STAGE_WIDTH * 0.5;
                        title.y = 225;
                        this.title = title;

                        var princess = P3.createSprite("princess", this._primaryHolder);
                        princess.anchor.set(0.5, 1);
                        princess.x = _Common2.default.STAGE_WIDTH * 0.5 + 225;
                        princess.y = P3.View.height;
                        this.princess = princess;

                        var marc = P3.createSprite("marceline", this._primaryHolder);
                        marc.anchor.set(0.5, 1);
                        marc.x = _Common2.default.STAGE_WIDTH * 0.5 + 475;
                        marc.y = P3.View.height;
                        this.marc = marc;

                        this.start();

                        _Common2.default.renderer.backgroundColor = 0x0;
                }
        }, {
                key: "start",
                value: function start() {
                        _Common2.default.audio.stopMusic();
                        _Common2.default.audio.playMusic("music_menu_loop_00");
                }
        }, {
                key: "appear",
                value: function appear() {
                        var _this3 = this;

                        _Common2.default.buttonsAppear([this._muteBtn, this._playBtn]);

                        var t = 0.5;
                        var title = this.title;

                        var path = [{ x: title.width * 0.5, y: title.y - 320 }, //start of curve
                        { x: title.width * 0.5 + 125, y: title.y + 135 }, { x: title.x, y: title.y }];

                        var delay = 0.75;

                        var logo = this.logo;
                        TweenMax.from(title, t, { y: -250 });
                        TweenMax.from(logo, t, { y: -250 });

                        var marc = this.marc;
                        marc.alpha = 0;
                        TweenMax.to(marc, t, { alpha: 1, ease: Power0.easeNone, delay: delay + t + delay * 0.5 });
                        TweenMax.to(marc.scale, 2, { x: 1.01, y: 0.99, ease: Power1.easeInOut, yoyo: true, repeat: -1 });

                        var bArr = this.betties;
                        for (var i = 0; i < bArr.length; i++) {
                                if (i === 1) continue;
                                var b = bArr[i];
                                b.alpha = 0;

                                var sR = -Math.PI * 0.025;
                                var eR = Math.PI * 0.05;

                                if (Math.random() < 0.5) sR = -sR;
                                if (Math.random() < 0.5) eR = -eR;

                                b.rotation = sR;

                                TweenMax.to(b, t, { alpha: 1, ease: Power0.easeNone, delay: i * 0.1 });
                                TweenMax.to(b, 10 + 10 * Math.random(), {
                                        x: b.x + 25,
                                        y: b.y + 25,
                                        ease: Power1.easeInOut,
                                        delay: i * 0.1 + Math.random(),
                                        yoyo: true,
                                        repeat: -1,
                                        rotation: eR
                                });
                        }

                        var p = this.princess;
                        p.alpha = 0;
                        TweenMax.to(p, t, { alpha: 1, ease: Power0.easeNone, delay: delay + t + delay * 0.75 });
                        TweenMax.to(p.scale, 2, { x: 1.01, y: 0.99, ease: Power1.easeInOut, yoyo: true, repeat: -1, delay: 0.1 });

                        var mainBetty = bArr[1];
                        // mainBetty.position = path[0];
                        mainBetty.backHolder.visible = false;
                        for (var _i2 = 0; _i2 < this.betties.length; _i2++) {
                                if (!this.betties[_i2].backHolder) continue;
                                this.betties[_i2].backHolder.visible = true;
                                this.betties[_i2].backHolder.alpha = 0;
                                TweenMax.to(this.betties[_i2].backHolder, 2, { alpha: 1, ease: Power0.easeNone });
                        }

                        var mainBettyTime = 1;

                        //define path
                        var path2 = [{ x: -_Common2.default.STAGE_WIDTH * 0.5 + 150, y: -150 }, { x: mainBetty.x - 100, y: mainBetty.y - 35 }, { x: mainBetty.x - 25, y: mainBetty.y - 125 }, { x: mainBetty.x, y: mainBetty.y }];
                        mainBetty.x = path2[0].x;
                        mainBetty.y = path2[0].y;

                        //tween along path
                        TweenMax.to(mainBetty, mainBettyTime, {
                                bezier: path2, ease: Power4.easeOut, delay: 0.5,
                                onComplete: function onComplete() {
                                        mainBetty.backHolder.visible = true;
                                }
                        });

                        var startScale = { x: mainBetty.scale.x, y: mainBetty.scale.y };
                        mainBetty.scale.set(0);
                        TweenMax.to(mainBetty.scale, mainBettyTime, {
                                x: startScale.x,
                                y: startScale.y,
                                ease: Power4.easeOut,
                                delay: 0.5,
                                onComplete: function onComplete() {
                                        var trail = _this3.trail;
                                        // trail.scale.y = -trail.scale.y;
                                        trail.x = mainBetty.x - 150;
                                        trail.y = mainBetty.y - 200;

                                        TweenMax.to(trail, 2, { alpha: 0.35, ease: Power0.easeNone });

                                        var b = mainBetty;

                                        var sR = -Math.PI * 0.025;
                                        var eR = Math.PI * 0.05;

                                        if (Math.random() < 0.5) sR = -sR;
                                        if (Math.random() < 0.5) eR = -eR;

                                        TweenMax.to(b, t, { alpha: 1, ease: Power0.easeNone, delay: 0.1 });
                                        TweenMax.to(b, 10 + 10 * Math.random(), {
                                                x: b.x + 25,
                                                y: b.y + 25,
                                                ease: Power1.easeInOut,
                                                delay: 0.1 + Math.random(),
                                                yoyo: true,
                                                repeat: -1,
                                                rotation: eR
                                        });
                                }
                        });
                }
        }, {
                key: "end",
                value: function end() {
                        this._running = false;
                        _Common2.default.audio.stopMusic();
                        this.signals.next.dispatch(this);
                }
        }, {
                key: "update",
                value: function update() {
                        for (var i = 0; i < this._spines.length; i++) {
                                this._spines[i].update(deltaTime);
                        }

                        for (var _i3 = 0; _i3 < this.betties.length; _i3++) {
                                var b = this.betties[_i3];
                                if (b.emitter) {
                                        //if betty has emitter update and set pos
                                        b.emitter.update(deltaTime * 0.5);
                                        b.backHolder.position.set(b.x, b.y);
                                }
                        }
                }
        }, {
                key: "destroy",
                value: function destroy() {
                        TweenMax.killAll();
                        _get(SplashScene.prototype.__proto__ || Object.getPrototypeOf(SplashScene.prototype), "destroy", this).call(this, { children: true });
                }
        }, {
                key: "resize",
                value: function resize() {
                        this.x = (P3.View.width - _Common2.default.STAGE_WIDTH) * 0.5;
                        this._muteBtn.x = (_Common2.default.STAGE_WIDTH + P3.View.width) * 0.5 - 100;
                }
        }]);

        return SplashScene;
}(P3.Scene);

exports.default = SplashScene;

},{"./Common":6,"./GlitchFilter":8,"./SAT":17}],24:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Created by noOne on 12/10/2017.
 */

/**
 * @class
 */
var Sprite3D = function (_PIXI$projection$Spri) {
    _inherits(Sprite3D, _PIXI$projection$Spri);

    /**
     * @param texName {String} - texture name
     * @param holder {*|PIXI.projection.Container2d} - optional holder to add to
     */
    function Sprite3D(texName, holder) {
        _classCallCheck(this, Sprite3D);

        //init to an empty texture

        var _this = _possibleConstructorReturn(this, (Sprite3D.__proto__ || Object.getPrototypeOf(Sprite3D)).call(this, PIXI.Texture.EMPTY));

        if (holder) holder.addChild(_this); //if passed in holder add this to ti
        if (texName && typeof texName === "string") {
            /**
             * @type {PIXI.Sprite|Sprite2d}
             * @private
             */
            _this._view = new PIXI.Sprite(Common.assets.texture(texName));
            _this._view.anchor.set(0.5, 1.0);
            _this.addChild(_this._view);
        } else {
            //  this._view = new PIXI.projection.Sprite2d(PIXI.Texture.EMPTY);
            _this._view = new PIXI.Sprite(PIXI.Texture.EMPTY);
        }
        _this._setupProjection();
        return _this;
    }

    /**
     * @private
     */


    _createClass(Sprite3D, [{
        key: "_setupProjection",
        value: function _setupProjection() {
            //this.factor = 1;
            this.proj.affine = PIXI.projection.AFFINE.AXIS_X;
            this.anchor.set(0.5, 0.0);
        }
    }, {
        key: "view",
        get: function get() {
            return this._view;
        },
        set: function set(value) {
            this._view = value;
        }
    }]);

    return Sprite3D;
}(PIXI.projection.Sprite2d);

exports.default = Sprite3D;

},{}],25:[function(require,module,exports){
/**
 * Created by noOne on 28/02/2018.
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TutorialPopup = function (_PIXI$Container) {
    _inherits(TutorialPopup, _PIXI$Container);

    function TutorialPopup() {
        _classCallCheck(this, TutorialPopup);

        var _this = _possibleConstructorReturn(this, (TutorialPopup.__proto__ || Object.getPrototypeOf(TutorialPopup)).call(this));

        _this._bg = null;
        _this._textView = null;

        _this.init();
        return _this;
    }

    _createClass(TutorialPopup, [{
        key: "init",
        value: function init() {

            this._bg = P3.createSprite("popup_panel", this, new PIXI.Point(0.5, 0.5));
            //  this._bg.tint = 0xd3d3d3;
            //  this._bg.width = 350;
            // this._bg.height = 175;

            this._textView = createText("", {
                size: 32,
                fill: 0xfefcef,
                align: "center",
                wordWrap: true,
                wordWrapWidth: this._bg.width - 175
            }, "Ed Gothic");
            this._textView.anchor.set(0.5);
            this._textView.y = 25;
            this.addChild(this._textView);

            this.scale.set(0);
        }
    }, {
        key: "show",
        value: function show(copy) {
            this.scale.set(0);
            this._textView.text = copy;
            TweenMax.to(this.scale, 0.3, { x: 1, y: 1, ease: Back.easeOut });
        }
    }, {
        key: "hide",
        value: function hide() {
            this.scale.set(1);
            this._textView.text = "";
            TweenMax.to(this.scale, 0.3, { x: 0, y: 0, ease: Back.easeIn });
        }
    }]);

    return TutorialPopup;
}(PIXI.Container);

exports.default = TutorialPopup;

},{}],26:[function(require,module,exports){
(function (global){
'use strict';

var _Main = require('./Main');

var _Main2 = _interopRequireDefault(_Main);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

global.Main = _Main2.default;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./Main":11}]},{},[26])

//# sourceMappingURL=bundle.min.js.map
